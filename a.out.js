// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
self.addEventListener('message', function(e) {
      var files = e.data;
      console.log(files[0].name);
      if (typeof(Module) === "undefined") Module = {};
      Module["arguments"] = ["/work/"+files[0].name];
      Module["preInit"] = function() {
        FS.mkdir("/work");
      	FS.mount(WORKERFS, {
    	  files: files // Array of File objects or FileList
    	}, '/work');
         //FS.createLazyFile('/', "tmp.zim", "wiktionary_en_all_2017-03.zim", true, false);
      };




// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;


// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)


// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    process['exit'](1);
  });

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WEB) {
    if (document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
  } else { // worker
    scriptDirectory = self.location.href;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}



var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;




function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 167772160;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 62832;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { __GLOBAL__sub_I_libzim_resources_cpp() } }, { func: function() { __GLOBAL__sub_I_htmlparse_cc() } }, { func: function() { ___emscripten_environ_constructor() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });


memoryInitializer = "a.out.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_4() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }


  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      ptr = EXCEPTIONS.deAdjust(ptr);
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function ___cxa_uncaught_exception() {
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }

  
  
   
  
   
  
     

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }

  
    


  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //err(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall180(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // pread64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get(), zero = SYSCALLS.getZero(), offset = SYSCALLS.get64();
      return FS.read(stream, HEAP8,buf, count, offset);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   

  function ___unlock() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  function _emscripten_get_now() { abort() }
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      exit(status);
    }function _exit(status) {
      __exit(status);
    }

  function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }



   

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

   

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function invoke_diii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  var sp = stackSave();
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  var sp = stackSave();
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  var sp = stackSave();
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  var sp = stackSave();
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  var sp = stackSave();
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  var sp = stackSave();
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  var sp = stackSave();
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  var sp = stackSave();
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  var sp = stackSave();
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  var sp = stackSave();
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    stackRestore(sp);
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_find_matching_catch_4": ___cxa_find_matching_catch_4, "___cxa_free_exception": ___cxa_free_exception, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_rethrow": ___cxa_rethrow, "___cxa_throw": ___cxa_throw, "___cxa_uncaught_exception": ___cxa_uncaught_exception, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall180": ___syscall180, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__exit": __exit, "__isLeapYear": __isLeapYear, "_abort": _abort, "_clock_gettime": _clock_gettime, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_getenv": _getenv, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_llvm_trap": _llvm_trap, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_strftime": _strftime, "_strftime_l": _strftime_l, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiid=env.invoke_iiiiid;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiid=env.invoke_iiiiiid;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_iiiiiiiiiii=env.invoke_iiiiiiiiiii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiiiiiiiiiiii=env.invoke_iiiiiiiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var ___cxa_find_matching_catch_4=env.___cxa_find_matching_catch_4;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var ___cxa_throw=env.___cxa_throw;
  var ___cxa_uncaught_exception=env.___cxa_uncaught_exception;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___map_file=env.___map_file;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall180=env.___syscall180;
  var ___syscall195=env.___syscall195;
  var ___syscall197=env.___syscall197;
  var ___syscall221=env.___syscall221;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___syscall91=env.___syscall91;
  var ___unlock=env.___unlock;
  var __addDays=env.__addDays;
  var __arraySum=env.__arraySum;
  var __exit=env.__exit;
  var __isLeapYear=env.__isLeapYear;
  var _abort=env._abort;
  var _clock_gettime=env._clock_gettime;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_get_now_is_monotonic=env._emscripten_get_now_is_monotonic;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _exit=env._exit;
  var _getenv=env._getenv;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _strftime=env._strftime;
  var _strftime_l=env._strftime_l;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _lzma_decode($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $101 = 0, $1017 = 0, $1027 = 0, $1041 = 0, $1052 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $11 = 0, $1105 = 0, $1115 = 0, $1129 = 0, $1140 = 0, $115 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1193 = 0, $12 = 0, $120 = 0, $1203 = 0, $1217 = 0, $1228 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1281 = 0, $1291 = 0, $13 = 0, $1305 = 0, $1316 = 0, $1348 = 0, $1349 = 0, $1350 = 0, $1369 = 0, $1379 = 0, $1393 = 0, $14 = 0, $1404 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1457 = 0, $1467 = 0, $1481 = 0, $1492 = 0, $15 = 0, $1514 = 0, $1531 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $1569 = 0, $1581 = 0, $16 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1623 = 0, $1631 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $1672 = 0, $168 = 0, $169 = 0, $1690 = 0, $17 = 0, $170 = 0, $1700 = 0, $1719 = 0, $1738 = 0, $1739 = 0, $1740 = 0, $1763 = 0, $1781 = 0, $1791 = 0, $18 = 0, $1810 = 0, $1829 = 0, $1830 = 0, $1831 = 0, $1854 = 0, $1872 = 0, $1882 = 0, $19 = 0, $1901 = 0, $1915 = 0, $192 = 0, $1924 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1961 = 0, $1971 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $20 = 0, $2012 = 0, $2030 = 0, $2040 = 0, $2059 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $21 = 0, $2103 = 0, $2121 = 0, $213 = 0, $2131 = 0, $2150 = 0, $2169 = 0, $2170 = 0, $2171 = 0, $219 = 0, $2194 = 0, $22 = 0, $2212 = 0, $2222 = 0, $2241 = 0, $2256 = 0, $2267 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $23 = 0, $2306 = 0, $2320 = 0, $2330 = 0, $2345 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2387 = 0, $24 = 0, $240 = 0, $2401 = 0, $241 = 0, $2411 = 0, $242 = 0, $2426 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2468 = 0, $2482 = 0, $2492 = 0, $25 = 0, $2507 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2549 = 0, $2563 = 0, $2573 = 0, $2588 = 0, $26 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2630 = 0, $2644 = 0, $2654 = 0, $2669 = 0, $2688 = 0, $2689 = 0, $2690 = 0, $27 = 0, $271 = 0, $2711 = 0, $2725 = 0, $2735 = 0, $2750 = 0, $2769 = 0, $2770 = 0, $2771 = 0, $2792 = 0, $28 = 0, $2806 = 0, $281 = 0, $2816 = 0, $2831 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2873 = 0, $2887 = 0, $2897 = 0, $29 = 0, $2912 = 0, $292 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2965 = 0, $2975 = 0, $2985 = 0, $2996 = 0, $30 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3036 = 0, $3046 = 0, $3056 = 0, $3067 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $31 = 0, $3107 = 0, $311 = 0, $3117 = 0, $312 = 0, $3127 = 0, $313 = 0, $3138 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $3178 = 0, $3188 = 0, $3198 = 0, $32 = 0, $3209 = 0, $3228 = 0, $3229 = 0, $3230 = 0, $3249 = 0, $3259 = 0, $3269 = 0, $3280 = 0, $3299 = 0, $33 = 0, $3300 = 0, $3301 = 0, $332 = 0, $3320 = 0, $3330 = 0, $3340 = 0, $3351 = 0, $3363 = 0, $3371 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $34 = 0, $3415 = 0, $342 = 0, $3425 = 0, $3435 = 0, $3446 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3492 = 0, $35 = 0, $3502 = 0, $3512 = 0, $352 = 0, $3523 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3571 = 0, $3581 = 0, $3591 = 0, $36 = 0, $3602 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3650 = 0, $3660 = 0, $3670 = 0, $3681 = 0, $37 = 0, $3708 = 0, $3709 = 0, $3710 = 0, $3729 = 0, $3739 = 0, $3747 = 0, $3758 = 0, $3779 = 0, $3780 = 0, $3781 = 0, $3791 = 0, $38 = 0, $3801 = 0, $3810 = 0, $382 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $383 = 0, $384 = 0, $3847 = 0, $3859 = 0, $3869 = 0, $3882 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3925 = 0, $3937 = 0, $3947 = 0, $3960 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $4003 = 0, $4015 = 0, $4025 = 0, $403 = 0, $4038 = 0, $4059 = 0, $4060 = 0, $4061 = 0, $4081 = 0, $4093 = 0, $4101 = 0, $4114 = 0, $4125 = 0, $413 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4160 = 0, $4173 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4213 = 0, $4225 = 0, $423 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4265 = 0, $4281 = 0, $4297 = 0, $4314 = 0, $4322 = 0, $4335 = 0, $434 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4373 = 0, $4385 = 0, $4396 = 0, $4409 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4447 = 0, $4459 = 0, $4471 = 0, $4484 = 0, $4508 = 0, $4509 = 0, $4510 = 0, $4528 = 0, $453 = 0, $4536 = 0, $454 = 0, $455 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4577 = 0, $4595 = 0, $4605 = 0, $4624 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4668 = 0, $4686 = 0, $4696 = 0, $4715 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $474 = 0, $4759 = 0, $4777 = 0, $4787 = 0, $4806 = 0, $4820 = 0, $4829 = 0, $484 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4866 = 0, $4876 = 0, $4892 = 0, $4893 = 0, $4894 = 0, $49 = 0, $4917 = 0, $4935 = 0, $494 = 0, $4945 = 0, $4964 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $5 = 0, $5008 = 0, $5026 = 0, $5036 = 0, $505 = 0, $5055 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5099 = 0, $5117 = 0, $5127 = 0, $5146 = 0, $5161 = 0, $5172 = 0, $5188 = 0, $5189 = 0, $5190 = 0, $5211 = 0, $5225 = 0, $5235 = 0, $524 = 0, $525 = 0, $5250 = 0, $526 = 0, $5269 = 0, $5270 = 0, $5271 = 0, $5292 = 0, $53 = 0, $5306 = 0, $5316 = 0, $5331 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5373 = 0, $5387 = 0, $5397 = 0, $5412 = 0, $5431 = 0, $5432 = 0, $5433 = 0, $545 = 0, $5454 = 0, $5468 = 0, $5478 = 0, $5493 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5535 = 0, $5549 = 0, $555 = 0, $5559 = 0, $5574 = 0, $5593 = 0, $5594 = 0, $5595 = 0, $5616 = 0, $5630 = 0, $5640 = 0, $565 = 0, $5655 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5697 = 0, $5711 = 0, $5721 = 0, $5736 = 0, $5755 = 0, $5756 = 0, $5757 = 0, $576 = 0, $5778 = 0, $5792 = 0, $5802 = 0, $5817 = 0, $5845 = 0, $5846 = 0, $5847 = 0, $5865 = 0, $5900 = 0, $5914 = 0, $5915 = 0, $5921 = 0, $5923 = 0, $5929 = 0, $595 = 0, $596 = 0, $5965 = 0, $597 = 0, $6 = 0, $616 = 0, $626 = 0, $636 = 0, $647 = 0, $666 = 0, $667 = 0, $668 = 0, $687 = 0, $697 = 0, $7 = 0, $707 = 0, $718 = 0, $737 = 0, $738 = 0, $739 = 0, $758 = 0, $768 = 0, $778 = 0, $789 = 0, $8 = 0, $820 = 0, $821 = 0, $822 = 0, $841 = 0, $851 = 0, $865 = 0, $876 = 0, $9 = 0, $908 = 0, $909 = 0, $910 = 0, $929 = 0, $939 = 0, $953 = 0, $964 = 0, $996 = 0, $997 = 0, $998 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $5 = sp + 156 | 0;
 $6 = sp + 152 | 0;
 $7 = sp + 148 | 0;
 $8 = sp + 144 | 0;
 $9 = sp + 140 | 0;
 $10 = sp + 136 | 0;
 $11 = sp + 132 | 0;
 $12 = sp + 128 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 84 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $22 = sp + 60 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 160 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$12 >> 2] = _rc_read_init((HEAP32[$11 >> 2] | 0) + 28268 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
 if ((HEAP32[$12 >> 2] | 0) != 1) {
  HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
  $5965 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $5965 | 0;
 }
 $49 = HEAP32[$7 >> 2] | 0;
 HEAP32[$13 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
 HEAP32[$13 + 8 >> 2] = HEAP32[$49 + 8 >> 2];
 HEAP32[$13 + 12 >> 2] = HEAP32[$49 + 12 >> 2];
 HEAP32[$13 + 16 >> 2] = HEAP32[$49 + 16 >> 2];
 HEAP32[$13 + 20 >> 2] = HEAP32[$49 + 20 >> 2];
 HEAP32[$14 >> 2] = HEAP32[$13 + 4 >> 2];
 $53 = (HEAP32[$11 >> 2] | 0) + 28268 | 0;
 HEAP32[$15 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$53 + 4 >> 2];
 HEAP32[$15 + 8 >> 2] = HEAP32[$53 + 8 >> 2];
 HEAP32[$16 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$18 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28280 >> 2];
 HEAP32[$19 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28284 >> 2];
 HEAP32[$20 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28288 >> 2];
 HEAP32[$21 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28292 >> 2];
 HEAP32[$22 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28296 >> 2];
 HEAP32[$23 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28300 >> 2];
 HEAP32[$24 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28324 >> 2];
 HEAP32[$25 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28328 >> 2];
 HEAP32[$26 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28332 >> 2];
 HEAP32[$27 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28336 >> 2];
 HEAP32[$28 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28340 >> 2];
 HEAP32[$29 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28308 >> 2];
 HEAP32[$30 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 28304 >> 2];
 HEAP32[$31 >> 2] = HEAP32[$13 + 4 >> 2] & HEAP32[$23 >> 2];
 HEAP32[$32 >> 2] = 0;
 $101 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
 HEAP8[$33 >> 0] = ((HEAP32[$101 >> 2] | 0) != -1 ? 1 : (HEAP32[$101 + 4 >> 2] | 0) != -1) & 1;
 if (HEAP8[$33 >> 0] & 1) {
  $115 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
  $120 = HEAP32[$115 + 4 >> 2] | 0;
  if ($120 >>> 0 < 0 | (($120 | 0) == 0 ? (HEAP32[$115 >> 2] | 0) >>> 0 < ((HEAP32[$13 + 12 >> 2] | 0) - (HEAP32[$13 + 4 >> 2] | 0) | 0) >>> 0 : 0)) HEAP32[$13 + 12 >> 2] = (HEAP32[$13 + 4 >> 2] | 0) + (HEAP32[(HEAP32[$11 >> 2] | 0) + 28312 >> 2] | 0);
 }
 switch (HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] | 0) {
 case 1:
 case 0:
  {
   label = 8;
   break;
  }
 case 2:
  {
   label = 16;
   break;
  }
 case 3:
  {
   label = 23;
   break;
  }
 case 4:
  {
   label = 30;
   break;
  }
 case 5:
  {
   label = 37;
   break;
  }
 case 6:
  {
   label = 44;
   break;
  }
 case 7:
  {
   label = 51;
   break;
  }
 case 8:
  {
   label = 58;
   break;
  }
 case 9:
  {
   label = 65;
   break;
  }
 case 10:
  {
   label = 73;
   break;
  }
 case 11:
  {
   label = 81;
   break;
  }
 case 12:
  {
   label = 89;
   break;
  }
 case 13:
  {
   label = 97;
   break;
  }
 case 14:
  {
   label = 105;
   break;
  }
 case 15:
  {
   label = 113;
   break;
  }
 case 16:
  {
   label = 121;
   break;
  }
 case 17:
  {
   label = 129;
   break;
  }
 case 18:
  {
   label = 137;
   break;
  }
 case 19:
  {
   label = 140;
   break;
  }
 case 20:
  {
   label = 146;
   break;
  }
 case 21:
  {
   label = 152;
   break;
  }
 case 22:
  {
   label = 159;
   break;
  }
 case 23:
  {
   label = 166;
   break;
  }
 case 24:
  {
   label = 175;
   break;
  }
 case 25:
  {
   label = 181;
   break;
  }
 case 26:
  {
   label = 188;
   break;
  }
 case 27:
  {
   label = 195;
   break;
  }
 case 28:
  {
   label = 204;
   break;
  }
 case 29:
  {
   label = 211;
   break;
  }
 case 30:
  {
   label = 218;
   break;
  }
 case 31:
  {
   label = 225;
   break;
  }
 case 32:
  {
   label = 232;
   break;
  }
 case 33:
  {
   label = 239;
   break;
  }
 case 34:
  {
   label = 246;
   break;
  }
 case 35:
  {
   label = 253;
   break;
  }
 case 36:
  {
   label = 262;
   break;
  }
 case 37:
  {
   label = 269;
   break;
  }
 case 38:
  {
   label = 276;
   break;
  }
 case 39:
  {
   label = 283;
   break;
  }
 case 40:
  {
   label = 290;
   break;
  }
 case 41:
  {
   label = 297;
   break;
  }
 case 42:
  {
   label = 308;
   break;
  }
 case 43:
  {
   label = 349;
   break;
  }
 case 44:
  {
   label = 356;
   break;
  }
 case 45:
  {
   label = 363;
   break;
  }
 case 46:
  {
   label = 370;
   break;
  }
 case 47:
  {
   label = 377;
   break;
  }
 case 48:
  {
   label = 387;
   break;
  }
 case 49:
  {
   label = 396;
   break;
  }
 case 51:
  {
   label = 402;
   break;
  }
 case 50:
  {
   label = 408;
   break;
  }
 case 52:
  {
   label = 412;
   break;
  }
 case 53:
  {
   label = 419;
   break;
  }
 case 54:
  {
   label = 427;
   break;
  }
 case 55:
  {
   label = 433;
   break;
  }
 case 56:
  {
   label = 440;
   break;
  }
 case 57:
  {
   label = 447;
   break;
  }
 case 58:
  {
   label = 456;
   break;
  }
 case 59:
  {
   label = 462;
   break;
  }
 case 60:
  {
   label = 469;
   break;
  }
 case 61:
  {
   label = 476;
   break;
  }
 case 62:
  {
   label = 485;
   break;
  }
 case 63:
  {
   label = 492;
   break;
  }
 case 64:
  {
   label = 499;
   break;
  }
 case 65:
  {
   label = 506;
   break;
  }
 case 66:
  {
   label = 513;
   break;
  }
 case 67:
  {
   label = 520;
   break;
  }
 case 68:
  {
   label = 527;
   break;
  }
 case 69:
  {
   label = 534;
   break;
  }
 case 70:
  {
   label = 542;
   break;
  }
 default:
  label = 544;
 }
 L9 : while (1) {
  L10 : switch (label | 0) {
  case 8:
   {
    label = 0;
    if (HEAP8[$33 >> 0] & 1) if ((HEAP32[$13 + 4 >> 2] | 0) == (HEAP32[$13 + 12 >> 2] | 0)) {
     label = 544;
     continue L9;
    }
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 12;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $168 = HEAP32[$15 + 4 >> 2] << 8;
     $169 = HEAP32[$8 >> 2] | 0;
     $170 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $170 + 1;
     HEAP32[$15 + 4 >> 2] = $168 | (HEAPU8[$169 + $170 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 24576 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) | 0;
    $192 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 >= (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $192;
     $1514 = $15 + 4 | 0;
     HEAP32[$1514 >> 2] = (HEAP32[$1514 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1531 = (HEAP32[$11 >> 2] | 0) + 24576 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) | 0;
     HEAP16[$1531 >> 1] = (HEAPU16[$1531 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 24576 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) >> 5);
     label = 140;
     continue L9;
    }
    HEAP32[$15 >> 2] = $192;
    $208 = (HEAP32[$11 >> 2] | 0) + 24576 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) | 0;
    HEAP16[$208 >> 1] = (HEAPU16[$208 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 24576 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
    $213 = HEAP32[$11 >> 2] | 0;
    $219 = (HEAP32[$13 + 4 >> 2] & HEAP32[$29 >> 2]) << HEAP32[$30 >> 2];
    HEAP32[$24 >> 2] = $213 + (($219 + (((_dict_get($13, 0) | 0) & 255) >> 8 - (HEAP32[$30 >> 2] | 0)) | 0) * 1536 | 0);
    HEAP32[$25 >> 2] = 1;
    if ((HEAP32[$18 >> 2] | 0) >>> 0 < 7) {
     label = 16;
     continue L9;
    }
    HEAP32[$28 >> 2] = ((_dict_get($13, HEAP32[$19 >> 2] | 0) | 0) & 255) << 1;
    HEAP32[$27 >> 2] = 256;
    label = 73;
    continue L9;
    break;
   }
  case 16:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 18;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $240 = HEAP32[$15 + 4 >> 2] << 8;
     $241 = HEAP32[$8 >> 2] | 0;
     $242 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $242 + 1;
     HEAP32[$15 + 4 >> 2] = $240 | (HEAPU8[$241 + $242 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $261 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $261;
     $271 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$271 >> 1] = (HEAPU16[$271 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 23;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $261;
     $281 = $15 + 4 | 0;
     HEAP32[$281 >> 2] = (HEAP32[$281 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $292 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$292 >> 1] = (HEAPU16[$292 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 23;
     continue L9;
    }
    break;
   }
  case 23:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 25;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $311 = HEAP32[$15 + 4 >> 2] << 8;
     $312 = HEAP32[$8 >> 2] | 0;
     $313 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $313 + 1;
     HEAP32[$15 + 4 >> 2] = $311 | (HEAPU8[$312 + $313 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $332 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $332;
     $342 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$342 >> 1] = (HEAPU16[$342 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 30;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $332;
     $352 = $15 + 4 | 0;
     HEAP32[$352 >> 2] = (HEAP32[$352 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $363 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$363 >> 1] = (HEAPU16[$363 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 30;
     continue L9;
    }
    break;
   }
  case 30:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 32;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $382 = HEAP32[$15 + 4 >> 2] << 8;
     $383 = HEAP32[$8 >> 2] | 0;
     $384 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $384 + 1;
     HEAP32[$15 + 4 >> 2] = $382 | (HEAPU8[$383 + $384 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $403 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $403;
     $413 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$413 >> 1] = (HEAPU16[$413 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 37;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $403;
     $423 = $15 + 4 | 0;
     HEAP32[$423 >> 2] = (HEAP32[$423 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $434 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$434 >> 1] = (HEAPU16[$434 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 37;
     continue L9;
    }
    break;
   }
  case 37:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 39;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $453 = HEAP32[$15 + 4 >> 2] << 8;
     $454 = HEAP32[$8 >> 2] | 0;
     $455 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $455 + 1;
     HEAP32[$15 + 4 >> 2] = $453 | (HEAPU8[$454 + $455 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $474 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $474;
     $484 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$484 >> 1] = (HEAPU16[$484 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 44;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $474;
     $494 = $15 + 4 | 0;
     HEAP32[$494 >> 2] = (HEAP32[$494 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $505 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$505 >> 1] = (HEAPU16[$505 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 44;
     continue L9;
    }
    break;
   }
  case 44:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 46;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $524 = HEAP32[$15 + 4 >> 2] << 8;
     $525 = HEAP32[$8 >> 2] | 0;
     $526 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $526 + 1;
     HEAP32[$15 + 4 >> 2] = $524 | (HEAPU8[$525 + $526 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $545 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $545;
     $555 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$555 >> 1] = (HEAPU16[$555 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 51;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $545;
     $565 = $15 + 4 | 0;
     HEAP32[$565 >> 2] = (HEAP32[$565 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $576 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$576 >> 1] = (HEAPU16[$576 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 51;
     continue L9;
    }
    break;
   }
  case 51:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 53;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $595 = HEAP32[$15 + 4 >> 2] << 8;
     $596 = HEAP32[$8 >> 2] | 0;
     $597 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $597 + 1;
     HEAP32[$15 + 4 >> 2] = $595 | (HEAPU8[$596 + $597 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $616 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $616;
     $626 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$626 >> 1] = (HEAPU16[$626 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 58;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $616;
     $636 = $15 + 4 | 0;
     HEAP32[$636 >> 2] = (HEAP32[$636 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $647 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$647 >> 1] = (HEAPU16[$647 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 58;
     continue L9;
    }
    break;
   }
  case 58:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 60;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $666 = HEAP32[$15 + 4 >> 2] << 8;
     $667 = HEAP32[$8 >> 2] | 0;
     $668 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $668 + 1;
     HEAP32[$15 + 4 >> 2] = $666 | (HEAPU8[$667 + $668 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $687 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $687;
     $697 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$697 >> 1] = (HEAPU16[$697 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 65;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $687;
     $707 = $15 + 4 | 0;
     HEAP32[$707 >> 2] = (HEAP32[$707 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $718 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$718 >> 1] = (HEAPU16[$718 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 65;
     continue L9;
    }
    break;
   }
  case 65:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 67;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $737 = HEAP32[$15 + 4 >> 2] << 8;
     $738 = HEAP32[$8 >> 2] | 0;
     $739 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $739 + 1;
     HEAP32[$15 + 4 >> 2] = $737 | (HEAPU8[$738 + $739 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $758 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $758;
     $768 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$768 >> 1] = (HEAPU16[$768 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 136;
     break;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $758;
     $778 = $15 + 4 | 0;
     HEAP32[$778 >> 2] = (HEAP32[$778 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $789 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$789 >> 1] = (HEAPU16[$789 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 136;
     break;
    }
    break;
   }
  case 73:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 75;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $820 = HEAP32[$15 + 4 >> 2] << 8;
     $821 = HEAP32[$8 >> 2] | 0;
     $822 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $822 + 1;
     HEAP32[$15 + 4 >> 2] = $820 | (HEAPU8[$821 + $822 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $841 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $841;
     $851 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$851 >> 1] = (HEAPU16[$851 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $841;
     $865 = $15 + 4 | 0;
     HEAP32[$865 >> 2] = (HEAP32[$865 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $876 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$876 >> 1] = (HEAPU16[$876 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 81;
    continue L9;
    break;
   }
  case 81:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 83;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $908 = HEAP32[$15 + 4 >> 2] << 8;
     $909 = HEAP32[$8 >> 2] | 0;
     $910 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $910 + 1;
     HEAP32[$15 + 4 >> 2] = $908 | (HEAPU8[$909 + $910 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $929 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $929;
     $939 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$939 >> 1] = (HEAPU16[$939 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $929;
     $953 = $15 + 4 | 0;
     HEAP32[$953 >> 2] = (HEAP32[$953 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $964 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$964 >> 1] = (HEAPU16[$964 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 89;
    continue L9;
    break;
   }
  case 89:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 91;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $996 = HEAP32[$15 + 4 >> 2] << 8;
     $997 = HEAP32[$8 >> 2] | 0;
     $998 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $998 + 1;
     HEAP32[$15 + 4 >> 2] = $996 | (HEAPU8[$997 + $998 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1017 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1017;
     $1027 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1027 >> 1] = (HEAPU16[$1027 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1017;
     $1041 = $15 + 4 | 0;
     HEAP32[$1041 >> 2] = (HEAP32[$1041 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1052 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1052 >> 1] = (HEAPU16[$1052 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 97;
    continue L9;
    break;
   }
  case 97:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 99;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1084 = HEAP32[$15 + 4 >> 2] << 8;
     $1085 = HEAP32[$8 >> 2] | 0;
     $1086 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1086 + 1;
     HEAP32[$15 + 4 >> 2] = $1084 | (HEAPU8[$1085 + $1086 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1105 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1105;
     $1115 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1115 >> 1] = (HEAPU16[$1115 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1105;
     $1129 = $15 + 4 | 0;
     HEAP32[$1129 >> 2] = (HEAP32[$1129 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1140 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1140 >> 1] = (HEAPU16[$1140 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 105;
    continue L9;
    break;
   }
  case 105:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 107;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1172 = HEAP32[$15 + 4 >> 2] << 8;
     $1173 = HEAP32[$8 >> 2] | 0;
     $1174 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1174 + 1;
     HEAP32[$15 + 4 >> 2] = $1172 | (HEAPU8[$1173 + $1174 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1193 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1193;
     $1203 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1203 >> 1] = (HEAPU16[$1203 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1193;
     $1217 = $15 + 4 | 0;
     HEAP32[$1217 >> 2] = (HEAP32[$1217 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1228 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1228 >> 1] = (HEAPU16[$1228 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 113;
    continue L9;
    break;
   }
  case 113:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 115;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1260 = HEAP32[$15 + 4 >> 2] << 8;
     $1261 = HEAP32[$8 >> 2] | 0;
     $1262 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1262 + 1;
     HEAP32[$15 + 4 >> 2] = $1260 | (HEAPU8[$1261 + $1262 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1281 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1281;
     $1291 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1291 >> 1] = (HEAPU16[$1291 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1281;
     $1305 = $15 + 4 | 0;
     HEAP32[$1305 >> 2] = (HEAP32[$1305 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1316 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1316 >> 1] = (HEAPU16[$1316 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 121;
    continue L9;
    break;
   }
  case 121:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 123;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1348 = HEAP32[$15 + 4 >> 2] << 8;
     $1349 = HEAP32[$8 >> 2] | 0;
     $1350 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1350 + 1;
     HEAP32[$15 + 4 >> 2] = $1348 | (HEAPU8[$1349 + $1350 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1369 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1369;
     $1379 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1379 >> 1] = (HEAPU16[$1379 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1369;
     $1393 = $15 + 4 | 0;
     HEAP32[$1393 >> 2] = (HEAP32[$1393 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1404 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1404 >> 1] = (HEAPU16[$1404 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
    }
    HEAP32[$28 >> 2] = HEAP32[$28 >> 2] << 1;
    label = 129;
    continue L9;
    break;
   }
  case 129:
   {
    label = 0;
    HEAP32[$34 >> 2] = HEAP32[$28 >> 2] & HEAP32[$27 >> 2];
    HEAP32[$35 >> 2] = (HEAP32[$27 >> 2] | 0) + (HEAP32[$34 >> 2] | 0) + (HEAP32[$25 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 131;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1436 = HEAP32[$15 + 4 >> 2] << 8;
     $1437 = HEAP32[$8 >> 2] | 0;
     $1438 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1438 + 1;
     HEAP32[$15 + 4 >> 2] = $1436 | (HEAPU8[$1437 + $1438 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0;
    $1457 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1457;
     $1467 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1467 >> 1] = (HEAPU16[$1467 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & ~HEAP32[$34 >> 2];
     label = 136;
     break;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1457;
     $1481 = $15 + 4 | 0;
     HEAP32[$1481 >> 2] = (HEAP32[$1481 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1492 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) | 0;
     HEAP16[$1492 >> 1] = (HEAPU16[$1492 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$35 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$27 >> 2] = HEAP32[$27 >> 2] & HEAP32[$34 >> 2];
     label = 136;
     break;
    }
    break;
   }
  case 137:
   {
    label = 0;
    if (_dict_put($13, HEAP32[$25 >> 2] & 255) | 0) {
     label = 138;
     break L9;
    } else label = 7;
    break;
   }
  case 140:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 142;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1547 = HEAP32[$15 + 4 >> 2] << 8;
     $1548 = HEAP32[$8 >> 2] | 0;
     $1549 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1549 + 1;
     HEAP32[$15 + 4 >> 2] = $1547 | (HEAPU8[$1548 + $1549 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 24960 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0;
    $1569 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1569;
     $1581 = (HEAP32[$11 >> 2] | 0) + 24960 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$1581 >> 1] = (HEAPU16[$1581 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 24960 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) >>> 0 < 7 ? 7 : 10;
     HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$25 >> 2] = 1;
     label = 146;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1569;
     $4160 = $15 + 4 | 0;
     HEAP32[$4160 >> 2] = (HEAP32[$4160 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4173 = (HEAP32[$11 >> 2] | 0) + 24960 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4173 >> 1] = (HEAPU16[$4173 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 24960 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) >> 5);
     if ((_dict_is_distance_valid($13, 0) | 0) ^ 1) {
      label = 395;
      break L9;
     } else {
      label = 396;
      continue L9;
     }
    }
    break;
   }
  case 146:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 148;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1603 = HEAP32[$15 + 4 >> 2] << 8;
     $1604 = HEAP32[$8 >> 2] | 0;
     $1605 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1605 + 1;
     HEAP32[$15 + 4 >> 2] = $1603 | (HEAPU8[$1604 + $1605 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 >> 1] | 0) | 0;
    $1623 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1623;
     $1631 = (HEAP32[$11 >> 2] | 0) + 26212 | 0;
     HEAP16[$1631 >> 1] = (HEAPU16[$1631 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 >> 1] | 0) | 0) >>> 5);
     label = 152;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1623;
     $1915 = $15 + 4 | 0;
     HEAP32[$1915 >> 2] = (HEAP32[$1915 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1924 = (HEAP32[$11 >> 2] | 0) + 26212 | 0;
     HEAP16[$1924 >> 1] = (HEAPU16[$1924 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 >> 1] | 0) >> 5);
     label = 175;
     continue L9;
    }
    break;
   }
  case 152:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 154;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1647 = HEAP32[$15 + 4 >> 2] << 8;
     $1648 = HEAP32[$8 >> 2] | 0;
     $1649 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1649 + 1;
     HEAP32[$15 + 4 >> 2] = $1647 | (HEAPU8[$1648 + $1649 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $1672 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1672;
     $1690 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1690 >> 1] = (HEAPU16[$1690 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 159;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1672;
     $1700 = $15 + 4 | 0;
     HEAP32[$1700 >> 2] = (HEAP32[$1700 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1719 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1719 >> 1] = (HEAPU16[$1719 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 159;
     continue L9;
    }
    break;
   }
  case 159:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 161;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1738 = HEAP32[$15 + 4 >> 2] << 8;
     $1739 = HEAP32[$8 >> 2] | 0;
     $1740 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1740 + 1;
     HEAP32[$15 + 4 >> 2] = $1738 | (HEAPU8[$1739 + $1740 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $1763 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1763;
     $1781 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1781 >> 1] = (HEAPU16[$1781 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 166;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1763;
     $1791 = $15 + 4 | 0;
     HEAP32[$1791 >> 2] = (HEAP32[$1791 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1810 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1810 >> 1] = (HEAPU16[$1810 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 166;
     continue L9;
    }
    break;
   }
  case 166:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 168;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1829 = HEAP32[$15 + 4 >> 2] << 8;
     $1830 = HEAP32[$8 >> 2] | 0;
     $1831 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1831 + 1;
     HEAP32[$15 + 4 >> 2] = $1829 | (HEAPU8[$1830 + $1831 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $1854 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1854;
     $1872 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1872 >> 1] = (HEAPU16[$1872 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1854;
     $1882 = $15 + 4 | 0;
     HEAP32[$1882 >> 2] = (HEAP32[$1882 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $1901 = (HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$1901 >> 1] = (HEAPU16[$1901 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 8 + 2;
    label = 261;
    break;
   }
  case 175:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 177;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1940 = HEAP32[$15 + 4 >> 2] << 8;
     $1941 = HEAP32[$8 >> 2] | 0;
     $1942 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1942 + 1;
     HEAP32[$15 + 4 >> 2] = $1940 | (HEAPU8[$1941 + $1942 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 2 >> 1] | 0) | 0;
    $1961 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $1961;
     $1971 = (HEAP32[$11 >> 2] | 0) + 26212 + 2 | 0;
     HEAP16[$1971 >> 1] = (HEAPU16[$1971 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 2 >> 1] | 0) | 0) >>> 5);
     label = 181;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $1961;
     $2256 = $15 + 4 | 0;
     HEAP32[$2256 >> 2] = (HEAP32[$2256 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2267 = (HEAP32[$11 >> 2] | 0) + 26212 + 2 | 0;
     HEAP16[$2267 >> 1] = (HEAPU16[$2267 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 2 >> 1] | 0) >> 5);
     label = 204;
     continue L9;
    }
    break;
   }
  case 181:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 183;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $1987 = HEAP32[$15 + 4 >> 2] << 8;
     $1988 = HEAP32[$8 >> 2] | 0;
     $1989 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $1989 + 1;
     HEAP32[$15 + 4 >> 2] = $1987 | (HEAPU8[$1988 + $1989 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2012 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2012;
     $2030 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2030 >> 1] = (HEAPU16[$2030 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 188;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2012;
     $2040 = $15 + 4 | 0;
     HEAP32[$2040 >> 2] = (HEAP32[$2040 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2059 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2059 >> 1] = (HEAPU16[$2059 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 188;
     continue L9;
    }
    break;
   }
  case 188:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 190;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2078 = HEAP32[$15 + 4 >> 2] << 8;
     $2079 = HEAP32[$8 >> 2] | 0;
     $2080 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2080 + 1;
     HEAP32[$15 + 4 >> 2] = $2078 | (HEAPU8[$2079 + $2080 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2103 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2103;
     $2121 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2121 >> 1] = (HEAPU16[$2121 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 195;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2103;
     $2131 = $15 + 4 | 0;
     HEAP32[$2131 >> 2] = (HEAP32[$2131 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2150 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2150 >> 1] = (HEAPU16[$2150 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 195;
     continue L9;
    }
    break;
   }
  case 195:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 197;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2169 = HEAP32[$15 + 4 >> 2] << 8;
     $2170 = HEAP32[$8 >> 2] | 0;
     $2171 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2171 + 1;
     HEAP32[$15 + 4 >> 2] = $2169 | (HEAPU8[$2170 + $2171 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2194 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2194;
     $2212 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2212 >> 1] = (HEAPU16[$2212 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2194;
     $2222 = $15 + 4 | 0;
     HEAP32[$2222 >> 2] = (HEAP32[$2222 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2241 = (HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2241 >> 1] = (HEAPU16[$2241 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 8 + 2 + 8;
    label = 261;
    break;
   }
  case 204:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 206;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2283 = HEAP32[$15 + 4 >> 2] << 8;
     $2284 = HEAP32[$8 >> 2] | 0;
     $2285 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2285 + 1;
     HEAP32[$15 + 4 >> 2] = $2283 | (HEAPU8[$2284 + $2285 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2306 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2306;
     $2320 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2320 >> 1] = (HEAPU16[$2320 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 211;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2306;
     $2330 = $15 + 4 | 0;
     HEAP32[$2330 >> 2] = (HEAP32[$2330 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2345 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2345 >> 1] = (HEAPU16[$2345 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 211;
     continue L9;
    }
    break;
   }
  case 211:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 213;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2364 = HEAP32[$15 + 4 >> 2] << 8;
     $2365 = HEAP32[$8 >> 2] | 0;
     $2366 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2366 + 1;
     HEAP32[$15 + 4 >> 2] = $2364 | (HEAPU8[$2365 + $2366 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2387 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2387;
     $2401 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2401 >> 1] = (HEAPU16[$2401 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 218;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2387;
     $2411 = $15 + 4 | 0;
     HEAP32[$2411 >> 2] = (HEAP32[$2411 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2426 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2426 >> 1] = (HEAPU16[$2426 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 218;
     continue L9;
    }
    break;
   }
  case 218:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 220;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2445 = HEAP32[$15 + 4 >> 2] << 8;
     $2446 = HEAP32[$8 >> 2] | 0;
     $2447 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2447 + 1;
     HEAP32[$15 + 4 >> 2] = $2445 | (HEAPU8[$2446 + $2447 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2468 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2468;
     $2482 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2482 >> 1] = (HEAPU16[$2482 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 225;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2468;
     $2492 = $15 + 4 | 0;
     HEAP32[$2492 >> 2] = (HEAP32[$2492 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2507 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2507 >> 1] = (HEAPU16[$2507 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 225;
     continue L9;
    }
    break;
   }
  case 225:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 227;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2526 = HEAP32[$15 + 4 >> 2] << 8;
     $2527 = HEAP32[$8 >> 2] | 0;
     $2528 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2528 + 1;
     HEAP32[$15 + 4 >> 2] = $2526 | (HEAPU8[$2527 + $2528 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2549 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2549;
     $2563 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2563 >> 1] = (HEAPU16[$2563 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 232;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2549;
     $2573 = $15 + 4 | 0;
     HEAP32[$2573 >> 2] = (HEAP32[$2573 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2588 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2588 >> 1] = (HEAPU16[$2588 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 232;
     continue L9;
    }
    break;
   }
  case 232:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 234;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2607 = HEAP32[$15 + 4 >> 2] << 8;
     $2608 = HEAP32[$8 >> 2] | 0;
     $2609 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2609 + 1;
     HEAP32[$15 + 4 >> 2] = $2607 | (HEAPU8[$2608 + $2609 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2630 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2630;
     $2644 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2644 >> 1] = (HEAPU16[$2644 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 239;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2630;
     $2654 = $15 + 4 | 0;
     HEAP32[$2654 >> 2] = (HEAP32[$2654 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2669 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2669 >> 1] = (HEAPU16[$2669 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 239;
     continue L9;
    }
    break;
   }
  case 239:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 241;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2688 = HEAP32[$15 + 4 >> 2] << 8;
     $2689 = HEAP32[$8 >> 2] | 0;
     $2690 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2690 + 1;
     HEAP32[$15 + 4 >> 2] = $2688 | (HEAPU8[$2689 + $2690 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2711 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2711;
     $2725 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2725 >> 1] = (HEAPU16[$2725 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 246;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2711;
     $2735 = $15 + 4 | 0;
     HEAP32[$2735 >> 2] = (HEAP32[$2735 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2750 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2750 >> 1] = (HEAPU16[$2750 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 246;
     continue L9;
    }
    break;
   }
  case 246:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 248;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2769 = HEAP32[$15 + 4 >> 2] << 8;
     $2770 = HEAP32[$8 >> 2] | 0;
     $2771 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2771 + 1;
     HEAP32[$15 + 4 >> 2] = $2769 | (HEAPU8[$2770 + $2771 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2792 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2792;
     $2806 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2806 >> 1] = (HEAPU16[$2806 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 253;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2792;
     $2816 = $15 + 4 | 0;
     HEAP32[$2816 >> 2] = (HEAP32[$2816 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2831 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2831 >> 1] = (HEAPU16[$2831 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 253;
     continue L9;
    }
    break;
   }
  case 253:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 255;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2850 = HEAP32[$15 + 4 >> 2] << 8;
     $2851 = HEAP32[$8 >> 2] | 0;
     $2852 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2852 + 1;
     HEAP32[$15 + 4 >> 2] = $2850 | (HEAPU8[$2851 + $2852 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2873 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2873;
     $2887 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2887 >> 1] = (HEAPU16[$2887 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2873;
     $2897 = $15 + 4 | 0;
     HEAP32[$2897 >> 2] = (HEAP32[$2897 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2912 = (HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2912 >> 1] = (HEAPU16[$2912 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26212 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 256 + 2 + 8 + 8;
    label = 261;
    break;
   }
  case 262:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 264;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $2944 = HEAP32[$15 + 4 >> 2] << 8;
     $2945 = HEAP32[$8 >> 2] | 0;
     $2946 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $2946 + 1;
     HEAP32[$15 + 4 >> 2] = $2944 | (HEAPU8[$2945 + $2946 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $2965 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $2965;
     $2975 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2975 >> 1] = (HEAPU16[$2975 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 269;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $2965;
     $2985 = $15 + 4 | 0;
     HEAP32[$2985 >> 2] = (HEAP32[$2985 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $2996 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$2996 >> 1] = (HEAPU16[$2996 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 269;
     continue L9;
    }
    break;
   }
  case 269:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 271;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3015 = HEAP32[$15 + 4 >> 2] << 8;
     $3016 = HEAP32[$8 >> 2] | 0;
     $3017 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3017 + 1;
     HEAP32[$15 + 4 >> 2] = $3015 | (HEAPU8[$3016 + $3017 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3036 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3036;
     $3046 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3046 >> 1] = (HEAPU16[$3046 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 276;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3036;
     $3056 = $15 + 4 | 0;
     HEAP32[$3056 >> 2] = (HEAP32[$3056 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3067 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3067 >> 1] = (HEAPU16[$3067 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 276;
     continue L9;
    }
    break;
   }
  case 276:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 278;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3086 = HEAP32[$15 + 4 >> 2] << 8;
     $3087 = HEAP32[$8 >> 2] | 0;
     $3088 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3088 + 1;
     HEAP32[$15 + 4 >> 2] = $3086 | (HEAPU8[$3087 + $3088 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3107 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3107;
     $3117 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3117 >> 1] = (HEAPU16[$3117 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 283;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3107;
     $3127 = $15 + 4 | 0;
     HEAP32[$3127 >> 2] = (HEAP32[$3127 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3138 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3138 >> 1] = (HEAPU16[$3138 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 283;
     continue L9;
    }
    break;
   }
  case 283:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 285;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3157 = HEAP32[$15 + 4 >> 2] << 8;
     $3158 = HEAP32[$8 >> 2] | 0;
     $3159 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3159 + 1;
     HEAP32[$15 + 4 >> 2] = $3157 | (HEAPU8[$3158 + $3159 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3178 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3178;
     $3188 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3188 >> 1] = (HEAPU16[$3188 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 290;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3178;
     $3198 = $15 + 4 | 0;
     HEAP32[$3198 >> 2] = (HEAP32[$3198 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3209 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3209 >> 1] = (HEAPU16[$3209 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 290;
     continue L9;
    }
    break;
   }
  case 290:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 292;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3228 = HEAP32[$15 + 4 >> 2] << 8;
     $3229 = HEAP32[$8 >> 2] | 0;
     $3230 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3230 + 1;
     HEAP32[$15 + 4 >> 2] = $3228 | (HEAPU8[$3229 + $3230 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3249 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3249;
     $3259 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3259 >> 1] = (HEAPU16[$3259 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 297;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3249;
     $3269 = $15 + 4 | 0;
     HEAP32[$3269 >> 2] = (HEAP32[$3269 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3280 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3280 >> 1] = (HEAPU16[$3280 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 297;
     continue L9;
    }
    break;
   }
  case 297:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 299;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3299 = HEAP32[$15 + 4 >> 2] << 8;
     $3300 = HEAP32[$8 >> 2] | 0;
     $3301 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3301 + 1;
     HEAP32[$15 + 4 >> 2] = $3299 | (HEAPU8[$3300 + $3301 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3320 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3320;
     $3330 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3330 >> 1] = (HEAPU16[$3330 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3320;
     $3340 = $15 + 4 | 0;
     HEAP32[$3340 >> 2] = (HEAP32[$3340 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3351 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3351 >> 1] = (HEAPU16[$3351 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) - 64;
    $3363 = HEAP32[$25 >> 2] | 0;
    if ((HEAP32[$25 >> 2] | 0) >>> 0 < 4) {
     HEAP32[$19 >> 2] = $3363;
     label = 392;
     break;
    }
    HEAP32[$26 >> 2] = ($3363 >>> 1) - 1;
    HEAP32[$19 >> 2] = 2 + (HEAP32[$25 >> 2] & 1);
    $3371 = HEAP32[$26 >> 2] | 0;
    if ((HEAP32[$25 >> 2] | 0) >>> 0 < 14) {
     HEAP32[$19 >> 2] = HEAP32[$19 >> 2] << $3371;
     HEAP32[$24 >> 2] = (HEAP32[$11 >> 2] | 0) + 25952 + (HEAP32[$19 >> 2] << 1) + (0 - (HEAP32[$25 >> 2] | 0) << 1) + -2;
     HEAP32[$25 >> 2] = 1;
     HEAP32[$27 >> 2] = 0;
     label = 308;
     continue L9;
    } else {
     HEAP32[$26 >> 2] = $3371 - 4;
     label = 349;
     continue L9;
    }
    break;
   }
  case 308:
   {
    label = 0;
    switch (HEAP32[$26 >> 2] | 0) {
    case 5:
     {
      if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
       if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
        label = 311;
        break L9;
       }
       HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
       $3394 = HEAP32[$15 + 4 >> 2] << 8;
       $3395 = HEAP32[$8 >> 2] | 0;
       $3396 = HEAP32[$16 >> 2] | 0;
       HEAP32[$16 >> 2] = $3396 + 1;
       HEAP32[$15 + 4 >> 2] = $3394 | (HEAPU8[$3395 + $3396 >> 0] | 0);
      }
      HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
      $3415 = HEAP32[$17 >> 2] | 0;
      if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
       HEAP32[$15 >> 2] = $3415;
       $3425 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
       HEAP16[$3425 >> 1] = (HEAPU16[$3425 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
       HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
      } else {
       HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3415;
       $3435 = $15 + 4 | 0;
       HEAP32[$3435 >> 2] = (HEAP32[$3435 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
       $3446 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
       HEAP16[$3446 >> 1] = (HEAPU16[$3446 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
       HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
       HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
      }
      HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
      HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
      label = 317;
      break;
     }
    case 4:
     {
      label = 317;
      break;
     }
    case 3:
     {
      label = 325;
      break;
     }
    case 2:
     {
      label = 333;
      break;
     }
    case 1:
     break;
    default:
     {
      label = 392;
      break L10;
     }
    }
    if ((label | 0) == 317) {
     label = 0;
     if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
      if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
       label = 319;
       break L9;
      }
      HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
      $3471 = HEAP32[$15 + 4 >> 2] << 8;
      $3472 = HEAP32[$8 >> 2] | 0;
      $3473 = HEAP32[$16 >> 2] | 0;
      HEAP32[$16 >> 2] = $3473 + 1;
      HEAP32[$15 + 4 >> 2] = $3471 | (HEAPU8[$3472 + $3473 >> 0] | 0);
     }
     HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
     $3492 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
      HEAP32[$15 >> 2] = $3492;
      $3502 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3502 >> 1] = (HEAPU16[$3502 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
      HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     } else {
      HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3492;
      $3512 = $15 + 4 | 0;
      HEAP32[$3512 >> 2] = (HEAP32[$3512 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
      $3523 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3523 >> 1] = (HEAPU16[$3523 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + (1 << HEAP32[$27 >> 2]);
     }
     HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
     HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
     label = 325;
    }
    if ((label | 0) == 325) {
     label = 0;
     if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
      if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
       label = 327;
       break L9;
      }
      HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
      $3550 = HEAP32[$15 + 4 >> 2] << 8;
      $3551 = HEAP32[$8 >> 2] | 0;
      $3552 = HEAP32[$16 >> 2] | 0;
      HEAP32[$16 >> 2] = $3552 + 1;
      HEAP32[$15 + 4 >> 2] = $3550 | (HEAPU8[$3551 + $3552 >> 0] | 0);
     }
     HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
     $3571 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
      HEAP32[$15 >> 2] = $3571;
      $3581 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3581 >> 1] = (HEAPU16[$3581 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
      HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     } else {
      HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3571;
      $3591 = $15 + 4 | 0;
      HEAP32[$3591 >> 2] = (HEAP32[$3591 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
      $3602 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3602 >> 1] = (HEAPU16[$3602 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + (1 << HEAP32[$27 >> 2]);
     }
     HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
     HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
     label = 333;
    }
    if ((label | 0) == 333) {
     label = 0;
     if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
      if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
       label = 335;
       break L9;
      }
      HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
      $3629 = HEAP32[$15 + 4 >> 2] << 8;
      $3630 = HEAP32[$8 >> 2] | 0;
      $3631 = HEAP32[$16 >> 2] | 0;
      HEAP32[$16 >> 2] = $3631 + 1;
      HEAP32[$15 + 4 >> 2] = $3629 | (HEAPU8[$3630 + $3631 >> 0] | 0);
     }
     HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
     $3650 = HEAP32[$17 >> 2] | 0;
     if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
      HEAP32[$15 >> 2] = $3650;
      $3660 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3660 >> 1] = (HEAPU16[$3660 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
      HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     } else {
      HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3650;
      $3670 = $15 + 4 | 0;
      HEAP32[$3670 >> 2] = (HEAP32[$3670 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
      $3681 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
      HEAP16[$3681 >> 1] = (HEAPU16[$3681 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
      HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + (1 << HEAP32[$27 >> 2]);
     }
     HEAP32[$27 >> 2] = (HEAP32[$27 >> 2] | 0) + 1;
     HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + -1;
    }
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 343;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3708 = HEAP32[$15 + 4 >> 2] << 8;
     $3709 = HEAP32[$8 >> 2] | 0;
     $3710 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3710 + 1;
     HEAP32[$15 + 4 >> 2] = $3708 | (HEAPU8[$3709 + $3710 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3729 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3729;
     $3739 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3739 >> 1] = (HEAPU16[$3739 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     label = 392;
     break;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3729;
     $3747 = $15 + 4 | 0;
     HEAP32[$3747 >> 2] = (HEAP32[$3747 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3758 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3758 >> 1] = (HEAPU16[$3758 >> 1] | 0) - ((HEAPU16[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + (1 << HEAP32[$27 >> 2]);
     label = 392;
     break;
    }
    break;
   }
  case 349:
   {
    label = 0;
    do {
     if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
      if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
       label = 352;
       break L9;
      }
      HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
      $3779 = HEAP32[$15 + 4 >> 2] << 8;
      $3780 = HEAP32[$8 >> 2] | 0;
      $3781 = HEAP32[$16 >> 2] | 0;
      HEAP32[$16 >> 2] = $3781 + 1;
      HEAP32[$15 + 4 >> 2] = $3779 | (HEAPU8[$3780 + $3781 >> 0] | 0);
     }
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) >>> 1;
     $3791 = $15 + 4 | 0;
     HEAP32[$3791 >> 2] = (HEAP32[$3791 >> 2] | 0) - (HEAP32[$15 >> 2] | 0);
     HEAP32[$17 >> 2] = 0 - ((HEAP32[$15 + 4 >> 2] | 0) >>> 31);
     $3801 = $15 + 4 | 0;
     HEAP32[$3801 >> 2] = (HEAP32[$3801 >> 2] | 0) + (HEAP32[$15 >> 2] & HEAP32[$17 >> 2]);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] << 1) + ((HEAP32[$17 >> 2] | 0) + 1);
     $3810 = (HEAP32[$26 >> 2] | 0) + -1 | 0;
     HEAP32[$26 >> 2] = $3810;
    } while ($3810 >>> 0 > 0);
    HEAP32[$19 >> 2] = HEAP32[$19 >> 2] << 4;
    HEAP32[$25 >> 2] = 1;
    label = 356;
    continue L9;
    break;
   }
  case 356:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 358;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3825 = HEAP32[$15 + 4 >> 2] << 8;
     $3826 = HEAP32[$8 >> 2] | 0;
     $3827 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3827 + 1;
     HEAP32[$15 + 4 >> 2] = $3825 | (HEAPU8[$3826 + $3827 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3847 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3847;
     $3859 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3859 >> 1] = (HEAPU16[$3859 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 363;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3847;
     $3869 = $15 + 4 | 0;
     HEAP32[$3869 >> 2] = (HEAP32[$3869 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3882 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3882 >> 1] = (HEAPU16[$3882 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
     label = 363;
     continue L9;
    }
    break;
   }
  case 363:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 365;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3903 = HEAP32[$15 + 4 >> 2] << 8;
     $3904 = HEAP32[$8 >> 2] | 0;
     $3905 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3905 + 1;
     HEAP32[$15 + 4 >> 2] = $3903 | (HEAPU8[$3904 + $3905 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $3925 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $3925;
     $3937 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3937 >> 1] = (HEAPU16[$3937 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 370;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $3925;
     $3947 = $15 + 4 | 0;
     HEAP32[$3947 >> 2] = (HEAP32[$3947 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $3960 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$3960 >> 1] = (HEAPU16[$3960 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 2;
     label = 370;
     continue L9;
    }
    break;
   }
  case 370:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 372;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $3981 = HEAP32[$15 + 4 >> 2] << 8;
     $3982 = HEAP32[$8 >> 2] | 0;
     $3983 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $3983 + 1;
     HEAP32[$15 + 4 >> 2] = $3981 | (HEAPU8[$3982 + $3983 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4003 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4003;
     $4015 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4015 >> 1] = (HEAPU16[$4015 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 377;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4003;
     $4025 = $15 + 4 | 0;
     HEAP32[$4025 >> 2] = (HEAP32[$4025 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4038 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4038 >> 1] = (HEAPU16[$4038 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
     label = 377;
     continue L9;
    }
    break;
   }
  case 377:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 379;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4059 = HEAP32[$15 + 4 >> 2] << 8;
     $4060 = HEAP32[$8 >> 2] | 0;
     $4061 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4061 + 1;
     HEAP32[$15 + 4 >> 2] = $4059 | (HEAPU8[$4060 + $4061 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4081 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4081;
     $4093 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4093 >> 1] = (HEAPU16[$4093 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4081;
     $4101 = $15 + 4 | 0;
     HEAP32[$4101 >> 2] = (HEAP32[$4101 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4114 = (HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4114 >> 1] = (HEAPU16[$4114 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 26180 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 8;
    }
    if ((HEAP32[$19 >> 2] | 0) == -1) {
     $4125 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
     if ((HEAP32[$4125 >> 2] | 0) != -1 ? 1 : (HEAP32[$4125 + 4 >> 2] | 0) != -1) {
      label = 386;
      break L9;
     } else {
      label = 387;
      continue L9;
     }
    } else label = 392;
    break;
   }
  case 387:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     label = 388;
     break L9;
    } else {
     label = 391;
     break L9;
    }
    break;
   }
  case 396:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 398;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4191 = HEAP32[$15 + 4 >> 2] << 8;
     $4192 = HEAP32[$8 >> 2] | 0;
     $4193 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4193 + 1;
     HEAP32[$15 + 4 >> 2] = $4191 | (HEAPU8[$4192 + $4193 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 24984 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0;
    $4213 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4213;
     $4225 = (HEAP32[$11 >> 2] | 0) + 24984 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4225 >> 1] = (HEAPU16[$4225 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 24984 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     label = 402;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4213;
     $4322 = $15 + 4 | 0;
     HEAP32[$4322 >> 2] = (HEAP32[$4322 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4335 = (HEAP32[$11 >> 2] | 0) + 24984 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4335 >> 1] = (HEAPU16[$4335 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 24984 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) >> 5);
     label = 412;
     continue L9;
    }
    break;
   }
  case 402:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 404;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4241 = HEAP32[$15 + 4 >> 2] << 8;
     $4242 = HEAP32[$8 >> 2] | 0;
     $4243 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4243 + 1;
     HEAP32[$15 + 4 >> 2] = $4241 | (HEAPU8[$4242 + $4243 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 25056 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) | 0;
    $4265 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4265;
     $4281 = (HEAP32[$11 >> 2] | 0) + 25056 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) | 0;
     HEAP16[$4281 >> 1] = (HEAPU16[$4281 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 25056 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) >>> 0 < 7 ? 9 : 11;
     label = 408;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4265;
     $4297 = $15 + 4 | 0;
     HEAP32[$4297 >> 2] = (HEAP32[$4297 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4314 = (HEAP32[$11 >> 2] | 0) + 25056 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) | 0;
     HEAP16[$4314 >> 1] = (HEAPU16[$4314 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 25056 + (HEAP32[$18 >> 2] << 5) + (HEAP32[$31 >> 2] << 1) >> 1] | 0) >> 5);
     label = 426;
     break;
    }
    break;
   }
  case 408:
   {
    label = 0;
    if (_dict_put($13, _dict_get($13, HEAP32[$19 >> 2] | 0) | 0) | 0) {
     label = 409;
     break L9;
    } else label = 7;
    break;
   }
  case 412:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 414;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4351 = HEAP32[$15 + 4 >> 2] << 8;
     $4352 = HEAP32[$8 >> 2] | 0;
     $4353 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4353 + 1;
     HEAP32[$15 + 4 >> 2] = $4351 | (HEAPU8[$4352 + $4353 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 25008 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0;
    $4373 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4373;
     $4385 = (HEAP32[$11 >> 2] | 0) + 25008 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4385 >> 1] = (HEAPU16[$4385 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 25008 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$36 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$19 >> 2] = HEAP32[$36 >> 2];
     label = 426;
     break;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4373;
     $4396 = $15 + 4 | 0;
     HEAP32[$4396 >> 2] = (HEAP32[$4396 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4409 = (HEAP32[$11 >> 2] | 0) + 25008 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4409 >> 1] = (HEAPU16[$4409 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 25008 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) >> 5);
     label = 419;
     continue L9;
    }
    break;
   }
  case 419:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 421;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4425 = HEAP32[$15 + 4 >> 2] << 8;
     $4426 = HEAP32[$8 >> 2] | 0;
     $4427 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4427 + 1;
     HEAP32[$15 + 4 >> 2] = $4425 | (HEAPU8[$4426 + $4427 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 25032 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0;
    $4447 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4447;
     $4459 = (HEAP32[$11 >> 2] | 0) + 25032 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4459 >> 1] = (HEAPU16[$4459 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 25032 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$37 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$19 >> 2] = HEAP32[$37 >> 2];
     label = 426;
     break;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4447;
     $4471 = $15 + 4 | 0;
     HEAP32[$4471 >> 2] = (HEAP32[$4471 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4484 = (HEAP32[$11 >> 2] | 0) + 25032 + (HEAP32[$18 >> 2] << 1) | 0;
     HEAP16[$4484 >> 1] = (HEAPU16[$4484 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 25032 + (HEAP32[$18 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$38 >> 2] = HEAP32[$22 >> 2];
     HEAP32[$22 >> 2] = HEAP32[$21 >> 2];
     HEAP32[$21 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$20 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$19 >> 2] = HEAP32[$38 >> 2];
     label = 426;
     break;
    }
    break;
   }
  case 427:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 429;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4508 = HEAP32[$15 + 4 >> 2] << 8;
     $4509 = HEAP32[$8 >> 2] | 0;
     $4510 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4510 + 1;
     HEAP32[$15 + 4 >> 2] = $4508 | (HEAPU8[$4509 + $4510 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 >> 1] | 0) | 0;
    $4528 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4528;
     $4536 = (HEAP32[$11 >> 2] | 0) + 27240 | 0;
     HEAP16[$4536 >> 1] = (HEAPU16[$4536 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 >> 1] | 0) | 0) >>> 5);
     label = 433;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4528;
     $4820 = $15 + 4 | 0;
     HEAP32[$4820 >> 2] = (HEAP32[$4820 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4829 = (HEAP32[$11 >> 2] | 0) + 27240 | 0;
     HEAP16[$4829 >> 1] = (HEAPU16[$4829 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 >> 1] | 0) >> 5);
     label = 456;
     continue L9;
    }
    break;
   }
  case 433:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 435;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4552 = HEAP32[$15 + 4 >> 2] << 8;
     $4553 = HEAP32[$8 >> 2] | 0;
     $4554 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4554 + 1;
     HEAP32[$15 + 4 >> 2] = $4552 | (HEAPU8[$4553 + $4554 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4577 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4577;
     $4595 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4595 >> 1] = (HEAPU16[$4595 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 440;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4577;
     $4605 = $15 + 4 | 0;
     HEAP32[$4605 >> 2] = (HEAP32[$4605 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4624 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4624 >> 1] = (HEAPU16[$4624 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 440;
     continue L9;
    }
    break;
   }
  case 440:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 442;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4643 = HEAP32[$15 + 4 >> 2] << 8;
     $4644 = HEAP32[$8 >> 2] | 0;
     $4645 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4645 + 1;
     HEAP32[$15 + 4 >> 2] = $4643 | (HEAPU8[$4644 + $4645 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4668 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4668;
     $4686 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4686 >> 1] = (HEAPU16[$4686 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 447;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4668;
     $4696 = $15 + 4 | 0;
     HEAP32[$4696 >> 2] = (HEAP32[$4696 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4715 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4715 >> 1] = (HEAPU16[$4715 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 447;
     continue L9;
    }
    break;
   }
  case 447:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 449;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4734 = HEAP32[$15 + 4 >> 2] << 8;
     $4735 = HEAP32[$8 >> 2] | 0;
     $4736 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4736 + 1;
     HEAP32[$15 + 4 >> 2] = $4734 | (HEAPU8[$4735 + $4736 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4759 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4759;
     $4777 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4777 >> 1] = (HEAPU16[$4777 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4759;
     $4787 = $15 + 4 | 0;
     HEAP32[$4787 >> 2] = (HEAP32[$4787 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4806 = (HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4806 >> 1] = (HEAPU16[$4806 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 4 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 8 + 2;
    label = 542;
    continue L9;
    break;
   }
  case 456:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 458;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4845 = HEAP32[$15 + 4 >> 2] << 8;
     $4846 = HEAP32[$8 >> 2] | 0;
     $4847 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4847 + 1;
     HEAP32[$15 + 4 >> 2] = $4845 | (HEAPU8[$4846 + $4847 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 2 >> 1] | 0) | 0;
    $4866 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4866;
     $4876 = (HEAP32[$11 >> 2] | 0) + 27240 + 2 | 0;
     HEAP16[$4876 >> 1] = (HEAPU16[$4876 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 2 >> 1] | 0) | 0) >>> 5);
     label = 462;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4866;
     $5161 = $15 + 4 | 0;
     HEAP32[$5161 >> 2] = (HEAP32[$5161 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5172 = (HEAP32[$11 >> 2] | 0) + 27240 + 2 | 0;
     HEAP16[$5172 >> 1] = (HEAPU16[$5172 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 2 >> 1] | 0) >> 5);
     label = 485;
     continue L9;
    }
    break;
   }
  case 462:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 464;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4892 = HEAP32[$15 + 4 >> 2] << 8;
     $4893 = HEAP32[$8 >> 2] | 0;
     $4894 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4894 + 1;
     HEAP32[$15 + 4 >> 2] = $4892 | (HEAPU8[$4893 + $4894 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $4917 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $4917;
     $4935 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4935 >> 1] = (HEAPU16[$4935 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 469;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $4917;
     $4945 = $15 + 4 | 0;
     HEAP32[$4945 >> 2] = (HEAP32[$4945 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $4964 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$4964 >> 1] = (HEAPU16[$4964 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 469;
     continue L9;
    }
    break;
   }
  case 469:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 471;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $4983 = HEAP32[$15 + 4 >> 2] << 8;
     $4984 = HEAP32[$8 >> 2] | 0;
     $4985 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $4985 + 1;
     HEAP32[$15 + 4 >> 2] = $4983 | (HEAPU8[$4984 + $4985 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5008 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5008;
     $5026 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5026 >> 1] = (HEAPU16[$5026 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 476;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5008;
     $5036 = $15 + 4 | 0;
     HEAP32[$5036 >> 2] = (HEAP32[$5036 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5055 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5055 >> 1] = (HEAPU16[$5055 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 476;
     continue L9;
    }
    break;
   }
  case 476:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 478;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5074 = HEAP32[$15 + 4 >> 2] << 8;
     $5075 = HEAP32[$8 >> 2] | 0;
     $5076 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5076 + 1;
     HEAP32[$15 + 4 >> 2] = $5074 | (HEAPU8[$5075 + $5076 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5099 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5099;
     $5117 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5117 >> 1] = (HEAPU16[$5117 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5099;
     $5127 = $15 + 4 | 0;
     HEAP32[$5127 >> 2] = (HEAP32[$5127 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5146 = (HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5146 >> 1] = (HEAPU16[$5146 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 260 + (HEAP32[$31 >> 2] << 4) + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 8 + 2 + 8;
    label = 542;
    continue L9;
    break;
   }
  case 485:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 487;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5188 = HEAP32[$15 + 4 >> 2] << 8;
     $5189 = HEAP32[$8 >> 2] | 0;
     $5190 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5190 + 1;
     HEAP32[$15 + 4 >> 2] = $5188 | (HEAPU8[$5189 + $5190 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5211 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5211;
     $5225 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5225 >> 1] = (HEAPU16[$5225 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 492;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5211;
     $5235 = $15 + 4 | 0;
     HEAP32[$5235 >> 2] = (HEAP32[$5235 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5250 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5250 >> 1] = (HEAPU16[$5250 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 492;
     continue L9;
    }
    break;
   }
  case 492:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 494;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5269 = HEAP32[$15 + 4 >> 2] << 8;
     $5270 = HEAP32[$8 >> 2] | 0;
     $5271 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5271 + 1;
     HEAP32[$15 + 4 >> 2] = $5269 | (HEAPU8[$5270 + $5271 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5292 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5292;
     $5306 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5306 >> 1] = (HEAPU16[$5306 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 499;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5292;
     $5316 = $15 + 4 | 0;
     HEAP32[$5316 >> 2] = (HEAP32[$5316 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5331 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5331 >> 1] = (HEAPU16[$5331 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 499;
     continue L9;
    }
    break;
   }
  case 499:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 501;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5350 = HEAP32[$15 + 4 >> 2] << 8;
     $5351 = HEAP32[$8 >> 2] | 0;
     $5352 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5352 + 1;
     HEAP32[$15 + 4 >> 2] = $5350 | (HEAPU8[$5351 + $5352 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5373 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5373;
     $5387 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5387 >> 1] = (HEAPU16[$5387 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 506;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5373;
     $5397 = $15 + 4 | 0;
     HEAP32[$5397 >> 2] = (HEAP32[$5397 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5412 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5412 >> 1] = (HEAPU16[$5412 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 506;
     continue L9;
    }
    break;
   }
  case 506:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 508;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5431 = HEAP32[$15 + 4 >> 2] << 8;
     $5432 = HEAP32[$8 >> 2] | 0;
     $5433 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5433 + 1;
     HEAP32[$15 + 4 >> 2] = $5431 | (HEAPU8[$5432 + $5433 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5454 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5454;
     $5468 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5468 >> 1] = (HEAPU16[$5468 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 513;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5454;
     $5478 = $15 + 4 | 0;
     HEAP32[$5478 >> 2] = (HEAP32[$5478 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5493 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5493 >> 1] = (HEAPU16[$5493 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 513;
     continue L9;
    }
    break;
   }
  case 513:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 515;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5512 = HEAP32[$15 + 4 >> 2] << 8;
     $5513 = HEAP32[$8 >> 2] | 0;
     $5514 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5514 + 1;
     HEAP32[$15 + 4 >> 2] = $5512 | (HEAPU8[$5513 + $5514 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5535 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5535;
     $5549 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5549 >> 1] = (HEAPU16[$5549 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 520;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5535;
     $5559 = $15 + 4 | 0;
     HEAP32[$5559 >> 2] = (HEAP32[$5559 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5574 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5574 >> 1] = (HEAPU16[$5574 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 520;
     continue L9;
    }
    break;
   }
  case 520:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 522;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5593 = HEAP32[$15 + 4 >> 2] << 8;
     $5594 = HEAP32[$8 >> 2] | 0;
     $5595 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5595 + 1;
     HEAP32[$15 + 4 >> 2] = $5593 | (HEAPU8[$5594 + $5595 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5616 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5616;
     $5630 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5630 >> 1] = (HEAPU16[$5630 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 527;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5616;
     $5640 = $15 + 4 | 0;
     HEAP32[$5640 >> 2] = (HEAP32[$5640 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5655 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5655 >> 1] = (HEAPU16[$5655 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 527;
     continue L9;
    }
    break;
   }
  case 527:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 529;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5674 = HEAP32[$15 + 4 >> 2] << 8;
     $5675 = HEAP32[$8 >> 2] | 0;
     $5676 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5676 + 1;
     HEAP32[$15 + 4 >> 2] = $5674 | (HEAPU8[$5675 + $5676 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5697 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5697;
     $5711 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5711 >> 1] = (HEAPU16[$5711 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
     label = 534;
     continue L9;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5697;
     $5721 = $15 + 4 | 0;
     HEAP32[$5721 >> 2] = (HEAP32[$5721 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5736 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5736 >> 1] = (HEAPU16[$5736 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
     label = 534;
     continue L9;
    }
    break;
   }
  case 534:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
      label = 536;
      break L9;
     }
     HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
     $5755 = HEAP32[$15 + 4 >> 2] << 8;
     $5756 = HEAP32[$8 >> 2] | 0;
     $5757 = HEAP32[$16 >> 2] | 0;
     HEAP32[$16 >> 2] = $5757 + 1;
     HEAP32[$15 + 4 >> 2] = $5755 | (HEAPU8[$5756 + $5757 >> 0] | 0);
    }
    HEAP32[$17 >> 2] = Math_imul((HEAP32[$15 >> 2] | 0) >>> 11, HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0;
    $5778 = HEAP32[$17 >> 2] | 0;
    if ((HEAP32[$15 + 4 >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
     HEAP32[$15 >> 2] = $5778;
     $5792 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5792 >> 1] = (HEAPU16[$5792 >> 1] | 0) + ((2048 - (HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) | 0) >>> 5);
     HEAP32[$25 >> 2] = HEAP32[$25 >> 2] << 1;
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - $5778;
     $5802 = $15 + 4 | 0;
     HEAP32[$5802 >> 2] = (HEAP32[$5802 >> 2] | 0) - (HEAP32[$17 >> 2] | 0);
     $5817 = (HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) | 0;
     HEAP16[$5817 >> 1] = (HEAPU16[$5817 >> 1] | 0) - ((HEAPU16[(HEAP32[$11 >> 2] | 0) + 27240 + 516 + (HEAP32[$25 >> 2] << 1) >> 1] | 0) >> 5);
     HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] << 1) + 1;
    }
    HEAP32[$28 >> 2] = (HEAP32[$25 >> 2] | 0) - 256 + 2 + 8 + 8;
    label = 542;
    continue L9;
    break;
   }
  case 542:
   {
    label = 0;
    if (_dict_repeat($13, HEAP32[$19 >> 2] | 0, $28) | 0) {
     label = 543;
     break L9;
    } else label = 7;
    break;
   }
  case 544:
   {
    label = 0;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < 16777216) {
     label = 545;
     break L9;
    } else {
     label = 548;
     break L9;
    }
    break;
   }
  }
  if ((label | 0) == 7) {
   label = 0;
   HEAP32[$31 >> 2] = HEAP32[$13 + 4 >> 2] & HEAP32[$23 >> 2];
   label = 8;
   continue;
  } else if ((label | 0) == 136) {
   label = 0;
   HEAP32[$18 >> 2] = HEAP32[33520 + (HEAP32[$18 >> 2] << 2) >> 2];
   label = 137;
   continue;
  } else if ((label | 0) == 261) {
   label = 0;
   HEAP32[$24 >> 2] = (HEAP32[$11 >> 2] | 0) + 25440 + (((HEAP32[$28 >> 2] | 0) >>> 0 < 6 ? (HEAP32[$28 >> 2] | 0) - 2 | 0 : 3) << 7);
   HEAP32[$25 >> 2] = 1;
   label = 262;
   continue;
  } else if ((label | 0) == 392) {
   label = 0;
   if ((_dict_is_distance_valid($13, HEAP32[$19 >> 2] | 0) | 0) ^ 1) {
    label = 393;
    break;
   } else {
    label = 542;
    continue;
   }
  } else if ((label | 0) == 426) {
   label = 0;
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) >>> 0 < 7 ? 8 : 11;
   HEAP32[$25 >> 2] = 1;
   label = 427;
   continue;
  }
 }
 switch (label | 0) {
 case 12:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 1;
   break;
  }
 case 18:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 2;
   break;
  }
 case 25:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 3;
   break;
  }
 case 32:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 4;
   break;
  }
 case 39:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 5;
   break;
  }
 case 46:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 6;
   break;
  }
 case 53:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 7;
   break;
  }
 case 60:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 8;
   break;
  }
 case 67:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 9;
   break;
  }
 case 75:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 10;
   break;
  }
 case 83:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 11;
   break;
  }
 case 91:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 12;
   break;
  }
 case 99:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 13;
   break;
  }
 case 107:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 14;
   break;
  }
 case 115:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 15;
   break;
  }
 case 123:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 16;
   break;
  }
 case 131:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 17;
   break;
  }
 case 138:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 18;
   break;
  }
 case 142:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 19;
   break;
  }
 case 148:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 20;
   break;
  }
 case 154:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 21;
   break;
  }
 case 161:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 22;
   break;
  }
 case 168:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 23;
   break;
  }
 case 177:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 24;
   break;
  }
 case 183:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 25;
   break;
  }
 case 190:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 26;
   break;
  }
 case 197:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 27;
   break;
  }
 case 206:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 28;
   break;
  }
 case 213:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 29;
   break;
  }
 case 220:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 30;
   break;
  }
 case 227:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 31;
   break;
  }
 case 234:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 32;
   break;
  }
 case 241:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 33;
   break;
  }
 case 248:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 34;
   break;
  }
 case 255:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 35;
   break;
  }
 case 264:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 36;
   break;
  }
 case 271:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 37;
   break;
  }
 case 278:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 38;
   break;
  }
 case 285:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 39;
   break;
  }
 case 292:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 40;
   break;
  }
 case 299:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 41;
   break;
  }
 case 311:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 42;
   break;
  }
 case 319:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 42;
   break;
  }
 case 327:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 42;
   break;
  }
 case 335:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 42;
   break;
  }
 case 343:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 42;
   break;
  }
 case 352:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 43;
   break;
  }
 case 358:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 44;
   break;
  }
 case 365:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 45;
   break;
  }
 case 372:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 46;
   break;
  }
 case 379:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 47;
   break;
  }
 case 386:
  {
   HEAP32[$32 >> 2] = 9;
   break;
  }
 case 388:
  {
   if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
    HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 48;
    break;
   } else {
    HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
    $4145 = HEAP32[$15 + 4 >> 2] << 8;
    $4146 = HEAP32[$8 >> 2] | 0;
    $4147 = HEAP32[$16 >> 2] | 0;
    HEAP32[$16 >> 2] = $4147 + 1;
    HEAP32[$15 + 4 >> 2] = $4145 | (HEAPU8[$4146 + $4147 >> 0] | 0);
    label = 391;
    break;
   }
   break;
  }
 case 393:
  {
   HEAP32[$32 >> 2] = 9;
   break;
  }
 case 395:
  {
   HEAP32[$32 >> 2] = 9;
   break;
  }
 case 398:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 49;
   break;
  }
 case 404:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 51;
   break;
  }
 case 409:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 50;
   break;
  }
 case 414:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 52;
   break;
  }
 case 421:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 53;
   break;
  }
 case 429:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 54;
   break;
  }
 case 435:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 55;
   break;
  }
 case 442:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 56;
   break;
  }
 case 449:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 57;
   break;
  }
 case 458:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 58;
   break;
  }
 case 464:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 59;
   break;
  }
 case 471:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 60;
   break;
  }
 case 478:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 61;
   break;
  }
 case 487:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 62;
   break;
  }
 case 494:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 63;
   break;
  }
 case 501:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 64;
   break;
  }
 case 508:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 65;
   break;
  }
 case 515:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 66;
   break;
  }
 case 522:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 67;
   break;
  }
 case 529:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 68;
   break;
  }
 case 536:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 69;
   break;
  }
 case 543:
  {
   HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 70;
   break;
  }
 case 545:
  {
   if ((HEAP32[$16 >> 2] | 0) == (HEAP32[$10 >> 2] | 0)) {
    HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 0;
    break;
   } else {
    HEAP32[$15 >> 2] = HEAP32[$15 >> 2] << 8;
    $5845 = HEAP32[$15 + 4 >> 2] << 8;
    $5846 = HEAP32[$8 >> 2] | 0;
    $5847 = HEAP32[$16 >> 2] | 0;
    HEAP32[$16 >> 2] = $5847 + 1;
    HEAP32[$15 + 4 >> 2] = $5845 | (HEAPU8[$5846 + $5847 >> 0] | 0);
    label = 548;
    break;
   }
   break;
  }
 }
 if ((label | 0) == 391) HEAP32[$32 >> 2] = 1; else if ((label | 0) == 548) HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] = 1;
 HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] = HEAP32[$13 + 8 >> 2];
 $5865 = (HEAP32[$11 >> 2] | 0) + 28268 | 0;
 HEAP32[$5865 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$5865 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 HEAP32[$5865 + 8 >> 2] = HEAP32[$15 + 8 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$16 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28280 >> 2] = HEAP32[$18 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28284 >> 2] = HEAP32[$19 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28288 >> 2] = HEAP32[$20 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28292 >> 2] = HEAP32[$21 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28296 >> 2] = HEAP32[$22 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28324 >> 2] = HEAP32[$24 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28328 >> 2] = HEAP32[$25 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28332 >> 2] = HEAP32[$26 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28336 >> 2] = HEAP32[$27 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 28340 >> 2] = HEAP32[$28 >> 2];
 $5900 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
 if ((HEAP32[$5900 >> 2] | 0) != -1 ? 1 : (HEAP32[$5900 + 4 >> 2] | 0) != -1) {
  $5914 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
  $5915 = $5914;
  $5921 = _i64Subtract(HEAP32[$5915 >> 2] | 0, HEAP32[$5915 + 4 >> 2] | 0, (HEAP32[$13 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0, 0) | 0;
  $5923 = $5914;
  HEAP32[$5923 >> 2] = $5921;
  HEAP32[$5923 + 4 >> 2] = tempRet0;
  $5929 = (HEAP32[$11 >> 2] | 0) + 28312 | 0;
  if ((HEAP32[$5929 >> 2] | 0) == 0 & (HEAP32[$5929 + 4 >> 2] | 0) == 0 & (HEAP32[$32 >> 2] | 0) == 0) if (HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] | 0) HEAP32[$32 >> 2] = (HEAP32[(HEAP32[$11 >> 2] | 0) + 28320 >> 2] | 0) == 1 ? 1 : 9;
 }
 if ((HEAP32[$32 >> 2] | 0) == 1) {
  if (HEAP32[(HEAP32[$11 >> 2] | 0) + 28268 + 4 >> 2] | 0) HEAP32[$32 >> 2] = 9;
  HEAP32[(HEAP32[$11 >> 2] | 0) + 28268 >> 2] = -1;
  HEAP32[(HEAP32[$11 >> 2] | 0) + 28268 + 4 >> 2] = 0;
  HEAP32[(HEAP32[$11 >> 2] | 0) + 28268 + 8 >> 2] = 5;
 }
 HEAP32[$5 >> 2] = HEAP32[$32 >> 2];
 $5965 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $5965 | 0;
}

function __ZN3zim8FileImplC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy17 = 0, $$byval_copy20 = 0, $10 = 0, $100 = 0, $1006 = 0, $1009 = 0, $101 = 0, $1013 = 0, $102 = 0, $1020 = 0, $1021 = 0, $103 = 0, $1031 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1037 = 0, $1038 = 0, $104 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1046 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1051 = 0, $1054 = 0, $1056 = 0, $1059 = 0, $106 = 0, $1061 = 0, $1064 = 0, $1065 = 0, $1069 = 0, $107 = 0, $1072 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1078 = 0, $108 = 0, $1080 = 0, $1083 = 0, $1085 = 0, $1086 = 0, $109 = 0, $1091 = 0, $1093 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1104 = 0, $111 = 0, $1111 = 0, $1112 = 0, $112 = 0, $1121 = 0, $1124 = 0, $1128 = 0, $113 = 0, $1135 = 0, $1136 = 0, $114 = 0, $1141 = 0, $1142 = 0, $1145 = 0, $1147 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1154 = 0, $1155 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1161 = 0, $1165 = 0, $1167 = 0, $117 = 0, $1170 = 0, $1173 = 0, $1175 = 0, $1179 = 0, $118 = 0, $1184 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1195 = 0, $1197 = 0, $1198 = 0, $12 = 0, $120 = 0, $1200 = 0, $1203 = 0, $1205 = 0, $121 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1217 = 0, $1219 = 0, $122 = 0, $1223 = 0, $1229 = 0, $123 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1239 = 0, $124 = 0, $1241 = 0, $1242 = 0, $1244 = 0, $1247 = 0, $1249 = 0, $125 = 0, $1253 = 0, $1254 = 0, $1256 = 0, $1258 = 0, $126 = 0, $1262 = 0, $1265 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1271 = 0, $1273 = 0, $1275 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1286 = 0, $129 = 0, $1293 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $13 = 0, $130 = 0, $1301 = 0, $1305 = 0, $131 = 0, $1314 = 0, $1316 = 0, $132 = 0, $1322 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1335 = 0, $134 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1346 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1351 = 0, $1354 = 0, $1356 = 0, $136 = 0, $1360 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1369 = 0, $137 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1379 = 0, $138 = 0, $1382 = 0, $1384 = 0, $139 = 0, $1394 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1406 = 0, $1407 = 0, $141 = 0, $1410 = 0, $1412 = 0, $1416 = 0, $1418 = 0, $142 = 0, $1424 = 0, $1426 = 0, $143 = 0, $1430 = 0, $1433 = 0, $1437 = 0, $144 = 0, $1444 = 0, $1445 = 0, $145 = 0, $1451 = 0, $1455 = 0, $146 = 0, $1462 = 0, $1463 = 0, $1469 = 0, $147 = 0, $1473 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $473 = 0, $48 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $493 = 0, $495 = 0, $497 = 0, $498 = 0, $5 = 0, $50 = 0, $500 = 0, $502 = 0, $504 = 0, $506 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $512 = 0, $513 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $521 = 0, $522 = 0, $526 = 0, $527 = 0, $528 = 0, $53 = 0, $530 = 0, $531 = 0, $535 = 0, $536 = 0, $537 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $544 = 0, $546 = 0, $547 = 0, $55 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $559 = 0, $56 = 0, $562 = 0, $564 = 0, $565 = 0, $57 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $576 = 0, $578 = 0, $579 = 0, $58 = 0, $581 = 0, $583 = 0, $584 = 0, $587 = 0, $59 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $608 = 0, $61 = 0, $62 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $632 = 0, $633 = 0, $635 = 0, $64 = 0, $649 = 0, $65 = 0, $652 = 0, $653 = 0, $655 = 0, $66 = 0, $667 = 0, $67 = 0, $670 = 0, $672 = 0, $674 = 0, $677 = 0, $679 = 0, $68 = 0, $681 = 0, $683 = 0, $685 = 0, $687 = 0, $689 = 0, $69 = 0, $691 = 0, $693 = 0, $695 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $711 = 0, $715 = 0, $716 = 0, $717 = 0, $72 = 0, $722 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $733 = 0, $735 = 0, $736 = 0, $738 = 0, $74 = 0, $741 = 0, $743 = 0, $746 = 0, $749 = 0, $75 = 0, $752 = 0, $753 = 0, $755 = 0, $76 = 0, $761 = 0, $763 = 0, $77 = 0, $770 = 0, $772 = 0, $773 = 0, $774 = 0, $776 = 0, $778 = 0, $78 = 0, $780 = 0, $782 = 0, $784 = 0, $785 = 0, $788 = 0, $79 = 0, $790 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $797 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $802 = 0, $805 = 0, $807 = 0, $81 = 0, $810 = 0, $812 = 0, $813 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $821 = 0, $823 = 0, $824 = 0, $826 = 0, $829 = 0, $83 = 0, $831 = 0, $834 = 0, $835 = 0, $839 = 0, $84 = 0, $842 = 0, $844 = 0, $845 = 0, $846 = 0, $848 = 0, $85 = 0, $850 = 0, $853 = 0, $855 = 0, $856 = 0, $86 = 0, $861 = 0, $863 = 0, $869 = 0, $87 = 0, $870 = 0, $874 = 0, $88 = 0, $881 = 0, $882 = 0, $89 = 0, $891 = 0, $894 = 0, $898 = 0, $9 = 0, $90 = 0, $905 = 0, $906 = 0, $91 = 0, $916 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $922 = 0, $923 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $931 = 0, $933 = 0, $934 = 0, $936 = 0, $939 = 0, $94 = 0, $941 = 0, $944 = 0, $946 = 0, $949 = 0, $95 = 0, $950 = 0, $954 = 0, $957 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $963 = 0, $965 = 0, $968 = 0, $97 = 0, $970 = 0, $971 = 0, $976 = 0, $978 = 0, $98 = 0, $984 = 0, $985 = 0, $989 = 0, $99 = 0, $996 = 0, $997 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $$byval_copy20 = sp + 272 | 0;
 $$byval_copy17 = sp + 264 | 0;
 $2 = sp + 2024 | 0;
 $3 = sp + 2020 | 0;
 $4 = sp + 2016 | 0;
 $5 = sp + 2012 | 0;
 $6 = sp + 2008 | 0;
 $7 = sp + 2004 | 0;
 $8 = sp + 2e3 | 0;
 $9 = sp + 1996 | 0;
 $10 = sp + 1992 | 0;
 $11 = sp + 1988 | 0;
 $12 = sp + 1984 | 0;
 $13 = sp + 1980 | 0;
 $14 = sp + 256 | 0;
 $15 = sp + 1976 | 0;
 $16 = sp + 1972 | 0;
 $17 = sp + 1968 | 0;
 $18 = sp + 1964 | 0;
 $19 = sp + 2050 | 0;
 $20 = sp + 1960 | 0;
 $21 = sp + 1956 | 0;
 $22 = sp + 1952 | 0;
 $23 = sp + 1948 | 0;
 $24 = sp + 1944 | 0;
 $25 = sp + 1940 | 0;
 $26 = sp + 1936 | 0;
 $27 = sp + 1932 | 0;
 $28 = sp + 1928 | 0;
 $29 = sp + 2049 | 0;
 $30 = sp + 1924 | 0;
 $31 = sp + 1920 | 0;
 $32 = sp + 1916 | 0;
 $33 = sp + 1912 | 0;
 $34 = sp + 1908 | 0;
 $35 = sp + 1904 | 0;
 $36 = sp + 1900 | 0;
 $37 = sp + 1896 | 0;
 $38 = sp + 1892 | 0;
 $39 = sp + 1888 | 0;
 $40 = sp + 1884 | 0;
 $41 = sp + 1880 | 0;
 $42 = sp + 1876 | 0;
 $43 = sp + 1872 | 0;
 $44 = sp + 1868 | 0;
 $45 = sp + 1864 | 0;
 $46 = sp + 1860 | 0;
 $47 = sp + 1856 | 0;
 $48 = sp + 1852 | 0;
 $49 = sp + 1848 | 0;
 $50 = sp + 1844 | 0;
 $51 = sp + 1840 | 0;
 $52 = sp + 1836 | 0;
 $53 = sp + 1832 | 0;
 $54 = sp + 1828 | 0;
 $55 = sp + 1824 | 0;
 $56 = sp + 1820 | 0;
 $57 = sp + 1816 | 0;
 $58 = sp + 1812 | 0;
 $59 = sp + 1808 | 0;
 $60 = sp + 1804 | 0;
 $61 = sp + 1800 | 0;
 $62 = sp + 1796 | 0;
 $63 = sp + 1792 | 0;
 $64 = sp + 1788 | 0;
 $65 = sp + 1784 | 0;
 $66 = sp + 1780 | 0;
 $67 = sp + 1776 | 0;
 $68 = sp + 1772 | 0;
 $69 = sp + 1768 | 0;
 $70 = sp + 1764 | 0;
 $71 = sp + 1760 | 0;
 $72 = sp + 1756 | 0;
 $73 = sp + 1752 | 0;
 $74 = sp + 1748 | 0;
 $75 = sp + 1744 | 0;
 $76 = sp + 1740 | 0;
 $77 = sp + 1736 | 0;
 $78 = sp + 1732 | 0;
 $79 = sp + 1728 | 0;
 $80 = sp + 1724 | 0;
 $81 = sp + 1720 | 0;
 $82 = sp + 1716 | 0;
 $83 = sp + 1712 | 0;
 $84 = sp + 1708 | 0;
 $85 = sp + 1704 | 0;
 $86 = sp + 1700 | 0;
 $87 = sp + 1696 | 0;
 $88 = sp + 1692 | 0;
 $89 = sp + 1688 | 0;
 $90 = sp + 1684 | 0;
 $91 = sp + 1680 | 0;
 $92 = sp + 1676 | 0;
 $93 = sp + 1672 | 0;
 $94 = sp + 1668 | 0;
 $95 = sp + 1664 | 0;
 $96 = sp + 1660 | 0;
 $97 = sp + 1656 | 0;
 $98 = sp + 1652 | 0;
 $99 = sp + 1648 | 0;
 $100 = sp + 2048 | 0;
 $101 = sp + 1644 | 0;
 $102 = sp + 1640 | 0;
 $103 = sp + 1636 | 0;
 $104 = sp + 1632 | 0;
 $105 = sp + 1628 | 0;
 $106 = sp + 1624 | 0;
 $107 = sp + 1620 | 0;
 $108 = sp + 1616 | 0;
 $109 = sp + 1612 | 0;
 $110 = sp + 1608 | 0;
 $111 = sp + 1604 | 0;
 $112 = sp + 1600 | 0;
 $113 = sp + 1596 | 0;
 $114 = sp + 1592 | 0;
 $115 = sp + 1588 | 0;
 $116 = sp + 1584 | 0;
 $117 = sp + 1580 | 0;
 $118 = sp + 1576 | 0;
 $119 = sp + 1572 | 0;
 $120 = sp + 1568 | 0;
 $121 = sp + 1564 | 0;
 $122 = sp + 1560 | 0;
 $123 = sp + 1556 | 0;
 $124 = sp + 1552 | 0;
 $125 = sp + 1548 | 0;
 $126 = sp + 1544 | 0;
 $127 = sp + 1540 | 0;
 $128 = sp + 1536 | 0;
 $129 = sp + 1532 | 0;
 $130 = sp + 1528 | 0;
 $131 = sp + 1524 | 0;
 $132 = sp + 1520 | 0;
 $133 = sp + 1516 | 0;
 $134 = sp + 1512 | 0;
 $135 = sp + 1508 | 0;
 $136 = sp + 1504 | 0;
 $137 = sp + 1500 | 0;
 $138 = sp + 1496 | 0;
 $139 = sp + 1492 | 0;
 $140 = sp + 1488 | 0;
 $141 = sp + 1484 | 0;
 $142 = sp + 1480 | 0;
 $143 = sp + 1476 | 0;
 $144 = sp + 1472 | 0;
 $145 = sp + 1468 | 0;
 $146 = sp + 1464 | 0;
 $147 = sp + 1460 | 0;
 $148 = sp + 1456 | 0;
 $149 = sp + 1452 | 0;
 $150 = sp + 1448 | 0;
 $151 = sp + 1444 | 0;
 $152 = sp + 1440 | 0;
 $153 = sp + 1436 | 0;
 $154 = sp + 1432 | 0;
 $155 = sp + 1428 | 0;
 $156 = sp + 1424 | 0;
 $157 = sp + 2047 | 0;
 $158 = sp + 1420 | 0;
 $159 = sp + 1416 | 0;
 $160 = sp + 1412 | 0;
 $161 = sp + 1408 | 0;
 $162 = sp + 1404 | 0;
 $163 = sp + 1400 | 0;
 $164 = sp + 1396 | 0;
 $165 = sp + 1392 | 0;
 $166 = sp + 1388 | 0;
 $167 = sp + 1384 | 0;
 $168 = sp + 1380 | 0;
 $169 = sp + 1376 | 0;
 $170 = sp + 1372 | 0;
 $171 = sp + 1368 | 0;
 $172 = sp + 1364 | 0;
 $173 = sp + 1360 | 0;
 $174 = sp + 1356 | 0;
 $175 = sp + 1352 | 0;
 $176 = sp + 1348 | 0;
 $177 = sp + 1344 | 0;
 $178 = sp + 1340 | 0;
 $179 = sp + 1336 | 0;
 $180 = sp + 1332 | 0;
 $181 = sp + 1328 | 0;
 $182 = sp + 1324 | 0;
 $183 = sp + 1320 | 0;
 $184 = sp + 1316 | 0;
 $185 = sp + 1312 | 0;
 $186 = sp + 1308 | 0;
 $187 = sp + 1304 | 0;
 $188 = sp + 1300 | 0;
 $189 = sp + 1296 | 0;
 $190 = sp + 1292 | 0;
 $191 = sp + 1288 | 0;
 $192 = sp + 1284 | 0;
 $193 = sp + 1280 | 0;
 $194 = sp + 1276 | 0;
 $195 = sp + 1272 | 0;
 $196 = sp + 1268 | 0;
 $197 = sp + 1264 | 0;
 $198 = sp + 1260 | 0;
 $199 = sp + 1256 | 0;
 $200 = sp + 1252 | 0;
 $201 = sp + 1248 | 0;
 $202 = sp + 1244 | 0;
 $203 = sp + 1240 | 0;
 $204 = sp + 1236 | 0;
 $205 = sp + 1232 | 0;
 $206 = sp + 1228 | 0;
 $207 = sp + 1224 | 0;
 $208 = sp + 1220 | 0;
 $209 = sp + 1216 | 0;
 $210 = sp + 1212 | 0;
 $211 = sp + 1208 | 0;
 $212 = sp + 1204 | 0;
 $213 = sp + 1200 | 0;
 $214 = sp + 2046 | 0;
 $215 = sp + 1196 | 0;
 $216 = sp + 1192 | 0;
 $217 = sp + 1188 | 0;
 $218 = sp + 1184 | 0;
 $219 = sp + 1180 | 0;
 $220 = sp + 1176 | 0;
 $221 = sp + 1172 | 0;
 $222 = sp + 1168 | 0;
 $223 = sp + 1164 | 0;
 $224 = sp + 1160 | 0;
 $225 = sp + 1156 | 0;
 $226 = sp + 1152 | 0;
 $227 = sp + 1148 | 0;
 $228 = sp + 1144 | 0;
 $229 = sp + 1140 | 0;
 $230 = sp + 1136 | 0;
 $231 = sp + 1132 | 0;
 $232 = sp + 1128 | 0;
 $233 = sp + 1124 | 0;
 $234 = sp + 1120 | 0;
 $235 = sp + 1116 | 0;
 $236 = sp + 1112 | 0;
 $237 = sp + 1108 | 0;
 $238 = sp + 1104 | 0;
 $239 = sp + 1100 | 0;
 $240 = sp + 1096 | 0;
 $241 = sp + 1092 | 0;
 $242 = sp + 1088 | 0;
 $243 = sp + 1084 | 0;
 $244 = sp + 1080 | 0;
 $245 = sp + 1076 | 0;
 $246 = sp + 1072 | 0;
 $247 = sp + 1068 | 0;
 $248 = sp + 1064 | 0;
 $249 = sp + 1060 | 0;
 $250 = sp + 1056 | 0;
 $251 = sp + 1052 | 0;
 $252 = sp + 1048 | 0;
 $253 = sp + 1044 | 0;
 $254 = sp + 1040 | 0;
 $255 = sp + 1036 | 0;
 $256 = sp + 1032 | 0;
 $257 = sp + 1028 | 0;
 $258 = sp + 1024 | 0;
 $259 = sp + 1020 | 0;
 $260 = sp + 1016 | 0;
 $261 = sp + 1012 | 0;
 $262 = sp + 1008 | 0;
 $263 = sp + 1004 | 0;
 $264 = sp + 1e3 | 0;
 $265 = sp + 996 | 0;
 $266 = sp + 992 | 0;
 $267 = sp + 2045 | 0;
 $268 = sp + 988 | 0;
 $269 = sp + 984 | 0;
 $270 = sp + 980 | 0;
 $271 = sp + 976 | 0;
 $272 = sp + 972 | 0;
 $273 = sp + 968 | 0;
 $274 = sp + 964 | 0;
 $275 = sp + 960 | 0;
 $276 = sp + 956 | 0;
 $277 = sp + 952 | 0;
 $278 = sp + 948 | 0;
 $279 = sp + 944 | 0;
 $280 = sp + 940 | 0;
 $281 = sp + 936 | 0;
 $282 = sp + 932 | 0;
 $283 = sp + 928 | 0;
 $284 = sp + 924 | 0;
 $285 = sp + 920 | 0;
 $286 = sp + 916 | 0;
 $287 = sp + 912 | 0;
 $288 = sp + 908 | 0;
 $289 = sp + 904 | 0;
 $290 = sp + 900 | 0;
 $291 = sp + 896 | 0;
 $292 = sp + 892 | 0;
 $293 = sp + 888 | 0;
 $294 = sp + 884 | 0;
 $295 = sp + 880 | 0;
 $296 = sp + 876 | 0;
 $297 = sp + 872 | 0;
 $298 = sp + 868 | 0;
 $299 = sp + 864 | 0;
 $300 = sp + 860 | 0;
 $301 = sp + 856 | 0;
 $302 = sp + 852 | 0;
 $303 = sp + 848 | 0;
 $304 = sp + 844 | 0;
 $305 = sp + 840 | 0;
 $306 = sp + 836 | 0;
 $307 = sp + 832 | 0;
 $308 = sp + 828 | 0;
 $309 = sp + 824 | 0;
 $310 = sp + 820 | 0;
 $311 = sp + 816 | 0;
 $312 = sp + 812 | 0;
 $313 = sp + 808 | 0;
 $314 = sp + 804 | 0;
 $315 = sp + 800 | 0;
 $316 = sp + 796 | 0;
 $317 = sp + 792 | 0;
 $318 = sp + 788 | 0;
 $319 = sp + 784 | 0;
 $320 = sp + 780 | 0;
 $321 = sp + 776 | 0;
 $322 = sp + 772 | 0;
 $323 = sp + 768 | 0;
 $324 = sp + 764 | 0;
 $325 = sp + 760 | 0;
 $326 = sp + 756 | 0;
 $327 = sp + 752 | 0;
 $328 = sp + 748 | 0;
 $329 = sp + 744 | 0;
 $330 = sp + 740 | 0;
 $331 = sp + 736 | 0;
 $332 = sp + 732 | 0;
 $333 = sp + 728 | 0;
 $334 = sp + 724 | 0;
 $335 = sp + 720 | 0;
 $336 = sp + 716 | 0;
 $337 = sp + 712 | 0;
 $338 = sp + 708 | 0;
 $339 = sp + 704 | 0;
 $340 = sp + 700 | 0;
 $341 = sp + 696 | 0;
 $342 = sp + 692 | 0;
 $343 = sp + 688 | 0;
 $344 = sp + 684 | 0;
 $345 = sp + 680 | 0;
 $346 = sp + 676 | 0;
 $347 = sp + 672 | 0;
 $348 = sp + 668 | 0;
 $349 = sp + 248 | 0;
 $350 = sp + 664 | 0;
 $351 = sp + 2044 | 0;
 $352 = sp + 2043 | 0;
 $353 = sp + 660 | 0;
 $354 = sp + 240 | 0;
 $355 = sp + 656 | 0;
 $356 = sp + 2042 | 0;
 $357 = sp + 2041 | 0;
 $358 = sp + 652 | 0;
 $359 = sp + 648 | 0;
 $360 = sp + 644 | 0;
 $361 = sp + 640 | 0;
 $362 = sp + 636 | 0;
 $363 = sp + 632 | 0;
 $364 = sp + 628 | 0;
 $365 = sp + 624 | 0;
 $366 = sp + 620 | 0;
 $367 = sp + 616 | 0;
 $368 = sp + 612 | 0;
 $369 = sp + 608 | 0;
 $370 = sp + 604 | 0;
 $371 = sp + 600 | 0;
 $372 = sp + 596 | 0;
 $373 = sp + 592 | 0;
 $374 = sp + 588 | 0;
 $375 = sp + 584 | 0;
 $376 = sp + 580 | 0;
 $377 = sp + 576 | 0;
 $378 = sp + 572 | 0;
 $379 = sp + 568 | 0;
 $380 = sp + 564 | 0;
 $381 = sp + 560 | 0;
 $382 = sp + 556 | 0;
 $383 = sp + 552 | 0;
 $384 = sp + 548 | 0;
 $385 = sp + 544 | 0;
 $386 = sp + 540 | 0;
 $387 = sp + 536 | 0;
 $388 = sp + 532 | 0;
 $389 = sp + 232 | 0;
 $390 = sp + 528 | 0;
 $391 = sp + 524 | 0;
 $392 = sp + 520 | 0;
 $393 = sp + 516 | 0;
 $394 = sp + 512 | 0;
 $395 = sp + 504 | 0;
 $396 = sp + 500 | 0;
 $397 = sp + 2040 | 0;
 $398 = sp + 496 | 0;
 $399 = sp + 484 | 0;
 $400 = sp + 472 | 0;
 $401 = sp + 460 | 0;
 $402 = sp + 2039 | 0;
 $403 = sp + 224 | 0;
 $404 = sp + 448 | 0;
 $405 = sp + 2038 | 0;
 $406 = sp + 440 | 0;
 $407 = sp + 216 | 0;
 $408 = sp + 208 | 0;
 $409 = sp + 428 | 0;
 $410 = sp + 2037 | 0;
 $411 = sp + 424 | 0;
 $412 = sp + 200 | 0;
 $413 = sp + 192 | 0;
 $414 = sp + 184 | 0;
 $415 = sp + 412 | 0;
 $416 = sp + 2036 | 0;
 $417 = sp + 408 | 0;
 $418 = sp + 400 | 0;
 $419 = sp + 176 | 0;
 $420 = sp + 168 | 0;
 $421 = sp + 2035 | 0;
 $422 = sp + 160 | 0;
 $423 = sp + 152 | 0;
 $424 = sp + 144 | 0;
 $425 = sp + 388 | 0;
 $426 = sp + 2034 | 0;
 $427 = sp + 384 | 0;
 $428 = sp + 376 | 0;
 $429 = sp + 136 | 0;
 $430 = sp + 128 | 0;
 $431 = sp + 2033 | 0;
 $432 = sp + 120 | 0;
 $433 = sp + 112 | 0;
 $434 = sp + 104 | 0;
 $435 = sp + 364 | 0;
 $436 = sp + 2032 | 0;
 $437 = sp + 360 | 0;
 $438 = sp + 352 | 0;
 $439 = sp + 96 | 0;
 $440 = sp + 88 | 0;
 $441 = sp + 2031 | 0;
 $442 = sp + 344 | 0;
 $443 = sp + 80 | 0;
 $444 = sp + 340 | 0;
 $445 = sp + 336 | 0;
 $446 = sp + 72 | 0;
 $447 = sp + 324 | 0;
 $448 = sp + 2030 | 0;
 $449 = sp + 64 | 0;
 $450 = sp + 312 | 0;
 $451 = sp + 2029 | 0;
 $452 = sp + 56 | 0;
 $453 = sp + 304 | 0;
 $454 = sp + 48 | 0;
 $455 = sp + 40 | 0;
 $456 = sp + 32 | 0;
 $457 = sp + 24 | 0;
 $458 = sp + 16 | 0;
 $459 = sp + 292 | 0;
 $460 = sp + 2028 | 0;
 $461 = sp + 280 | 0;
 $462 = sp + 8 | 0;
 $463 = sp;
 HEAP32[$390 >> 2] = $0;
 HEAP32[$391 >> 2] = $1;
 $464 = HEAP32[$390 >> 2] | 0;
 $465 = __Znwm(32) | 0;
 __THREW__ = 0;
 invoke_vii(79, $465 | 0, HEAP32[$391 >> 2] | 0);
 $467 = __THREW__;
 __THREW__ = 0;
 if ($467 & 1) {
  $670 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$392 >> 2] = $670;
  HEAP32[$393 >> 2] = tempRet0;
  __ZdlPv($465);
  $1486 = HEAP32[$392 >> 2] | 0;
  $1487 = HEAP32[$393 >> 2] | 0;
  ___resumeException($1486 | 0);
 };
 HEAP32[$394 >> 2] = 0;
 HEAP32[$$byval_copy20 >> 2] = HEAP32[$394 >> 2];
 __ZNSt3__210shared_ptrIN3zim12FileCompoundEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($464, $465, $$byval_copy20);
 $469 = $464 + 8 | 0;
 __THREW__ = 0;
 $470 = invoke_ii(79, 32) | 0;
 $471 = __THREW__;
 __THREW__ = 0;
 do if ($471 & 1) {
  $672 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$392 >> 2] = $672;
  HEAP32[$393 >> 2] = tempRet0;
 } else {
  HEAP8[$397 >> 0] = 1;
  HEAP32[$396 >> 2] = 0;
  HEAP8[$389 >> 0] = HEAP8[$396 >> 0] | 0;
  HEAP8[$389 + 1 >> 0] = HEAP8[$396 + 1 >> 0] | 0;
  HEAP8[$389 + 2 >> 0] = HEAP8[$396 + 2 >> 0] | 0;
  HEAP8[$389 + 3 >> 0] = HEAP8[$396 + 3 >> 0] | 0;
  HEAP32[$387 >> 2] = $395;
  HEAP32[$388 >> 2] = $464;
  $473 = HEAP32[$387 >> 2] | 0;
  HEAP32[$473 >> 2] = HEAP32[HEAP32[$388 >> 2] >> 2];
  HEAP32[$473 + 4 >> 2] = HEAP32[(HEAP32[$388 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$473 + 4 >> 2] | 0) {
   HEAP32[$386 >> 2] = HEAP32[$473 + 4 >> 2];
   HEAP32[$385 >> 2] = HEAP32[$386 >> 2];
   HEAP32[$382 >> 2] = (HEAP32[$385 >> 2] | 0) + 4;
   $488 = HEAP32[$382 >> 2] | 0;
   HEAP32[$383 >> 2] = 1;
   $489 = HEAP32[$383 >> 2] | 0;
   $490 = HEAP32[$488 >> 2] | 0;
   HEAP32[$488 >> 2] = $490 + $489;
   HEAP32[$384 >> 2] = $490 + $489;
  }
  __THREW__ = 0;
  invoke_vii(80, $470 | 0, $395 | 0);
  $493 = __THREW__;
  __THREW__ = 0;
  if (!($493 & 1)) {
   HEAP8[$397 >> 0] = 0;
   HEAP32[$398 >> 2] = 0;
   __THREW__ = 0;
   HEAP32[$$byval_copy20 >> 2] = HEAP32[$398 >> 2];
   invoke_viii(27, $469 | 0, $470 | 0, $$byval_copy20 | 0);
   $495 = __THREW__;
   __THREW__ = 0;
   if (!($495 & 1)) {
    __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($395);
    $497 = $464 + 16 | 0;
    __THREW__ = 0;
    invoke_vii(81, $497 | 0, 256);
    $498 = __THREW__;
    __THREW__ = 0;
    if ($498 & 1) {
     $677 = ___cxa_find_matching_catch_2() | 0;
     HEAP32[$392 >> 2] = $677;
     HEAP32[$393 >> 2] = tempRet0;
    } else {
     $500 = $464 + 28 | 0;
     HEAP32[$500 >> 2] = 0;
     HEAP32[$500 + 4 >> 2] = 0;
     HEAP32[$500 + 8 >> 2] = 0;
     HEAP32[$500 + 12 >> 2] = 0;
     HEAP32[$500 + 16 >> 2] = 0;
     HEAP32[$500 + 20 >> 2] = 0;
     HEAP32[$500 + 24 >> 2] = 0;
     __THREW__ = 0;
     invoke_vi(188, $464 + 56 | 0);
     $502 = __THREW__;
     __THREW__ = 0;
     if ($502 & 1) label = 36; else {
      $504 = $464 + 136 | 0;
      __THREW__ = 0;
      invoke_vii(55, $504 | 0, HEAP32[$391 >> 2] | 0);
      $506 = __THREW__;
      __THREW__ = 0;
      if ($506 & 1) label = 36; else {
       $508 = $464 + 148 | 0;
       HEAP32[$380 >> 2] = $508;
       $509 = HEAP32[$380 >> 2] | 0;
       HEAP32[$381 >> 2] = 0;
       HEAP32[$378 >> 2] = $509;
       HEAP32[$379 >> 2] = $381;
       $510 = HEAP32[$378 >> 2] | 0;
       HEAP32[$377 >> 2] = HEAP32[$379 >> 2];
       $512 = HEAP32[$377 >> 2] | 0;
       HEAP32[$375 >> 2] = $510;
       HEAP32[$376 >> 2] = $512;
       $513 = HEAP32[$375 >> 2] | 0;
       HEAP32[$374 >> 2] = HEAP32[$376 >> 2];
       HEAP32[$513 >> 2] = HEAP32[HEAP32[$374 >> 2] >> 2];
       $517 = $464 + 152 | 0;
       HEAP32[$372 >> 2] = $517;
       $518 = HEAP32[$372 >> 2] | 0;
       HEAP32[$373 >> 2] = 0;
       HEAP32[$370 >> 2] = $518;
       HEAP32[$371 >> 2] = $373;
       $519 = HEAP32[$370 >> 2] | 0;
       HEAP32[$369 >> 2] = HEAP32[$371 >> 2];
       $521 = HEAP32[$369 >> 2] | 0;
       HEAP32[$367 >> 2] = $519;
       HEAP32[$368 >> 2] = $521;
       $522 = HEAP32[$367 >> 2] | 0;
       HEAP32[$366 >> 2] = HEAP32[$368 >> 2];
       HEAP32[$522 >> 2] = HEAP32[HEAP32[$366 >> 2] >> 2];
       $526 = $464 + 156 | 0;
       HEAP32[$364 >> 2] = $526;
       $527 = HEAP32[$364 >> 2] | 0;
       HEAP32[$365 >> 2] = 0;
       HEAP32[$362 >> 2] = $527;
       HEAP32[$363 >> 2] = $365;
       $528 = HEAP32[$362 >> 2] | 0;
       HEAP32[$361 >> 2] = HEAP32[$363 >> 2];
       $530 = HEAP32[$361 >> 2] | 0;
       HEAP32[$359 >> 2] = $528;
       HEAP32[$360 >> 2] = $530;
       $531 = HEAP32[$359 >> 2] | 0;
       HEAP32[$358 >> 2] = HEAP32[$360 >> 2];
       HEAP32[$531 >> 2] = HEAP32[HEAP32[$358 >> 2] >> 2];
       $535 = $464 + 160 | 0;
       __THREW__ = 0;
       $536 = invoke_iii(47, 51265, 512) | 0;
       $537 = __THREW__;
       __THREW__ = 0;
       if ($537 & 1) {
        $681 = ___cxa_find_matching_catch_2() | 0;
        HEAP32[$392 >> 2] = $681;
        HEAP32[$393 >> 2] = tempRet0;
       } else {
        __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEEC2Em($535, $536);
        $539 = $464 + 188 | 0;
        HEAP32[$539 >> 2] = 0;
        HEAP32[$539 + 4 >> 2] = 0;
        HEAP32[$539 + 8 >> 2] = 0;
        HEAP32[$539 + 12 >> 2] = 0;
        HEAP32[$539 + 16 >> 2] = 0;
        HEAP32[$539 + 20 >> 2] = 0;
        HEAP32[$539 + 24 >> 2] = 0;
        $540 = $464 + 216 | 0;
        __THREW__ = 0;
        $541 = invoke_iii(47, 51281, 16) | 0;
        $542 = __THREW__;
        __THREW__ = 0;
        if ($542 & 1) {
         $683 = ___cxa_find_matching_catch_2() | 0;
         HEAP32[$392 >> 2] = $683;
         HEAP32[$393 >> 2] = tempRet0;
        } else {
         __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEEC2Em($540, $541);
         $544 = $464 + 244 | 0;
         HEAP32[$544 >> 2] = 0;
         HEAP32[$544 + 4 >> 2] = 0;
         HEAP32[$544 + 8 >> 2] = 0;
         HEAP32[$544 + 12 >> 2] = 0;
         HEAP32[$544 + 16 >> 2] = 0;
         HEAP32[$544 + 20 >> 2] = 0;
         HEAP32[$544 + 24 >> 2] = 0;
         __THREW__ = 0;
         $546 = invoke_iii(47, 51298, 0) | 0;
         $547 = __THREW__;
         __THREW__ = 0;
         if ($547 & 1) {
          $685 = ___cxa_find_matching_catch_2() | 0;
          HEAP32[$392 >> 2] = $685;
          HEAP32[$393 >> 2] = tempRet0;
         } else {
          HEAP8[$464 + 272 >> 0] = ($546 | 0) != 0 & 1;
          $551 = $464 + 276 | 0;
          HEAP32[$355 >> 2] = $551;
          $552 = HEAP32[$355 >> 2] | 0;
          HEAP8[$354 >> 0] = HEAP8[$357 >> 0] | 0;
          HEAP32[$353 >> 2] = $356;
          __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($552, $356);
          $553 = $464 + 288 | 0;
          HEAP32[$553 >> 2] = 0;
          HEAP32[$553 + 4 >> 2] = 0;
          HEAP32[$553 + 8 >> 2] = 0;
          HEAP32[$553 + 12 >> 2] = 0;
          HEAP32[$553 + 16 >> 2] = 0;
          HEAP32[$553 + 20 >> 2] = 0;
          HEAP32[$553 + 24 >> 2] = 0;
          $554 = $464 + 316 | 0;
          HEAP32[$350 >> 2] = $554;
          $555 = HEAP32[$350 >> 2] | 0;
          HEAP8[$349 >> 0] = HEAP8[$352 >> 0] | 0;
          HEAP32[$348 >> 2] = $351;
          __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($555, $351);
          $556 = $464 + 328 | 0;
          HEAP32[$556 >> 2] = 0;
          HEAP32[$556 + 4 >> 2] = 0;
          HEAP32[$556 + 8 >> 2] = 0;
          HEAP32[$556 + 12 >> 2] = 0;
          HEAP32[$556 + 16 >> 2] = 0;
          HEAP32[$556 + 20 >> 2] = 0;
          HEAP32[$556 + 24 >> 2] = 0;
          $557 = $464 + 356 | 0;
          HEAP32[$347 >> 2] = $557;
          HEAP32[$345 >> 2] = HEAP32[$347 >> 2];
          $559 = HEAP32[$345 >> 2] | 0;
          HEAP32[$344 >> 2] = $559;
          HEAP32[$559 >> 2] = 0;
          HEAP32[$559 + 4 >> 2] = 0;
          HEAP32[$346 >> 2] = 0;
          HEAP32[$342 >> 2] = $559 + 8;
          HEAP32[$343 >> 2] = $346;
          $562 = HEAP32[$342 >> 2] | 0;
          HEAP32[$341 >> 2] = HEAP32[$343 >> 2];
          $564 = HEAP32[$341 >> 2] | 0;
          HEAP32[$337 >> 2] = $562;
          HEAP32[$338 >> 2] = $564;
          $565 = HEAP32[$337 >> 2] | 0;
          HEAP32[$336 >> 2] = HEAP32[$338 >> 2];
          HEAP32[$565 >> 2] = 0;
          HEAP32[$340 >> 2] = $562;
          HEAP32[$339 >> 2] = HEAP32[$340 >> 2];
          HEAP32[$323 >> 2] = $464;
          L29 : do if (__ZNK3zim12FileCompound4failEv(HEAP32[HEAP32[$323 >> 2] >> 2] | 0) | 0) {
           $571 = ___cxa_allocate_exception(8) | 0;
           HEAP8[$402 >> 0] = 1;
           HEAP32[$309 >> 2] = $401;
           HEAP32[$310 >> 2] = 51327;
           $572 = HEAP32[$309 >> 2] | 0;
           HEAP32[$308 >> 2] = $572;
           $573 = HEAP32[$308 >> 2] | 0;
           HEAP32[$307 >> 2] = $573;
           $574 = HEAP32[$307 >> 2] | 0;
           HEAP32[$574 >> 2] = 0;
           HEAP32[$574 + 4 >> 2] = 0;
           HEAP32[$574 + 8 >> 2] = 0;
           HEAP32[$306 >> 2] = $573;
           HEAP32[$305 >> 2] = HEAP32[$306 >> 2];
           $576 = HEAP32[$310 >> 2] | 0;
           $578 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$310 >> 2] | 0) | 0;
           __THREW__ = 0;
           invoke_viii(8, $572 | 0, $576 | 0, $578 | 0);
           $579 = __THREW__;
           __THREW__ = 0;
           if ($579 & 1) {
            $689 = ___cxa_find_matching_catch_2() | 0;
            HEAP32[$392 >> 2] = $689;
            HEAP32[$393 >> 2] = tempRet0;
           } else {
            $581 = HEAP32[$391 >> 2] | 0;
            HEAP32[$303 >> 2] = $401;
            HEAP32[$304 >> 2] = $581;
            $583 = HEAP32[$304 >> 2] | 0;
            HEAP32[$301 >> 2] = HEAP32[$303 >> 2];
            HEAP32[$302 >> 2] = $583;
            $584 = HEAP32[$301 >> 2] | 0;
            HEAP32[$300 >> 2] = HEAP32[$302 >> 2];
            HEAP32[$299 >> 2] = HEAP32[$300 >> 2];
            $587 = HEAP32[$299 >> 2] | 0;
            HEAP32[$298 >> 2] = $587;
            HEAP32[$297 >> 2] = HEAP32[$298 >> 2];
            HEAP32[$296 >> 2] = HEAP32[$297 >> 2];
            if ((HEAPU8[(HEAP32[$296 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
             HEAP32[$290 >> 2] = $587;
             HEAP32[$289 >> 2] = HEAP32[$290 >> 2];
             HEAP32[$288 >> 2] = HEAP32[$289 >> 2];
             $605 = HEAP32[HEAP32[$288 >> 2] >> 2] | 0;
            } else {
             HEAP32[$295 >> 2] = $587;
             HEAP32[$294 >> 2] = HEAP32[$295 >> 2];
             HEAP32[$293 >> 2] = HEAP32[$294 >> 2];
             HEAP32[$292 >> 2] = HEAP32[$293 >> 2];
             HEAP32[$291 >> 2] = HEAP32[$292 >> 2];
             $605 = HEAP32[$291 >> 2] | 0;
            }
            HEAP32[$287 >> 2] = $605;
            $606 = HEAP32[$287 >> 2] | 0;
            HEAP32[$286 >> 2] = HEAP32[$302 >> 2];
            $608 = HEAP32[$286 >> 2] | 0;
            HEAP32[$285 >> 2] = $608;
            HEAP32[$284 >> 2] = HEAP32[$285 >> 2];
            HEAP32[$283 >> 2] = HEAP32[$284 >> 2];
            if ((HEAPU8[(HEAP32[$283 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
             HEAP32[$279 >> 2] = $608;
             HEAP32[$278 >> 2] = HEAP32[$279 >> 2];
             HEAP32[$277 >> 2] = HEAP32[$278 >> 2];
             $628 = HEAP32[(HEAP32[$277 >> 2] | 0) + 4 >> 2] | 0;
            } else {
             HEAP32[$282 >> 2] = $608;
             HEAP32[$281 >> 2] = HEAP32[$282 >> 2];
             HEAP32[$280 >> 2] = HEAP32[$281 >> 2];
             $628 = HEAPU8[(HEAP32[$280 >> 2] | 0) + 11 >> 0] | 0;
            }
            __THREW__ = 0;
            $629 = invoke_iiii(47, $584 | 0, $606 | 0, $628 | 0) | 0;
            $630 = __THREW__;
            __THREW__ = 0;
            if ($630 & 1) {
             $691 = ___cxa_find_matching_catch_2() | 0;
             HEAP32[$392 >> 2] = $691;
             HEAP32[$393 >> 2] = tempRet0;
            } else {
             HEAP32[$276 >> 2] = $629;
             $632 = HEAP32[$276 >> 2] | 0;
             HEAP32[$274 >> 2] = $400;
             HEAP32[$275 >> 2] = $632;
             $633 = HEAP32[$274 >> 2] | 0;
             HEAP32[$273 >> 2] = HEAP32[$275 >> 2];
             $635 = HEAP32[$273 >> 2] | 0;
             HEAP32[$633 >> 2] = HEAP32[$635 >> 2];
             HEAP32[$633 + 4 >> 2] = HEAP32[$635 + 4 >> 2];
             HEAP32[$633 + 8 >> 2] = HEAP32[$635 + 8 >> 2];
             HEAP32[$270 >> 2] = HEAP32[$275 >> 2];
             HEAP32[$269 >> 2] = HEAP32[$270 >> 2];
             HEAP32[$268 >> 2] = HEAP32[$269 >> 2];
             HEAP32[$271 >> 2] = HEAP32[$268 >> 2];
             HEAP32[$272 >> 2] = 0;
             while (1) {
              if ((HEAP32[$272 >> 2] | 0) >>> 0 >= 3) break;
              HEAP32[(HEAP32[$271 >> 2] | 0) + (HEAP32[$272 >> 2] << 2) >> 2] = 0;
              HEAP32[$272 >> 2] = (HEAP32[$272 >> 2] | 0) + 1;
             }
             HEAP32[$266 >> 2] = $400;
             HEAP8[$267 >> 0] = 34;
             __THREW__ = 0;
             invoke_vii(47, HEAP32[$266 >> 2] | 0, HEAP8[$267 >> 0] | 0);
             $649 = __THREW__;
             __THREW__ = 0;
             if ($649 & 1) {
              $693 = ___cxa_find_matching_catch_2() | 0;
              HEAP32[$392 >> 2] = $693;
              HEAP32[$393 >> 2] = tempRet0;
             } else {
              HEAP32[$265 >> 2] = HEAP32[$266 >> 2];
              $652 = HEAP32[$265 >> 2] | 0;
              HEAP32[$263 >> 2] = $399;
              HEAP32[$264 >> 2] = $652;
              $653 = HEAP32[$263 >> 2] | 0;
              HEAP32[$262 >> 2] = HEAP32[$264 >> 2];
              $655 = HEAP32[$262 >> 2] | 0;
              HEAP32[$653 >> 2] = HEAP32[$655 >> 2];
              HEAP32[$653 + 4 >> 2] = HEAP32[$655 + 4 >> 2];
              HEAP32[$653 + 8 >> 2] = HEAP32[$655 + 8 >> 2];
              HEAP32[$259 >> 2] = HEAP32[$264 >> 2];
              HEAP32[$258 >> 2] = HEAP32[$259 >> 2];
              HEAP32[$257 >> 2] = HEAP32[$258 >> 2];
              HEAP32[$260 >> 2] = HEAP32[$257 >> 2];
              HEAP32[$261 >> 2] = 0;
              while (1) {
               if ((HEAP32[$261 >> 2] | 0) >>> 0 >= 3) break;
               HEAP32[(HEAP32[$260 >> 2] | 0) + (HEAP32[$261 >> 2] << 2) >> 2] = 0;
               HEAP32[$261 >> 2] = (HEAP32[$261 >> 2] | 0) + 1;
              }
              __THREW__ = 0;
              invoke_vii(58, $571 | 0, $399 | 0);
              $667 = __THREW__;
              __THREW__ = 0;
              if (!($667 & 1)) {
               HEAP8[$402 >> 0] = 0;
               __THREW__ = 0;
               invoke_viii(11, $571 | 0, 41024, 53);
               __THREW__ = 0;
              }
              $695 = ___cxa_find_matching_catch_2() | 0;
              HEAP32[$392 >> 2] = $695;
              HEAP32[$393 >> 2] = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($399);
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($400);
            }
            __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($401);
           }
           if (!(HEAP8[$402 >> 0] & 1)) break;
           ___cxa_free_exception($571 | 0);
          } else {
           __THREW__ = 0;
           invoke_iii(48, $464 + 136 | 0, HEAP32[$391 >> 2] | 0) | 0;
           $700 = __THREW__;
           __THREW__ = 0;
           L64 : do if (!($700 & 1)) {
            HEAP32[$256 >> 2] = $464 + 8;
            $704 = HEAP32[HEAP32[$256 >> 2] >> 2] | 0;
            __THREW__ = 0;
            $707 = invoke_ii(HEAP32[HEAP32[$704 >> 2] >> 2] | 0, $704 | 0) | 0;
            $708 = tempRet0;
            $709 = __THREW__;
            __THREW__ = 0;
            if ($709 & 1) break;
            $711 = $403;
            HEAP32[$711 >> 2] = $707;
            HEAP32[$711 + 4 >> 2] = $708;
            $715 = __ZNK12REAL_TYPEDEFIyEcvyEv($403) | 0;
            $716 = tempRet0;
            $717 = 40744;
            $722 = HEAP32[$717 + 4 >> 2] | 0;
            if ($716 >>> 0 < $722 >>> 0 | (($716 | 0) == ($722 | 0) ? $715 >>> 0 < (HEAP32[$717 >> 2] | 0) >>> 0 : 0)) {
             $728 = ___cxa_allocate_exception(8) | 0;
             HEAP8[$405 >> 0] = 1;
             HEAP32[$254 >> 2] = $404;
             HEAP32[$255 >> 2] = 51349;
             $729 = HEAP32[$254 >> 2] | 0;
             HEAP32[$253 >> 2] = $729;
             $730 = HEAP32[$253 >> 2] | 0;
             HEAP32[$252 >> 2] = $730;
             $731 = HEAP32[$252 >> 2] | 0;
             HEAP32[$731 >> 2] = 0;
             HEAP32[$731 + 4 >> 2] = 0;
             HEAP32[$731 + 8 >> 2] = 0;
             HEAP32[$251 >> 2] = $730;
             HEAP32[$250 >> 2] = HEAP32[$251 >> 2];
             $733 = HEAP32[$255 >> 2] | 0;
             $735 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$255 >> 2] | 0) | 0;
             __THREW__ = 0;
             invoke_viii(8, $729 | 0, $733 | 0, $735 | 0);
             $736 = __THREW__;
             __THREW__ = 0;
             if ($736 & 1) {
              $741 = ___cxa_find_matching_catch_2() | 0;
              HEAP32[$392 >> 2] = $741;
              HEAP32[$393 >> 2] = tempRet0;
             } else {
              __THREW__ = 0;
              invoke_vii(58, $728 | 0, $404 | 0);
              $738 = __THREW__;
              __THREW__ = 0;
              if (!($738 & 1)) {
               HEAP8[$405 >> 0] = 0;
               __THREW__ = 0;
               invoke_viii(11, $728 | 0, 41024, 53);
               __THREW__ = 0;
              }
              $743 = ___cxa_find_matching_catch_2() | 0;
              HEAP32[$392 >> 2] = $743;
              HEAP32[$393 >> 2] = tempRet0;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($404);
             }
             if (!(HEAP8[$405 >> 0] & 1)) break L29;
             ___cxa_free_exception($728 | 0);
             break L29;
            }
            $746 = $464 + 56 | 0;
            HEAP32[$249 >> 2] = $464 + 8;
            $749 = HEAP32[HEAP32[$249 >> 2] >> 2] | 0;
            $752 = HEAP32[(HEAP32[$749 >> 2] | 0) + 20 >> 2] | 0;
            __THREW__ = 0;
            invoke_viii(16, $407 | 0, 0, 0);
            $753 = __THREW__;
            __THREW__ = 0;
            do if ($753 & 1) label = 63; else {
             $755 = 40744;
             __ZN3zim7zsize_tC2Ey($408, HEAP32[$755 >> 2] | 0, HEAP32[$755 + 4 >> 2] | 0);
             __THREW__ = 0;
             HEAP32[$$byval_copy17 >> 2] = HEAP32[$407 >> 2];
             HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$407 + 4 >> 2];
             HEAP32[$$byval_copy20 >> 2] = HEAP32[$408 >> 2];
             HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$408 + 4 >> 2];
             invoke_viiii($752 | 0, $406 | 0, $749 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0);
             $761 = __THREW__;
             __THREW__ = 0;
             if ($761 & 1) {
              label = 63;
              break;
             }
             __THREW__ = 0;
             invoke_vii(82, $746 | 0, $406 | 0);
             $763 = __THREW__;
             __THREW__ = 0;
             if ($763 & 1) {
              $778 = ___cxa_find_matching_catch_4(41024, 0) | 0;
              HEAP32[$392 >> 2] = $778;
              HEAP32[$393 >> 2] = tempRet0;
              __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($406);
              break;
             }
             __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($406);
             __ZN3zim7zsize_tC2Ey($412, (__ZNK3zim10Fileheader15getArticleCountEv($464 + 56 | 0) | 0) << 3, 0);
             HEAP32[$242 >> 2] = $464 + 8;
             $770 = HEAP32[HEAP32[$242 >> 2] >> 2] | 0;
             $772 = __ZNK3zim10Fileheader12getUrlPtrPosEv($464 + 56 | 0) | 0;
             $773 = tempRet0;
             __THREW__ = 0;
             invoke_viii(16, $413 | 0, $772 | 0, $773 | 0);
             $774 = __THREW__;
             __THREW__ = 0;
             if ($774 & 1) break L64;
             HEAP32[$414 >> 2] = HEAP32[$412 >> 2];
             HEAP32[$414 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
             __THREW__ = 0;
             HEAP32[$$byval_copy17 >> 2] = HEAP32[$413 >> 2];
             HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$413 + 4 >> 2];
             HEAP32[$$byval_copy20 >> 2] = HEAP32[$414 >> 2];
             HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$414 + 4 >> 2];
             $812 = invoke_iiii(48, $770 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0) | 0;
             $813 = __THREW__;
             __THREW__ = 0;
             if ($813 & 1) break L64;
             if ($812 ^ 1) {
              $816 = ___cxa_allocate_exception(8) | 0;
              HEAP8[$416 >> 0] = 1;
              HEAP32[$240 >> 2] = $415;
              HEAP32[$241 >> 2] = 51422;
              $817 = HEAP32[$240 >> 2] | 0;
              HEAP32[$239 >> 2] = $817;
              $818 = HEAP32[$239 >> 2] | 0;
              HEAP32[$238 >> 2] = $818;
              $819 = HEAP32[$238 >> 2] | 0;
              HEAP32[$819 >> 2] = 0;
              HEAP32[$819 + 4 >> 2] = 0;
              HEAP32[$819 + 8 >> 2] = 0;
              HEAP32[$237 >> 2] = $818;
              HEAP32[$236 >> 2] = HEAP32[$237 >> 2];
              $821 = HEAP32[$241 >> 2] | 0;
              $823 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$241 >> 2] | 0) | 0;
              __THREW__ = 0;
              invoke_viii(8, $817 | 0, $821 | 0, $823 | 0);
              $824 = __THREW__;
              __THREW__ = 0;
              if ($824 & 1) {
               $829 = ___cxa_find_matching_catch_2() | 0;
               HEAP32[$392 >> 2] = $829;
               HEAP32[$393 >> 2] = tempRet0;
              } else {
               __THREW__ = 0;
               invoke_vii(58, $816 | 0, $415 | 0);
               $826 = __THREW__;
               __THREW__ = 0;
               if (!($826 & 1)) {
                HEAP8[$416 >> 0] = 0;
                __THREW__ = 0;
                invoke_viii(11, $816 | 0, 41024, 53);
                __THREW__ = 0;
               }
               $831 = ___cxa_find_matching_catch_2() | 0;
               HEAP32[$392 >> 2] = $831;
               HEAP32[$393 >> 2] = tempRet0;
               __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($415);
              }
              if (!(HEAP8[$416 >> 0] & 1)) break L29;
              ___cxa_free_exception($816 | 0);
              break L29;
             }
             __THREW__ = 0;
             $834 = invoke_ii(79, 12) | 0;
             $835 = __THREW__;
             __THREW__ = 0;
             if ($835 & 1) break L64;
             HEAP8[$421 >> 0] = 1;
             HEAP32[$235 >> 2] = $464 + 8;
             $839 = HEAP32[HEAP32[$235 >> 2] >> 2] | 0;
             $842 = HEAP32[(HEAP32[$839 >> 2] | 0) + 20 >> 2] | 0;
             $844 = __ZNK3zim10Fileheader12getUrlPtrPosEv($464 + 56 | 0) | 0;
             $845 = tempRet0;
             __THREW__ = 0;
             invoke_viii(16, $419 | 0, $844 | 0, $845 | 0);
             $846 = __THREW__;
             __THREW__ = 0;
             do if ($846 & 1) label = 100; else {
              HEAP32[$420 >> 2] = HEAP32[$412 >> 2];
              HEAP32[$420 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
              __THREW__ = 0;
              HEAP32[$$byval_copy17 >> 2] = HEAP32[$419 >> 2];
              HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$419 + 4 >> 2];
              HEAP32[$$byval_copy20 >> 2] = HEAP32[$420 >> 2];
              HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$420 + 4 >> 2];
              invoke_viiii($842 | 0, $418 | 0, $839 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0);
              $848 = __THREW__;
              __THREW__ = 0;
              if ($848 & 1) {
               label = 100;
               break;
              }
              __THREW__ = 0;
              invoke_vii(50, $834 | 0, $418 | 0);
              $850 = __THREW__;
              __THREW__ = 0;
              if ($850 & 1) {
               $941 = ___cxa_find_matching_catch_2() | 0;
               HEAP32[$392 >> 2] = $941;
               HEAP32[$393 >> 2] = tempRet0;
               __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($418);
               break;
              }
              HEAP8[$421 >> 0] = 0;
              HEAP32[$233 >> 2] = $417;
              HEAP32[$234 >> 2] = $834;
              HEAP32[$231 >> 2] = HEAP32[$233 >> 2];
              HEAP32[$232 >> 2] = $234;
              $853 = HEAP32[$231 >> 2] | 0;
              HEAP32[$230 >> 2] = HEAP32[$232 >> 2];
              $855 = HEAP32[$230 >> 2] | 0;
              HEAP32[$228 >> 2] = $853;
              HEAP32[$229 >> 2] = $855;
              $856 = HEAP32[$228 >> 2] | 0;
              HEAP32[$227 >> 2] = HEAP32[$229 >> 2];
              HEAP32[$856 >> 2] = HEAP32[HEAP32[$227 >> 2] >> 2];
              HEAP32[$212 >> 2] = $464 + 152;
              HEAP32[$213 >> 2] = $417;
              $861 = HEAP32[$212 >> 2] | 0;
              HEAP32[$210 >> 2] = HEAP32[$213 >> 2];
              $863 = HEAP32[$210 >> 2] | 0;
              HEAP32[$209 >> 2] = $863;
              HEAP32[$208 >> 2] = HEAP32[$209 >> 2];
              HEAP32[$211 >> 2] = HEAP32[HEAP32[$208 >> 2] >> 2];
              HEAP32[$207 >> 2] = $863;
              HEAP32[$206 >> 2] = HEAP32[$207 >> 2];
              HEAP32[HEAP32[$206 >> 2] >> 2] = 0;
              $869 = HEAP32[$211 >> 2] | 0;
              HEAP32[$194 >> 2] = $861;
              HEAP32[$195 >> 2] = $869;
              $870 = HEAP32[$194 >> 2] | 0;
              HEAP32[$193 >> 2] = $870;
              HEAP32[$192 >> 2] = HEAP32[$193 >> 2];
              HEAP32[$196 >> 2] = HEAP32[HEAP32[$192 >> 2] >> 2];
              $874 = HEAP32[$195 >> 2] | 0;
              HEAP32[$189 >> 2] = $870;
              HEAP32[$188 >> 2] = HEAP32[$189 >> 2];
              HEAP32[HEAP32[$188 >> 2] >> 2] = $874;
              do if (HEAP32[$196 >> 2] | 0) {
               HEAP32[$187 >> 2] = $870;
               HEAP32[$186 >> 2] = HEAP32[$187 >> 2];
               $881 = HEAP32[$196 >> 2] | 0;
               HEAP32[$190 >> 2] = HEAP32[$186 >> 2];
               HEAP32[$191 >> 2] = $881;
               $882 = HEAP32[$191 >> 2] | 0;
               if (!$882) break;
               FUNCTION_TABLE_vi[HEAP32[(HEAP32[$882 >> 2] | 0) + 8 >> 2] & 255]($882);
              } while (0);
              HEAP32[$199 >> 2] = HEAP32[$213 >> 2];
              HEAP32[$198 >> 2] = HEAP32[$199 >> 2];
              HEAP32[$197 >> 2] = HEAP32[$198 >> 2];
              HEAP32[$200 >> 2] = HEAP32[$197 >> 2];
              $891 = HEAP32[$200 >> 2] | 0;
              HEAP32[$201 >> 2] = $214;
              HEAP32[$202 >> 2] = $891;
              HEAP32[$203 >> 2] = 0;
              HEAP32[$205 >> 2] = $861;
              HEAP32[$204 >> 2] = HEAP32[$205 >> 2];
              HEAP32[$185 >> 2] = $417;
              HEAP32[$182 >> 2] = HEAP32[$185 >> 2];
              HEAP32[$183 >> 2] = 0;
              $894 = HEAP32[$182 >> 2] | 0;
              HEAP32[$181 >> 2] = $894;
              HEAP32[$180 >> 2] = HEAP32[$181 >> 2];
              HEAP32[$184 >> 2] = HEAP32[HEAP32[$180 >> 2] >> 2];
              $898 = HEAP32[$183 >> 2] | 0;
              HEAP32[$177 >> 2] = $894;
              HEAP32[$176 >> 2] = HEAP32[$177 >> 2];
              HEAP32[HEAP32[$176 >> 2] >> 2] = $898;
              do if (HEAP32[$184 >> 2] | 0) {
               HEAP32[$175 >> 2] = $894;
               HEAP32[$174 >> 2] = HEAP32[$175 >> 2];
               $905 = HEAP32[$184 >> 2] | 0;
               HEAP32[$178 >> 2] = HEAP32[$174 >> 2];
               HEAP32[$179 >> 2] = $905;
               $906 = HEAP32[$179 >> 2] | 0;
               if (!$906) break;
               FUNCTION_TABLE_vi[HEAP32[(HEAP32[$906 >> 2] | 0) + 8 >> 2] & 255]($906);
              } while (0);
              __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($418);
              __ZN3zim7zsize_tC2Ey($422, (__ZNK3zim10Fileheader15getArticleCountEv($464 + 56 | 0) | 0) << 2, 0);
              HEAP32[$412 >> 2] = HEAP32[$422 >> 2];
              HEAP32[$412 + 4 >> 2] = HEAP32[$422 + 4 >> 2];
              HEAP32[$173 >> 2] = $464 + 8;
              $916 = HEAP32[HEAP32[$173 >> 2] >> 2] | 0;
              $918 = __ZNK3zim10Fileheader14getTitleIdxPosEv($464 + 56 | 0) | 0;
              $919 = tempRet0;
              __THREW__ = 0;
              invoke_viii(16, $423 | 0, $918 | 0, $919 | 0);
              $920 = __THREW__;
              __THREW__ = 0;
              if ($920 & 1) break L64;
              HEAP32[$424 >> 2] = HEAP32[$412 >> 2];
              HEAP32[$424 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
              __THREW__ = 0;
              HEAP32[$$byval_copy17 >> 2] = HEAP32[$423 >> 2];
              HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$423 + 4 >> 2];
              HEAP32[$$byval_copy20 >> 2] = HEAP32[$424 >> 2];
              HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$424 + 4 >> 2];
              $922 = invoke_iiii(48, $916 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0) | 0;
              $923 = __THREW__;
              __THREW__ = 0;
              if ($923 & 1) break L64;
              if ($922 ^ 1) {
               $926 = ___cxa_allocate_exception(8) | 0;
               HEAP8[$426 >> 0] = 1;
               HEAP32[$171 >> 2] = $425;
               HEAP32[$172 >> 2] = 51422;
               $927 = HEAP32[$171 >> 2] | 0;
               HEAP32[$170 >> 2] = $927;
               $928 = HEAP32[$170 >> 2] | 0;
               HEAP32[$169 >> 2] = $928;
               $929 = HEAP32[$169 >> 2] | 0;
               HEAP32[$929 >> 2] = 0;
               HEAP32[$929 + 4 >> 2] = 0;
               HEAP32[$929 + 8 >> 2] = 0;
               HEAP32[$168 >> 2] = $928;
               HEAP32[$167 >> 2] = HEAP32[$168 >> 2];
               $931 = HEAP32[$172 >> 2] | 0;
               $933 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$172 >> 2] | 0) | 0;
               __THREW__ = 0;
               invoke_viii(8, $927 | 0, $931 | 0, $933 | 0);
               $934 = __THREW__;
               __THREW__ = 0;
               if ($934 & 1) {
                $944 = ___cxa_find_matching_catch_2() | 0;
                HEAP32[$392 >> 2] = $944;
                HEAP32[$393 >> 2] = tempRet0;
               } else {
                __THREW__ = 0;
                invoke_vii(58, $926 | 0, $425 | 0);
                $936 = __THREW__;
                __THREW__ = 0;
                if (!($936 & 1)) {
                 HEAP8[$426 >> 0] = 0;
                 __THREW__ = 0;
                 invoke_viii(11, $926 | 0, 41024, 53);
                 __THREW__ = 0;
                }
                $946 = ___cxa_find_matching_catch_2() | 0;
                HEAP32[$392 >> 2] = $946;
                HEAP32[$393 >> 2] = tempRet0;
                __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($425);
               }
               if (!(HEAP8[$426 >> 0] & 1)) break L29;
               ___cxa_free_exception($926 | 0);
               break L29;
              }
              __THREW__ = 0;
              $949 = invoke_ii(79, 12) | 0;
              $950 = __THREW__;
              __THREW__ = 0;
              if ($950 & 1) break L64;
              HEAP8[$431 >> 0] = 1;
              HEAP32[$166 >> 2] = $464 + 8;
              $954 = HEAP32[HEAP32[$166 >> 2] >> 2] | 0;
              $957 = HEAP32[(HEAP32[$954 >> 2] | 0) + 20 >> 2] | 0;
              $959 = __ZNK3zim10Fileheader14getTitleIdxPosEv($464 + 56 | 0) | 0;
              $960 = tempRet0;
              __THREW__ = 0;
              invoke_viii(16, $429 | 0, $959 | 0, $960 | 0);
              $961 = __THREW__;
              __THREW__ = 0;
              do if ($961 & 1) label = 124; else {
               HEAP32[$430 >> 2] = HEAP32[$412 >> 2];
               HEAP32[$430 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
               __THREW__ = 0;
               HEAP32[$$byval_copy17 >> 2] = HEAP32[$429 >> 2];
               HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$429 + 4 >> 2];
               HEAP32[$$byval_copy20 >> 2] = HEAP32[$430 >> 2];
               HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$430 + 4 >> 2];
               invoke_viiii($957 | 0, $428 | 0, $954 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0);
               $963 = __THREW__;
               __THREW__ = 0;
               if ($963 & 1) {
                label = 124;
                break;
               }
               __THREW__ = 0;
               invoke_vii(50, $949 | 0, $428 | 0);
               $965 = __THREW__;
               __THREW__ = 0;
               if ($965 & 1) {
                $1056 = ___cxa_find_matching_catch_2() | 0;
                HEAP32[$392 >> 2] = $1056;
                HEAP32[$393 >> 2] = tempRet0;
                __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($428);
                break;
               }
               HEAP8[$431 >> 0] = 0;
               HEAP32[$164 >> 2] = $427;
               HEAP32[$165 >> 2] = $949;
               HEAP32[$162 >> 2] = HEAP32[$164 >> 2];
               HEAP32[$163 >> 2] = $165;
               $968 = HEAP32[$162 >> 2] | 0;
               HEAP32[$161 >> 2] = HEAP32[$163 >> 2];
               $970 = HEAP32[$161 >> 2] | 0;
               HEAP32[$159 >> 2] = $968;
               HEAP32[$160 >> 2] = $970;
               $971 = HEAP32[$159 >> 2] | 0;
               HEAP32[$158 >> 2] = HEAP32[$160 >> 2];
               HEAP32[$971 >> 2] = HEAP32[HEAP32[$158 >> 2] >> 2];
               HEAP32[$155 >> 2] = $464 + 148;
               HEAP32[$156 >> 2] = $427;
               $976 = HEAP32[$155 >> 2] | 0;
               HEAP32[$153 >> 2] = HEAP32[$156 >> 2];
               $978 = HEAP32[$153 >> 2] | 0;
               HEAP32[$152 >> 2] = $978;
               HEAP32[$151 >> 2] = HEAP32[$152 >> 2];
               HEAP32[$154 >> 2] = HEAP32[HEAP32[$151 >> 2] >> 2];
               HEAP32[$150 >> 2] = $978;
               HEAP32[$149 >> 2] = HEAP32[$150 >> 2];
               HEAP32[HEAP32[$149 >> 2] >> 2] = 0;
               $984 = HEAP32[$154 >> 2] | 0;
               HEAP32[$137 >> 2] = $976;
               HEAP32[$138 >> 2] = $984;
               $985 = HEAP32[$137 >> 2] | 0;
               HEAP32[$136 >> 2] = $985;
               HEAP32[$135 >> 2] = HEAP32[$136 >> 2];
               HEAP32[$139 >> 2] = HEAP32[HEAP32[$135 >> 2] >> 2];
               $989 = HEAP32[$138 >> 2] | 0;
               HEAP32[$132 >> 2] = $985;
               HEAP32[$131 >> 2] = HEAP32[$132 >> 2];
               HEAP32[HEAP32[$131 >> 2] >> 2] = $989;
               do if (HEAP32[$139 >> 2] | 0) {
                HEAP32[$130 >> 2] = $985;
                HEAP32[$129 >> 2] = HEAP32[$130 >> 2];
                $996 = HEAP32[$139 >> 2] | 0;
                HEAP32[$133 >> 2] = HEAP32[$129 >> 2];
                HEAP32[$134 >> 2] = $996;
                $997 = HEAP32[$134 >> 2] | 0;
                if (!$997) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$997 >> 2] | 0) + 8 >> 2] & 255]($997);
               } while (0);
               HEAP32[$142 >> 2] = HEAP32[$156 >> 2];
               HEAP32[$141 >> 2] = HEAP32[$142 >> 2];
               HEAP32[$140 >> 2] = HEAP32[$141 >> 2];
               HEAP32[$143 >> 2] = HEAP32[$140 >> 2];
               $1006 = HEAP32[$143 >> 2] | 0;
               HEAP32[$144 >> 2] = $157;
               HEAP32[$145 >> 2] = $1006;
               HEAP32[$146 >> 2] = 0;
               HEAP32[$148 >> 2] = $976;
               HEAP32[$147 >> 2] = HEAP32[$148 >> 2];
               HEAP32[$128 >> 2] = $427;
               HEAP32[$125 >> 2] = HEAP32[$128 >> 2];
               HEAP32[$126 >> 2] = 0;
               $1009 = HEAP32[$125 >> 2] | 0;
               HEAP32[$124 >> 2] = $1009;
               HEAP32[$123 >> 2] = HEAP32[$124 >> 2];
               HEAP32[$127 >> 2] = HEAP32[HEAP32[$123 >> 2] >> 2];
               $1013 = HEAP32[$126 >> 2] | 0;
               HEAP32[$120 >> 2] = $1009;
               HEAP32[$119 >> 2] = HEAP32[$120 >> 2];
               HEAP32[HEAP32[$119 >> 2] >> 2] = $1013;
               do if (HEAP32[$127 >> 2] | 0) {
                HEAP32[$118 >> 2] = $1009;
                HEAP32[$117 >> 2] = HEAP32[$118 >> 2];
                $1020 = HEAP32[$127 >> 2] | 0;
                HEAP32[$121 >> 2] = HEAP32[$117 >> 2];
                HEAP32[$122 >> 2] = $1020;
                $1021 = HEAP32[$122 >> 2] | 0;
                if (!$1021) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1021 >> 2] | 0) + 8 >> 2] & 255]($1021);
               } while (0);
               __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($428);
               __ZN3zim7zsize_tC2Ey($432, (__ZNK3zim10Fileheader15getClusterCountEv($464 + 56 | 0) | 0) << 3, 0);
               HEAP32[$412 >> 2] = HEAP32[$432 >> 2];
               HEAP32[$412 + 4 >> 2] = HEAP32[$432 + 4 >> 2];
               HEAP32[$116 >> 2] = $464 + 8;
               $1031 = HEAP32[HEAP32[$116 >> 2] >> 2] | 0;
               $1033 = __ZNK3zim10Fileheader16getClusterPtrPosEv($464 + 56 | 0) | 0;
               $1034 = tempRet0;
               __THREW__ = 0;
               invoke_viii(16, $433 | 0, $1033 | 0, $1034 | 0);
               $1035 = __THREW__;
               __THREW__ = 0;
               if ($1035 & 1) break L64;
               HEAP32[$434 >> 2] = HEAP32[$412 >> 2];
               HEAP32[$434 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
               __THREW__ = 0;
               HEAP32[$$byval_copy17 >> 2] = HEAP32[$433 >> 2];
               HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$433 + 4 >> 2];
               HEAP32[$$byval_copy20 >> 2] = HEAP32[$434 >> 2];
               HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$434 + 4 >> 2];
               $1037 = invoke_iiii(48, $1031 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0) | 0;
               $1038 = __THREW__;
               __THREW__ = 0;
               if ($1038 & 1) break L64;
               if ($1037 ^ 1) {
                $1041 = ___cxa_allocate_exception(8) | 0;
                HEAP8[$436 >> 0] = 1;
                HEAP32[$114 >> 2] = $435;
                HEAP32[$115 >> 2] = 51422;
                $1042 = HEAP32[$114 >> 2] | 0;
                HEAP32[$113 >> 2] = $1042;
                $1043 = HEAP32[$113 >> 2] | 0;
                HEAP32[$112 >> 2] = $1043;
                $1044 = HEAP32[$112 >> 2] | 0;
                HEAP32[$1044 >> 2] = 0;
                HEAP32[$1044 + 4 >> 2] = 0;
                HEAP32[$1044 + 8 >> 2] = 0;
                HEAP32[$111 >> 2] = $1043;
                HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
                $1046 = HEAP32[$115 >> 2] | 0;
                $1048 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$115 >> 2] | 0) | 0;
                __THREW__ = 0;
                invoke_viii(8, $1042 | 0, $1046 | 0, $1048 | 0);
                $1049 = __THREW__;
                __THREW__ = 0;
                if ($1049 & 1) {
                 $1059 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$392 >> 2] = $1059;
                 HEAP32[$393 >> 2] = tempRet0;
                } else {
                 __THREW__ = 0;
                 invoke_vii(58, $1041 | 0, $435 | 0);
                 $1051 = __THREW__;
                 __THREW__ = 0;
                 if (!($1051 & 1)) {
                  HEAP8[$436 >> 0] = 0;
                  __THREW__ = 0;
                  invoke_viii(11, $1041 | 0, 41024, 53);
                  __THREW__ = 0;
                 }
                 $1061 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$392 >> 2] = $1061;
                 HEAP32[$393 >> 2] = tempRet0;
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($435);
                }
                if (!(HEAP8[$436 >> 0] & 1)) break L29;
                ___cxa_free_exception($1041 | 0);
                break L29;
               }
               __THREW__ = 0;
               $1064 = invoke_ii(79, 12) | 0;
               $1065 = __THREW__;
               __THREW__ = 0;
               if ($1065 & 1) break L64;
               HEAP8[$441 >> 0] = 1;
               HEAP32[$109 >> 2] = $464 + 8;
               $1069 = HEAP32[HEAP32[$109 >> 2] >> 2] | 0;
               $1072 = HEAP32[(HEAP32[$1069 >> 2] | 0) + 20 >> 2] | 0;
               $1074 = __ZNK3zim10Fileheader16getClusterPtrPosEv($464 + 56 | 0) | 0;
               $1075 = tempRet0;
               __THREW__ = 0;
               invoke_viii(16, $439 | 0, $1074 | 0, $1075 | 0);
               $1076 = __THREW__;
               __THREW__ = 0;
               do if ($1076 & 1) label = 144; else {
                HEAP32[$440 >> 2] = HEAP32[$412 >> 2];
                HEAP32[$440 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
                __THREW__ = 0;
                HEAP32[$$byval_copy17 >> 2] = HEAP32[$439 >> 2];
                HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$439 + 4 >> 2];
                HEAP32[$$byval_copy20 >> 2] = HEAP32[$440 >> 2];
                HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$440 + 4 >> 2];
                invoke_viiii($1072 | 0, $438 | 0, $1069 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0);
                $1078 = __THREW__;
                __THREW__ = 0;
                if ($1078 & 1) {
                 label = 144;
                 break;
                }
                __THREW__ = 0;
                invoke_vii(50, $1064 | 0, $438 | 0);
                $1080 = __THREW__;
                __THREW__ = 0;
                if ($1080 & 1) {
                 $1147 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$392 >> 2] = $1147;
                 HEAP32[$393 >> 2] = tempRet0;
                 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($438);
                 break;
                }
                HEAP8[$441 >> 0] = 0;
                HEAP32[$107 >> 2] = $437;
                HEAP32[$108 >> 2] = $1064;
                HEAP32[$105 >> 2] = HEAP32[$107 >> 2];
                HEAP32[$106 >> 2] = $108;
                $1083 = HEAP32[$105 >> 2] | 0;
                HEAP32[$104 >> 2] = HEAP32[$106 >> 2];
                $1085 = HEAP32[$104 >> 2] | 0;
                HEAP32[$102 >> 2] = $1083;
                HEAP32[$103 >> 2] = $1085;
                $1086 = HEAP32[$102 >> 2] | 0;
                HEAP32[$101 >> 2] = HEAP32[$103 >> 2];
                HEAP32[$1086 >> 2] = HEAP32[HEAP32[$101 >> 2] >> 2];
                HEAP32[$98 >> 2] = $464 + 156;
                HEAP32[$99 >> 2] = $437;
                $1091 = HEAP32[$98 >> 2] | 0;
                HEAP32[$96 >> 2] = HEAP32[$99 >> 2];
                $1093 = HEAP32[$96 >> 2] | 0;
                HEAP32[$95 >> 2] = $1093;
                HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
                HEAP32[$97 >> 2] = HEAP32[HEAP32[$94 >> 2] >> 2];
                HEAP32[$93 >> 2] = $1093;
                HEAP32[$92 >> 2] = HEAP32[$93 >> 2];
                HEAP32[HEAP32[$92 >> 2] >> 2] = 0;
                $1099 = HEAP32[$97 >> 2] | 0;
                HEAP32[$80 >> 2] = $1091;
                HEAP32[$81 >> 2] = $1099;
                $1100 = HEAP32[$80 >> 2] | 0;
                HEAP32[$79 >> 2] = $1100;
                HEAP32[$78 >> 2] = HEAP32[$79 >> 2];
                HEAP32[$82 >> 2] = HEAP32[HEAP32[$78 >> 2] >> 2];
                $1104 = HEAP32[$81 >> 2] | 0;
                HEAP32[$75 >> 2] = $1100;
                HEAP32[$74 >> 2] = HEAP32[$75 >> 2];
                HEAP32[HEAP32[$74 >> 2] >> 2] = $1104;
                do if (HEAP32[$82 >> 2] | 0) {
                 HEAP32[$73 >> 2] = $1100;
                 HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
                 $1111 = HEAP32[$82 >> 2] | 0;
                 HEAP32[$76 >> 2] = HEAP32[$72 >> 2];
                 HEAP32[$77 >> 2] = $1111;
                 $1112 = HEAP32[$77 >> 2] | 0;
                 if (!$1112) break;
                 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1112 >> 2] | 0) + 8 >> 2] & 255]($1112);
                } while (0);
                HEAP32[$85 >> 2] = HEAP32[$99 >> 2];
                HEAP32[$84 >> 2] = HEAP32[$85 >> 2];
                HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
                HEAP32[$86 >> 2] = HEAP32[$83 >> 2];
                $1121 = HEAP32[$86 >> 2] | 0;
                HEAP32[$87 >> 2] = $100;
                HEAP32[$88 >> 2] = $1121;
                HEAP32[$89 >> 2] = 0;
                HEAP32[$91 >> 2] = $1091;
                HEAP32[$90 >> 2] = HEAP32[$91 >> 2];
                HEAP32[$71 >> 2] = $437;
                HEAP32[$68 >> 2] = HEAP32[$71 >> 2];
                HEAP32[$69 >> 2] = 0;
                $1124 = HEAP32[$68 >> 2] | 0;
                HEAP32[$67 >> 2] = $1124;
                HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
                HEAP32[$70 >> 2] = HEAP32[HEAP32[$66 >> 2] >> 2];
                $1128 = HEAP32[$69 >> 2] | 0;
                HEAP32[$63 >> 2] = $1124;
                HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
                HEAP32[HEAP32[$62 >> 2] >> 2] = $1128;
                do if (HEAP32[$70 >> 2] | 0) {
                 HEAP32[$61 >> 2] = $1124;
                 HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
                 $1135 = HEAP32[$70 >> 2] | 0;
                 HEAP32[$64 >> 2] = HEAP32[$60 >> 2];
                 HEAP32[$65 >> 2] = $1135;
                 $1136 = HEAP32[$65 >> 2] | 0;
                 if (!$1136) break;
                 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1136 >> 2] | 0) + 8 >> 2] & 255]($1136);
                } while (0);
                __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($438);
                __THREW__ = 0;
                $1141 = invoke_ii(93, $464 | 0) | 0;
                $1142 = __THREW__;
                __THREW__ = 0;
                if ($1142 & 1) break L64;
                HEAP32[$442 >> 2] = $1141;
                do if (__ZNK12REAL_TYPEDEFIjEcvbEv($442) | 0) {
                 __THREW__ = 0;
                 $1150 = invoke_ii(93, $464 | 0) | 0;
                 $1151 = __THREW__;
                 __THREW__ = 0;
                 if ($1151 & 1) break L64;
                 HEAP32[$445 >> 2] = $1150;
                 $1154 = (__ZNK12REAL_TYPEDEFIjEcvjEv($445) | 0) - 1 | 0;
                 __THREW__ = 0;
                 invoke_vii(59, $444 | 0, $1154 | 0);
                 $1155 = __THREW__;
                 __THREW__ = 0;
                 if ($1155 & 1) break L64;
                 __THREW__ = 0;
                 HEAP32[$$byval_copy20 >> 2] = HEAP32[$444 >> 2];
                 $1157 = invoke_iii(39, $464 | 0, $$byval_copy20 | 0) | 0;
                 $1158 = tempRet0;
                 $1159 = __THREW__;
                 __THREW__ = 0;
                 if ($1159 & 1) break L64;
                 $1161 = $443;
                 HEAP32[$1161 >> 2] = $1157;
                 HEAP32[$1161 + 4 >> 2] = $1158;
                 $1165 = $443;
                 $1167 = HEAP32[$1165 >> 2] | 0;
                 $1170 = HEAP32[$1165 + 4 >> 2] | 0;
                 HEAP32[$59 >> 2] = $464;
                 $1173 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$59 >> 2] >> 2] | 0) | 0;
                 $1175 = $446;
                 HEAP32[$1175 >> 2] = $1173;
                 HEAP32[$1175 + 4 >> 2] = tempRet0;
                 $1179 = $446;
                 $1184 = HEAP32[$1179 + 4 >> 2] | 0;
                 if (!($1170 >>> 0 > $1184 >>> 0 | (($1170 | 0) == ($1184 | 0) ? $1167 >>> 0 > (HEAP32[$1179 >> 2] | 0) >>> 0 : 0))) break;
                 $1190 = ___cxa_allocate_exception(8) | 0;
                 HEAP8[$448 >> 0] = 1;
                 HEAP32[$57 >> 2] = $447;
                 HEAP32[$58 >> 2] = 51447;
                 $1191 = HEAP32[$57 >> 2] | 0;
                 HEAP32[$56 >> 2] = $1191;
                 $1192 = HEAP32[$56 >> 2] | 0;
                 HEAP32[$55 >> 2] = $1192;
                 $1193 = HEAP32[$55 >> 2] | 0;
                 HEAP32[$1193 >> 2] = 0;
                 HEAP32[$1193 + 4 >> 2] = 0;
                 HEAP32[$1193 + 8 >> 2] = 0;
                 HEAP32[$54 >> 2] = $1192;
                 HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
                 $1195 = HEAP32[$58 >> 2] | 0;
                 $1197 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$58 >> 2] | 0) | 0;
                 __THREW__ = 0;
                 invoke_viii(8, $1191 | 0, $1195 | 0, $1197 | 0);
                 $1198 = __THREW__;
                 __THREW__ = 0;
                 if ($1198 & 1) {
                  $1203 = ___cxa_find_matching_catch_2() | 0;
                  HEAP32[$392 >> 2] = $1203;
                  HEAP32[$393 >> 2] = tempRet0;
                 } else {
                  __THREW__ = 0;
                  invoke_vii(58, $1190 | 0, $447 | 0);
                  $1200 = __THREW__;
                  __THREW__ = 0;
                  if (!($1200 & 1)) {
                   HEAP8[$448 >> 0] = 0;
                   __THREW__ = 0;
                   invoke_viii(11, $1190 | 0, 41024, 53);
                   __THREW__ = 0;
                  }
                  $1205 = ___cxa_find_matching_catch_2() | 0;
                  HEAP32[$392 >> 2] = $1205;
                  HEAP32[$393 >> 2] = tempRet0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($447);
                 }
                 if (!(HEAP8[$448 >> 0] & 1)) break L29;
                 ___cxa_free_exception($1190 | 0);
                 break L29;
                } while (0);
                do if (__ZNK3zim10Fileheader11hasChecksumEv($464 + 56 | 0) | 0) {
                 __THREW__ = 0;
                 $1211 = invoke_ii(94, $464 + 56 | 0) | 0;
                 $1212 = tempRet0;
                 $1213 = __THREW__;
                 __THREW__ = 0;
                 if ($1213 & 1) break L64;
                 HEAP32[$52 >> 2] = $464;
                 $1217 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$52 >> 2] >> 2] | 0) | 0;
                 $1219 = $449;
                 HEAP32[$1219 >> 2] = $1217;
                 HEAP32[$1219 + 4 >> 2] = tempRet0;
                 $1223 = $449;
                 $1229 = _i64Subtract(HEAP32[$1223 >> 2] | 0, HEAP32[$1223 + 4 >> 2] | 0, 16, 0) | 0;
                 if (!(($1211 | 0) != ($1229 | 0) | ($1212 | 0) != (tempRet0 | 0))) break;
                 $1234 = ___cxa_allocate_exception(8) | 0;
                 HEAP8[$451 >> 0] = 1;
                 HEAP32[$50 >> 2] = $450;
                 HEAP32[$51 >> 2] = 51503;
                 $1235 = HEAP32[$50 >> 2] | 0;
                 HEAP32[$49 >> 2] = $1235;
                 $1236 = HEAP32[$49 >> 2] | 0;
                 HEAP32[$48 >> 2] = $1236;
                 $1237 = HEAP32[$48 >> 2] | 0;
                 HEAP32[$1237 >> 2] = 0;
                 HEAP32[$1237 + 4 >> 2] = 0;
                 HEAP32[$1237 + 8 >> 2] = 0;
                 HEAP32[$47 >> 2] = $1236;
                 HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
                 $1239 = HEAP32[$51 >> 2] | 0;
                 $1241 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$51 >> 2] | 0) | 0;
                 __THREW__ = 0;
                 invoke_viii(8, $1235 | 0, $1239 | 0, $1241 | 0);
                 $1242 = __THREW__;
                 __THREW__ = 0;
                 if ($1242 & 1) {
                  $1247 = ___cxa_find_matching_catch_2() | 0;
                  HEAP32[$392 >> 2] = $1247;
                  HEAP32[$393 >> 2] = tempRet0;
                 } else {
                  __THREW__ = 0;
                  invoke_vii(58, $1234 | 0, $450 | 0);
                  $1244 = __THREW__;
                  __THREW__ = 0;
                  if (!($1244 & 1)) {
                   HEAP8[$451 >> 0] = 0;
                   __THREW__ = 0;
                   invoke_viii(11, $1234 | 0, 41024, 53);
                   __THREW__ = 0;
                  }
                  $1249 = ___cxa_find_matching_catch_2() | 0;
                  HEAP32[$392 >> 2] = $1249;
                  HEAP32[$393 >> 2] = tempRet0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($450);
                 }
                 if (!(HEAP8[$451 >> 0] & 1)) break L29;
                 ___cxa_free_exception($1234 | 0);
                 break L29;
                } while (0);
                $1253 = __ZNK3zim10Fileheader12getUrlPtrPosEv($464 + 56 | 0) | 0;
                $1254 = tempRet0;
                $1256 = __ZNK3zim10Fileheader14getMimeListPosEv($464 + 56 | 0) | 0;
                $1258 = _i64Subtract($1253 | 0, $1254 | 0, $1256 | 0, tempRet0 | 0) | 0;
                __ZN3zim7zsize_tC2Ey($452, $1258, tempRet0);
                HEAP32[$412 >> 2] = HEAP32[$452 >> 2];
                HEAP32[$412 + 4 >> 2] = HEAP32[$452 + 4 >> 2];
                HEAP32[$45 >> 2] = $464 + 8;
                $1262 = HEAP32[HEAP32[$45 >> 2] >> 2] | 0;
                $1265 = HEAP32[(HEAP32[$1262 >> 2] | 0) + 20 >> 2] | 0;
                $1267 = __ZNK3zim10Fileheader14getMimeListPosEv($464 + 56 | 0) | 0;
                $1268 = tempRet0;
                __THREW__ = 0;
                invoke_viii(16, $454 | 0, $1267 | 0, $1268 | 0);
                $1269 = __THREW__;
                __THREW__ = 0;
                if ($1269 & 1) break L64;
                HEAP32[$455 >> 2] = HEAP32[$412 >> 2];
                HEAP32[$455 + 4 >> 2] = HEAP32[$412 + 4 >> 2];
                __THREW__ = 0;
                HEAP32[$$byval_copy17 >> 2] = HEAP32[$454 >> 2];
                HEAP32[$$byval_copy17 + 4 >> 2] = HEAP32[$454 + 4 >> 2];
                HEAP32[$$byval_copy20 >> 2] = HEAP32[$455 >> 2];
                HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$455 + 4 >> 2];
                invoke_viiii($1265 | 0, $453 | 0, $1262 | 0, $$byval_copy17 | 0, $$byval_copy20 | 0);
                $1271 = __THREW__;
                __THREW__ = 0;
                if ($1271 & 1) break L64;
                __THREW__ = 0;
                invoke_viii(16, $456 | 0, 0, 0);
                $1273 = __THREW__;
                __THREW__ = 0;
                L199 : do if ($1273 & 1) label = 176; else {
                 while (1) {
                  $1275 = $456;
                  $1280 = HEAP32[$1275 + 4 >> 2] | 0;
                  $1281 = $412;
                  $1286 = HEAP32[$1281 + 4 >> 2] | 0;
                  if (!($1280 >>> 0 < $1286 >>> 0 | (($1280 | 0) == ($1286 | 0) ? (HEAP32[$1275 >> 2] | 0) >>> 0 < (HEAP32[$1281 >> 2] | 0) >>> 0 : 0))) {
                   label = 193;
                   break;
                  }
                  HEAP32[$44 >> 2] = $453;
                  $1293 = HEAP32[HEAP32[$44 >> 2] >> 2] | 0;
                  $1296 = HEAP32[(HEAP32[$1293 >> 2] | 0) + 8 >> 2] | 0;
                  HEAP32[$458 >> 2] = HEAP32[$456 >> 2];
                  HEAP32[$458 + 4 >> 2] = HEAP32[$456 + 4 >> 2];
                  __THREW__ = 0;
                  HEAP32[$$byval_copy20 >> 2] = HEAP32[$458 >> 2];
                  HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$458 + 4 >> 2];
                  $1297 = invoke_iii($1296 | 0, $1293 | 0, $$byval_copy20 | 0) | 0;
                  $1298 = __THREW__;
                  __THREW__ = 0;
                  if ($1298 & 1) {
                   label = 176;
                   break L199;
                  }
                  $1301 = $457;
                  HEAP32[$1301 >> 2] = _strlen($1297) | 0;
                  HEAP32[$1301 + 4 >> 2] = 0;
                  $1305 = $457;
                  if ((HEAP32[$1305 >> 2] | 0) == 0 & (HEAP32[$1305 + 4 >> 2] | 0) == 0) {
                   label = 193;
                   break;
                  }
                  $1316 = $456;
                  $1322 = $457;
                  $1328 = _i64Add(HEAP32[$1316 >> 2] | 0, HEAP32[$1316 + 4 >> 2] | 0, HEAP32[$1322 >> 2] | 0, HEAP32[$1322 + 4 >> 2] | 0) | 0;
                  $1329 = tempRet0;
                  $1330 = $412;
                  $1335 = HEAP32[$1330 + 4 >> 2] | 0;
                  if ($1329 >>> 0 > $1335 >>> 0 | (($1329 | 0) == ($1335 | 0) ? $1328 >>> 0 >= (HEAP32[$1330 >> 2] | 0) >>> 0 : 0)) {
                   label = 178;
                   break;
                  }
                  HEAP32[$37 >> 2] = $453;
                  $1360 = HEAP32[HEAP32[$37 >> 2] >> 2] | 0;
                  $1363 = HEAP32[(HEAP32[$1360 >> 2] | 0) + 8 >> 2] | 0;
                  HEAP32[$462 >> 2] = HEAP32[$456 >> 2];
                  HEAP32[$462 + 4 >> 2] = HEAP32[$456 + 4 >> 2];
                  __THREW__ = 0;
                  HEAP32[$$byval_copy20 >> 2] = HEAP32[$462 >> 2];
                  HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$462 + 4 >> 2];
                  $1364 = invoke_iii($1363 | 0, $1360 | 0, $$byval_copy20 | 0) | 0;
                  $1365 = __THREW__;
                  __THREW__ = 0;
                  if ($1365 & 1) {
                   label = 176;
                   break L199;
                  }
                  $1369 = HEAP32[$457 >> 2] | 0;
                  HEAP32[$34 >> 2] = $461;
                  HEAP32[$35 >> 2] = $1364;
                  HEAP32[$36 >> 2] = $1369;
                  $1373 = HEAP32[$34 >> 2] | 0;
                  HEAP32[$33 >> 2] = $1373;
                  $1374 = HEAP32[$33 >> 2] | 0;
                  HEAP32[$32 >> 2] = $1374;
                  $1375 = HEAP32[$32 >> 2] | 0;
                  HEAP32[$1375 >> 2] = 0;
                  HEAP32[$1375 + 4 >> 2] = 0;
                  HEAP32[$1375 + 8 >> 2] = 0;
                  HEAP32[$31 >> 2] = $1374;
                  HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
                  __THREW__ = 0;
                  invoke_viii(8, $1373 | 0, HEAP32[$35 >> 2] | 0, HEAP32[$36 >> 2] | 0);
                  $1379 = __THREW__;
                  __THREW__ = 0;
                  if ($1379 & 1) {
                   label = 176;
                   break L199;
                  }
                  HEAP32[$27 >> 2] = $464 + 356;
                  HEAP32[$28 >> 2] = $461;
                  $1382 = HEAP32[$27 >> 2] | 0;
                  $1384 = HEAP32[$1382 + 4 >> 2] | 0;
                  HEAP32[$26 >> 2] = $1382;
                  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
                  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
                  if (($1384 | 0) != (HEAP32[HEAP32[$24 >> 2] >> 2] | 0)) {
                   HEAP32[$21 >> 2] = $29;
                   HEAP32[$22 >> 2] = $1382;
                   HEAP32[$23 >> 2] = 1;
                   HEAP32[$5 >> 2] = $1382;
                   HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
                   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
                   $1394 = HEAP32[$3 >> 2] | 0;
                   HEAP32[$2 >> 2] = HEAP32[$1382 + 4 >> 2];
                   $1397 = HEAP32[$2 >> 2] | 0;
                   $1398 = HEAP32[$28 >> 2] | 0;
                   HEAP32[$16 >> 2] = $1394;
                   HEAP32[$17 >> 2] = $1397;
                   HEAP32[$18 >> 2] = $1398;
                   $1399 = HEAP32[$16 >> 2] | 0;
                   $1400 = HEAP32[$17 >> 2] | 0;
                   HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
                   $1402 = HEAP32[$15 >> 2] | 0;
                   HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
                   HEAP32[$11 >> 2] = $1399;
                   HEAP32[$12 >> 2] = $1400;
                   HEAP32[$13 >> 2] = $1402;
                   $1403 = HEAP32[$11 >> 2] | 0;
                   $1404 = HEAP32[$12 >> 2] | 0;
                   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
                   $1406 = HEAP32[$10 >> 2] | 0;
                   HEAP32[$7 >> 2] = $1403;
                   HEAP32[$8 >> 2] = $1404;
                   HEAP32[$9 >> 2] = $1406;
                   $1407 = HEAP32[$8 >> 2] | 0;
                   HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
                   __THREW__ = 0;
                   invoke_vii(55, $1407 | 0, HEAP32[$6 >> 2] | 0);
                   $1410 = __THREW__;
                   __THREW__ = 0;
                   if ($1410 & 1) {
                    label = 192;
                    break;
                   }
                   HEAP32[$20 >> 2] = $29;
                   $1412 = $1382 + 4 | 0;
                   HEAP32[$1412 >> 2] = (HEAP32[$1412 >> 2] | 0) + 12;
                  } else {
                   __THREW__ = 0;
                   invoke_vii(83, $1382 | 0, HEAP32[$28 >> 2] | 0);
                   $1416 = __THREW__;
                   __THREW__ = 0;
                   if ($1416 & 1) {
                    label = 192;
                    break;
                   }
                  }
                  $1418 = $457;
                  $1424 = _i64Add(HEAP32[$1418 >> 2] | 0, HEAP32[$1418 + 4 >> 2] | 0, 1, 0) | 0;
                  $1426 = $463;
                  HEAP32[$1426 >> 2] = $1424;
                  HEAP32[$1426 + 4 >> 2] = tempRet0;
                  __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($456, $463) | 0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($461);
                 }
                 if ((label | 0) == 178) {
                  $1341 = ___cxa_allocate_exception(8) | 0;
                  HEAP8[$460 >> 0] = 1;
                  HEAP32[$42 >> 2] = $459;
                  HEAP32[$43 >> 2] = 51534;
                  $1342 = HEAP32[$42 >> 2] | 0;
                  HEAP32[$41 >> 2] = $1342;
                  $1343 = HEAP32[$41 >> 2] | 0;
                  HEAP32[$40 >> 2] = $1343;
                  $1344 = HEAP32[$40 >> 2] | 0;
                  HEAP32[$1344 >> 2] = 0;
                  HEAP32[$1344 + 4 >> 2] = 0;
                  HEAP32[$1344 + 8 >> 2] = 0;
                  HEAP32[$39 >> 2] = $1343;
                  HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
                  $1346 = HEAP32[$43 >> 2] | 0;
                  $1348 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$43 >> 2] | 0) | 0;
                  __THREW__ = 0;
                  invoke_viii(8, $1342 | 0, $1346 | 0, $1348 | 0);
                  $1349 = __THREW__;
                  __THREW__ = 0;
                  if ($1349 & 1) {
                   $1354 = ___cxa_find_matching_catch_2() | 0;
                   HEAP32[$392 >> 2] = $1354;
                   HEAP32[$393 >> 2] = tempRet0;
                  } else {
                   __THREW__ = 0;
                   invoke_vii(58, $1341 | 0, $459 | 0);
                   $1351 = __THREW__;
                   __THREW__ = 0;
                   if (!($1351 & 1)) {
                    HEAP8[$460 >> 0] = 0;
                    __THREW__ = 0;
                    invoke_viii(11, $1341 | 0, 41024, 53);
                    __THREW__ = 0;
                   }
                   $1356 = ___cxa_find_matching_catch_2() | 0;
                   HEAP32[$392 >> 2] = $1356;
                   HEAP32[$393 >> 2] = tempRet0;
                   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($459);
                  }
                  if (!(HEAP8[$460 >> 0] & 1)) break;
                  ___cxa_free_exception($1341 | 0);
                  break;
                 } else if ((label | 0) == 192) {
                  $1430 = ___cxa_find_matching_catch_2() | 0;
                  HEAP32[$392 >> 2] = $1430;
                  HEAP32[$393 >> 2] = tempRet0;
                  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($461);
                  break;
                 } else if ((label | 0) == 193) {
                  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($453);
                  STACKTOP = sp;
                  return;
                 }
                } while (0);
                if ((label | 0) == 176) {
                 $1314 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$392 >> 2] = $1314;
                 HEAP32[$393 >> 2] = tempRet0;
                }
                __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($453);
                break L29;
               } while (0);
               if ((label | 0) == 144) {
                $1145 = ___cxa_find_matching_catch_2() | 0;
                HEAP32[$392 >> 2] = $1145;
                HEAP32[$393 >> 2] = tempRet0;
               }
               if (!(HEAP8[$441 >> 0] & 1)) break L29;
               __ZdlPv($1064);
               break L29;
              } while (0);
              if ((label | 0) == 124) {
               $1054 = ___cxa_find_matching_catch_2() | 0;
               HEAP32[$392 >> 2] = $1054;
               HEAP32[$393 >> 2] = tempRet0;
              }
              if (!(HEAP8[$431 >> 0] & 1)) break L29;
              __ZdlPv($949);
              break L29;
             } while (0);
             if ((label | 0) == 100) {
              $939 = ___cxa_find_matching_catch_2() | 0;
              HEAP32[$392 >> 2] = $939;
              HEAP32[$393 >> 2] = tempRet0;
             }
             if (!(HEAP8[$421 >> 0] & 1)) break L29;
             __ZdlPv($834);
             break L29;
            } while (0);
            if ((label | 0) == 63) {
             $776 = ___cxa_find_matching_catch_4(41024, 0) | 0;
             HEAP32[$392 >> 2] = $776;
             HEAP32[$393 >> 2] = tempRet0;
            }
            $780 = HEAP32[$393 >> 2] | 0;
            $782 = ($780 | 0) == (_llvm_eh_typeid_for(41024) | 0);
            $784 = ___cxa_begin_catch(HEAP32[$392 >> 2] | 0) | 0;
            if ($782) {
             HEAP32[$411 >> 2] = $784;
             $785 = ___cxa_allocate_exception(8) | 0;
             __ZN3zim18ZimFileFormatErrorC2ERKS0_($785, HEAP32[$411 >> 2] | 0);
             __THREW__ = 0;
             invoke_viii(11, $785 | 0, 41024, 53);
             __THREW__ = 0;
             $788 = ___cxa_find_matching_catch_2() | 0;
             HEAP32[$392 >> 2] = $788;
             HEAP32[$393 >> 2] = tempRet0;
             __THREW__ = 0;
             invoke_v(3);
             $790 = __THREW__;
             __THREW__ = 0;
             if (!($790 & 1)) break L29;
             $1488 = ___cxa_find_matching_catch_3(0) | 0;
             $1489 = tempRet0;
             ___clang_call_terminate($1488);
            }
            $792 = ___cxa_allocate_exception(8) | 0;
            HEAP8[$410 >> 0] = 1;
            HEAP32[$247 >> 2] = $409;
            HEAP32[$248 >> 2] = 51391;
            $793 = HEAP32[$247 >> 2] | 0;
            HEAP32[$246 >> 2] = $793;
            $794 = HEAP32[$246 >> 2] | 0;
            HEAP32[$245 >> 2] = $794;
            $795 = HEAP32[$245 >> 2] | 0;
            HEAP32[$795 >> 2] = 0;
            HEAP32[$795 + 4 >> 2] = 0;
            HEAP32[$795 + 8 >> 2] = 0;
            HEAP32[$244 >> 2] = $794;
            HEAP32[$243 >> 2] = HEAP32[$244 >> 2];
            $797 = HEAP32[$248 >> 2] | 0;
            $799 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$248 >> 2] | 0) | 0;
            __THREW__ = 0;
            invoke_viii(8, $793 | 0, $797 | 0, $799 | 0);
            $800 = __THREW__;
            __THREW__ = 0;
            if ($800 & 1) {
             $805 = ___cxa_find_matching_catch_2() | 0;
             HEAP32[$392 >> 2] = $805;
             HEAP32[$393 >> 2] = tempRet0;
            } else {
             __THREW__ = 0;
             invoke_vii(58, $792 | 0, $409 | 0);
             $802 = __THREW__;
             __THREW__ = 0;
             if (!($802 & 1)) {
              HEAP8[$410 >> 0] = 0;
              __THREW__ = 0;
              invoke_viii(11, $792 | 0, 41024, 53);
              __THREW__ = 0;
             }
             $807 = ___cxa_find_matching_catch_2() | 0;
             HEAP32[$392 >> 2] = $807;
             HEAP32[$393 >> 2] = tempRet0;
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($409);
            }
            if (HEAP8[$410 >> 0] & 1) ___cxa_free_exception($792 | 0);
            __THREW__ = 0;
            invoke_v(3);
            $810 = __THREW__;
            __THREW__ = 0;
            if (!($810 & 1)) break L29;
            $1488 = ___cxa_find_matching_catch_3(0) | 0;
            $1489 = tempRet0;
            ___clang_call_terminate($1488);
           } while (0);
           $687 = ___cxa_find_matching_catch_2() | 0;
           HEAP32[$392 >> 2] = $687;
           HEAP32[$393 >> 2] = tempRet0;
          } while (0);
          __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($557);
          __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEED2Ev($554);
          __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEED2Ev($551);
         }
         __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEED2Ev($540);
        }
        __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEED2Ev($535);
       }
       HEAP32[$226 >> 2] = $526;
       HEAP32[$223 >> 2] = HEAP32[$226 >> 2];
       HEAP32[$224 >> 2] = 0;
       $1433 = HEAP32[$223 >> 2] | 0;
       HEAP32[$222 >> 2] = $1433;
       HEAP32[$221 >> 2] = HEAP32[$222 >> 2];
       HEAP32[$225 >> 2] = HEAP32[HEAP32[$221 >> 2] >> 2];
       $1437 = HEAP32[$224 >> 2] | 0;
       HEAP32[$218 >> 2] = $1433;
       HEAP32[$217 >> 2] = HEAP32[$218 >> 2];
       HEAP32[HEAP32[$217 >> 2] >> 2] = $1437;
       if (HEAP32[$225 >> 2] | 0) {
        HEAP32[$216 >> 2] = $1433;
        HEAP32[$215 >> 2] = HEAP32[$216 >> 2];
        $1444 = HEAP32[$225 >> 2] | 0;
        HEAP32[$219 >> 2] = HEAP32[$215 >> 2];
        HEAP32[$220 >> 2] = $1444;
        $1445 = HEAP32[$220 >> 2] | 0;
        if ($1445 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1445 >> 2] | 0) + 8 >> 2] & 255]($1445);
       }
       HEAP32[$322 >> 2] = $517;
       HEAP32[$319 >> 2] = HEAP32[$322 >> 2];
       HEAP32[$320 >> 2] = 0;
       $1451 = HEAP32[$319 >> 2] | 0;
       HEAP32[$318 >> 2] = $1451;
       HEAP32[$317 >> 2] = HEAP32[$318 >> 2];
       HEAP32[$321 >> 2] = HEAP32[HEAP32[$317 >> 2] >> 2];
       $1455 = HEAP32[$320 >> 2] | 0;
       HEAP32[$314 >> 2] = $1451;
       HEAP32[$313 >> 2] = HEAP32[$314 >> 2];
       HEAP32[HEAP32[$313 >> 2] >> 2] = $1455;
       if (HEAP32[$321 >> 2] | 0) {
        HEAP32[$312 >> 2] = $1451;
        HEAP32[$311 >> 2] = HEAP32[$312 >> 2];
        $1462 = HEAP32[$321 >> 2] | 0;
        HEAP32[$315 >> 2] = HEAP32[$311 >> 2];
        HEAP32[$316 >> 2] = $1462;
        $1463 = HEAP32[$316 >> 2] | 0;
        if ($1463 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1463 >> 2] | 0) + 8 >> 2] & 255]($1463);
       }
       HEAP32[$335 >> 2] = $508;
       HEAP32[$332 >> 2] = HEAP32[$335 >> 2];
       HEAP32[$333 >> 2] = 0;
       $1469 = HEAP32[$332 >> 2] | 0;
       HEAP32[$331 >> 2] = $1469;
       HEAP32[$330 >> 2] = HEAP32[$331 >> 2];
       HEAP32[$334 >> 2] = HEAP32[HEAP32[$330 >> 2] >> 2];
       $1473 = HEAP32[$333 >> 2] | 0;
       HEAP32[$327 >> 2] = $1469;
       HEAP32[$326 >> 2] = HEAP32[$327 >> 2];
       HEAP32[HEAP32[$326 >> 2] >> 2] = $1473;
       if (HEAP32[$334 >> 2] | 0) {
        HEAP32[$325 >> 2] = $1469;
        HEAP32[$324 >> 2] = HEAP32[$325 >> 2];
        $1480 = HEAP32[$334 >> 2] | 0;
        HEAP32[$328 >> 2] = HEAP32[$324 >> 2];
        HEAP32[$329 >> 2] = $1480;
        $1481 = HEAP32[$329 >> 2] | 0;
        if ($1481 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1481 >> 2] | 0) + 8 >> 2] & 255]($1481);
       }
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($504);
      }
     }
     if ((label | 0) == 36) {
      $679 = ___cxa_find_matching_catch_2() | 0;
      HEAP32[$392 >> 2] = $679;
      HEAP32[$393 >> 2] = tempRet0;
     }
     __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev($497);
    }
    __ZNSt3__210shared_ptrIN3zim10FileReaderEED2Ev($469);
    break;
   }
  }
  $674 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$392 >> 2] = $674;
  HEAP32[$393 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($395);
  if (HEAP8[$397 >> 0] & 1) __ZdlPv($470);
 } while (0);
 __ZNSt3__210shared_ptrIN3zim12FileCompoundEED2Ev($464);
 $1486 = HEAP32[$392 >> 2] | 0;
 $1487 = HEAP32[$393 >> 2] | 0;
 ___resumeException($1486 | 0);
}

function _inflate($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $101 = 0, $1051 = 0, $1063 = 0, $1065 = 0, $1067 = 0, $1068 = 0, $1082 = 0, $1085 = 0, $1086 = 0, $11 = 0, $113 = 0, $1142 = 0, $1152 = 0, $1177 = 0, $1179 = 0, $1181 = 0, $1182 = 0, $1199 = 0, $12 = 0, $1257 = 0, $1294 = 0, $13 = 0, $1338 = 0, $1342 = 0, $1344 = 0, $1346 = 0, $1347 = 0, $14 = 0, $1486 = 0, $1496 = 0, $15 = 0, $1534 = 0, $1548 = 0, $1572 = 0, $1589 = 0, $16 = 0, $1638 = 0, $1656 = 0, $1673 = 0, $1693 = 0, $17 = 0, $1703 = 0, $1738 = 0, $1752 = 0, $1776 = 0, $1793 = 0, $18 = 0, $180 = 0, $1829 = 0, $1847 = 0, $1864 = 0, $19 = 0, $1902 = 0, $1950 = 0, $1953 = 0, $1955 = 0, $1956 = 0, $1959 = 0, $197 = 0, $1972 = 0, $1973 = 0, $1989 = 0, $2 = 0, $20 = 0, $2004 = 0, $2009 = 0, $2025 = 0, $2029 = 0, $2030 = 0, $2035 = 0, $2048 = 0, $2066 = 0, $2088 = 0, $2170 = 0, $2175 = 0, $2180 = 0, $2196 = 0, $2202 = 0, $2203 = 0, $2208 = 0, $2234 = 0, $2248 = 0, $257 = 0, $268 = 0, $3 = 0, $314 = 0, $325 = 0, $370 = 0, $386 = 0, $4 = 0, $427 = 0, $498 = 0, $5 = 0, $514 = 0, $525 = 0, $543 = 0, $544 = 0, $569 = 0, $574 = 0, $576 = 0, $577 = 0, $6 = 0, $600 = 0, $630 = 0, $631 = 0, $656 = 0, $661 = 0, $663 = 0, $664 = 0, $687 = 0, $7 = 0, $719 = 0, $761 = 0, $774 = 0, $78 = 0, $798 = 0, $8 = 0, $826 = 0, $857 = 0, $9 = 0, $912 = 0, $95 = 0, $974 = 0, $985 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 60 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 $20 = sp + 72 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 do if (!(_inflateStateCheck(HEAP32[$3 >> 2] | 0) | 0)) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) {
  if (!(HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) break;
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2];
  if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) == 16191) HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16192;
  HEAP32[$7 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
  HEAP32[$9 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2];
  HEAP32[$6 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
  HEAP32[$8 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
  HEAP32[$10 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 60 >> 2];
  HEAP32[$11 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2];
  HEAP32[$12 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$19 >> 2] = 0;
  L10 : while (1) {
   L12 : do switch (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) {
   case 16208:
    {
     label = 337;
     break L10;
     break;
    }
   case 16209:
    {
     label = 338;
     break L10;
     break;
    }
   case 16210:
    {
     label = 339;
     break L10;
     break;
    }
   case 16180:
    {
     if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0)) {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16192;
      break L12;
     }
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $78 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $78 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$78 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     $95 = HEAP32[$5 >> 2] | 0;
     if ((HEAP32[$10 >> 2] | 0) == 35615 ? (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 2 | 0) != 0 : 0) {
      if (!(HEAP32[$95 + 40 >> 2] | 0)) HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] = 15;
      $101 = _crc32(0, 0, 0) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $101;
      HEAP8[$20 >> 0] = HEAP32[$10 >> 2];
      HEAP8[$20 + 1 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 8;
      $113 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, $20, 2) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $113;
      HEAP32[$10 >> 2] = 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16181;
      break L12;
     }
     HEAP32[$95 + 20 >> 2] = 0;
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = -1;
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 1 | 0) if (!(((((HEAP32[$10 >> 2] & 255) << 8) + ((HEAP32[$10 >> 2] | 0) >>> 8) | 0) >>> 0) % 31 | 0)) {
      if ((HEAP32[$10 >> 2] & 15 | 0) != 8) {
       HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50339;
       HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
       break L12;
      }
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 4;
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 4;
      HEAP32[$18 >> 2] = (HEAP32[$10 >> 2] & 15) + 8;
      if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] | 0)) HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] = HEAP32[$18 >> 2];
      if ((HEAP32[$18 >> 2] | 0) >>> 0 <= 15) if ((HEAP32[$18 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
       HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] = 1 << HEAP32[$18 >> 2];
       $180 = _adler32(0, 0, 0) | 0;
       HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $180;
       HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $180;
       HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = HEAP32[$10 >> 2] & 512 | 0 ? 16189 : 16191;
       HEAP32[$10 >> 2] = 0;
       HEAP32[$11 >> 2] = 0;
       break L12;
      }
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50366;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break L12;
     }
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50316;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
     break;
    }
   case 16181:
    {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $197 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $197 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$197 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] = HEAP32[$10 >> 2];
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 255 | 0) != 8) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50339;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break L12;
     }
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 57344 | 0) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50386;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break L12;
     }
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] >> 2] = (HEAP32[$10 >> 2] | 0) >>> 8 & 1;
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
      HEAP8[$20 >> 0] = HEAP32[$10 >> 2];
      HEAP8[$20 + 1 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 8;
      $257 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, $20, 2) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $257;
     }
     HEAP32[$10 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16182;
     label = 47;
     break;
    }
   case 16182:
    {
     label = 47;
     break;
    }
   case 16183:
    {
     label = 57;
     break;
    }
   case 16184:
    {
     label = 67;
     break;
    }
   case 16185:
    {
     label = 81;
     break;
    }
   case 16186:
    {
     label = 97;
     break;
    }
   case 16187:
    {
     label = 113;
     break;
    }
   case 16188:
    {
     label = 129;
     break;
    }
   case 16189:
    {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 32) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $774 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $774 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$774 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     $798 = ((HEAP32[$10 >> 2] | 0) >>> 24 & 255) + ((HEAP32[$10 >> 2] | 0) >>> 8 & 65280) + ((HEAP32[$10 >> 2] & 65280) << 8) + ((HEAP32[$10 >> 2] & 255) << 24) | 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $798;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $798;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16190;
     label = 146;
     break;
    }
   case 16190:
    {
     label = 146;
     break;
    }
   case 16191:
    {
     label = 149;
     break;
    }
   case 16192:
    {
     label = 150;
     break;
    }
   case 16193:
    {
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAP32[$11 >> 2] & 7);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[$11 >> 2] & 7);
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 32) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $912 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $912 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$912 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     if ((HEAP32[$10 >> 2] & 65535 | 0) != ((HEAP32[$10 >> 2] | 0) >>> 16 ^ 65535 | 0)) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50450;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break L12;
     } else {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] = HEAP32[$10 >> 2] & 65535;
      HEAP32[$10 >> 2] = 0;
      HEAP32[$11 >> 2] = 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16194;
      if ((HEAP32[$4 >> 2] | 0) == 6) break L10; else {
       label = 171;
       break L12;
      }
     }
     break;
    }
   case 16194:
    {
     label = 171;
     break;
    }
   case 16195:
    {
     label = 172;
     break;
    }
   case 16196:
    {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 14) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $985 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $985 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$985 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] = (HEAP32[$10 >> 2] & 31) + 257;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 5;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 5;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 104 >> 2] = (HEAP32[$10 >> 2] & 31) + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 5;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 5;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 96 >> 2] = (HEAP32[$10 >> 2] & 15) + 4;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 4;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 4;
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] | 0) >>> 0 <= 286) if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 104 >> 2] | 0) >>> 0 <= 30) {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] = 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16197;
      label = 188;
      break L12;
     }
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50479;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
     break;
    }
   case 16197:
    {
     label = 188;
     break;
    }
   case 16198:
    {
     label = 201;
     break;
    }
   case 16199:
    {
     label = 242;
     break;
    }
   case 16200:
    {
     label = 243;
     break;
    }
   case 16201:
    {
     label = 264;
     break;
    }
   case 16202:
    {
     label = 271;
     break;
    }
   case 16203:
    {
     label = 284;
     break;
    }
   case 16204:
    {
     label = 291;
     break;
    }
   case 16205:
    {
     if (!(HEAP32[$9 >> 2] | 0)) break L10;
     $1972 = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] & 255;
     $1973 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $1973 + 1;
     HEAP8[$1973 >> 0] = $1972;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16200;
     break;
    }
   case 16206:
    {
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0) {
      while (1) {
       if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 32) break;
       if (!(HEAP32[$8 >> 2] | 0)) break L10;
       HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
       $1989 = HEAP32[$6 >> 2] | 0;
       HEAP32[$6 >> 2] = $1989 + 1;
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1989 >> 0] | 0) << HEAP32[$11 >> 2]);
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
      }
      HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
      $2004 = (HEAP32[$3 >> 2] | 0) + 20 | 0;
      HEAP32[$2004 >> 2] = (HEAP32[$2004 >> 2] | 0) + (HEAP32[$13 >> 2] | 0);
      $2009 = (HEAP32[$5 >> 2] | 0) + 32 | 0;
      HEAP32[$2009 >> 2] = (HEAP32[$2009 >> 2] | 0) + (HEAP32[$13 >> 2] | 0);
      if (HEAP32[$13 >> 2] | 0 ? (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) != 0 : 0) {
       $2025 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0;
       $2029 = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[$13 >> 2] | 0)) | 0;
       $2030 = HEAP32[$13 >> 2] | 0;
       if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] | 0) $2035 = _crc32($2025, $2029, $2030) | 0; else $2035 = _adler32($2025, $2029, $2030) | 0;
       HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $2035;
       HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $2035;
      }
      HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
      if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
       $2048 = HEAP32[$10 >> 2] | 0;
       if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] | 0) $2066 = $2048; else $2066 = ($2048 >>> 24 & 255) + ((HEAP32[$10 >> 2] | 0) >>> 8 & 65280) + ((HEAP32[$10 >> 2] & 65280) << 8) + ((HEAP32[$10 >> 2] & 255) << 24) | 0;
       if (($2066 | 0) != (HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0)) {
        HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50653;
        HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
        break L12;
       }
      }
      HEAP32[$10 >> 2] = 0;
      HEAP32[$11 >> 2] = 0;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16207;
     label = 327;
     break;
    }
   case 16207:
    {
     label = 327;
     break;
    }
   default:
    {
     label = 340;
     break L10;
    }
   } while (0);
   do if ((label | 0) == 47) {
    label = 0;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 32) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $268 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $268 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$268 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 4 >> 2] = HEAP32[$10 >> 2];
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
     HEAP8[$20 >> 0] = HEAP32[$10 >> 2];
     HEAP8[$20 + 1 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 8;
     HEAP8[$20 + 2 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 16;
     HEAP8[$20 + 3 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 24;
     $314 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, $20, 4) | 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $314;
    }
    HEAP32[$10 >> 2] = 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16183;
    label = 57;
   } else if ((label | 0) == 146) {
    label = 0;
    if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0)) {
     label = 147;
     break L10;
    }
    $826 = _adler32(0, 0, 0) | 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $826;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $826;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16191;
    label = 149;
   } else if ((label | 0) == 171) {
    label = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16195;
    label = 172;
   } else if ((label | 0) == 188) {
    label = 0;
    while (1) {
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 96 >> 2] | 0) >>> 0) break;
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 3) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1051 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1051 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1051 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     $1063 = HEAP32[$10 >> 2] & 7;
     $1065 = (HEAP32[$5 >> 2] | 0) + 116 | 0;
     $1067 = (HEAP32[$5 >> 2] | 0) + 108 | 0;
     $1068 = HEAP32[$1067 >> 2] | 0;
     HEAP32[$1067 >> 2] = $1068 + 1;
     HEAP16[$1065 + ((HEAPU16[30816 + ($1068 << 1) >> 1] | 0) << 1) >> 1] = $1063;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 3;
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 3;
    }
    while (1) {
     $1082 = HEAP32[$5 >> 2] | 0;
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0) >>> 0 >= 19) break;
     $1085 = (HEAP32[$5 >> 2] | 0) + 108 | 0;
     $1086 = HEAP32[$1085 >> 2] | 0;
     HEAP32[$1085 >> 2] = $1086 + 1;
     HEAP16[$1082 + 116 + ((HEAPU16[30816 + ($1086 << 1) >> 1] | 0) << 1) >> 1] = 0;
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 112 >> 2] = $1082 + 1332;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 112 >> 2];
    HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2] = 7;
    HEAP32[$19 >> 2] = _inflate_table(0, (HEAP32[$5 >> 2] | 0) + 116 | 0, 19, (HEAP32[$5 >> 2] | 0) + 112 | 0, (HEAP32[$5 >> 2] | 0) + 88 | 0, (HEAP32[$5 >> 2] | 0) + 756 | 0) | 0;
    if (HEAP32[$19 >> 2] | 0) {
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50515;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
     break;
    } else {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] = 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16198;
     label = 201;
     break;
    }
   } else if ((label | 0) == 327) {
    label = 0;
    if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0)) {
     label = 336;
     break L10;
    }
    if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] | 0)) {
     label = 336;
     break L10;
    }
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 32) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $2088 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $2088 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$2088 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    if ((HEAP32[$10 >> 2] | 0) == (HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0)) {
     label = 335;
     break L10;
    }
    HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50674;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
   } while (0);
   do if ((label | 0) == 57) {
    label = 0;
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $325 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $325 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$325 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) {
     HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 8 >> 2] = HEAP32[$10 >> 2] & 255;
     HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 12 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 8;
    }
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
     HEAP8[$20 >> 0] = HEAP32[$10 >> 2];
     HEAP8[$20 + 1 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 8;
     $370 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, $20, 2) | 0;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $370;
    }
    HEAP32[$10 >> 2] = 0;
    HEAP32[$11 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16184;
    label = 67;
   } else if ((label | 0) == 149) {
    label = 0;
    if ((HEAP32[$4 >> 2] | 0) == 5 | (HEAP32[$4 >> 2] | 0) == 6) break L10; else label = 150;
   } else if ((label | 0) == 172) {
    label = 0;
    HEAP32[$14 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2];
    if (!(HEAP32[$14 >> 2] | 0)) {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16191;
     break;
    }
    if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
    if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
    if (!(HEAP32[$14 >> 2] | 0)) break L10;
    _memcpy(HEAP32[$7 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
    HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
    $974 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
    HEAP32[$974 >> 2] = (HEAP32[$974 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
   } else if ((label | 0) == 201) {
    label = 0;
    L184 : while (1) {
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0) >>> 0 >= ((HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] | 0) + (HEAP32[(HEAP32[$5 >> 2] | 0) + 104 >> 2] | 0) | 0) >>> 0) break;
     while (1) {
      $1142 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0) + ((HEAP32[$10 >> 2] & (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2]) - 1) << 2) | 0;
      HEAP16[$16 >> 1] = HEAP16[$1142 >> 1] | 0;
      HEAP16[$16 + 2 >> 1] = HEAP16[$1142 + 2 >> 1] | 0;
      if ((HEAPU8[$16 + 1 >> 0] | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1152 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1152 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1152 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     L192 : do if ((HEAPU16[$16 + 2 >> 1] | 0 | 0) < 16) {
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
      $1177 = HEAP16[$16 + 2 >> 1] | 0;
      $1179 = (HEAP32[$5 >> 2] | 0) + 116 | 0;
      $1181 = (HEAP32[$5 >> 2] | 0) + 108 | 0;
      $1182 = HEAP32[$1181 >> 2] | 0;
      HEAP32[$1181 >> 2] = $1182 + 1;
      HEAP16[$1179 + ($1182 << 1) >> 1] = $1177;
     } else {
      do if ((HEAPU16[$16 + 2 >> 1] | 0 | 0) == 16) {
       while (1) {
        if ((HEAP32[$11 >> 2] | 0) >>> 0 >= ((HEAPU8[$16 + 1 >> 0] | 0) + 2 | 0) >>> 0) break;
        if (!(HEAP32[$8 >> 2] | 0)) break L10;
        HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
        $1199 = HEAP32[$6 >> 2] | 0;
        HEAP32[$6 >> 2] = $1199 + 1;
        HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1199 >> 0] | 0) << HEAP32[$11 >> 2]);
        HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
       }
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
       if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0)) {
        label = 215;
        break L184;
       }
       HEAP32[$18 >> 2] = HEAPU16[(HEAP32[$5 >> 2] | 0) + 116 + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0) - 1 << 1) >> 1];
       HEAP32[$14 >> 2] = 3 + (HEAP32[$10 >> 2] & 3);
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 2;
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 2;
      } else if ((HEAPU16[$16 + 2 >> 1] | 0 | 0) == 17) {
       while (1) {
        if ((HEAP32[$11 >> 2] | 0) >>> 0 >= ((HEAPU8[$16 + 1 >> 0] | 0) + 3 | 0) >>> 0) break;
        if (!(HEAP32[$8 >> 2] | 0)) break L10;
        HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
        $1257 = HEAP32[$6 >> 2] | 0;
        HEAP32[$6 >> 2] = $1257 + 1;
        HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1257 >> 0] | 0) << HEAP32[$11 >> 2]);
        HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
       }
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
       HEAP32[$18 >> 2] = 0;
       HEAP32[$14 >> 2] = 3 + (HEAP32[$10 >> 2] & 7);
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 3;
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 3;
       break;
      } else {
       while (1) {
        if ((HEAP32[$11 >> 2] | 0) >>> 0 >= ((HEAPU8[$16 + 1 >> 0] | 0) + 7 | 0) >>> 0) break;
        if (!(HEAP32[$8 >> 2] | 0)) break L10;
        HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
        $1294 = HEAP32[$6 >> 2] | 0;
        HEAP32[$6 >> 2] = $1294 + 1;
        HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1294 >> 0] | 0) << HEAP32[$11 >> 2]);
        HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
       }
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
       HEAP32[$18 >> 2] = 0;
       HEAP32[$14 >> 2] = 11 + (HEAP32[$10 >> 2] & 127);
       HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 7;
       HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 7;
       break;
      } while (0);
      if (((HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0) + (HEAP32[$14 >> 2] | 0) | 0) >>> 0 > ((HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] | 0) + (HEAP32[(HEAP32[$5 >> 2] | 0) + 104 >> 2] | 0) | 0) >>> 0) {
       label = 229;
       break L184;
      }
      while (1) {
       $1338 = HEAP32[$14 >> 2] | 0;
       HEAP32[$14 >> 2] = $1338 + -1;
       if (!$1338) break L192;
       $1342 = HEAP32[$18 >> 2] & 65535;
       $1344 = (HEAP32[$5 >> 2] | 0) + 116 | 0;
       $1346 = (HEAP32[$5 >> 2] | 0) + 108 | 0;
       $1347 = HEAP32[$1346 >> 2] | 0;
       HEAP32[$1346 >> 2] = $1347 + 1;
       HEAP16[$1344 + ($1347 << 1) >> 1] = $1342;
      }
     } while (0);
    }
    if ((label | 0) == 215) {
     label = 0;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50540;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
    } else if ((label | 0) == 229) {
     label = 0;
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50540;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
    }
    if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) != 16209) {
     if (!(HEAPU16[(HEAP32[$5 >> 2] | 0) + 116 + 512 >> 1] | 0)) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50566;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 112 >> 2] = (HEAP32[$5 >> 2] | 0) + 1332;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 112 >> 2];
     HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2] = 9;
     HEAP32[$19 >> 2] = _inflate_table(1, (HEAP32[$5 >> 2] | 0) + 116 | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + 112 | 0, (HEAP32[$5 >> 2] | 0) + 88 | 0, (HEAP32[$5 >> 2] | 0) + 756 | 0) | 0;
     if (HEAP32[$19 >> 2] | 0) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50603;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 84 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 112 >> 2];
     HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2] = 6;
     HEAP32[$19 >> 2] = _inflate_table(2, (HEAP32[$5 >> 2] | 0) + 116 + (HEAP32[(HEAP32[$5 >> 2] | 0) + 100 >> 2] << 1) | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 104 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + 112 | 0, (HEAP32[$5 >> 2] | 0) + 92 | 0, (HEAP32[$5 >> 2] | 0) + 756 | 0) | 0;
     if (HEAP32[$19 >> 2] | 0) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50631;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     } else {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16199;
      if ((HEAP32[$4 >> 2] | 0) == 6) break L10; else {
       label = 242;
       break;
      }
     }
    }
   } while (0);
   do if ((label | 0) == 67) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 1024 | 0) {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $386 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $386 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$386 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] = HEAP32[$10 >> 2];
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 20 >> 2] = HEAP32[$10 >> 2];
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
      HEAP8[$20 >> 0] = HEAP32[$10 >> 2];
      HEAP8[$20 + 1 >> 0] = (HEAP32[$10 >> 2] | 0) >>> 8;
      $427 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, $20, 2) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $427;
     }
     HEAP32[$10 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
    } else if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 16 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16185;
    label = 81;
   } else if ((label | 0) == 150) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) {
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAP32[$11 >> 2] & 7);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[$11 >> 2] & 7);
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16206;
     break;
    }
    while (1) {
     if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 3) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $857 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $857 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$857 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = HEAP32[$10 >> 2] & 1;
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 1;
    HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 1;
    switch (HEAP32[$10 >> 2] & 3 | 0) {
    case 0:
     {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16193;
      break;
     }
    case 1:
     {
      _fixedtables(HEAP32[$5 >> 2] | 0);
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16199;
      if ((HEAP32[$4 >> 2] | 0) == 6) {
       label = 159;
       break L10;
      }
      break;
     }
    case 2:
     {
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16196;
      break;
     }
    case 3:
     {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50431;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     }
    default:
     {
      label = 162;
      break L10;
     }
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 2;
    HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 2;
   } else if ((label | 0) == 242) {
    label = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16200;
    label = 243;
   } while (0);
   do if ((label | 0) == 81) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 1024 | 0) {
     HEAP32[$14 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2];
     if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
     if (HEAP32[$14 >> 2] | 0) {
      if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 16 >> 2] | 0) {
       HEAP32[$18 >> 2] = (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 20 >> 2] | 0) - (HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0);
       if (((HEAP32[$18 >> 2] | 0) + (HEAP32[$14 >> 2] | 0) | 0) >>> 0 > (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 24 >> 2] | 0) >>> 0) $498 = (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 24 >> 2] | 0) - (HEAP32[$18 >> 2] | 0) | 0; else $498 = HEAP32[$14 >> 2] | 0;
       _memcpy((HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 16 >> 2] | 0) + (HEAP32[$18 >> 2] | 0) | 0, HEAP32[$6 >> 2] | 0, $498 | 0) | 0;
      }
      if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
       $514 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
       HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $514;
      }
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
      $525 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
      HEAP32[$525 >> 2] = (HEAP32[$525 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
     }
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0) break L10;
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16186;
    label = 97;
   } else if ((label | 0) == 243) {
    label = 0;
    if ((HEAP32[$8 >> 2] | 0) >>> 0 >= 6 & (HEAP32[$9 >> 2] | 0) >>> 0 >= 258) {
     HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = HEAP32[$7 >> 2];
     HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$9 >> 2];
     HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$6 >> 2];
     HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[$8 >> 2];
     HEAP32[(HEAP32[$5 >> 2] | 0) + 60 >> 2] = HEAP32[$10 >> 2];
     HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2] = HEAP32[$11 >> 2];
     _inflate_fast(HEAP32[$3 >> 2] | 0, HEAP32[$13 >> 2] | 0);
     HEAP32[$7 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2];
     HEAP32[$9 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2];
     HEAP32[$6 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
     HEAP32[$8 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
     HEAP32[$10 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 60 >> 2];
     HEAP32[$11 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2];
     if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) != 16191) break;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 7112 >> 2] = -1;
     break;
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 7112 >> 2] = 0;
    while (1) {
     $1486 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0) + ((HEAP32[$10 >> 2] & (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 88 >> 2]) - 1) << 2) | 0;
     HEAP16[$16 >> 1] = HEAP16[$1486 >> 1] | 0;
     HEAP16[$16 + 2 >> 1] = HEAP16[$1486 + 2 >> 1] | 0;
     if ((HEAPU8[$16 + 1 >> 0] | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $1496 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $1496 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1496 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    if (HEAPU8[$16 >> 0] | 0 | 0) if (!((HEAPU8[$16 >> 0] | 0) & 240)) {
     HEAP16[$17 >> 1] = HEAP16[$16 >> 1] | 0;
     HEAP16[$17 + 2 >> 1] = HEAP16[$16 + 2 >> 1] | 0;
     while (1) {
      $1534 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 80 >> 2] | 0) + ((HEAPU16[$17 + 2 >> 1] | 0) + ((HEAP32[$10 >> 2] & (1 << (HEAPU8[$17 + 1 >> 0] | 0) + (HEAPU8[$17 >> 0] | 0)) - 1) >>> (HEAPU8[$17 + 1 >> 0] | 0)) << 2) | 0;
      HEAP16[$16 >> 1] = HEAP16[$1534 >> 1] | 0;
      HEAP16[$16 + 2 >> 1] = HEAP16[$1534 + 2 >> 1] | 0;
      if (((HEAPU8[$17 + 1 >> 0] | 0) + (HEAPU8[$16 + 1 >> 0] | 0) | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1548 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1548 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1548 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$17 + 1 >> 0] | 0);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$17 + 1 >> 0] | 0);
     $1572 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
     HEAP32[$1572 >> 2] = (HEAP32[$1572 >> 2] | 0) + (HEAPU8[$17 + 1 >> 0] | 0);
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
    HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
    $1589 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
    HEAP32[$1589 >> 2] = (HEAP32[$1589 >> 2] | 0) + (HEAPU8[$16 + 1 >> 0] | 0);
    HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] = HEAPU16[$16 + 2 >> 1];
    if (!(HEAPU8[$16 >> 0] | 0)) {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16205;
     break;
    }
    if ((HEAPU8[$16 >> 0] | 0) & 32 | 0) {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 7112 >> 2] = -1;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16191;
     break;
    }
    if ((HEAPU8[$16 >> 0] | 0) & 64 | 0) {
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50749;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
     break;
    } else {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] = (HEAPU8[$16 >> 0] | 0) & 15;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16201;
     label = 264;
     break;
    }
   } while (0);
   if ((label | 0) == 97) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 2048 | 0) {
     if (!(HEAP32[$8 >> 2] | 0)) break;
     HEAP32[$14 >> 2] = 0;
     do {
      $543 = HEAP32[$6 >> 2] | 0;
      $544 = HEAP32[$14 >> 2] | 0;
      HEAP32[$14 >> 2] = $544 + 1;
      HEAP32[$18 >> 2] = HEAPU8[$543 + $544 >> 0];
      if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 28 >> 2] | 0) if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 32 >> 2] | 0) >>> 0) {
       $569 = HEAP32[$18 >> 2] & 255;
       $574 = HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 28 >> 2] | 0;
       $576 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
       $577 = HEAP32[$576 >> 2] | 0;
       HEAP32[$576 >> 2] = $577 + 1;
       HEAP8[$574 + $577 >> 0] = $569;
      }
      if (!(HEAP32[$18 >> 2] | 0)) break;
     } while ((HEAP32[$14 >> 2] | 0) >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0);
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
      $600 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $600;
     }
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
     if (HEAP32[$18 >> 2] | 0) break;
    } else if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 28 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16187;
    label = 113;
   } else if ((label | 0) == 264) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0) {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0) >>> 0) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1638 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1638 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1638 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     $1656 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
     HEAP32[$1656 >> 2] = (HEAP32[$1656 >> 2] | 0) + (HEAP32[$10 >> 2] & (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2]) - 1);
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
     $1673 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
     HEAP32[$1673 >> 2] = (HEAP32[$1673 >> 2] | 0) + (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 7116 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2];
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16202;
    label = 271;
   }
   do if ((label | 0) == 113) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 4096 | 0) {
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$14 >> 2] = 0;
     do {
      $630 = HEAP32[$6 >> 2] | 0;
      $631 = HEAP32[$14 >> 2] | 0;
      HEAP32[$14 >> 2] = $631 + 1;
      HEAP32[$18 >> 2] = HEAPU8[$630 + $631 >> 0];
      if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) if (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 36 >> 2] | 0) if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 40 >> 2] | 0) >>> 0) {
       $656 = HEAP32[$18 >> 2] & 255;
       $661 = HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 36 >> 2] | 0;
       $663 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
       $664 = HEAP32[$663 >> 2] | 0;
       HEAP32[$663 >> 2] = $664 + 1;
       HEAP8[$661 + $664 >> 0] = $656;
      }
      if (!(HEAP32[$18 >> 2] | 0)) break;
     } while ((HEAP32[$14 >> 2] | 0) >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0);
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) {
      $687 = _crc32(HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $687;
     }
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
     if (HEAP32[$18 >> 2] | 0) break L10;
    } else if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 36 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16188;
    label = 129;
   } else if ((label | 0) == 271) {
    label = 0;
    while (1) {
     $1693 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 84 >> 2] | 0) + ((HEAP32[$10 >> 2] & (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 92 >> 2]) - 1) << 2) | 0;
     HEAP16[$16 >> 1] = HEAP16[$1693 >> 1] | 0;
     HEAP16[$16 + 2 >> 1] = HEAP16[$1693 + 2 >> 1] | 0;
     if ((HEAPU8[$16 + 1 >> 0] | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0) break;
     if (!(HEAP32[$8 >> 2] | 0)) break L10;
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
     $1703 = HEAP32[$6 >> 2] | 0;
     HEAP32[$6 >> 2] = $1703 + 1;
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1703 >> 0] | 0) << HEAP32[$11 >> 2]);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
    }
    if (!((HEAPU8[$16 >> 0] | 0) & 240)) {
     HEAP16[$17 >> 1] = HEAP16[$16 >> 1] | 0;
     HEAP16[$17 + 2 >> 1] = HEAP16[$16 + 2 >> 1] | 0;
     while (1) {
      $1738 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 84 >> 2] | 0) + ((HEAPU16[$17 + 2 >> 1] | 0) + ((HEAP32[$10 >> 2] & (1 << (HEAPU8[$17 + 1 >> 0] | 0) + (HEAPU8[$17 >> 0] | 0)) - 1) >>> (HEAPU8[$17 + 1 >> 0] | 0)) << 2) | 0;
      HEAP16[$16 >> 1] = HEAP16[$1738 >> 1] | 0;
      HEAP16[$16 + 2 >> 1] = HEAP16[$1738 + 2 >> 1] | 0;
      if (((HEAPU8[$17 + 1 >> 0] | 0) + (HEAPU8[$16 + 1 >> 0] | 0) | 0) >>> 0 <= (HEAP32[$11 >> 2] | 0) >>> 0) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1752 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1752 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1752 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$17 + 1 >> 0] | 0);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$17 + 1 >> 0] | 0);
     $1776 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
     HEAP32[$1776 >> 2] = (HEAP32[$1776 >> 2] | 0) + (HEAPU8[$17 + 1 >> 0] | 0);
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAPU8[$16 + 1 >> 0] | 0);
    HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAPU8[$16 + 1 >> 0] | 0);
    $1793 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
    HEAP32[$1793 >> 2] = (HEAP32[$1793 >> 2] | 0) + (HEAPU8[$16 + 1 >> 0] | 0);
    if ((HEAPU8[$16 >> 0] | 0) & 64 | 0) {
     HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50727;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
     break;
    } else {
     HEAP32[(HEAP32[$5 >> 2] | 0) + 72 >> 2] = HEAPU16[$16 + 2 >> 1];
     HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] = (HEAPU8[$16 >> 0] | 0) & 15;
     HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16203;
     label = 284;
     break;
    }
   } while (0);
   do if ((label | 0) == 129) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 512 | 0) {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $719 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $719 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$719 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     if (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) if ((HEAP32[$10 >> 2] | 0) != (HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 65535 | 0)) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50411;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     }
     HEAP32[$10 >> 2] = 0;
     HEAP32[$11 >> 2] = 0;
    }
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) {
     HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 44 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] >> 9 & 1;
     HEAP32[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 1;
    }
    $761 = _crc32(0, 0, 0) | 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $761;
    HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $761;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16191;
   } else if ((label | 0) == 284) {
    label = 0;
    if (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0) {
     while (1) {
      if ((HEAP32[$11 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0) >>> 0) break;
      if (!(HEAP32[$8 >> 2] | 0)) break L10;
      HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1;
      $1829 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $1829 + 1;
      HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + ((HEAPU8[$1829 >> 0] | 0) << HEAP32[$11 >> 2]);
      HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
     }
     $1847 = (HEAP32[$5 >> 2] | 0) + 72 | 0;
     HEAP32[$1847 >> 2] = (HEAP32[$1847 >> 2] | 0) + (HEAP32[$10 >> 2] & (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2]) - 1);
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
     HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
     $1864 = (HEAP32[$5 >> 2] | 0) + 7112 | 0;
     HEAP32[$1864 >> 2] = (HEAP32[$1864 >> 2] | 0) + (HEAP32[(HEAP32[$5 >> 2] | 0) + 76 >> 2] | 0);
    }
    HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16204;
    label = 291;
   } while (0);
   do if ((label | 0) == 291) {
    label = 0;
    if (!(HEAP32[$9 >> 2] | 0)) break L10;
    HEAP32[$14 >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
    if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 72 >> 2] | 0) >>> 0 > (HEAP32[$14 >> 2] | 0) >>> 0) {
     HEAP32[$14 >> 2] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 72 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
     if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0) >>> 0) if (HEAP32[(HEAP32[$5 >> 2] | 0) + 7108 >> 2] | 0) {
      HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 50697;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16209;
      break;
     }
     $1902 = HEAP32[$5 >> 2] | 0;
     if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$5 >> 2] | 0) + 52 >> 2] | 0) >>> 0) {
      HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$1902 + 52 >> 2] | 0);
      HEAP32[$15 >> 2] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 56 >> 2] | 0) + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] | 0) - (HEAP32[$14 >> 2] | 0));
     } else HEAP32[$15 >> 2] = (HEAP32[$1902 + 56 >> 2] | 0) + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 52 >> 2] | 0) - (HEAP32[$14 >> 2] | 0));
     if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0) >>> 0) HEAP32[$14 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2];
    } else {
     HEAP32[$15 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[(HEAP32[$5 >> 2] | 0) + 72 >> 2] | 0));
     HEAP32[$14 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2];
    }
    if ((HEAP32[$14 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) HEAP32[$14 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
    $1950 = (HEAP32[$5 >> 2] | 0) + 68 | 0;
    HEAP32[$1950 >> 2] = (HEAP32[$1950 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
    do {
     $1953 = HEAP32[$15 >> 2] | 0;
     HEAP32[$15 >> 2] = $1953 + 1;
     $1955 = HEAP8[$1953 >> 0] | 0;
     $1956 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $1956 + 1;
     HEAP8[$1956 >> 0] = $1955;
     $1959 = (HEAP32[$14 >> 2] | 0) + -1 | 0;
     HEAP32[$14 >> 2] = $1959;
    } while (($1959 | 0) != 0);
    if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 68 >> 2] | 0)) HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16200;
   } while (0);
  }
  if ((label | 0) == 147) {
   HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = HEAP32[$7 >> 2];
   HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$9 >> 2];
   HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$6 >> 2];
   HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[$8 >> 2];
   HEAP32[(HEAP32[$5 >> 2] | 0) + 60 >> 2] = HEAP32[$10 >> 2];
   HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$2 >> 2] = 2;
   $2248 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $2248 | 0;
  } else if ((label | 0) == 159) {
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) >>> 2;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) - 2;
  } else if ((label | 0) == 162) {} else if ((label | 0) == 335) {
   HEAP32[$10 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   label = 336;
  } else if ((label | 0) == 338) HEAP32[$19 >> 2] = -3; else if ((label | 0) == 339) {
   HEAP32[$2 >> 2] = -4;
   $2248 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $2248 | 0;
  } else if ((label | 0) == 340) {
   HEAP32[$2 >> 2] = -2;
   $2248 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $2248 | 0;
  }
  if ((label | 0) == 336) {
   HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16208;
   label = 337;
  }
  if ((label | 0) == 337) HEAP32[$19 >> 2] = 1;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = HEAP32[$7 >> 2];
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[$9 >> 2];
  HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$6 >> 2];
  HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = HEAP32[$8 >> 2];
  HEAP32[(HEAP32[$5 >> 2] | 0) + 60 >> 2] = HEAP32[$10 >> 2];
  HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2] = HEAP32[$11 >> 2];
  if (HEAP32[(HEAP32[$5 >> 2] | 0) + 44 >> 2] | 0) label = 346; else if ((HEAP32[$13 >> 2] | 0) != (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0)) if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 16209) if ((HEAP32[$4 >> 2] | 0) != 4 ? 1 : (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 16206) label = 346;
  if ((label | 0) == 346) if (_updatewindow(HEAP32[$3 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0, (HEAP32[$13 >> 2] | 0) - (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) | 0) | 0) {
   HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 16210;
   HEAP32[$2 >> 2] = -4;
   $2248 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $2248 | 0;
  }
  HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) - (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0);
  $2170 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$2170 >> 2] = (HEAP32[$2170 >> 2] | 0) + (HEAP32[$12 >> 2] | 0);
  $2175 = (HEAP32[$3 >> 2] | 0) + 20 | 0;
  HEAP32[$2175 >> 2] = (HEAP32[$2175 >> 2] | 0) + (HEAP32[$13 >> 2] | 0);
  $2180 = (HEAP32[$5 >> 2] | 0) + 32 | 0;
  HEAP32[$2180 >> 2] = (HEAP32[$2180 >> 2] | 0) + (HEAP32[$13 >> 2] | 0);
  if (HEAP32[$13 >> 2] | 0 ? (HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] & 4 | 0) != 0 : 0) {
   $2196 = HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] | 0;
   $2202 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) + (0 - (HEAP32[$13 >> 2] | 0)) | 0;
   $2203 = HEAP32[$13 >> 2] | 0;
   if (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] | 0) $2208 = _crc32($2196, $2202, $2203) | 0; else $2208 = _adler32($2196, $2202, $2203) | 0;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = $2208;
   HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = $2208;
  }
  if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) == 16199) $2234 = 1; else $2234 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) == 16194;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] = (HEAP32[(HEAP32[$5 >> 2] | 0) + 64 >> 2] | 0) + (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0 ? 64 : 0) + ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) == 16191 ? 128 : 0) + ($2234 ? 256 : 0);
  if (((HEAP32[$12 >> 2] | 0) == 0 & (HEAP32[$13 >> 2] | 0) == 0 | (HEAP32[$4 >> 2] | 0) == 4) & (HEAP32[$19 >> 2] | 0) == 0) HEAP32[$19 >> 2] = -5;
  HEAP32[$2 >> 2] = HEAP32[$19 >> 2];
  $2248 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $2248 | 0;
 } while (0);
 HEAP32[$2 >> 2] = -2;
 $2248 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $2248 | 0;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i188 = 0, $$0$i$i$i$i250 = 0, $$0$i$i$i$i270 = 0, $$0$i$i$i$i291 = 0, $$0$i$i$i$i309 = 0, $$0$i$i$i$i334 = 0, $$0$i$i170 = 0, $$0$i$i172 = 0, $$0$i$i175 = 0, $$0$i$i178 = 0, $$0$i$i183 = 0, $$0$i$i186 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i194 = 0, $$0$i$i2$i$i256 = 0, $$0$i$i2$i$i276 = 0, $$0$i$i2$i$i297 = 0, $$0$i$i2$i$i315 = 0, $$0$i$i2$i$i340 = 0, $$0$i$i202 = 0, $$0$i$i207 = 0, $$0$i$i214 = 0, $$0$i$i219 = 0, $$0$i$i226 = 0, $$0$i$i233 = 0, $$0$i$i264 = 0, $$0$i$i284 = 0, $$0$i$i304 = 0, $$0$i$i323 = 0, $$0$i$i328 = 0, $$0$i$i348 = 0, $$0135 = 0, $$0152 = 0, $$0161 = 0, $$10 = 0, $$1153 = 0, $$2137$ph = 0, $$5145 = 0, $$5151 = 0, $$pre$phiZ2D = 0, $$sroa$0359$0$ptr = 0, $$sroa$0381$0 = 0, $$sroa$0381$1 = 0, $$sroa$08$0$ptr$i = 0, $103 = 0, $105 = 0, $11 = 0, $112 = 0, $113 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $132 = 0, $133 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $15 = 0, $153 = 0, $154 = 0, $16 = 0, $160 = 0, $163 = 0, $17 = 0, $170 = 0, $171 = 0, $177 = 0, $179 = 0, $18 = 0, $186 = 0, $187 = 0, $19 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $206 = 0, $207 = 0, $21 = 0, $212 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $228 = 0, $23 = 0, $230 = 0, $233 = 0, $237 = 0, $238 = 0, $24 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $257 = 0, $261 = 0, $267 = 0, $269 = 0, $276 = 0, $277 = 0, $287 = 0, $288 = 0, $289 = 0, $296 = 0, $300 = 0, $309 = 0, $310 = 0, $320 = 0, $321 = 0, $322 = 0, $325 = 0, $329 = 0, $333 = 0, $342 = 0, $343 = 0, $353 = 0, $354 = 0, $355 = 0, $362 = 0, $366 = 0, $380 = 0, $382 = 0, $385 = 0, $387 = 0, $389 = 0, $39 = 0, $394 = 0, $395 = 0, $398 = 0, $402 = 0, $408 = 0, $409 = 0, $415 = 0, $417 = 0, $418 = 0, $419 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $430 = 0, $433 = 0, $44 = 0, $440 = 0, $441 = 0, $444 = 0, $449 = 0, $452 = 0, $459 = 0, $46 = 0, $460 = 0, $466 = 0, $469 = 0, $47 = 0, $476 = 0, $477 = 0, $48 = 0, $483 = 0, $485 = 0, $49 = 0, $492 = 0, $493 = 0, $499 = 0, $500 = 0, $501 = 0, $508 = 0, $51 = 0, $517 = 0, $518 = 0, $528 = 0, $53 = 0, $531 = 0, $538 = 0, $539 = 0, $54 = 0, $545 = 0, $548 = 0, $55 = 0, $555 = 0, $556 = 0, $562 = 0, $564 = 0, $57 = 0, $571 = 0, $572 = 0, $579 = 0, $58 = 0, $580 = 0, $582 = 0, $585 = 0, $596 = 0, $598 = 0, $60 = 0, $607 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $623 = 0, $628 = 0, $63 = 0, $633 = 0, $636 = 0, $639 = 0, $642 = 0, $649 = 0, $650 = 0, $656 = 0, $659 = 0, $666 = 0, $667 = 0, $673 = 0, $675 = 0, $682 = 0, $683 = 0, $691 = 0, $692 = 0, $693 = 0, $70 = 0, $700 = 0, $706 = 0, $709 = 0, $71 = 0, $716 = 0, $717 = 0, $723 = 0, $726 = 0, $733 = 0, $734 = 0, $740 = 0, $742 = 0, $749 = 0, $750 = 0, $757 = 0, $758 = 0, $765 = 0, $767 = 0, $769 = 0, $77 = 0, $776 = 0, $777 = 0, $781 = 0, $785 = 0, $786 = 0, $787 = 0, $794 = 0, $80 = 0, $806 = 0, $807 = 0, $808 = 0, $813 = 0, $814 = 0, $817 = 0, $824 = 0, $825 = 0, $831 = 0, $834 = 0, $841 = 0, $842 = 0, $848 = 0, $850 = 0, $857 = 0, $858 = 0, $866 = 0, $87 = 0, $871 = 0, $873 = 0, $874 = 0, $875 = 0, $88 = 0, $882 = 0, $887 = 0, $888 = 0, $890 = 0, $896 = 0, $898 = 0, $902 = 0, $904 = 0, $906 = 0, $910 = 0, $912 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $94 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $lpad$phi424$index = 0, $lpad$phi424$index8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $11 = sp + 496 | 0;
 $12 = sp;
 $13 = sp + 488 | 0;
 $14 = sp + 480 | 0;
 $15 = sp + 476 | 0;
 $16 = sp + 500 | 0;
 $17 = sp + 472 | 0;
 $18 = sp + 468 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 444 | 0;
 $21 = sp + 432 | 0;
 $22 = sp + 420 | 0;
 $23 = sp + 408 | 0;
 $24 = sp + 404 | 0;
 $25 = sp + 400 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$13 + 4 >> 2] = 191;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$15 >> 2] = $12 + 400;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$19 + 4 >> 2] = 0;
 HEAP32[$19 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 $$0$i$i170 = 0;
 while (1) {
  if (($$0$i$i170 | 0) == 3) break;
  HEAP32[$20 + ($$0$i$i170 << 2) >> 2] = 0;
  $$0$i$i170 = $$0$i$i170 + 1 | 0;
 }
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$21 + 8 >> 2] = 0;
 $$0$i$i172 = 0;
 while (1) {
  if (($$0$i$i172 | 0) == 3) break;
  HEAP32[$21 + ($$0$i$i172 << 2) >> 2] = 0;
  $$0$i$i172 = $$0$i$i172 + 1 | 0;
 }
 HEAP32[$22 >> 2] = 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 $$0$i$i175 = 0;
 while (1) {
  if (($$0$i$i175 | 0) == 3) break;
  HEAP32[$22 + ($$0$i$i175 << 2) >> 2] = 0;
  $$0$i$i175 = $$0$i$i175 + 1 | 0;
 }
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $$0$i$i178 = 0;
 while (1) {
  if (($$0$i$i178 | 0) == 3) break;
  HEAP32[$23 + ($$0$i$i178 << 2) >> 2] = 0;
  $$0$i$i178 = $$0$i$i178 + 1 | 0;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(2, $2 | 0, $3 | 0, $16 | 0, $17 | 0, $18 | 0, $19 | 0, $20 | 0, $21 | 0, $22 | 0, $24 | 0);
 $39 = __THREW__;
 __THREW__ = 0;
 L21 : do if ($39 & 1) {
  $94 = ___cxa_find_matching_catch_2() | 0;
  $$5145 = $94;
  $$5151 = tempRet0;
 } else {
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  $43 = $21 + 8 + 3 | 0;
  $44 = $21 + 4 | 0;
  $46 = $22 + 8 + 3 | 0;
  $47 = $22 + 4 | 0;
  $48 = $19 + 11 | 0;
  $49 = $19 + 4 | 0;
  $51 = ($4 & 512 | 0) != 0;
  $53 = $20 + 8 + 3 | 0;
  $54 = $16 + 3 | 0;
  $55 = $20 + 4 | 0;
  $57 = $23 + 8 + 3 | 0;
  $58 = $23 + 4 | 0;
  $$0152 = 0;
  $$0161 = 0;
  L24 : while (1) {
   if ($$0161 >>> 0 >= 4) {
    label = 263;
    break;
   }
   $60 = HEAP32[$0 >> 2] | 0;
   do if (!$60) $914 = 1; else {
    $63 = HEAP32[$60 + 12 >> 2] | 0;
    if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $70 = invoke_ii(HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] | 0, $60 | 0) | 0;
     $71 = __THREW__;
     __THREW__ = 0;
     if ($71 & 1) {
      label = 36;
      break L24;
     } else $$0$i$i$i$i = $70;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$63 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $914 = 1;
     break;
    } else {
     $914 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $77 = HEAP32[$1 >> 2] | 0;
   do if (!$77) label = 32; else {
    $80 = HEAP32[$77 + 12 >> 2] | 0;
    if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $87 = invoke_ii(HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] | 0, $77 | 0) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     if ($88 & 1) {
      label = 36;
      break L24;
     } else $$0$i$i2$i$i = $87;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     label = 32;
     break;
    } else if ($914) {
     $915 = $77;
     break;
    } else {
     label = 263;
     break L24;
    }
   } while (0);
   if ((label | 0) == 32) {
    label = 0;
    if ($914) {
     label = 263;
     break;
    } else $915 = 0;
   }
   L49 : do switch (HEAP8[$16 + $$0161 >> 0] | 0) {
   case 1:
    {
     if (($$0161 | 0) == 3) $$1153 = $$0152; else {
      $103 = HEAP32[$0 >> 2] | 0;
      $105 = HEAP32[$103 + 12 >> 2] | 0;
      if (($105 | 0) == (HEAP32[$103 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $112 = invoke_ii(HEAP32[(HEAP32[$103 >> 2] | 0) + 36 >> 2] | 0, $103 | 0) | 0;
       $113 = __THREW__;
       __THREW__ = 0;
       if ($113 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i183 = $112;
      } else $$0$i$i183 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$105 >> 2] | 0) | 0;
      __THREW__ = 0;
      $120 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, $$0$i$i183 | 0) | 0;
      $121 = __THREW__;
      __THREW__ = 0;
      if ($121 & 1) {
       label = 36;
       break L24;
      }
      if (!$120) {
       label = 50;
       break L24;
      }
      $123 = HEAP32[$0 >> 2] | 0;
      $124 = $123 + 12 | 0;
      $125 = HEAP32[$124 >> 2] | 0;
      if (($125 | 0) == (HEAP32[$123 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $132 = invoke_ii(HEAP32[(HEAP32[$123 >> 2] | 0) + 40 >> 2] | 0, $123 | 0) | 0;
       $133 = __THREW__;
       __THREW__ = 0;
       if ($133 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i186 = $132;
      } else {
       HEAP32[$124 >> 2] = $125 + 4;
       $$0$i$i186 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$125 >> 2] | 0) | 0;
      }
      __THREW__ = 0;
      invoke_vii(89, $23 | 0, $$0$i$i186 | 0);
      $138 = __THREW__;
      __THREW__ = 0;
      if ($138 & 1) {
       label = 36;
       break L24;
      } else label = 52;
     }
     break;
    }
   case 0:
    {
     if (($$0161 | 0) == 3) $$1153 = $$0152; else label = 52;
     break;
    }
   case 3:
    {
     $214 = HEAP8[$43 >> 0] | 0;
     $218 = $214 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $214 & 255;
     $219 = HEAP8[$46 >> 0] | 0;
     $223 = $219 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $219 & 255;
     if (($218 | 0) == (0 - $223 | 0)) $$1153 = $$0152; else {
      if (!$218) {
       $267 = HEAP32[$0 >> 2] | 0;
       $269 = HEAP32[$267 + 12 >> 2] | 0;
       if (($269 | 0) == (HEAP32[$267 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $276 = invoke_ii(HEAP32[(HEAP32[$267 >> 2] | 0) + 36 >> 2] | 0, $267 | 0) | 0;
        $277 = __THREW__;
        __THREW__ = 0;
        if ($277 & 1) {
         label = 36;
         break L24;
        } else $$0$i$i219 = $276;
       } else $$0$i$i219 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$269 >> 2] | 0) | 0;
       if (($$0$i$i219 | 0) != (HEAP32[((HEAP8[$46 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
        $$1153 = $$0152;
        break L49;
       }
       $287 = HEAP32[$0 >> 2] | 0;
       $288 = $287 + 12 | 0;
       $289 = HEAP32[$288 >> 2] | 0;
       if (($289 | 0) == (HEAP32[$287 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$287 >> 2] | 0) + 40 >> 2] | 0, $287 | 0) | 0;
        $296 = __THREW__;
        __THREW__ = 0;
        if ($296 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$288 >> 2] = $289 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$289 >> 2] | 0) | 0;
       }
       HEAP8[$6 >> 0] = 1;
       $300 = HEAP8[$46 >> 0] | 0;
       $$1153 = ($300 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $300 & 255) >>> 0 > 1 ? $22 : $$0152;
       break L49;
      }
      $228 = HEAP32[$0 >> 2] | 0;
      $230 = HEAP32[$228 + 12 >> 2] | 0;
      $233 = ($230 | 0) == (HEAP32[$228 + 16 >> 2] | 0);
      if (!$223) {
       if ($233) {
        __THREW__ = 0;
        $237 = invoke_ii(HEAP32[(HEAP32[$228 >> 2] | 0) + 36 >> 2] | 0, $228 | 0) | 0;
        $238 = __THREW__;
        __THREW__ = 0;
        if ($238 & 1) {
         label = 36;
         break L24;
        } else $$0$i$i214 = $237;
       } else $$0$i$i214 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$230 >> 2] | 0) | 0;
       if (($$0$i$i214 | 0) != (HEAP32[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
        HEAP8[$6 >> 0] = 1;
        $$1153 = $$0152;
        break L49;
       }
       $248 = HEAP32[$0 >> 2] | 0;
       $249 = $248 + 12 | 0;
       $250 = HEAP32[$249 >> 2] | 0;
       if (($250 | 0) == (HEAP32[$248 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$248 >> 2] | 0) + 40 >> 2] | 0, $248 | 0) | 0;
        $257 = __THREW__;
        __THREW__ = 0;
        if ($257 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$249 >> 2] = $250 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$250 >> 2] | 0) | 0;
       }
       $261 = HEAP8[$43 >> 0] | 0;
       $$1153 = ($261 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $261 & 255) >>> 0 > 1 ? $21 : $$0152;
       break L49;
      }
      if ($233) {
       __THREW__ = 0;
       $309 = invoke_ii(HEAP32[(HEAP32[$228 >> 2] | 0) + 36 >> 2] | 0, $228 | 0) | 0;
       $310 = __THREW__;
       __THREW__ = 0;
       if ($310 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i226 = $309;
      } else $$0$i$i226 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$230 >> 2] | 0) | 0;
      $320 = HEAP32[$0 >> 2] | 0;
      $321 = $320 + 12 | 0;
      $322 = HEAP32[$321 >> 2] | 0;
      $325 = ($322 | 0) == (HEAP32[$320 + 16 >> 2] | 0);
      if (($$0$i$i226 | 0) == (HEAP32[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 2] | 0)) {
       if ($325) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$320 >> 2] | 0) + 40 >> 2] | 0, $320 | 0) | 0;
        $329 = __THREW__;
        __THREW__ = 0;
        if ($329 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$321 >> 2] = $322 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$322 >> 2] | 0) | 0;
       }
       $333 = HEAP8[$43 >> 0] | 0;
       $$1153 = ($333 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $333 & 255) >>> 0 > 1 ? $21 : $$0152;
       break L49;
      }
      if ($325) {
       __THREW__ = 0;
       $342 = invoke_ii(HEAP32[(HEAP32[$320 >> 2] | 0) + 36 >> 2] | 0, $320 | 0) | 0;
       $343 = __THREW__;
       __THREW__ = 0;
       if ($343 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i233 = $342;
      } else $$0$i$i233 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$322 >> 2] | 0) | 0;
      if (($$0$i$i233 | 0) != (HEAP32[((HEAP8[$46 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 2] | 0)) {
       label = 113;
       break L24;
      }
      $353 = HEAP32[$0 >> 2] | 0;
      $354 = $353 + 12 | 0;
      $355 = HEAP32[$354 >> 2] | 0;
      if (($355 | 0) == (HEAP32[$353 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$353 >> 2] | 0) + 40 >> 2] | 0, $353 | 0) | 0;
       $362 = __THREW__;
       __THREW__ = 0;
       if ($362 & 1) {
        label = 36;
        break L24;
       }
      } else {
       HEAP32[$354 >> 2] = $355 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$355 >> 2] | 0) | 0;
      }
      HEAP8[$6 >> 0] = 1;
      $366 = HEAP8[$46 >> 0] | 0;
      $$1153 = ($366 << 24 >> 24 < 0 ? HEAP32[$47 >> 2] | 0 : $366 & 255) >>> 0 > 1 ? $22 : $$0152;
     }
     break;
    }
   case 2:
    {
     if ($$0161 >>> 0 < 2 | ($$0152 | 0) != 0) {
      $385 = HEAP8[$53 >> 0] | 0;
      $387 = HEAP32[$20 >> 2] | 0;
      $389 = $385 << 24 >> 24 < 0 ? $387 : $20;
      if (!$$0161) {
       $$sroa$0381$1 = $389;
       $922 = $387;
       $923 = $385;
      } else {
       $919 = $389;
       $920 = $387;
       $921 = $385;
       label = 118;
      }
     } else {
      if (!($51 | ($$0161 | 0) == 2 & (HEAP8[$54 >> 0] | 0) != 0)) {
       $$1153 = 0;
       break L49;
      }
      $380 = HEAP8[$53 >> 0] | 0;
      $382 = HEAP32[$20 >> 2] | 0;
      $919 = $380 << 24 >> 24 < 0 ? $382 : $20;
      $920 = $382;
      $921 = $380;
      label = 118;
     }
     L116 : do if ((label | 0) == 118) {
      label = 0;
      if ((HEAPU8[$16 + ($$0161 + -1) >> 0] | 0) < 2) {
       $$sroa$0381$0 = $919;
       $394 = $921;
       $398 = $920;
       while (1) {
        $395 = $394 << 24 >> 24 < 0;
        $402 = $$sroa$0381$0;
        if ((($395 ? $398 : $20) + (($395 ? HEAP32[$55 >> 2] | 0 : $394 & 255) << 2) | 0) == ($402 | 0)) {
         $415 = $394;
         $417 = $398;
         break;
        }
        __THREW__ = 0;
        $408 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, HEAP32[$402 >> 2] | 0) | 0;
        $409 = __THREW__;
        __THREW__ = 0;
        if ($409 & 1) {
         label = 125;
         break L24;
        }
        if (!$408) {
         label = 123;
         break;
        }
        $$sroa$0381$0 = $402 + 4 | 0;
        $394 = HEAP8[$53 >> 0] | 0;
        $398 = HEAP32[$20 >> 2] | 0;
       }
       if ((label | 0) == 123) {
        label = 0;
        $415 = HEAP8[$53 >> 0] | 0;
        $417 = HEAP32[$20 >> 2] | 0;
       }
       $418 = $415 << 24 >> 24 < 0 ? $417 : $20;
       $419 = $418;
       $421 = $$sroa$0381$0 - $419 >> 2;
       $422 = HEAP8[$57 >> 0] | 0;
       $423 = $422 << 24 >> 24 < 0;
       $424 = HEAP32[$58 >> 2] | 0;
       $425 = $422 & 255;
       if ($421 >>> 0 > ($423 ? $424 : $425) >>> 0) {
        $$sroa$0381$1 = $419;
        $922 = $417;
        $923 = $415;
       } else {
        $429 = (HEAP32[$23 >> 2] | 0) + ($424 << 2) | 0;
        $430 = $23 + ($425 << 2) | 0;
        $$pre$phiZ2D = $423 ? $429 : $430;
        $$sroa$08$0$ptr$i = $418;
        $433 = ($423 ? $429 : $430) + (0 - $421 << 2) | 0;
        while (1) {
         if (($433 | 0) == ($$pre$phiZ2D | 0)) {
          $$sroa$0381$1 = $$sroa$0381$0;
          $922 = $417;
          $923 = $415;
          break L116;
         }
         if ((HEAP32[$433 >> 2] | 0) != (HEAP32[$$sroa$08$0$ptr$i >> 2] | 0)) {
          $$sroa$0381$1 = $419;
          $922 = $417;
          $923 = $415;
          break L116;
         }
         $$sroa$08$0$ptr$i = $$sroa$08$0$ptr$i + 4 | 0;
         $433 = $433 + 4 | 0;
        }
       }
      } else {
       $$sroa$0381$1 = $919;
       $922 = $920;
       $923 = $921;
      }
     } while (0);
     $$sroa$0359$0$ptr = $$sroa$0381$1;
     $440 = $923;
     $444 = $922;
     $466 = $915;
     L133 : while (1) {
      $441 = $440 << 24 >> 24 < 0;
      if (($$sroa$0359$0$ptr | 0) == (($441 ? $444 : $20) + (($441 ? HEAP32[$55 >> 2] | 0 : $440 & 255) << 2) | 0)) break;
      $449 = HEAP32[$0 >> 2] | 0;
      do if (!$449) $924 = 1; else {
       $452 = HEAP32[$449 + 12 >> 2] | 0;
       if (($452 | 0) == (HEAP32[$449 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $459 = invoke_ii(HEAP32[(HEAP32[$449 >> 2] | 0) + 36 >> 2] | 0, $449 | 0) | 0;
        $460 = __THREW__;
        __THREW__ = 0;
        if ($460 & 1) {
         label = 156;
         break L24;
        } else $$0$i$i$i$i250 = $459;
       } else $$0$i$i$i$i250 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$452 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i250, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $924 = 1;
        break;
       } else {
        $924 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$466) label = 146; else {
       $469 = HEAP32[$466 + 12 >> 2] | 0;
       if (($469 | 0) == (HEAP32[$466 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $476 = invoke_ii(HEAP32[(HEAP32[$466 >> 2] | 0) + 36 >> 2] | 0, $466 | 0) | 0;
        $477 = __THREW__;
        __THREW__ = 0;
        if ($477 & 1) {
         label = 156;
         break L24;
        } else $$0$i$i2$i$i256 = $476;
       } else $$0$i$i2$i$i256 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$469 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i256, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 146;
        break;
       } else if ($924) {
        $925 = $466;
        break;
       } else break L133;
      } while (0);
      if ((label | 0) == 146) {
       label = 0;
       if ($924) break; else $925 = 0;
      }
      $483 = HEAP32[$0 >> 2] | 0;
      $485 = HEAP32[$483 + 12 >> 2] | 0;
      if (($485 | 0) == (HEAP32[$483 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $492 = invoke_ii(HEAP32[(HEAP32[$483 >> 2] | 0) + 36 >> 2] | 0, $483 | 0) | 0;
       $493 = __THREW__;
       __THREW__ = 0;
       if ($493 & 1) {
        label = 156;
        break L24;
       } else $$0$i$i264 = $492;
      } else $$0$i$i264 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$485 >> 2] | 0) | 0;
      if (($$0$i$i264 | 0) != (HEAP32[$$sroa$0359$0$ptr >> 2] | 0)) break;
      $499 = HEAP32[$0 >> 2] | 0;
      $500 = $499 + 12 | 0;
      $501 = HEAP32[$500 >> 2] | 0;
      if (($501 | 0) == (HEAP32[$499 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$499 >> 2] | 0) + 40 >> 2] | 0, $499 | 0) | 0;
       $508 = __THREW__;
       __THREW__ = 0;
       if ($508 & 1) {
        label = 157;
        break L24;
       }
      } else {
       HEAP32[$500 >> 2] = $501 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$501 >> 2] | 0) | 0;
      }
      $$sroa$0359$0$ptr = $$sroa$0359$0$ptr + 4 | 0;
      $440 = HEAP8[$53 >> 0] | 0;
      $444 = HEAP32[$20 >> 2] | 0;
      $466 = $925;
     }
     if ($51) {
      $517 = HEAP8[$53 >> 0] | 0;
      $518 = $517 << 24 >> 24 < 0;
      if (($$sroa$0359$0$ptr | 0) == (($518 ? HEAP32[$20 >> 2] | 0 : $20) + (($518 ? HEAP32[$55 >> 2] | 0 : $517 & 255) << 2) | 0)) $$1153 = $$0152; else {
       label = 160;
       break L24;
      }
     } else $$1153 = $$0152;
     break;
    }
   case 4:
    {
     $$0135 = 0;
     $545 = $915;
     $916 = $915;
     L170 : while (1) {
      $528 = HEAP32[$0 >> 2] | 0;
      do if (!$528) $926 = 1; else {
       $531 = HEAP32[$528 + 12 >> 2] | 0;
       if (($531 | 0) == (HEAP32[$528 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $538 = invoke_ii(HEAP32[(HEAP32[$528 >> 2] | 0) + 36 >> 2] | 0, $528 | 0) | 0;
        $539 = __THREW__;
        __THREW__ = 0;
        if ($539 & 1) {
         label = 185;
         break L24;
        } else $$0$i$i$i$i270 = $538;
       } else $$0$i$i$i$i270 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$531 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i270, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $926 = 1;
        break;
       } else {
        $926 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$545) {
       $927 = $916;
       label = 174;
      } else {
       $548 = HEAP32[$545 + 12 >> 2] | 0;
       if (($548 | 0) == (HEAP32[$545 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $555 = invoke_ii(HEAP32[(HEAP32[$545 >> 2] | 0) + 36 >> 2] | 0, $545 | 0) | 0;
        $556 = __THREW__;
        __THREW__ = 0;
        if ($556 & 1) {
         label = 185;
         break L24;
        } else $$0$i$i2$i$i276 = $555;
       } else $$0$i$i2$i$i276 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$548 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i276, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        $927 = 0;
        label = 174;
        break;
       } else if ($926) {
        $928 = $916;
        $929 = $545;
        break;
       } else {
        $656 = $916;
        break L170;
       }
      } while (0);
      if ((label | 0) == 174) {
       label = 0;
       if ($926) {
        $656 = $927;
        break;
       } else {
        $928 = $927;
        $929 = 0;
       }
      }
      $562 = HEAP32[$0 >> 2] | 0;
      $564 = HEAP32[$562 + 12 >> 2] | 0;
      if (($564 | 0) == (HEAP32[$562 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $571 = invoke_ii(HEAP32[(HEAP32[$562 >> 2] | 0) + 36 >> 2] | 0, $562 | 0) | 0;
       $572 = __THREW__;
       __THREW__ = 0;
       if ($572 & 1) {
        label = 188;
        break L24;
       } else $$0$i$i284 = $571;
      } else $$0$i$i284 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$564 >> 2] | 0) | 0;
      __THREW__ = 0;
      $579 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 2048, $$0$i$i284 | 0) | 0;
      $580 = __THREW__;
      __THREW__ = 0;
      if ($580 & 1) {
       label = 188;
       break L24;
      }
      if ($579) {
       $582 = HEAP32[$9 >> 2] | 0;
       if (($582 | 0) == (HEAP32[$11 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(33, $8 | 0, $9 | 0, $11 | 0);
        $585 = __THREW__;
        __THREW__ = 0;
        if ($585 & 1) {
         label = 188;
         break L24;
        }
        $596 = HEAP32[$9 >> 2] | 0;
       } else $596 = $582;
       HEAP32[$9 >> 2] = $596 + 4;
       HEAP32[$596 >> 2] = $$0$i$i284;
       $$2137$ph = $$0135 + 1 | 0;
      } else {
       $598 = HEAP8[$48 >> 0] | 0;
       if (!(($$0$i$i284 | 0) == (HEAP32[$18 >> 2] | 0) & ($$0135 | 0 ? (($598 << 24 >> 24 < 0 ? HEAP32[$49 >> 2] | 0 : $598 & 255) | 0) != 0 : 0))) {
        $656 = $928;
        break;
       }
       $607 = HEAP32[$14 >> 2] | 0;
       if (($607 | 0) == (HEAP32[$15 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(32, $13 | 0, $14 | 0, $15 | 0);
        $610 = __THREW__;
        __THREW__ = 0;
        if ($610 & 1) {
         label = 188;
         break L24;
        }
        $613 = HEAP32[$14 >> 2] | 0;
       } else $613 = $607;
       HEAP32[$14 >> 2] = $613 + 4;
       HEAP32[$613 >> 2] = $$0135;
       $$2137$ph = 0;
      }
      $614 = HEAP32[$0 >> 2] | 0;
      $615 = $614 + 12 | 0;
      $616 = HEAP32[$615 >> 2] | 0;
      if (($616 | 0) == (HEAP32[$614 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$614 >> 2] | 0) + 40 >> 2] | 0, $614 | 0) | 0;
       $623 = __THREW__;
       __THREW__ = 0;
       if ($623 & 1) {
        label = 185;
        break L24;
       }
      } else {
       HEAP32[$615 >> 2] = $616 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$616 >> 2] | 0) | 0;
      }
      $$0135 = $$2137$ph;
      $545 = $929;
      $916 = $928;
     }
     $628 = HEAP32[$14 >> 2] | 0;
     if ($$0135 | 0 ? (HEAP32[$13 >> 2] | 0) != ($628 | 0) : 0) {
      if (($628 | 0) == (HEAP32[$15 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_viii(32, $13 | 0, $14 | 0, $15 | 0);
       $633 = __THREW__;
       __THREW__ = 0;
       if ($633 & 1) {
        label = 186;
        break L24;
       }
       $636 = HEAP32[$14 >> 2] | 0;
      } else $636 = $628;
      HEAP32[$14 >> 2] = $636 + 4;
      HEAP32[$636 >> 2] = $$0135;
     }
     L224 : do if ((HEAP32[$24 >> 2] | 0) > 0) {
      $639 = HEAP32[$0 >> 2] | 0;
      do if (!$639) $930 = 1; else {
       $642 = HEAP32[$639 + 12 >> 2] | 0;
       if (($642 | 0) == (HEAP32[$639 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $649 = invoke_ii(HEAP32[(HEAP32[$639 >> 2] | 0) + 36 >> 2] | 0, $639 | 0) | 0;
        $650 = __THREW__;
        __THREW__ = 0;
        if ($650 & 1) {
         label = 186;
         break L24;
        } else $$0$i$i$i$i291 = $649;
       } else $$0$i$i$i$i291 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$642 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i291, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $930 = 1;
        break;
       } else {
        $930 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$656) label = 218; else {
       $659 = HEAP32[$656 + 12 >> 2] | 0;
       if (($659 | 0) == (HEAP32[$656 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $666 = invoke_ii(HEAP32[(HEAP32[$656 >> 2] | 0) + 36 >> 2] | 0, $656 | 0) | 0;
        $667 = __THREW__;
        __THREW__ = 0;
        if ($667 & 1) {
         label = 186;
         break L24;
        } else $$0$i$i2$i$i297 = $666;
       } else $$0$i$i2$i$i297 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$659 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i297, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 218;
        break;
       } else if ($930) {
        $931 = $656;
        break;
       } else {
        label = 224;
        break L24;
       }
      } while (0);
      if ((label | 0) == 218) {
       label = 0;
       if ($930) {
        label = 224;
        break L24;
       } else $931 = 0;
      }
      $673 = HEAP32[$0 >> 2] | 0;
      $675 = HEAP32[$673 + 12 >> 2] | 0;
      if (($675 | 0) == (HEAP32[$673 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $682 = invoke_ii(HEAP32[(HEAP32[$673 >> 2] | 0) + 36 >> 2] | 0, $673 | 0) | 0;
       $683 = __THREW__;
       __THREW__ = 0;
       if ($683 & 1) {
        label = 186;
        break L24;
       } else $$0$i$i304 = $682;
      } else $$0$i$i304 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$675 >> 2] | 0) | 0;
      if (($$0$i$i304 | 0) != (HEAP32[$17 >> 2] | 0)) {
       label = 224;
       break L24;
      }
      $691 = HEAP32[$0 >> 2] | 0;
      $692 = $691 + 12 | 0;
      $693 = HEAP32[$692 >> 2] | 0;
      if (($693 | 0) == (HEAP32[$691 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$691 >> 2] | 0) + 40 >> 2] | 0, $691 | 0) | 0;
       $700 = __THREW__;
       __THREW__ = 0;
       if ($700 & 1) {
        label = 186;
        break L24;
       }
      } else {
       HEAP32[$692 >> 2] = $693 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$693 >> 2] | 0) | 0;
      }
      $723 = $931;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) <= 0) break L224;
       $706 = HEAP32[$0 >> 2] | 0;
       do if (!$706) $932 = 1; else {
        $709 = HEAP32[$706 + 12 >> 2] | 0;
        if (($709 | 0) == (HEAP32[$706 + 16 >> 2] | 0)) {
         __THREW__ = 0;
         $716 = invoke_ii(HEAP32[(HEAP32[$706 >> 2] | 0) + 36 >> 2] | 0, $706 | 0) | 0;
         $717 = __THREW__;
         __THREW__ = 0;
         if ($717 & 1) {
          label = 184;
          break L24;
         } else $$0$i$i$i$i309 = $716;
        } else $$0$i$i$i$i309 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$709 >> 2] | 0) | 0;
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i309, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$0 >> 2] = 0;
         $932 = 1;
         break;
        } else {
         $932 = (HEAP32[$0 >> 2] | 0) == 0;
         break;
        }
       } while (0);
       do if (!$723) label = 243; else {
        $726 = HEAP32[$723 + 12 >> 2] | 0;
        if (($726 | 0) == (HEAP32[$723 + 16 >> 2] | 0)) {
         __THREW__ = 0;
         $733 = invoke_ii(HEAP32[(HEAP32[$723 >> 2] | 0) + 36 >> 2] | 0, $723 | 0) | 0;
         $734 = __THREW__;
         __THREW__ = 0;
         if ($734 & 1) {
          label = 184;
          break L24;
         } else $$0$i$i2$i$i315 = $733;
        } else $$0$i$i2$i$i315 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$726 >> 2] | 0) | 0;
        if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i315, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
         HEAP32[$1 >> 2] = 0;
         label = 243;
         break;
        } else if ($932) {
         $933 = $723;
         break;
        } else {
         label = 250;
         break L24;
        }
       } while (0);
       if ((label | 0) == 243) {
        label = 0;
        if ($932) {
         label = 250;
         break L24;
        } else $933 = 0;
       }
       $740 = HEAP32[$0 >> 2] | 0;
       $742 = HEAP32[$740 + 12 >> 2] | 0;
       if (($742 | 0) == (HEAP32[$740 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $749 = invoke_ii(HEAP32[(HEAP32[$740 >> 2] | 0) + 36 >> 2] | 0, $740 | 0) | 0;
        $750 = __THREW__;
        __THREW__ = 0;
        if ($750 & 1) {
         label = 184;
         break L24;
        } else $$0$i$i323 = $749;
       } else $$0$i$i323 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$742 >> 2] | 0) | 0;
       __THREW__ = 0;
       $757 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 2048, $$0$i$i323 | 0) | 0;
       $758 = __THREW__;
       __THREW__ = 0;
       if ($758 & 1) {
        label = 184;
        break L24;
       }
       if (!$757) {
        label = 250;
        break L24;
       }
       if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(33, $8 | 0, $9 | 0, $11 | 0);
        $765 = __THREW__;
        __THREW__ = 0;
        if ($765 & 1) {
         label = 184;
         break L24;
        }
       }
       $767 = HEAP32[$0 >> 2] | 0;
       $769 = HEAP32[$767 + 12 >> 2] | 0;
       if (($769 | 0) == (HEAP32[$767 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $776 = invoke_ii(HEAP32[(HEAP32[$767 >> 2] | 0) + 36 >> 2] | 0, $767 | 0) | 0;
        $777 = __THREW__;
        __THREW__ = 0;
        if ($777 & 1) {
         label = 184;
         break L24;
        } else $$0$i$i328 = $776;
       } else $$0$i$i328 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$769 >> 2] | 0) | 0;
       $781 = HEAP32[$9 >> 2] | 0;
       HEAP32[$9 >> 2] = $781 + 4;
       HEAP32[$781 >> 2] = $$0$i$i328;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1;
       $785 = HEAP32[$0 >> 2] | 0;
       $786 = $785 + 12 | 0;
       $787 = HEAP32[$786 >> 2] | 0;
       if (($787 | 0) == (HEAP32[$785 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$785 >> 2] | 0) + 40 >> 2] | 0, $785 | 0) | 0;
        $794 = __THREW__;
        __THREW__ = 0;
        if ($794 & 1) {
         label = 184;
         break L24;
        }
       } else {
        HEAP32[$786 >> 2] = $787 + 4;
        __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$787 >> 2] | 0) | 0;
       }
       $723 = $933;
      }
     } while (0);
     if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
      label = 261;
      break L24;
     } else $$1153 = $$0152;
     break;
    }
   default:
    $$1153 = $$0152;
   } while (0);
   L300 : do if ((label | 0) == 52) {
    label = 0;
    $160 = $915;
    while (1) {
     $143 = HEAP32[$0 >> 2] | 0;
     do if (!$143) $917 = 1; else {
      $146 = HEAP32[$143 + 12 >> 2] | 0;
      if (($146 | 0) == (HEAP32[$143 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $153 = invoke_ii(HEAP32[(HEAP32[$143 >> 2] | 0) + 36 >> 2] | 0, $143 | 0) | 0;
       $154 = __THREW__;
       __THREW__ = 0;
       if ($154 & 1) {
        label = 35;
        break L24;
       } else $$0$i$i$i$i188 = $153;
      } else $$0$i$i$i$i188 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$146 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i188, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $917 = 1;
       break;
      } else {
       $917 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$160) label = 66; else {
      $163 = HEAP32[$160 + 12 >> 2] | 0;
      if (($163 | 0) == (HEAP32[$160 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $170 = invoke_ii(HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] | 0, $160 | 0) | 0;
       $171 = __THREW__;
       __THREW__ = 0;
       if ($171 & 1) {
        label = 35;
        break L24;
       } else $$0$i$i2$i$i194 = $170;
      } else $$0$i$i2$i$i194 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$163 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i194, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 66;
       break;
      } else if ($917) {
       $918 = $160;
       break;
      } else {
       $$1153 = $$0152;
       break L300;
      }
     } while (0);
     if ((label | 0) == 66) {
      label = 0;
      if ($917) {
       $$1153 = $$0152;
       break L300;
      } else $918 = 0;
     }
     $177 = HEAP32[$0 >> 2] | 0;
     $179 = HEAP32[$177 + 12 >> 2] | 0;
     if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $186 = invoke_ii(HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] | 0, $177 | 0) | 0;
      $187 = __THREW__;
      __THREW__ = 0;
      if ($187 & 1) {
       label = 35;
       break L24;
      } else $$0$i$i202 = $186;
     } else $$0$i$i202 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$179 >> 2] | 0) | 0;
     __THREW__ = 0;
     $194 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $7 | 0, 8192, $$0$i$i202 | 0) | 0;
     $195 = __THREW__;
     __THREW__ = 0;
     if ($195 & 1) {
      label = 35;
      break L24;
     }
     if (!$194) {
      $$1153 = $$0152;
      break L300;
     }
     $197 = HEAP32[$0 >> 2] | 0;
     $198 = $197 + 12 | 0;
     $199 = HEAP32[$198 >> 2] | 0;
     if (($199 | 0) == (HEAP32[$197 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $206 = invoke_ii(HEAP32[(HEAP32[$197 >> 2] | 0) + 40 >> 2] | 0, $197 | 0) | 0;
      $207 = __THREW__;
      __THREW__ = 0;
      if ($207 & 1) {
       label = 35;
       break L24;
      } else $$0$i$i207 = $206;
     } else {
      HEAP32[$198 >> 2] = $199 + 4;
      $$0$i$i207 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$199 >> 2] | 0) | 0;
     }
     __THREW__ = 0;
     invoke_vii(89, $23 | 0, $$0$i$i207 | 0);
     $212 = __THREW__;
     __THREW__ = 0;
     if ($212 & 1) {
      label = 35;
      break L24;
     } else $160 = $918;
    }
   } while (0);
   $$0152 = $$1153;
   $$0161 = $$0161 + 1 | 0;
  }
  L337 : switch (label | 0) {
  case 35:
   {
    $lpad$phi$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$index2 = tempRet0;
    label = 37;
    break;
   }
  case 36:
   {
    $lpad$phi$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$index2 = tempRet0;
    label = 37;
    break;
   }
  case 50:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 113:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 125:
   {
    $$5145 = ___cxa_find_matching_catch_2() | 0;
    $$5151 = tempRet0;
    break L21;
    break;
   }
  case 156:
   {
    $$5145 = ___cxa_find_matching_catch_2() | 0;
    $$5151 = tempRet0;
    break L21;
    break;
   }
  case 157:
   {
    $$5145 = ___cxa_find_matching_catch_2() | 0;
    $$5151 = tempRet0;
    break L21;
    break;
   }
  case 160:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 184:
   {
    $lpad$phi424$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi424$index8 = tempRet0;
    label = 187;
    break;
   }
  case 185:
   {
    $lpad$phi424$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi424$index8 = tempRet0;
    label = 187;
    break;
   }
  case 186:
   {
    $lpad$phi424$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi424$index8 = tempRet0;
    label = 187;
    break;
   }
  case 188:
   {
    $$5145 = ___cxa_find_matching_catch_2() | 0;
    $$5151 = tempRet0;
    break L21;
    break;
   }
  case 224:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 250:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 261:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 302;
    break;
   }
  case 263:
   {
    L339 : do if ($$0152 | 0) {
     $806 = $$0152 + 8 + 3 | 0;
     $807 = $$0152 + 4 | 0;
     $$0 = 1;
     L341 : while (1) {
      $808 = HEAP8[$806 >> 0] | 0;
      if ($808 << 24 >> 24 < 0) $813 = HEAP32[$807 >> 2] | 0; else $813 = $808 & 255;
      if ($$0 >>> 0 >= $813 >>> 0) break L339;
      $814 = HEAP32[$0 >> 2] | 0;
      do if (!$814) $934 = 1; else {
       $817 = HEAP32[$814 + 12 >> 2] | 0;
       if (($817 | 0) == (HEAP32[$814 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $824 = invoke_ii(HEAP32[(HEAP32[$814 >> 2] | 0) + 36 >> 2] | 0, $814 | 0) | 0;
        $825 = __THREW__;
        __THREW__ = 0;
        if ($825 & 1) {
         label = 291;
         break L341;
        } else $$0$i$i$i$i334 = $824;
       } else $$0$i$i$i$i334 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$817 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i334, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $934 = 1;
        break;
       } else {
        $934 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      $831 = HEAP32[$1 >> 2] | 0;
      do if (!$831) label = 282; else {
       $834 = HEAP32[$831 + 12 >> 2] | 0;
       if (($834 | 0) == (HEAP32[$831 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $841 = invoke_ii(HEAP32[(HEAP32[$831 >> 2] | 0) + 36 >> 2] | 0, $831 | 0) | 0;
        $842 = __THREW__;
        __THREW__ = 0;
        if ($842 & 1) {
         label = 291;
         break L341;
        } else $$0$i$i2$i$i340 = $841;
       } else $$0$i$i2$i$i340 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$834 >> 2] | 0) | 0;
       if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i340, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 282;
        break;
       } else if ($934) break; else {
        label = 290;
        break L341;
       }
      } while (0);
      if ((label | 0) == 282) {
       label = 0;
       if ($934) {
        label = 290;
        break;
       }
      }
      $848 = HEAP32[$0 >> 2] | 0;
      $850 = HEAP32[$848 + 12 >> 2] | 0;
      if (($850 | 0) == (HEAP32[$848 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $857 = invoke_ii(HEAP32[(HEAP32[$848 >> 2] | 0) + 36 >> 2] | 0, $848 | 0) | 0;
       $858 = __THREW__;
       __THREW__ = 0;
       if ($858 & 1) {
        label = 291;
        break;
       } else $$0$i$i348 = $857;
      } else $$0$i$i348 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$850 >> 2] | 0) | 0;
      if ((HEAP8[$806 >> 0] | 0) < 0) $866 = HEAP32[$$0152 >> 2] | 0; else $866 = $$0152;
      if (($$0$i$i348 | 0) != (HEAP32[$866 + ($$0 << 2) >> 2] | 0)) {
       label = 290;
       break;
      }
      $873 = HEAP32[$0 >> 2] | 0;
      $874 = $873 + 12 | 0;
      $875 = HEAP32[$874 >> 2] | 0;
      if (($875 | 0) == (HEAP32[$873 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$873 >> 2] | 0) + 40 >> 2] | 0, $873 | 0) | 0;
       $882 = __THREW__;
       __THREW__ = 0;
       if ($882 & 1) {
        label = 291;
        break;
       }
      } else {
       HEAP32[$874 >> 2] = $875 + 4;
       __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$875 >> 2] | 0) | 0;
      }
      $$0 = $$0 + 1 | 0;
     }
     if ((label | 0) == 290) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $$10 = 0;
      label = 302;
      break L337;
     } else if ((label | 0) == 291) {
      $871 = ___cxa_find_matching_catch_2() | 0;
      $$5145 = $871;
      $$5151 = tempRet0;
      break L21;
     }
    } while (0);
    $887 = HEAP32[$13 >> 2] | 0;
    $888 = HEAP32[$14 >> 2] | 0;
    if (($887 | 0) == ($888 | 0)) {
     $$10 = 1;
     label = 302;
    } else {
     HEAP32[$25 >> 2] = 0;
     __THREW__ = 0;
     invoke_viiii(28, $19 | 0, $887 | 0, $888 | 0, $25 | 0);
     $890 = __THREW__;
     __THREW__ = 0;
     if ($890 & 1) {
      $896 = ___cxa_find_matching_catch_2() | 0;
      $$5145 = $896;
      $$5151 = tempRet0;
      break L21;
     }
     if (!(HEAP32[$25 >> 2] | 0)) {
      $$10 = 1;
      label = 302;
      break;
     } else {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $$10 = 0;
      label = 302;
      break;
     }
    }
    break;
   }
  }
  if ((label | 0) == 37) {
   $$5145 = $lpad$phi$index;
   $$5151 = $lpad$phi$index2;
   break;
  } else if ((label | 0) == 187) {
   $$5145 = $lpad$phi424$index;
   $$5151 = $lpad$phi424$index8;
   break;
  } else if ((label | 0) == 302) {
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
   $898 = HEAP32[$13 >> 2] | 0;
   HEAP32[$13 >> 2] = 0;
   if ($898 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$13 + 4 >> 2] | 0, $898 | 0);
    $902 = __THREW__;
    __THREW__ = 0;
    if ($902 & 1) {
     $904 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($904);
    }
   }
   STACKTOP = sp;
   return $$10 | 0;
  }
 } while (0);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($23);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($22);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($21);
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $906 = HEAP32[$13 >> 2] | 0;
 HEAP32[$13 >> 2] = 0;
 if ($906 | 0) {
  __THREW__ = 0;
  invoke_vi(HEAP32[$13 + 4 >> 2] | 0, $906 | 0);
  $910 = __THREW__;
  __THREW__ = 0;
  if ($910 & 1) {
   $912 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($912);
  }
 }
 ___resumeException($$5145 | 0);
 return 0;
}

function __ZN3zim6DirentC2ENSt3__210unique_ptrINS_6BufferENS1_14default_deleteIS3_EEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy10 = 0, $$byval_copy16 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $306 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $326 = 0, $329 = 0, $33 = 0, $330 = 0, $332 = 0, $333 = 0, $34 = 0, $340 = 0, $343 = 0, $344 = 0, $346 = 0, $347 = 0, $35 = 0, $354 = 0, $355 = 0, $357 = 0, $358 = 0, $36 = 0, $361 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $372 = 0, $376 = 0, $38 = 0, $382 = 0, $383 = 0, $385 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $394 = 0, $4 = 0, $40 = 0, $401 = 0, $402 = 0, $403 = 0, $405 = 0, $409 = 0, $41 = 0, $411 = 0, $414 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $44 = 0, $444 = 0, $445 = 0, $446 = 0, $45 = 0, $46 = 0, $461 = 0, $464 = 0, $465 = 0, $466 = 0, $469 = 0, $47 = 0, $473 = 0, $479 = 0, $48 = 0, $485 = 0, $486 = 0, $49 = 0, $491 = 0, $493 = 0, $497 = 0, $5 = 0, $50 = 0, $502 = 0, $508 = 0, $51 = 0, $510 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $524 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $534 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $55 = 0, $551 = 0, $553 = 0, $56 = 0, $561 = 0, $564 = 0, $569 = 0, $57 = 0, $571 = 0, $575 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $59 = 0, $599 = 0, $6 = 0, $60 = 0, $605 = 0, $607 = 0, $61 = 0, $614 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $622 = 0, $626 = 0, $63 = 0, $632 = 0, $638 = 0, $639 = 0, $64 = 0, $644 = 0, $646 = 0, $65 = 0, $650 = 0, $655 = 0, $66 = 0, $661 = 0, $666 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $675 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $685 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $7 = 0, $70 = 0, $702 = 0, $704 = 0, $71 = 0, $712 = 0, $715 = 0, $72 = 0, $720 = 0, $722 = 0, $726 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $74 = 0, $75 = 0, $750 = 0, $756 = 0, $758 = 0, $76 = 0, $762 = 0, $77 = 0, $770 = 0, $771 = 0, $776 = 0, $778 = 0, $78 = 0, $782 = 0, $787 = 0, $79 = 0, $793 = 0, $798 = 0, $8 = 0, $80 = 0, $801 = 0, $802 = 0, $803 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $813 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $82 = 0, $83 = 0, $830 = 0, $832 = 0, $84 = 0, $840 = 0, $843 = 0, $848 = 0, $85 = 0, $850 = 0, $854 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $87 = 0, $879 = 0, $88 = 0, $881 = 0, $883 = 0, $885 = 0, $886 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328 | 0;
 $$byval_copy16 = sp + 232 | 0;
 $$byval_copy10 = sp + 1276 | 0;
 $2 = sp + 1296 | 0;
 $3 = sp + 1292 | 0;
 $4 = sp + 1288 | 0;
 $5 = sp + 1284 | 0;
 $6 = sp + 1280 | 0;
 $7 = sp + 1272 | 0;
 $8 = sp + 1268 | 0;
 $9 = sp + 1264 | 0;
 $10 = sp + 1260 | 0;
 $11 = sp + 1256 | 0;
 $12 = sp + 1252 | 0;
 $13 = sp + 1248 | 0;
 $14 = sp + 1244 | 0;
 $15 = sp + 1240 | 0;
 $16 = sp + 224 | 0;
 $17 = sp + 1236 | 0;
 $18 = sp + 1232 | 0;
 $19 = sp + 1318 | 0;
 $20 = sp + 1228 | 0;
 $21 = sp + 1224 | 0;
 $22 = sp + 1220 | 0;
 $23 = sp + 1216 | 0;
 $24 = sp + 1212 | 0;
 $25 = sp + 1208 | 0;
 $26 = sp + 1204 | 0;
 $27 = sp + 1200 | 0;
 $28 = sp + 1196 | 0;
 $29 = sp + 1192 | 0;
 $30 = sp + 1188 | 0;
 $31 = sp + 1184 | 0;
 $32 = sp + 1180 | 0;
 $33 = sp + 1176 | 0;
 $34 = sp + 1172 | 0;
 $35 = sp + 1168 | 0;
 $36 = sp + 1164 | 0;
 $37 = sp + 1160 | 0;
 $38 = sp + 1156 | 0;
 $39 = sp + 1152 | 0;
 $40 = sp + 1148 | 0;
 $41 = sp + 1144 | 0;
 $42 = sp + 1140 | 0;
 $43 = sp + 1136 | 0;
 $44 = sp + 1132 | 0;
 $45 = sp + 1128 | 0;
 $46 = sp + 1317 | 0;
 $47 = sp + 1316 | 0;
 $48 = sp + 1124 | 0;
 $49 = sp + 1120 | 0;
 $50 = sp + 216 | 0;
 $51 = sp + 1116 | 0;
 $52 = sp + 1112 | 0;
 $53 = sp + 1315 | 0;
 $54 = sp + 1108 | 0;
 $55 = sp + 1104 | 0;
 $56 = sp + 1100 | 0;
 $57 = sp + 1096 | 0;
 $58 = sp + 1092 | 0;
 $59 = sp + 1088 | 0;
 $60 = sp + 1084 | 0;
 $61 = sp + 1080 | 0;
 $62 = sp + 1076 | 0;
 $63 = sp + 1072 | 0;
 $64 = sp + 1068 | 0;
 $65 = sp + 1064 | 0;
 $66 = sp + 1060 | 0;
 $67 = sp + 1056 | 0;
 $68 = sp + 1052 | 0;
 $69 = sp + 1048 | 0;
 $70 = sp + 1044 | 0;
 $71 = sp + 1040 | 0;
 $72 = sp + 1036 | 0;
 $73 = sp + 1032 | 0;
 $74 = sp + 1028 | 0;
 $75 = sp + 1024 | 0;
 $76 = sp + 1020 | 0;
 $77 = sp + 1016 | 0;
 $78 = sp + 1012 | 0;
 $79 = sp + 1008 | 0;
 $80 = sp + 1004 | 0;
 $81 = sp + 1e3 | 0;
 $82 = sp + 996 | 0;
 $83 = sp + 992 | 0;
 $84 = sp + 208 | 0;
 $85 = sp + 988 | 0;
 $86 = sp + 984 | 0;
 $87 = sp + 1314 | 0;
 $88 = sp + 980 | 0;
 $89 = sp + 976 | 0;
 $90 = sp + 972 | 0;
 $91 = sp + 968 | 0;
 $92 = sp + 964 | 0;
 $93 = sp + 960 | 0;
 $94 = sp + 956 | 0;
 $95 = sp + 952 | 0;
 $96 = sp + 948 | 0;
 $97 = sp + 944 | 0;
 $98 = sp + 940 | 0;
 $99 = sp + 936 | 0;
 $100 = sp + 932 | 0;
 $101 = sp + 928 | 0;
 $102 = sp + 924 | 0;
 $103 = sp + 920 | 0;
 $104 = sp + 916 | 0;
 $105 = sp + 912 | 0;
 $106 = sp + 908 | 0;
 $107 = sp + 904 | 0;
 $108 = sp + 900 | 0;
 $109 = sp + 896 | 0;
 $110 = sp + 892 | 0;
 $111 = sp + 888 | 0;
 $112 = sp + 884 | 0;
 $113 = sp + 880 | 0;
 $114 = sp + 1313 | 0;
 $115 = sp + 1312 | 0;
 $116 = sp + 876 | 0;
 $117 = sp + 872 | 0;
 $118 = sp + 200 | 0;
 $119 = sp + 868 | 0;
 $120 = sp + 864 | 0;
 $121 = sp + 1311 | 0;
 $122 = sp + 860 | 0;
 $123 = sp + 856 | 0;
 $124 = sp + 852 | 0;
 $125 = sp + 848 | 0;
 $126 = sp + 844 | 0;
 $127 = sp + 840 | 0;
 $128 = sp + 836 | 0;
 $129 = sp + 832 | 0;
 $130 = sp + 828 | 0;
 $131 = sp + 824 | 0;
 $132 = sp + 820 | 0;
 $133 = sp + 816 | 0;
 $134 = sp + 812 | 0;
 $135 = sp + 808 | 0;
 $136 = sp + 804 | 0;
 $137 = sp + 800 | 0;
 $138 = sp + 796 | 0;
 $139 = sp + 792 | 0;
 $140 = sp + 788 | 0;
 $141 = sp + 784 | 0;
 $142 = sp + 780 | 0;
 $143 = sp + 776 | 0;
 $144 = sp + 772 | 0;
 $145 = sp + 768 | 0;
 $146 = sp + 764 | 0;
 $147 = sp + 760 | 0;
 $148 = sp + 756 | 0;
 $149 = sp + 752 | 0;
 $150 = sp + 748 | 0;
 $151 = sp + 744 | 0;
 $152 = sp + 740 | 0;
 $153 = sp + 736 | 0;
 $154 = sp + 732 | 0;
 $155 = sp + 728 | 0;
 $156 = sp + 724 | 0;
 $157 = sp + 720 | 0;
 $158 = sp + 716 | 0;
 $159 = sp + 712 | 0;
 $160 = sp + 708 | 0;
 $161 = sp + 704 | 0;
 $162 = sp + 700 | 0;
 $163 = sp + 696 | 0;
 $164 = sp + 692 | 0;
 $165 = sp + 688 | 0;
 $166 = sp + 684 | 0;
 $167 = sp + 680 | 0;
 $168 = sp + 676 | 0;
 $169 = sp + 672 | 0;
 $170 = sp + 668 | 0;
 $171 = sp + 664 | 0;
 $172 = sp + 660 | 0;
 $173 = sp + 656 | 0;
 $174 = sp + 652 | 0;
 $175 = sp + 648 | 0;
 $176 = sp + 644 | 0;
 $177 = sp + 640 | 0;
 $178 = sp + 636 | 0;
 $179 = sp + 632 | 0;
 $180 = sp + 628 | 0;
 $181 = sp + 624 | 0;
 $182 = sp + 620 | 0;
 $183 = sp + 616 | 0;
 $184 = sp + 612 | 0;
 $185 = sp + 608 | 0;
 $186 = sp + 604 | 0;
 $187 = sp + 600 | 0;
 $188 = sp + 596 | 0;
 $189 = sp + 592 | 0;
 $190 = sp + 588 | 0;
 $191 = sp + 584 | 0;
 $192 = sp + 580 | 0;
 $193 = sp + 576 | 0;
 $194 = sp + 572 | 0;
 $195 = sp + 568 | 0;
 $196 = sp + 564 | 0;
 $197 = sp + 560 | 0;
 $198 = sp + 556 | 0;
 $199 = sp + 552 | 0;
 $200 = sp + 548 | 0;
 $201 = sp + 192 | 0;
 $202 = sp + 544 | 0;
 $203 = sp + 540 | 0;
 $204 = sp + 1310 | 0;
 $205 = sp + 536 | 0;
 $206 = sp + 532 | 0;
 $207 = sp + 528 | 0;
 $208 = sp + 524 | 0;
 $209 = sp + 520 | 0;
 $210 = sp + 516 | 0;
 $211 = sp + 512 | 0;
 $212 = sp + 508 | 0;
 $213 = sp + 504 | 0;
 $214 = sp + 500 | 0;
 $215 = sp + 496 | 0;
 $216 = sp + 492 | 0;
 $217 = sp + 488 | 0;
 $218 = sp + 484 | 0;
 $219 = sp + 480 | 0;
 $220 = sp + 476 | 0;
 $221 = sp + 472 | 0;
 $222 = sp + 468 | 0;
 $223 = sp + 464 | 0;
 $224 = sp + 460 | 0;
 $225 = sp + 456 | 0;
 $226 = sp + 452 | 0;
 $227 = sp + 448 | 0;
 $228 = sp + 444 | 0;
 $229 = sp + 440 | 0;
 $230 = sp + 436 | 0;
 $231 = sp + 1309 | 0;
 $232 = sp + 1308 | 0;
 $233 = sp + 432 | 0;
 $234 = sp + 428 | 0;
 $235 = sp + 184 | 0;
 $236 = sp + 424 | 0;
 $237 = sp + 420 | 0;
 $238 = sp + 1307 | 0;
 $239 = sp + 416 | 0;
 $240 = sp + 412 | 0;
 $241 = sp + 408 | 0;
 $242 = sp + 404 | 0;
 $243 = sp + 400 | 0;
 $244 = sp + 396 | 0;
 $245 = sp + 392 | 0;
 $246 = sp + 388 | 0;
 $247 = sp + 384 | 0;
 $248 = sp + 380 | 0;
 $249 = sp + 376 | 0;
 $250 = sp + 372 | 0;
 $251 = sp + 368 | 0;
 $252 = sp + 364 | 0;
 $253 = sp + 360 | 0;
 $254 = sp + 356 | 0;
 $255 = sp + 1300 | 0;
 $256 = sp + 176 | 0;
 $257 = sp + 352 | 0;
 $258 = sp + 348 | 0;
 $259 = sp + 1306 | 0;
 $260 = sp + 1305 | 0;
 $261 = sp + 1304 | 0;
 $262 = sp + 1303 | 0;
 $263 = sp + 168 | 0;
 $264 = sp + 1302 | 0;
 $265 = sp + 160 | 0;
 $266 = sp + 344 | 0;
 $267 = sp + 152 | 0;
 $268 = sp + 144 | 0;
 $269 = sp + 340 | 0;
 $270 = sp + 136 | 0;
 $271 = sp + 128 | 0;
 $272 = sp + 336 | 0;
 $273 = sp + 332 | 0;
 $274 = sp + 328 | 0;
 $275 = sp + 324 | 0;
 $276 = sp + 120 | 0;
 $277 = sp + 112 | 0;
 $278 = sp + 320 | 0;
 $279 = sp + 104 | 0;
 $280 = sp + 96 | 0;
 $281 = sp + 316 | 0;
 $282 = sp + 312 | 0;
 $283 = sp + 300 | 0;
 $284 = sp + 288 | 0;
 $285 = sp + 276 | 0;
 $286 = sp + 88 | 0;
 $287 = sp + 80 | 0;
 $288 = sp + 72 | 0;
 $289 = sp + 264 | 0;
 $290 = sp + 64 | 0;
 $291 = sp + 56 | 0;
 $292 = sp + 48 | 0;
 $293 = sp + 40 | 0;
 $294 = sp + 32 | 0;
 $295 = sp + 252 | 0;
 $296 = sp + 24 | 0;
 $297 = sp + 16 | 0;
 $298 = sp + 8 | 0;
 $299 = sp + 240 | 0;
 $300 = sp;
 HEAP32[$254 >> 2] = $0;
 $301 = HEAP32[$254 >> 2] | 0;
 __ZN3zim6DirentC2Ev($301);
 HEAP32[$253 >> 2] = $1;
 HEAP32[$252 >> 2] = HEAP32[$253 >> 2];
 HEAP32[$251 >> 2] = HEAP32[$252 >> 2];
 $305 = HEAP32[HEAP32[$251 >> 2] >> 2] | 0;
 __THREW__ = 0;
 invoke_viii(16, $256 | 0, 0, 0);
 $306 = __THREW__;
 __THREW__ = 0;
 L1 : do if (!($306 & 1)) {
  __THREW__ = 0;
  HEAP32[$$byval_copy16 >> 2] = HEAP32[$256 >> 2];
  HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$256 + 4 >> 2];
  $308 = invoke_iii(45, $305 | 0, $$byval_copy16 | 0) | 0;
  $309 = __THREW__;
  __THREW__ = 0;
  if (!($309 & 1)) {
   HEAP16[$255 >> 1] = $308;
   HEAP8[$259 >> 0] = (HEAPU16[$255 >> 1] | 0 | 0) == 65535 & 1;
   HEAP8[$260 >> 0] = (HEAPU16[$255 >> 1] | 0 | 0) == 65534 & 1;
   HEAP8[$261 >> 0] = (HEAPU16[$255 >> 1] | 0 | 0) == 65533 & 1;
   HEAP32[$250 >> 2] = $1;
   HEAP32[$249 >> 2] = HEAP32[$250 >> 2];
   HEAP32[$248 >> 2] = HEAP32[$249 >> 2];
   $326 = HEAP32[HEAP32[$248 >> 2] >> 2] | 0;
   $329 = HEAP32[(HEAP32[$326 >> 2] | 0) + 8 >> 2] | 0;
   __THREW__ = 0;
   invoke_viii(16, $263 | 0, 0, 0);
   $330 = __THREW__;
   __THREW__ = 0;
   if (!($330 & 1)) {
    __THREW__ = 0;
    HEAP32[$$byval_copy16 >> 2] = HEAP32[$263 >> 2];
    HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$263 + 4 >> 2];
    $332 = invoke_iii($329 | 0, $326 | 0, $$byval_copy16 | 0) | 0;
    $333 = __THREW__;
    __THREW__ = 0;
    if (!($333 & 1)) {
     HEAP8[$262 >> 0] = HEAP8[$332 + 2 >> 0] | 0;
     HEAP32[$247 >> 2] = $1;
     HEAP32[$246 >> 2] = HEAP32[$247 >> 2];
     HEAP32[$245 >> 2] = HEAP32[$246 >> 2];
     $340 = HEAP32[HEAP32[$245 >> 2] >> 2] | 0;
     $343 = HEAP32[(HEAP32[$340 >> 2] | 0) + 8 >> 2] | 0;
     __THREW__ = 0;
     invoke_viii(16, $265 | 0, 0, 0);
     $344 = __THREW__;
     __THREW__ = 0;
     if (!($344 & 1)) {
      __THREW__ = 0;
      HEAP32[$$byval_copy16 >> 2] = HEAP32[$265 >> 2];
      HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$265 + 4 >> 2];
      $346 = invoke_iii($343 | 0, $340 | 0, $$byval_copy16 | 0) | 0;
      $347 = __THREW__;
      __THREW__ = 0;
      if (!($347 & 1)) {
       HEAP8[$264 >> 0] = HEAP8[$346 + 3 >> 0] | 0;
       HEAP32[$244 >> 2] = $1;
       HEAP32[$243 >> 2] = HEAP32[$244 >> 2];
       HEAP32[$242 >> 2] = HEAP32[$243 >> 2];
       $354 = HEAP32[HEAP32[$242 >> 2] >> 2] | 0;
       __THREW__ = 0;
       invoke_viii(16, $267 | 0, 4, 0);
       $355 = __THREW__;
       __THREW__ = 0;
       if (!($355 & 1)) {
        __THREW__ = 0;
        HEAP32[$$byval_copy16 >> 2] = HEAP32[$267 >> 2];
        HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$267 + 4 >> 2];
        $357 = invoke_iii(41, $354 | 0, $$byval_copy16 | 0) | 0;
        $358 = __THREW__;
        __THREW__ = 0;
        if (!($358 & 1)) {
         HEAP32[$266 >> 2] = $357;
         __ZN3zim6Dirent10setVersionEj($301, HEAP32[$266 >> 2] | 0);
         __THREW__ = 0;
         invoke_viii(16, $268 | 0, 8, 0);
         $361 = __THREW__;
         __THREW__ = 0;
         if (!($361 & 1)) {
          do if (HEAP8[$259 >> 0] & 1) {
           HEAP32[$241 >> 2] = $1;
           HEAP32[$240 >> 2] = HEAP32[$241 >> 2];
           HEAP32[$239 >> 2] = HEAP32[$240 >> 2];
           $368 = HEAP32[HEAP32[$239 >> 2] >> 2] | 0;
           HEAP32[$270 >> 2] = HEAP32[$268 >> 2];
           HEAP32[$270 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
           __THREW__ = 0;
           HEAP32[$$byval_copy16 >> 2] = HEAP32[$270 >> 2];
           HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$270 + 4 >> 2];
           $369 = invoke_iii(41, $368 | 0, $$byval_copy16 | 0) | 0;
           $370 = __THREW__;
           __THREW__ = 0;
           if ($370 & 1) break L1;
           __ZN3zim15article_index_tC2Ej($269, $369);
           $372 = $271;
           HEAP32[$372 >> 2] = 4;
           HEAP32[$372 + 4 >> 2] = 0;
           __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($268, $271) | 0;
           HEAP32[$272 >> 2] = HEAP32[$269 >> 2];
           HEAP32[$$byval_copy16 >> 2] = HEAP32[$272 >> 2];
           __ZN3zim6Dirent11setRedirectENS_15article_index_tE($301, $$byval_copy16);
          } else {
           if (!(HEAP8[$260 >> 0] & 1)) if (!(HEAP8[$261 >> 0] & 1)) {
            HEAP32[$186 >> 2] = $1;
            HEAP32[$185 >> 2] = HEAP32[$186 >> 2];
            HEAP32[$184 >> 2] = HEAP32[$185 >> 2];
            $390 = HEAP32[HEAP32[$184 >> 2] >> 2] | 0;
            HEAP32[$276 >> 2] = HEAP32[$268 >> 2];
            HEAP32[$276 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
            __THREW__ = 0;
            HEAP32[$$byval_copy16 >> 2] = HEAP32[$276 >> 2];
            HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$276 + 4 >> 2];
            $391 = invoke_iii(41, $390 | 0, $$byval_copy16 | 0) | 0;
            $392 = __THREW__;
            __THREW__ = 0;
            if ($392 & 1) break L1;
            HEAP32[$275 >> 2] = $391;
            $394 = $277;
            HEAP32[$394 >> 2] = 4;
            HEAP32[$394 + 4 >> 2] = 0;
            __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($268, $277) | 0;
            HEAP32[$183 >> 2] = $1;
            HEAP32[$182 >> 2] = HEAP32[$183 >> 2];
            HEAP32[$181 >> 2] = HEAP32[$182 >> 2];
            $401 = HEAP32[HEAP32[$181 >> 2] >> 2] | 0;
            HEAP32[$279 >> 2] = HEAP32[$268 >> 2];
            HEAP32[$279 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
            __THREW__ = 0;
            HEAP32[$$byval_copy16 >> 2] = HEAP32[$279 >> 2];
            HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$279 + 4 >> 2];
            $402 = invoke_iii(41, $401 | 0, $$byval_copy16 | 0) | 0;
            $403 = __THREW__;
            __THREW__ = 0;
            if ($403 & 1) break L1;
            HEAP32[$278 >> 2] = $402;
            $405 = $280;
            HEAP32[$405 >> 2] = 4;
            HEAP32[$405 + 4 >> 2] = 0;
            __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($268, $280) | 0;
            $409 = HEAP16[$255 >> 1] | 0;
            __THREW__ = 0;
            invoke_vii(59, $281 | 0, HEAP32[$275 >> 2] | 0);
            $411 = __THREW__;
            __THREW__ = 0;
            if ($411 & 1) break L1;
            __ZN3zim12blob_index_tC2Ej($282, HEAP32[$278 >> 2] | 0);
            __THREW__ = 0;
            HEAP32[$$byval_copy10 >> 2] = HEAP32[$281 >> 2];
            HEAP32[$$byval_copy16 >> 2] = HEAP32[$282 >> 2];
            invoke_viiii(25, $301 | 0, $409 | 0, $$byval_copy10 | 0, $$byval_copy16 | 0);
            $414 = __THREW__;
            __THREW__ = 0;
            if ($414 & 1) break L1; else break;
           }
           $382 = HEAP16[$255 >> 1] | 0;
           __THREW__ = 0;
           invoke_vii(59, $273 | 0, 0);
           $383 = __THREW__;
           __THREW__ = 0;
           if ($383 & 1) break L1;
           __ZN3zim12blob_index_tC2Ej($274, 0);
           __THREW__ = 0;
           HEAP32[$$byval_copy10 >> 2] = HEAP32[$273 >> 2];
           HEAP32[$$byval_copy16 >> 2] = HEAP32[$274 >> 2];
           invoke_viiii(25, $301 | 0, $382 | 0, $$byval_copy10 | 0, $$byval_copy16 | 0);
           $385 = __THREW__;
           __THREW__ = 0;
           if ($385 & 1) break L1;
          } while (0);
          HEAP32[$180 >> 2] = $283;
          $416 = HEAP32[$180 >> 2] | 0;
          HEAP32[$179 >> 2] = $416;
          $417 = HEAP32[$179 >> 2] | 0;
          HEAP32[$178 >> 2] = $417;
          $418 = HEAP32[$178 >> 2] | 0;
          HEAP32[$418 >> 2] = 0;
          HEAP32[$418 + 4 >> 2] = 0;
          HEAP32[$418 + 8 >> 2] = 0;
          HEAP32[$177 >> 2] = $417;
          HEAP32[$176 >> 2] = HEAP32[$177 >> 2];
          HEAP32[$173 >> 2] = $416;
          HEAP32[$172 >> 2] = HEAP32[$173 >> 2];
          HEAP32[$171 >> 2] = HEAP32[$172 >> 2];
          HEAP32[$174 >> 2] = HEAP32[$171 >> 2];
          HEAP32[$175 >> 2] = 0;
          while (1) {
           if ((HEAP32[$175 >> 2] | 0) >>> 0 >= 3) break;
           HEAP32[(HEAP32[$174 >> 2] | 0) + (HEAP32[$175 >> 2] << 2) >> 2] = 0;
           HEAP32[$175 >> 2] = (HEAP32[$175 >> 2] | 0) + 1;
          }
          HEAP32[$170 >> 2] = $284;
          $430 = HEAP32[$170 >> 2] | 0;
          HEAP32[$169 >> 2] = $430;
          $431 = HEAP32[$169 >> 2] | 0;
          HEAP32[$168 >> 2] = $431;
          $432 = HEAP32[$168 >> 2] | 0;
          HEAP32[$432 >> 2] = 0;
          HEAP32[$432 + 4 >> 2] = 0;
          HEAP32[$432 + 8 >> 2] = 0;
          HEAP32[$167 >> 2] = $431;
          HEAP32[$166 >> 2] = HEAP32[$167 >> 2];
          HEAP32[$163 >> 2] = $430;
          HEAP32[$162 >> 2] = HEAP32[$163 >> 2];
          HEAP32[$161 >> 2] = HEAP32[$162 >> 2];
          HEAP32[$164 >> 2] = HEAP32[$161 >> 2];
          HEAP32[$165 >> 2] = 0;
          while (1) {
           if ((HEAP32[$165 >> 2] | 0) >>> 0 >= 3) break;
           HEAP32[(HEAP32[$164 >> 2] | 0) + (HEAP32[$165 >> 2] << 2) >> 2] = 0;
           HEAP32[$165 >> 2] = (HEAP32[$165 >> 2] | 0) + 1;
          }
          HEAP32[$153 >> 2] = $285;
          $444 = HEAP32[$153 >> 2] | 0;
          HEAP32[$152 >> 2] = $444;
          $445 = HEAP32[$152 >> 2] | 0;
          HEAP32[$151 >> 2] = $445;
          $446 = HEAP32[$151 >> 2] | 0;
          HEAP32[$446 >> 2] = 0;
          HEAP32[$446 + 4 >> 2] = 0;
          HEAP32[$446 + 8 >> 2] = 0;
          HEAP32[$150 >> 2] = $445;
          HEAP32[$149 >> 2] = HEAP32[$150 >> 2];
          HEAP32[$146 >> 2] = $444;
          HEAP32[$145 >> 2] = HEAP32[$146 >> 2];
          HEAP32[$144 >> 2] = HEAP32[$145 >> 2];
          HEAP32[$147 >> 2] = HEAP32[$144 >> 2];
          HEAP32[$148 >> 2] = 0;
          while (1) {
           if ((HEAP32[$148 >> 2] | 0) >>> 0 >= 3) break;
           HEAP32[(HEAP32[$147 >> 2] | 0) + (HEAP32[$148 >> 2] << 2) >> 2] = 0;
           HEAP32[$148 >> 2] = (HEAP32[$148 >> 2] | 0) + 1;
          }
          HEAP32[$143 >> 2] = $1;
          HEAP32[$142 >> 2] = HEAP32[$143 >> 2];
          HEAP32[$141 >> 2] = HEAP32[$142 >> 2];
          $461 = HEAP32[HEAP32[$141 >> 2] >> 2] | 0;
          $464 = HEAP32[(HEAP32[$461 >> 2] | 0) + 8 >> 2] | 0;
          HEAP32[$287 >> 2] = HEAP32[$268 >> 2];
          HEAP32[$287 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
          __THREW__ = 0;
          HEAP32[$$byval_copy16 >> 2] = HEAP32[$287 >> 2];
          HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$287 + 4 >> 2];
          $465 = invoke_iii($464 | 0, $461 | 0, $$byval_copy16 | 0) | 0;
          $466 = __THREW__;
          __THREW__ = 0;
          do if (!($466 & 1)) {
           $469 = $286;
           HEAP32[$469 >> 2] = _strlen($465) | 0;
           HEAP32[$469 + 4 >> 2] = 0;
           $473 = $268;
           $479 = $286;
           $485 = _i64Add(HEAP32[$473 >> 2] | 0, HEAP32[$473 + 4 >> 2] | 0, HEAP32[$479 >> 2] | 0, HEAP32[$479 + 4 >> 2] | 0) | 0;
           $486 = tempRet0;
           HEAP32[$137 >> 2] = $1;
           HEAP32[$136 >> 2] = HEAP32[$137 >> 2];
           HEAP32[$135 >> 2] = HEAP32[$136 >> 2];
           $491 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$135 >> 2] >> 2] | 0) | 0;
           $493 = $288;
           HEAP32[$493 >> 2] = $491;
           HEAP32[$493 + 4 >> 2] = tempRet0;
           $497 = $288;
           $502 = HEAP32[$497 + 4 >> 2] | 0;
           if ($486 >>> 0 > $502 >>> 0 | (($486 | 0) == ($502 | 0) ? $485 >>> 0 >= (HEAP32[$497 >> 2] | 0) >>> 0 : 0)) {
            $508 = ___cxa_allocate_exception(4) | 0;
            HEAP32[$508 >> 2] = 0;
            __ZN3zim11InvalidSizeC2Ev($508);
            __THREW__ = 0;
            invoke_viii(11, $508 | 0, 41088, 59);
            __THREW__ = 0;
            break;
           }
           HEAP32[$134 >> 2] = $1;
           HEAP32[$133 >> 2] = HEAP32[$134 >> 2];
           HEAP32[$132 >> 2] = HEAP32[$133 >> 2];
           $515 = HEAP32[HEAP32[$132 >> 2] >> 2] | 0;
           $518 = HEAP32[(HEAP32[$515 >> 2] | 0) + 8 >> 2] | 0;
           HEAP32[$290 >> 2] = HEAP32[$268 >> 2];
           HEAP32[$290 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
           __THREW__ = 0;
           HEAP32[$$byval_copy16 >> 2] = HEAP32[$290 >> 2];
           HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$290 + 4 >> 2];
           $519 = invoke_iii($518 | 0, $515 | 0, $$byval_copy16 | 0) | 0;
           $520 = __THREW__;
           __THREW__ = 0;
           if (!($520 & 1)) {
            $524 = HEAP32[$286 >> 2] | 0;
            HEAP32[$126 >> 2] = $289;
            HEAP32[$127 >> 2] = $519;
            HEAP32[$128 >> 2] = $524;
            $528 = HEAP32[$126 >> 2] | 0;
            HEAP32[$125 >> 2] = $528;
            $529 = HEAP32[$125 >> 2] | 0;
            HEAP32[$124 >> 2] = $529;
            $530 = HEAP32[$124 >> 2] | 0;
            HEAP32[$530 >> 2] = 0;
            HEAP32[$530 + 4 >> 2] = 0;
            HEAP32[$530 + 8 >> 2] = 0;
            HEAP32[$123 >> 2] = $529;
            HEAP32[$122 >> 2] = HEAP32[$123 >> 2];
            __THREW__ = 0;
            invoke_viii(8, $528 | 0, HEAP32[$127 >> 2] | 0, HEAP32[$128 >> 2] | 0);
            $534 = __THREW__;
            __THREW__ = 0;
            if (!($534 & 1)) {
             HEAP32[$119 >> 2] = $283;
             HEAP32[$120 >> 2] = $289;
             $536 = HEAP32[$119 >> 2] | 0;
             $537 = HEAP32[$120 >> 2] | 0;
             HEAP8[$118 >> 0] = HEAP8[$121 >> 0] | 0;
             HEAP32[$116 >> 2] = $536;
             HEAP32[$117 >> 2] = $537;
             $538 = HEAP32[$116 >> 2] | 0;
             HEAP32[$113 >> 2] = $538;
             $539 = HEAP32[$113 >> 2] | 0;
             HEAP32[$112 >> 2] = $539;
             HEAP32[$111 >> 2] = $539;
             HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
             HEAP32[$109 >> 2] = HEAP32[$110 >> 2];
             if ((HEAPU8[(HEAP32[$109 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
              HEAP32[$104 >> 2] = $539;
              HEAP32[$103 >> 2] = HEAP32[$104 >> 2];
              HEAP32[$102 >> 2] = HEAP32[$103 >> 2];
              $551 = HEAP32[HEAP32[$102 >> 2] >> 2] | 0;
              HEAP8[$114 >> 0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($551, $114);
              HEAP32[$95 >> 2] = $539;
              HEAP32[$96 >> 2] = 0;
              $553 = HEAP32[$96 >> 2] | 0;
              HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
              HEAP32[$93 >> 2] = HEAP32[$94 >> 2];
              HEAP32[(HEAP32[$93 >> 2] | 0) + 4 >> 2] = $553;
             } else {
              HEAP32[$101 >> 2] = $539;
              HEAP32[$100 >> 2] = HEAP32[$101 >> 2];
              HEAP32[$99 >> 2] = HEAP32[$100 >> 2];
              HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
              HEAP32[$97 >> 2] = HEAP32[$98 >> 2];
              $561 = HEAP32[$97 >> 2] | 0;
              HEAP8[$115 >> 0] = 0;
              __ZNSt3__211char_traitsIcE6assignERcRKc($561, $115);
              HEAP32[$107 >> 2] = $539;
              HEAP32[$108 >> 2] = 0;
              $564 = HEAP32[$108 >> 2] & 255;
              HEAP32[$106 >> 2] = HEAP32[$107 >> 2];
              HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
              HEAP8[(HEAP32[$105 >> 2] | 0) + 11 >> 0] = $564;
             }
             HEAP32[$92 >> 2] = $538;
             __THREW__ = 0;
             invoke_vii(73, HEAP32[$92 >> 2] | 0, 0);
             $569 = __THREW__;
             __THREW__ = 0;
             if ($569 & 1) {
              $571 = ___cxa_find_matching_catch_3(0) | 0;
              ___clang_call_terminate($571);
             }
             HEAP32[$91 >> 2] = HEAP32[$117 >> 2];
             HEAP32[$90 >> 2] = HEAP32[$91 >> 2];
             $575 = HEAP32[$90 >> 2] | 0;
             HEAP32[$89 >> 2] = $538;
             HEAP32[$88 >> 2] = HEAP32[$89 >> 2];
             $577 = HEAP32[$88 >> 2] | 0;
             HEAP32[$577 >> 2] = HEAP32[$575 >> 2];
             HEAP32[$577 + 4 >> 2] = HEAP32[$575 + 4 >> 2];
             HEAP32[$577 + 8 >> 2] = HEAP32[$575 + 8 >> 2];
             $578 = HEAP32[$117 >> 2] | 0;
             HEAP32[$85 >> 2] = $538;
             HEAP32[$86 >> 2] = $578;
             $579 = HEAP32[$85 >> 2] | 0;
             $580 = HEAP32[$86 >> 2] | 0;
             HEAP8[$84 >> 0] = HEAP8[$87 >> 0] | 0;
             HEAP32[$82 >> 2] = $579;
             HEAP32[$83 >> 2] = $580;
             $581 = HEAP32[$82 >> 2] | 0;
             HEAP32[$81 >> 2] = HEAP32[$83 >> 2];
             HEAP32[$80 >> 2] = HEAP32[$81 >> 2];
             HEAP32[$79 >> 2] = HEAP32[$80 >> 2];
             HEAP32[$75 >> 2] = HEAP32[$79 >> 2];
             HEAP32[$78 >> 2] = $581;
             HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
             HEAP32[$76 >> 2] = HEAP32[$77 >> 2];
             HEAP32[$72 >> 2] = HEAP32[$117 >> 2];
             HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
             HEAP32[$70 >> 2] = HEAP32[$71 >> 2];
             HEAP32[$73 >> 2] = HEAP32[$70 >> 2];
             HEAP32[$74 >> 2] = 0;
             while (1) {
              if ((HEAP32[$74 >> 2] | 0) >>> 0 >= 3) break;
              HEAP32[(HEAP32[$73 >> 2] | 0) + (HEAP32[$74 >> 2] << 2) >> 2] = 0;
              HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + 1;
             }
             __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($289);
             $599 = $286;
             $605 = _i64Add(HEAP32[$599 >> 2] | 0, HEAP32[$599 + 4 >> 2] | 0, 1, 0) | 0;
             $607 = $291;
             HEAP32[$607 >> 2] = $605;
             HEAP32[$607 + 4 >> 2] = tempRet0;
             __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($268, $291) | 0;
             HEAP32[$69 >> 2] = $1;
             HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
             HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
             $614 = HEAP32[HEAP32[$67 >> 2] >> 2] | 0;
             $617 = HEAP32[(HEAP32[$614 >> 2] | 0) + 8 >> 2] | 0;
             HEAP32[$293 >> 2] = HEAP32[$268 >> 2];
             HEAP32[$293 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
             __THREW__ = 0;
             HEAP32[$$byval_copy16 >> 2] = HEAP32[$293 >> 2];
             HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$293 + 4 >> 2];
             $618 = invoke_iii($617 | 0, $614 | 0, $$byval_copy16 | 0) | 0;
             $619 = __THREW__;
             __THREW__ = 0;
             if (!($619 & 1)) {
              $622 = $292;
              HEAP32[$622 >> 2] = _strlen($618) | 0;
              HEAP32[$622 + 4 >> 2] = 0;
              $626 = $268;
              $632 = $292;
              $638 = _i64Add(HEAP32[$626 >> 2] | 0, HEAP32[$626 + 4 >> 2] | 0, HEAP32[$632 >> 2] | 0, HEAP32[$632 + 4 >> 2] | 0) | 0;
              $639 = tempRet0;
              HEAP32[$66 >> 2] = $1;
              HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
              HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
              $644 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$64 >> 2] >> 2] | 0) | 0;
              $646 = $294;
              HEAP32[$646 >> 2] = $644;
              HEAP32[$646 + 4 >> 2] = tempRet0;
              $650 = $294;
              $655 = HEAP32[$650 + 4 >> 2] | 0;
              if ($639 >>> 0 > $655 >>> 0 | (($639 | 0) == ($655 | 0) ? $638 >>> 0 >= (HEAP32[$650 >> 2] | 0) >>> 0 : 0)) {
               $661 = ___cxa_allocate_exception(4) | 0;
               HEAP32[$661 >> 2] = 0;
               __ZN3zim11InvalidSizeC2Ev($661);
               __THREW__ = 0;
               invoke_viii(11, $661 | 0, 41088, 59);
               __THREW__ = 0;
               break;
              }
              HEAP32[$63 >> 2] = $1;
              HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
              HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
              $666 = HEAP32[HEAP32[$61 >> 2] >> 2] | 0;
              $669 = HEAP32[(HEAP32[$666 >> 2] | 0) + 8 >> 2] | 0;
              HEAP32[$296 >> 2] = HEAP32[$268 >> 2];
              HEAP32[$296 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
              __THREW__ = 0;
              HEAP32[$$byval_copy16 >> 2] = HEAP32[$296 >> 2];
              HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$296 + 4 >> 2];
              $670 = invoke_iii($669 | 0, $666 | 0, $$byval_copy16 | 0) | 0;
              $671 = __THREW__;
              __THREW__ = 0;
              if ($671 & 1) break;
              $675 = HEAP32[$292 >> 2] | 0;
              HEAP32[$58 >> 2] = $295;
              HEAP32[$59 >> 2] = $670;
              HEAP32[$60 >> 2] = $675;
              $679 = HEAP32[$58 >> 2] | 0;
              HEAP32[$57 >> 2] = $679;
              $680 = HEAP32[$57 >> 2] | 0;
              HEAP32[$56 >> 2] = $680;
              $681 = HEAP32[$56 >> 2] | 0;
              HEAP32[$681 >> 2] = 0;
              HEAP32[$681 + 4 >> 2] = 0;
              HEAP32[$681 + 8 >> 2] = 0;
              HEAP32[$55 >> 2] = $680;
              HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
              __THREW__ = 0;
              invoke_viii(8, $679 | 0, HEAP32[$59 >> 2] | 0, HEAP32[$60 >> 2] | 0);
              $685 = __THREW__;
              __THREW__ = 0;
              if ($685 & 1) break;
              HEAP32[$51 >> 2] = $284;
              HEAP32[$52 >> 2] = $295;
              $687 = HEAP32[$51 >> 2] | 0;
              $688 = HEAP32[$52 >> 2] | 0;
              HEAP8[$50 >> 0] = HEAP8[$53 >> 0] | 0;
              HEAP32[$48 >> 2] = $687;
              HEAP32[$49 >> 2] = $688;
              $689 = HEAP32[$48 >> 2] | 0;
              HEAP32[$45 >> 2] = $689;
              $690 = HEAP32[$45 >> 2] | 0;
              HEAP32[$44 >> 2] = $690;
              HEAP32[$43 >> 2] = $690;
              HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
              HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
              if ((HEAPU8[(HEAP32[$41 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
               HEAP32[$36 >> 2] = $690;
               HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
               HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
               $702 = HEAP32[HEAP32[$34 >> 2] >> 2] | 0;
               HEAP8[$46 >> 0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($702, $46);
               HEAP32[$27 >> 2] = $690;
               HEAP32[$28 >> 2] = 0;
               $704 = HEAP32[$28 >> 2] | 0;
               HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
               HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
               HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] = $704;
              } else {
               HEAP32[$33 >> 2] = $690;
               HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
               HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
               HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
               HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
               $712 = HEAP32[$29 >> 2] | 0;
               HEAP8[$47 >> 0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($712, $47);
               HEAP32[$39 >> 2] = $690;
               HEAP32[$40 >> 2] = 0;
               $715 = HEAP32[$40 >> 2] & 255;
               HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
               HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
               HEAP8[(HEAP32[$37 >> 2] | 0) + 11 >> 0] = $715;
              }
              HEAP32[$24 >> 2] = $689;
              __THREW__ = 0;
              invoke_vii(73, HEAP32[$24 >> 2] | 0, 0);
              $720 = __THREW__;
              __THREW__ = 0;
              if ($720 & 1) {
               $722 = ___cxa_find_matching_catch_3(0) | 0;
               ___clang_call_terminate($722);
              }
              HEAP32[$23 >> 2] = HEAP32[$49 >> 2];
              HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
              $726 = HEAP32[$22 >> 2] | 0;
              HEAP32[$21 >> 2] = $689;
              HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
              $728 = HEAP32[$20 >> 2] | 0;
              HEAP32[$728 >> 2] = HEAP32[$726 >> 2];
              HEAP32[$728 + 4 >> 2] = HEAP32[$726 + 4 >> 2];
              HEAP32[$728 + 8 >> 2] = HEAP32[$726 + 8 >> 2];
              $729 = HEAP32[$49 >> 2] | 0;
              HEAP32[$17 >> 2] = $689;
              HEAP32[$18 >> 2] = $729;
              $730 = HEAP32[$17 >> 2] | 0;
              $731 = HEAP32[$18 >> 2] | 0;
              HEAP8[$16 >> 0] = HEAP8[$19 >> 0] | 0;
              HEAP32[$14 >> 2] = $730;
              HEAP32[$15 >> 2] = $731;
              $732 = HEAP32[$14 >> 2] | 0;
              HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
              HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
              HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
              HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
              HEAP32[$10 >> 2] = $732;
              HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
              HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
              HEAP32[$4 >> 2] = HEAP32[$49 >> 2];
              HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
              HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
              HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
              HEAP32[$6 >> 2] = 0;
              while (1) {
               if ((HEAP32[$6 >> 2] | 0) >>> 0 >= 3) break;
               HEAP32[(HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] << 2) >> 2] = 0;
               HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($295);
              $750 = $292;
              $756 = _i64Add(HEAP32[$750 >> 2] | 0, HEAP32[$750 + 4 >> 2] | 0, 1, 0) | 0;
              $758 = $297;
              HEAP32[$758 >> 2] = $756;
              HEAP32[$758 + 4 >> 2] = tempRet0;
              __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($268, $297) | 0;
              $762 = $268;
              $770 = _i64Add(HEAP32[$762 >> 2] | 0, HEAP32[$762 + 4 >> 2] | 0, HEAPU8[$262 >> 0] | 0 | 0, 0) | 0;
              $771 = tempRet0;
              HEAP32[$131 >> 2] = $1;
              HEAP32[$130 >> 2] = HEAP32[$131 >> 2];
              HEAP32[$129 >> 2] = HEAP32[$130 >> 2];
              $776 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$129 >> 2] >> 2] | 0) | 0;
              $778 = $298;
              HEAP32[$778 >> 2] = $776;
              HEAP32[$778 + 4 >> 2] = tempRet0;
              $782 = $298;
              $787 = HEAP32[$782 + 4 >> 2] | 0;
              if ($771 >>> 0 > $787 >>> 0 | (($771 | 0) == ($787 | 0) ? $770 >>> 0 > (HEAP32[$782 >> 2] | 0) >>> 0 : 0)) {
               $793 = ___cxa_allocate_exception(4) | 0;
               HEAP32[$793 >> 2] = 0;
               __ZN3zim11InvalidSizeC2Ev($793);
               __THREW__ = 0;
               invoke_viii(11, $793 | 0, 41088, 59);
               __THREW__ = 0;
               break;
              }
              HEAP32[$140 >> 2] = $1;
              HEAP32[$139 >> 2] = HEAP32[$140 >> 2];
              HEAP32[$138 >> 2] = HEAP32[$139 >> 2];
              $798 = HEAP32[HEAP32[$138 >> 2] >> 2] | 0;
              $801 = HEAP32[(HEAP32[$798 >> 2] | 0) + 8 >> 2] | 0;
              HEAP32[$300 >> 2] = HEAP32[$268 >> 2];
              HEAP32[$300 + 4 >> 2] = HEAP32[$268 + 4 >> 2];
              __THREW__ = 0;
              HEAP32[$$byval_copy16 >> 2] = HEAP32[$300 >> 2];
              HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$300 + 4 >> 2];
              $802 = invoke_iii($801 | 0, $798 | 0, $$byval_copy16 | 0) | 0;
              $803 = __THREW__;
              __THREW__ = 0;
              if ($803 & 1) break;
              $806 = HEAPU8[$262 >> 0] | 0;
              HEAP32[$158 >> 2] = $299;
              HEAP32[$159 >> 2] = $802;
              HEAP32[$160 >> 2] = $806;
              $807 = HEAP32[$158 >> 2] | 0;
              HEAP32[$157 >> 2] = $807;
              $808 = HEAP32[$157 >> 2] | 0;
              HEAP32[$156 >> 2] = $808;
              $809 = HEAP32[$156 >> 2] | 0;
              HEAP32[$809 >> 2] = 0;
              HEAP32[$809 + 4 >> 2] = 0;
              HEAP32[$809 + 8 >> 2] = 0;
              HEAP32[$155 >> 2] = $808;
              HEAP32[$154 >> 2] = HEAP32[$155 >> 2];
              __THREW__ = 0;
              invoke_viii(8, $807 | 0, HEAP32[$159 >> 2] | 0, HEAP32[$160 >> 2] | 0);
              $813 = __THREW__;
              __THREW__ = 0;
              if ($813 & 1) break;
              HEAP32[$236 >> 2] = $285;
              HEAP32[$237 >> 2] = $299;
              $815 = HEAP32[$236 >> 2] | 0;
              $816 = HEAP32[$237 >> 2] | 0;
              HEAP8[$235 >> 0] = HEAP8[$238 >> 0] | 0;
              HEAP32[$233 >> 2] = $815;
              HEAP32[$234 >> 2] = $816;
              $817 = HEAP32[$233 >> 2] | 0;
              HEAP32[$230 >> 2] = $817;
              $818 = HEAP32[$230 >> 2] | 0;
              HEAP32[$229 >> 2] = $818;
              HEAP32[$228 >> 2] = $818;
              HEAP32[$227 >> 2] = HEAP32[$228 >> 2];
              HEAP32[$226 >> 2] = HEAP32[$227 >> 2];
              if ((HEAPU8[(HEAP32[$226 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
               HEAP32[$221 >> 2] = $818;
               HEAP32[$220 >> 2] = HEAP32[$221 >> 2];
               HEAP32[$219 >> 2] = HEAP32[$220 >> 2];
               $830 = HEAP32[HEAP32[$219 >> 2] >> 2] | 0;
               HEAP8[$231 >> 0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($830, $231);
               HEAP32[$212 >> 2] = $818;
               HEAP32[$213 >> 2] = 0;
               $832 = HEAP32[$213 >> 2] | 0;
               HEAP32[$211 >> 2] = HEAP32[$212 >> 2];
               HEAP32[$210 >> 2] = HEAP32[$211 >> 2];
               HEAP32[(HEAP32[$210 >> 2] | 0) + 4 >> 2] = $832;
              } else {
               HEAP32[$218 >> 2] = $818;
               HEAP32[$217 >> 2] = HEAP32[$218 >> 2];
               HEAP32[$216 >> 2] = HEAP32[$217 >> 2];
               HEAP32[$215 >> 2] = HEAP32[$216 >> 2];
               HEAP32[$214 >> 2] = HEAP32[$215 >> 2];
               $840 = HEAP32[$214 >> 2] | 0;
               HEAP8[$232 >> 0] = 0;
               __ZNSt3__211char_traitsIcE6assignERcRKc($840, $232);
               HEAP32[$224 >> 2] = $818;
               HEAP32[$225 >> 2] = 0;
               $843 = HEAP32[$225 >> 2] & 255;
               HEAP32[$223 >> 2] = HEAP32[$224 >> 2];
               HEAP32[$222 >> 2] = HEAP32[$223 >> 2];
               HEAP8[(HEAP32[$222 >> 2] | 0) + 11 >> 0] = $843;
              }
              HEAP32[$209 >> 2] = $817;
              __THREW__ = 0;
              invoke_vii(73, HEAP32[$209 >> 2] | 0, 0);
              $848 = __THREW__;
              __THREW__ = 0;
              if ($848 & 1) {
               $850 = ___cxa_find_matching_catch_3(0) | 0;
               ___clang_call_terminate($850);
              }
              HEAP32[$208 >> 2] = HEAP32[$234 >> 2];
              HEAP32[$207 >> 2] = HEAP32[$208 >> 2];
              $854 = HEAP32[$207 >> 2] | 0;
              HEAP32[$206 >> 2] = $817;
              HEAP32[$205 >> 2] = HEAP32[$206 >> 2];
              $856 = HEAP32[$205 >> 2] | 0;
              HEAP32[$856 >> 2] = HEAP32[$854 >> 2];
              HEAP32[$856 + 4 >> 2] = HEAP32[$854 + 4 >> 2];
              HEAP32[$856 + 8 >> 2] = HEAP32[$854 + 8 >> 2];
              $857 = HEAP32[$234 >> 2] | 0;
              HEAP32[$202 >> 2] = $817;
              HEAP32[$203 >> 2] = $857;
              $858 = HEAP32[$202 >> 2] | 0;
              $859 = HEAP32[$203 >> 2] | 0;
              HEAP8[$201 >> 0] = HEAP8[$204 >> 0] | 0;
              HEAP32[$199 >> 2] = $858;
              HEAP32[$200 >> 2] = $859;
              $860 = HEAP32[$199 >> 2] | 0;
              HEAP32[$198 >> 2] = HEAP32[$200 >> 2];
              HEAP32[$197 >> 2] = HEAP32[$198 >> 2];
              HEAP32[$196 >> 2] = HEAP32[$197 >> 2];
              HEAP32[$192 >> 2] = HEAP32[$196 >> 2];
              HEAP32[$195 >> 2] = $860;
              HEAP32[$194 >> 2] = HEAP32[$195 >> 2];
              HEAP32[$193 >> 2] = HEAP32[$194 >> 2];
              HEAP32[$189 >> 2] = HEAP32[$234 >> 2];
              HEAP32[$188 >> 2] = HEAP32[$189 >> 2];
              HEAP32[$187 >> 2] = HEAP32[$188 >> 2];
              HEAP32[$190 >> 2] = HEAP32[$187 >> 2];
              HEAP32[$191 >> 2] = 0;
              while (1) {
               if ((HEAP32[$191 >> 2] | 0) >>> 0 >= 3) break;
               HEAP32[(HEAP32[$190 >> 2] | 0) + (HEAP32[$191 >> 2] << 2) >> 2] = 0;
               HEAP32[$191 >> 2] = (HEAP32[$191 >> 2] | 0) + 1;
              }
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($299);
              __THREW__ = 0;
              invoke_viii(25, $301 | 0, HEAP8[$264 >> 0] | 0, $283 | 0);
              $879 = __THREW__;
              __THREW__ = 0;
              if ($879 & 1) break;
              __THREW__ = 0;
              invoke_vii(74, $301 | 0, $284 | 0);
              $881 = __THREW__;
              __THREW__ = 0;
              if ($881 & 1) break;
              __THREW__ = 0;
              invoke_vii(75, $301 | 0, $285 | 0);
              $883 = __THREW__;
              __THREW__ = 0;
              if ($883 & 1) break;
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($285);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($284);
              __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($283);
              STACKTOP = sp;
              return;
             }
            }
           }
          } while (0);
          $510 = ___cxa_find_matching_catch_2() | 0;
          HEAP32[$257 >> 2] = $510;
          HEAP32[$258 >> 2] = tempRet0;
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($285);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($284);
          __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($283);
          __ZN3zim6DirentD2Ev($301);
          $885 = HEAP32[$257 >> 2] | 0;
          $886 = HEAP32[$258 >> 2] | 0;
          ___resumeException($885 | 0);
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $376 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$257 >> 2] = $376;
 HEAP32[$258 >> 2] = tempRet0;
 __ZN3zim6DirentD2Ev($301);
 $885 = HEAP32[$257 >> 2] | 0;
 $886 = HEAP32[$258 >> 2] | 0;
 ___resumeException($885 | 0);
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i185 = 0, $$0$i$i$i$i250 = 0, $$0$i$i$i$i270 = 0, $$0$i$i$i$i291 = 0, $$0$i$i$i$i309 = 0, $$0$i$i$i$i333 = 0, $$0$i$i167 = 0, $$0$i$i170 = 0, $$0$i$i173 = 0, $$0$i$i176 = 0, $$0$i$i181 = 0, $$0$i$i183 = 0, $$0$i$i199 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i191 = 0, $$0$i$i2$i$i256 = 0, $$0$i$i2$i$i276 = 0, $$0$i$i2$i$i297 = 0, $$0$i$i2$i$i315 = 0, $$0$i$i2$i$i339 = 0, $$0$i$i203 = 0, $$0$i$i210 = 0, $$0$i$i215 = 0, $$0$i$i222 = 0, $$0$i$i229 = 0, $$0$i$i247 = 0, $$0$i$i264 = 0, $$0$i$i284 = 0, $$0$i$i304 = 0, $$0$i$i323 = 0, $$0$i$i327 = 0, $$0132 = 0, $$0149 = 0, $$0158 = 0, $$10 = 0, $$1150 = 0, $$2134$ph = 0, $$5142 = 0, $$5148 = 0, $$pre$phiZ2D = 0, $$sroa$0353$0$ptr = 0, $$sroa$0374$0 = 0, $$sroa$0374$1 = 0, $$sroa$08$0$ptr$i = 0, $100 = 0, $102 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $131 = 0, $132 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $15 = 0, $153 = 0, $154 = 0, $16 = 0, $160 = 0, $163 = 0, $17 = 0, $170 = 0, $171 = 0, $177 = 0, $179 = 0, $18 = 0, $186 = 0, $187 = 0, $19 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $208 = 0, $209 = 0, $21 = 0, $215 = 0, $217 = 0, $22 = 0, $221 = 0, $222 = 0, $226 = 0, $23 = 0, $231 = 0, $233 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $252 = 0, $253 = 0, $254 = 0, $261 = 0, $265 = 0, $271 = 0, $273 = 0, $280 = 0, $281 = 0, $292 = 0, $293 = 0, $294 = 0, $301 = 0, $305 = 0, $314 = 0, $315 = 0, $326 = 0, $327 = 0, $328 = 0, $331 = 0, $335 = 0, $339 = 0, $348 = 0, $349 = 0, $360 = 0, $361 = 0, $362 = 0, $369 = 0, $373 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $403 = 0, $404 = 0, $406 = 0, $407 = 0, $408 = 0, $410 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $432 = 0, $436 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $45 = 0, $452 = 0, $455 = 0, $46 = 0, $462 = 0, $463 = 0, $469 = 0, $47 = 0, $472 = 0, $479 = 0, $48 = 0, $480 = 0, $486 = 0, $488 = 0, $495 = 0, $496 = 0, $50 = 0, $503 = 0, $504 = 0, $505 = 0, $51 = 0, $512 = 0, $52 = 0, $521 = 0, $522 = 0, $53 = 0, $532 = 0, $535 = 0, $54 = 0, $542 = 0, $543 = 0, $549 = 0, $55 = 0, $552 = 0, $559 = 0, $560 = 0, $566 = 0, $568 = 0, $57 = 0, $575 = 0, $576 = 0, $580 = 0, $588 = 0, $591 = 0, $60 = 0, $602 = 0, $604 = 0, $613 = 0, $616 = 0, $619 = 0, $620 = 0, $621 = 0, $622 = 0, $629 = 0, $634 = 0, $639 = 0, $642 = 0, $645 = 0, $648 = 0, $655 = 0, $656 = 0, $662 = 0, $665 = 0, $67 = 0, $672 = 0, $673 = 0, $679 = 0, $68 = 0, $681 = 0, $688 = 0, $689 = 0, $698 = 0, $699 = 0, $700 = 0, $707 = 0, $713 = 0, $716 = 0, $723 = 0, $724 = 0, $730 = 0, $733 = 0, $74 = 0, $740 = 0, $741 = 0, $747 = 0, $749 = 0, $756 = 0, $757 = 0, $77 = 0, $774 = 0, $776 = 0, $778 = 0, $785 = 0, $786 = 0, $791 = 0, $795 = 0, $796 = 0, $797 = 0, $804 = 0, $815 = 0, $816 = 0, $817 = 0, $822 = 0, $823 = 0, $826 = 0, $833 = 0, $834 = 0, $84 = 0, $840 = 0, $843 = 0, $85 = 0, $850 = 0, $851 = 0, $857 = 0, $859 = 0, $866 = 0, $867 = 0, $876 = 0, $881 = 0, $883 = 0, $884 = 0, $885 = 0, $892 = 0, $897 = 0, $898 = 0, $900 = 0, $906 = 0, $908 = 0, $91 = 0, $912 = 0, $914 = 0, $916 = 0, $920 = 0, $922 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $942 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $lpad$phi420$index = 0, $lpad$phi420$index8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $11 = sp + 488 | 0;
 $12 = sp;
 $13 = sp + 480 | 0;
 $14 = sp + 472 | 0;
 $15 = sp + 468 | 0;
 $16 = sp + 496 | 0;
 $17 = sp + 493 | 0;
 $18 = sp + 492 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 444 | 0;
 $21 = sp + 432 | 0;
 $22 = sp + 420 | 0;
 $23 = sp + 408 | 0;
 $24 = sp + 404 | 0;
 $25 = sp + 400 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$13 >> 2] = $12;
 HEAP32[$13 + 4 >> 2] = 191;
 HEAP32[$14 >> 2] = $12;
 HEAP32[$15 >> 2] = $12 + 400;
 HEAP32[$19 >> 2] = 0;
 HEAP32[$19 + 4 >> 2] = 0;
 HEAP32[$19 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$19 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$20 + 8 >> 2] = 0;
 $$0$i$i167 = 0;
 while (1) {
  if (($$0$i$i167 | 0) == 3) break;
  HEAP32[$20 + ($$0$i$i167 << 2) >> 2] = 0;
  $$0$i$i167 = $$0$i$i167 + 1 | 0;
 }
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$21 + 8 >> 2] = 0;
 $$0$i$i170 = 0;
 while (1) {
  if (($$0$i$i170 | 0) == 3) break;
  HEAP32[$21 + ($$0$i$i170 << 2) >> 2] = 0;
  $$0$i$i170 = $$0$i$i170 + 1 | 0;
 }
 HEAP32[$22 >> 2] = 0;
 HEAP32[$22 + 4 >> 2] = 0;
 HEAP32[$22 + 8 >> 2] = 0;
 $$0$i$i173 = 0;
 while (1) {
  if (($$0$i$i173 | 0) == 3) break;
  HEAP32[$22 + ($$0$i$i173 << 2) >> 2] = 0;
  $$0$i$i173 = $$0$i$i173 + 1 | 0;
 }
 HEAP32[$23 >> 2] = 0;
 HEAP32[$23 + 4 >> 2] = 0;
 HEAP32[$23 + 8 >> 2] = 0;
 $$0$i$i176 = 0;
 while (1) {
  if (($$0$i$i176 | 0) == 3) break;
  HEAP32[$23 + ($$0$i$i176 << 2) >> 2] = 0;
  $$0$i$i176 = $$0$i$i176 + 1 | 0;
 }
 __THREW__ = 0;
 invoke_viiiiiiiiii(1, $2 | 0, $3 | 0, $16 | 0, $17 | 0, $18 | 0, $19 | 0, $20 | 0, $21 | 0, $22 | 0, $24 | 0);
 $39 = __THREW__;
 __THREW__ = 0;
 L21 : do if ($39 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$5142 = $91;
  $$5148 = tempRet0;
 } else {
  HEAP32[$9 >> 2] = HEAP32[$8 >> 2];
  $42 = $7 + 8 | 0;
  $43 = $21 + 11 | 0;
  $44 = $21 + 4 | 0;
  $45 = $22 + 11 | 0;
  $46 = $22 + 4 | 0;
  $47 = $19 + 11 | 0;
  $48 = $19 + 4 | 0;
  $50 = ($4 & 512 | 0) != 0;
  $51 = $20 + 11 | 0;
  $52 = $16 + 3 | 0;
  $53 = $20 + 4 | 0;
  $54 = $23 + 11 | 0;
  $55 = $23 + 4 | 0;
  $$0149 = 0;
  $$0158 = 0;
  L24 : while (1) {
   if ($$0158 >>> 0 >= 4) {
    label = 261;
    break;
   }
   $57 = HEAP32[$0 >> 2] | 0;
   do if (!$57) $924 = 1; else {
    $60 = HEAP32[$57 + 12 >> 2] | 0;
    if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $67 = invoke_ii(HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] | 0, $57 | 0) | 0;
     $68 = __THREW__;
     __THREW__ = 0;
     if ($68 & 1) {
      label = 36;
      break L24;
     } else $$0$i$i$i$i = $67;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$60 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $924 = 1;
     break;
    } else {
     $924 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $74 = HEAP32[$1 >> 2] | 0;
   do if (!$74) label = 32; else {
    $77 = HEAP32[$74 + 12 >> 2] | 0;
    if (($77 | 0) == (HEAP32[$74 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $84 = invoke_ii(HEAP32[(HEAP32[$74 >> 2] | 0) + 36 >> 2] | 0, $74 | 0) | 0;
     $85 = __THREW__;
     __THREW__ = 0;
     if ($85 & 1) {
      label = 36;
      break L24;
     } else $$0$i$i2$i$i = $84;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$77 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     label = 32;
     break;
    } else if ($924) {
     $925 = $74;
     break;
    } else {
     label = 261;
     break L24;
    }
   } while (0);
   if ((label | 0) == 32) {
    label = 0;
    if ($924) {
     label = 261;
     break;
    } else $925 = 0;
   }
   L49 : do switch (HEAP8[$16 + $$0158 >> 0] | 0) {
   case 1:
    {
     if (($$0158 | 0) == 3) $$1150 = $$0149; else {
      $100 = HEAP32[$0 >> 2] | 0;
      $102 = HEAP32[$100 + 12 >> 2] | 0;
      if (($102 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $109 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $110 = __THREW__;
       __THREW__ = 0;
       if ($110 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i181 = $109;
      } else $$0$i$i181 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$102 >> 0] | 0) | 0;
      if (($$0$i$i181 & 255) << 24 >> 24 <= -1) {
       label = 50;
       break L24;
      }
      if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i181 << 24 >> 24 << 1) >> 1] & 8192)) {
       label = 50;
       break L24;
      }
      $122 = HEAP32[$0 >> 2] | 0;
      $123 = $122 + 12 | 0;
      $124 = HEAP32[$123 >> 2] | 0;
      if (($124 | 0) == (HEAP32[$122 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $131 = invoke_ii(HEAP32[(HEAP32[$122 >> 2] | 0) + 40 >> 2] | 0, $122 | 0) | 0;
       $132 = __THREW__;
       __THREW__ = 0;
       if ($132 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i183 = $131;
      } else {
       HEAP32[$123 >> 2] = $124 + 1;
       $$0$i$i183 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$124 >> 0] | 0) | 0;
      }
      __THREW__ = 0;
      invoke_vii(47, $23 | 0, $$0$i$i183 & 255 | 0);
      $138 = __THREW__;
      __THREW__ = 0;
      if ($138 & 1) {
       label = 36;
       break L24;
      } else label = 52;
     }
     break;
    }
   case 0:
    {
     if (($$0158 | 0) == 3) $$1150 = $$0149; else label = 52;
     break;
    }
   case 3:
    {
     $217 = HEAP8[$43 >> 0] | 0;
     $221 = $217 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $217 & 255;
     $222 = HEAP8[$45 >> 0] | 0;
     $226 = $222 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $222 & 255;
     if (($221 | 0) == (0 - $226 | 0)) $$1150 = $$0149; else {
      if (!$221) {
       $271 = HEAP32[$0 >> 2] | 0;
       $273 = HEAP32[$271 + 12 >> 2] | 0;
       if (($273 | 0) == (HEAP32[$271 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $280 = invoke_ii(HEAP32[(HEAP32[$271 >> 2] | 0) + 36 >> 2] | 0, $271 | 0) | 0;
        $281 = __THREW__;
        __THREW__ = 0;
        if ($281 & 1) {
         label = 36;
         break L24;
        } else $$0$i$i215 = $280;
       } else $$0$i$i215 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$273 >> 0] | 0) | 0;
       if ((HEAP8[((HEAP8[$45 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != ($$0$i$i215 & 255) << 24 >> 24) {
        $$1150 = $$0149;
        break L49;
       }
       $292 = HEAP32[$0 >> 2] | 0;
       $293 = $292 + 12 | 0;
       $294 = HEAP32[$293 >> 2] | 0;
       if (($294 | 0) == (HEAP32[$292 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$292 >> 2] | 0) + 40 >> 2] | 0, $292 | 0) | 0;
        $301 = __THREW__;
        __THREW__ = 0;
        if ($301 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$293 >> 2] = $294 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$294 >> 0] | 0) | 0;
       }
       HEAP8[$6 >> 0] = 1;
       $305 = HEAP8[$45 >> 0] | 0;
       $$1150 = ($305 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $305 & 255) >>> 0 > 1 ? $22 : $$0149;
       break L49;
      }
      $231 = HEAP32[$0 >> 2] | 0;
      $233 = HEAP32[$231 + 12 >> 2] | 0;
      $236 = ($233 | 0) == (HEAP32[$231 + 16 >> 2] | 0);
      if (!$226) {
       if ($236) {
        __THREW__ = 0;
        $240 = invoke_ii(HEAP32[(HEAP32[$231 >> 2] | 0) + 36 >> 2] | 0, $231 | 0) | 0;
        $241 = __THREW__;
        __THREW__ = 0;
        if ($241 & 1) {
         label = 36;
         break L24;
        } else $$0$i$i210 = $240;
       } else $$0$i$i210 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$233 >> 0] | 0) | 0;
       if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) != ($$0$i$i210 & 255) << 24 >> 24) {
        HEAP8[$6 >> 0] = 1;
        $$1150 = $$0149;
        break L49;
       }
       $252 = HEAP32[$0 >> 2] | 0;
       $253 = $252 + 12 | 0;
       $254 = HEAP32[$253 >> 2] | 0;
       if (($254 | 0) == (HEAP32[$252 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$252 >> 2] | 0) + 40 >> 2] | 0, $252 | 0) | 0;
        $261 = __THREW__;
        __THREW__ = 0;
        if ($261 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$253 >> 2] = $254 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$254 >> 0] | 0) | 0;
       }
       $265 = HEAP8[$43 >> 0] | 0;
       $$1150 = ($265 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $265 & 255) >>> 0 > 1 ? $21 : $$0149;
       break L49;
      }
      if ($236) {
       __THREW__ = 0;
       $314 = invoke_ii(HEAP32[(HEAP32[$231 >> 2] | 0) + 36 >> 2] | 0, $231 | 0) | 0;
       $315 = __THREW__;
       __THREW__ = 0;
       if ($315 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i222 = $314;
      } else $$0$i$i222 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$233 >> 0] | 0) | 0;
      $326 = HEAP32[$0 >> 2] | 0;
      $327 = $326 + 12 | 0;
      $328 = HEAP32[$327 >> 2] | 0;
      $331 = ($328 | 0) == (HEAP32[$326 + 16 >> 2] | 0);
      if ((HEAP8[((HEAP8[$43 >> 0] | 0) < 0 ? HEAP32[$21 >> 2] | 0 : $21) >> 0] | 0) == ($$0$i$i222 & 255) << 24 >> 24) {
       if ($331) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$326 >> 2] | 0) + 40 >> 2] | 0, $326 | 0) | 0;
        $335 = __THREW__;
        __THREW__ = 0;
        if ($335 & 1) {
         label = 36;
         break L24;
        }
       } else {
        HEAP32[$327 >> 2] = $328 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$328 >> 0] | 0) | 0;
       }
       $339 = HEAP8[$43 >> 0] | 0;
       $$1150 = ($339 << 24 >> 24 < 0 ? HEAP32[$44 >> 2] | 0 : $339 & 255) >>> 0 > 1 ? $21 : $$0149;
       break L49;
      }
      if ($331) {
       __THREW__ = 0;
       $348 = invoke_ii(HEAP32[(HEAP32[$326 >> 2] | 0) + 36 >> 2] | 0, $326 | 0) | 0;
       $349 = __THREW__;
       __THREW__ = 0;
       if ($349 & 1) {
        label = 36;
        break L24;
       } else $$0$i$i229 = $348;
      } else $$0$i$i229 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$328 >> 0] | 0) | 0;
      if ((HEAP8[((HEAP8[$45 >> 0] | 0) < 0 ? HEAP32[$22 >> 2] | 0 : $22) >> 0] | 0) != ($$0$i$i229 & 255) << 24 >> 24) {
       label = 113;
       break L24;
      }
      $360 = HEAP32[$0 >> 2] | 0;
      $361 = $360 + 12 | 0;
      $362 = HEAP32[$361 >> 2] | 0;
      if (($362 | 0) == (HEAP32[$360 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$360 >> 2] | 0) + 40 >> 2] | 0, $360 | 0) | 0;
       $369 = __THREW__;
       __THREW__ = 0;
       if ($369 & 1) {
        label = 36;
        break L24;
       }
      } else {
       HEAP32[$361 >> 2] = $362 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$362 >> 0] | 0) | 0;
      }
      HEAP8[$6 >> 0] = 1;
      $373 = HEAP8[$45 >> 0] | 0;
      $$1150 = ($373 << 24 >> 24 < 0 ? HEAP32[$46 >> 2] | 0 : $373 & 255) >>> 0 > 1 ? $22 : $$0149;
     }
     break;
    }
   case 2:
    {
     if ($$0158 >>> 0 < 2 | ($$0149 | 0) != 0) {
      $392 = HEAP8[$51 >> 0] | 0;
      $393 = $392 << 24 >> 24 < 0;
      $394 = HEAP32[$20 >> 2] | 0;
      $395 = $393 ? $394 : $20;
      $396 = $395;
      if (!$$0158) {
       $$sroa$0374$1 = $396;
       $930 = $394;
       $931 = $392;
      } else {
       $403 = $392;
       $404 = $393;
       $407 = $395;
       $421 = $396;
       $929 = $394;
       label = 118;
      }
     } else {
      if (!($50 | ($$0158 | 0) == 2 & (HEAP8[$52 >> 0] | 0) != 0)) {
       $$1150 = 0;
       break L49;
      }
      $387 = HEAP8[$51 >> 0] | 0;
      $388 = $387 << 24 >> 24 < 0;
      $389 = HEAP32[$20 >> 2] | 0;
      $390 = $388 ? $389 : $20;
      $403 = $387;
      $404 = $388;
      $407 = $390;
      $421 = $390;
      $929 = $389;
      label = 118;
     }
     L116 : do if ((label | 0) == 118) {
      label = 0;
      if ((HEAPU8[$16 + ($$0158 + -1) >> 0] | 0) < 2) {
       $406 = $407 + ($404 ? HEAP32[$53 >> 2] | 0 : $403 & 255) | 0;
       $$sroa$0374$0 = $421;
       while (1) {
        $408 = $$sroa$0374$0;
        if (($406 | 0) == ($408 | 0)) break;
        $410 = HEAP8[$408 >> 0] | 0;
        if ($410 << 24 >> 24 <= -1) break;
        if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($410 << 24 >> 24 << 1) >> 1] & 8192)) break;
        $$sroa$0374$0 = $408 + 1 | 0;
       }
       $420 = $$sroa$0374$0 - $421 | 0;
       $422 = HEAP8[$54 >> 0] | 0;
       $423 = $422 << 24 >> 24 < 0;
       $424 = HEAP32[$55 >> 2] | 0;
       $425 = $422 & 255;
       if ($420 >>> 0 > ($423 ? $424 : $425) >>> 0) {
        $$sroa$0374$1 = $421;
        $930 = $929;
        $931 = $403;
       } else {
        $429 = (HEAP32[$23 >> 2] | 0) + $424 | 0;
        $432 = $23 + $425 | 0;
        $$pre$phiZ2D = $423 ? $429 : $432;
        $$sroa$08$0$ptr$i = $407;
        $436 = $423 ? $429 + (0 - $420) | 0 : $432 + (0 - $420) | 0;
        while (1) {
         if (($436 | 0) == ($$pre$phiZ2D | 0)) {
          $$sroa$0374$1 = $$sroa$0374$0;
          $930 = $929;
          $931 = $403;
          break L116;
         }
         if ((HEAP8[$436 >> 0] | 0) != (HEAP8[$$sroa$08$0$ptr$i >> 0] | 0)) {
          $$sroa$0374$1 = $421;
          $930 = $929;
          $931 = $403;
          break L116;
         }
         $$sroa$08$0$ptr$i = $$sroa$08$0$ptr$i + 1 | 0;
         $436 = $436 + 1 | 0;
        }
       }
      } else {
       $$sroa$0374$1 = $421;
       $930 = $929;
       $931 = $403;
      }
     } while (0);
     $$sroa$0353$0$ptr = $$sroa$0374$1;
     $443 = $931;
     $447 = $930;
     $469 = $925;
     L131 : while (1) {
      $444 = $443 << 24 >> 24 < 0;
      if (($$sroa$0353$0$ptr | 0) == (($444 ? $447 : $20) + ($444 ? HEAP32[$53 >> 2] | 0 : $443 & 255) | 0)) break;
      $452 = HEAP32[$0 >> 2] | 0;
      do if (!$452) $932 = 1; else {
       $455 = HEAP32[$452 + 12 >> 2] | 0;
       if (($455 | 0) == (HEAP32[$452 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $462 = invoke_ii(HEAP32[(HEAP32[$452 >> 2] | 0) + 36 >> 2] | 0, $452 | 0) | 0;
        $463 = __THREW__;
        __THREW__ = 0;
        if ($463 & 1) {
         label = 154;
         break L24;
        } else $$0$i$i$i$i250 = $462;
       } else $$0$i$i$i$i250 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$455 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i250, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $932 = 1;
        break;
       } else {
        $932 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$469) label = 144; else {
       $472 = HEAP32[$469 + 12 >> 2] | 0;
       if (($472 | 0) == (HEAP32[$469 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $479 = invoke_ii(HEAP32[(HEAP32[$469 >> 2] | 0) + 36 >> 2] | 0, $469 | 0) | 0;
        $480 = __THREW__;
        __THREW__ = 0;
        if ($480 & 1) {
         label = 154;
         break L24;
        } else $$0$i$i2$i$i256 = $479;
       } else $$0$i$i2$i$i256 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$472 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i256, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 144;
        break;
       } else if ($932) {
        $933 = $469;
        break;
       } else break L131;
      } while (0);
      if ((label | 0) == 144) {
       label = 0;
       if ($932) break; else $933 = 0;
      }
      $486 = HEAP32[$0 >> 2] | 0;
      $488 = HEAP32[$486 + 12 >> 2] | 0;
      if (($488 | 0) == (HEAP32[$486 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $495 = invoke_ii(HEAP32[(HEAP32[$486 >> 2] | 0) + 36 >> 2] | 0, $486 | 0) | 0;
       $496 = __THREW__;
       __THREW__ = 0;
       if ($496 & 1) {
        label = 154;
        break L24;
       } else $$0$i$i264 = $495;
      } else $$0$i$i264 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$488 >> 0] | 0) | 0;
      if ((HEAP8[$$sroa$0353$0$ptr >> 0] | 0) != ($$0$i$i264 & 255) << 24 >> 24) break;
      $503 = HEAP32[$0 >> 2] | 0;
      $504 = $503 + 12 | 0;
      $505 = HEAP32[$504 >> 2] | 0;
      if (($505 | 0) == (HEAP32[$503 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$503 >> 2] | 0) + 40 >> 2] | 0, $503 | 0) | 0;
       $512 = __THREW__;
       __THREW__ = 0;
       if ($512 & 1) {
        label = 155;
        break L24;
       }
      } else {
       HEAP32[$504 >> 2] = $505 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$505 >> 0] | 0) | 0;
      }
      $$sroa$0353$0$ptr = $$sroa$0353$0$ptr + 1 | 0;
      $443 = HEAP8[$51 >> 0] | 0;
      $447 = HEAP32[$20 >> 2] | 0;
      $469 = $933;
     }
     if ($50) {
      $521 = HEAP8[$51 >> 0] | 0;
      $522 = $521 << 24 >> 24 < 0;
      if (($$sroa$0353$0$ptr | 0) == (($522 ? HEAP32[$20 >> 2] | 0 : $20) + ($522 ? HEAP32[$53 >> 2] | 0 : $521 & 255) | 0)) $$1150 = $$0149; else {
       label = 158;
       break L24;
      }
     } else $$1150 = $$0149;
     break;
    }
   case 4:
    {
     $$0132 = 0;
     $549 = $925;
     $926 = $925;
     L168 : while (1) {
      $532 = HEAP32[$0 >> 2] | 0;
      do if (!$532) $934 = 1; else {
       $535 = HEAP32[$532 + 12 >> 2] | 0;
       if (($535 | 0) == (HEAP32[$532 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $542 = invoke_ii(HEAP32[(HEAP32[$532 >> 2] | 0) + 36 >> 2] | 0, $532 | 0) | 0;
        $543 = __THREW__;
        __THREW__ = 0;
        if ($543 & 1) {
         label = 183;
         break L24;
        } else $$0$i$i$i$i270 = $542;
       } else $$0$i$i$i$i270 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$535 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i270, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $934 = 1;
        break;
       } else {
        $934 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$549) {
       $935 = $926;
       label = 172;
      } else {
       $552 = HEAP32[$549 + 12 >> 2] | 0;
       if (($552 | 0) == (HEAP32[$549 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $559 = invoke_ii(HEAP32[(HEAP32[$549 >> 2] | 0) + 36 >> 2] | 0, $549 | 0) | 0;
        $560 = __THREW__;
        __THREW__ = 0;
        if ($560 & 1) {
         label = 183;
         break L24;
        } else $$0$i$i2$i$i276 = $559;
       } else $$0$i$i2$i$i276 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$552 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i276, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        $935 = 0;
        label = 172;
        break;
       } else if ($934) {
        $936 = $926;
        $937 = $549;
        break;
       } else {
        $662 = $926;
        break L168;
       }
      } while (0);
      if ((label | 0) == 172) {
       label = 0;
       if ($934) {
        $662 = $935;
        break;
       } else {
        $936 = $935;
        $937 = 0;
       }
      }
      $566 = HEAP32[$0 >> 2] | 0;
      $568 = HEAP32[$566 + 12 >> 2] | 0;
      if (($568 | 0) == (HEAP32[$566 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $575 = invoke_ii(HEAP32[(HEAP32[$566 >> 2] | 0) + 36 >> 2] | 0, $566 | 0) | 0;
       $576 = __THREW__;
       __THREW__ = 0;
       if ($576 & 1) {
        label = 186;
        break L24;
       } else $$0$i$i284 = $575;
      } else $$0$i$i284 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$568 >> 0] | 0) | 0;
      $580 = $$0$i$i284 & 255;
      if ($580 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i284 << 24 >> 24 << 1) >> 1] & 2048)) label = 188; else {
       $588 = HEAP32[$9 >> 2] | 0;
       if (($588 | 0) == (HEAP32[$11 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(31, $8 | 0, $9 | 0, $11 | 0);
        $591 = __THREW__;
        __THREW__ = 0;
        if ($591 & 1) {
         label = 186;
         break L24;
        }
        $602 = HEAP32[$9 >> 2] | 0;
       } else $602 = $588;
       HEAP32[$9 >> 2] = $602 + 1;
       HEAP8[$602 >> 0] = $580;
       $$2134$ph = $$0132 + 1 | 0;
      } else label = 188;
      if ((label | 0) == 188) {
       label = 0;
       $604 = HEAP8[$47 >> 0] | 0;
       if (!((HEAP8[$18 >> 0] | 0) == $580 << 24 >> 24 & ($$0132 | 0 ? (($604 << 24 >> 24 < 0 ? HEAP32[$48 >> 2] | 0 : $604 & 255) | 0) != 0 : 0))) {
        $662 = $936;
        break;
       }
       $613 = HEAP32[$14 >> 2] | 0;
       if (($613 | 0) == (HEAP32[$15 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(32, $13 | 0, $14 | 0, $15 | 0);
        $616 = __THREW__;
        __THREW__ = 0;
        if ($616 & 1) {
         label = 186;
         break L24;
        }
        $619 = HEAP32[$14 >> 2] | 0;
       } else $619 = $613;
       HEAP32[$14 >> 2] = $619 + 4;
       HEAP32[$619 >> 2] = $$0132;
       $$2134$ph = 0;
      }
      $620 = HEAP32[$0 >> 2] | 0;
      $621 = $620 + 12 | 0;
      $622 = HEAP32[$621 >> 2] | 0;
      if (($622 | 0) == (HEAP32[$620 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$620 >> 2] | 0) + 40 >> 2] | 0, $620 | 0) | 0;
       $629 = __THREW__;
       __THREW__ = 0;
       if ($629 & 1) {
        label = 183;
        break L24;
       }
      } else {
       HEAP32[$621 >> 2] = $622 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$622 >> 0] | 0) | 0;
      }
      $$0132 = $$2134$ph;
      $549 = $937;
      $926 = $936;
     }
     $634 = HEAP32[$14 >> 2] | 0;
     if ($$0132 | 0 ? (HEAP32[$13 >> 2] | 0) != ($634 | 0) : 0) {
      if (($634 | 0) == (HEAP32[$15 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_viii(32, $13 | 0, $14 | 0, $15 | 0);
       $639 = __THREW__;
       __THREW__ = 0;
       if ($639 & 1) {
        label = 184;
        break L24;
       }
       $642 = HEAP32[$14 >> 2] | 0;
      } else $642 = $634;
      HEAP32[$14 >> 2] = $642 + 4;
      HEAP32[$642 >> 2] = $$0132;
     }
     L223 : do if ((HEAP32[$24 >> 2] | 0) > 0) {
      $645 = HEAP32[$0 >> 2] | 0;
      do if (!$645) $938 = 1; else {
       $648 = HEAP32[$645 + 12 >> 2] | 0;
       if (($648 | 0) == (HEAP32[$645 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $655 = invoke_ii(HEAP32[(HEAP32[$645 >> 2] | 0) + 36 >> 2] | 0, $645 | 0) | 0;
        $656 = __THREW__;
        __THREW__ = 0;
        if ($656 & 1) {
         label = 184;
         break L24;
        } else $$0$i$i$i$i291 = $655;
       } else $$0$i$i$i$i291 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$648 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i291, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $938 = 1;
        break;
       } else {
        $938 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      do if (!$662) label = 216; else {
       $665 = HEAP32[$662 + 12 >> 2] | 0;
       if (($665 | 0) == (HEAP32[$662 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $672 = invoke_ii(HEAP32[(HEAP32[$662 >> 2] | 0) + 36 >> 2] | 0, $662 | 0) | 0;
        $673 = __THREW__;
        __THREW__ = 0;
        if ($673 & 1) {
         label = 184;
         break L24;
        } else $$0$i$i2$i$i297 = $672;
       } else $$0$i$i2$i$i297 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$665 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i297, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 216;
        break;
       } else if ($938) {
        $939 = $662;
        break;
       } else {
        label = 222;
        break L24;
       }
      } while (0);
      if ((label | 0) == 216) {
       label = 0;
       if ($938) {
        label = 222;
        break L24;
       } else $939 = 0;
      }
      $679 = HEAP32[$0 >> 2] | 0;
      $681 = HEAP32[$679 + 12 >> 2] | 0;
      if (($681 | 0) == (HEAP32[$679 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $688 = invoke_ii(HEAP32[(HEAP32[$679 >> 2] | 0) + 36 >> 2] | 0, $679 | 0) | 0;
       $689 = __THREW__;
       __THREW__ = 0;
       if ($689 & 1) {
        label = 184;
        break L24;
       } else $$0$i$i304 = $688;
      } else $$0$i$i304 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$681 >> 0] | 0) | 0;
      if ((HEAP8[$17 >> 0] | 0) != ($$0$i$i304 & 255) << 24 >> 24) {
       label = 222;
       break L24;
      }
      $698 = HEAP32[$0 >> 2] | 0;
      $699 = $698 + 12 | 0;
      $700 = HEAP32[$699 >> 2] | 0;
      if (($700 | 0) == (HEAP32[$698 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$698 >> 2] | 0) + 40 >> 2] | 0, $698 | 0) | 0;
       $707 = __THREW__;
       __THREW__ = 0;
       if ($707 & 1) {
        label = 184;
        break L24;
       }
      } else {
       HEAP32[$699 >> 2] = $700 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$700 >> 0] | 0) | 0;
      }
      $730 = $939;
      while (1) {
       if ((HEAP32[$24 >> 2] | 0) <= 0) break L223;
       $713 = HEAP32[$0 >> 2] | 0;
       do if (!$713) $940 = 1; else {
        $716 = HEAP32[$713 + 12 >> 2] | 0;
        if (($716 | 0) == (HEAP32[$713 + 16 >> 2] | 0)) {
         __THREW__ = 0;
         $723 = invoke_ii(HEAP32[(HEAP32[$713 >> 2] | 0) + 36 >> 2] | 0, $713 | 0) | 0;
         $724 = __THREW__;
         __THREW__ = 0;
         if ($724 & 1) {
          label = 182;
          break L24;
         } else $$0$i$i$i$i309 = $723;
        } else $$0$i$i$i$i309 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$716 >> 0] | 0) | 0;
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i309, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$0 >> 2] = 0;
         $940 = 1;
         break;
        } else {
         $940 = (HEAP32[$0 >> 2] | 0) == 0;
         break;
        }
       } while (0);
       do if (!$730) label = 241; else {
        $733 = HEAP32[$730 + 12 >> 2] | 0;
        if (($733 | 0) == (HEAP32[$730 + 16 >> 2] | 0)) {
         __THREW__ = 0;
         $740 = invoke_ii(HEAP32[(HEAP32[$730 >> 2] | 0) + 36 >> 2] | 0, $730 | 0) | 0;
         $741 = __THREW__;
         __THREW__ = 0;
         if ($741 & 1) {
          label = 182;
          break L24;
         } else $$0$i$i2$i$i315 = $740;
        } else $$0$i$i2$i$i315 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$733 >> 0] | 0) | 0;
        if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i315, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
         HEAP32[$1 >> 2] = 0;
         label = 241;
         break;
        } else if ($940) {
         $941 = $730;
         break;
        } else {
         label = 248;
         break L24;
        }
       } while (0);
       if ((label | 0) == 241) {
        label = 0;
        if ($940) {
         label = 248;
         break L24;
        } else $941 = 0;
       }
       $747 = HEAP32[$0 >> 2] | 0;
       $749 = HEAP32[$747 + 12 >> 2] | 0;
       if (($749 | 0) == (HEAP32[$747 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $756 = invoke_ii(HEAP32[(HEAP32[$747 >> 2] | 0) + 36 >> 2] | 0, $747 | 0) | 0;
        $757 = __THREW__;
        __THREW__ = 0;
        if ($757 & 1) {
         label = 182;
         break L24;
        } else $$0$i$i323 = $756;
       } else $$0$i$i323 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$749 >> 0] | 0) | 0;
       if (($$0$i$i323 & 255) << 24 >> 24 <= -1) {
        label = 248;
        break L24;
       }
       if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i323 << 24 >> 24 << 1) >> 1] & 2048)) {
        label = 248;
        break L24;
       }
       if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$11 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_viii(31, $8 | 0, $9 | 0, $11 | 0);
        $774 = __THREW__;
        __THREW__ = 0;
        if ($774 & 1) {
         label = 182;
         break L24;
        }
       }
       $776 = HEAP32[$0 >> 2] | 0;
       $778 = HEAP32[$776 + 12 >> 2] | 0;
       if (($778 | 0) == (HEAP32[$776 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $785 = invoke_ii(HEAP32[(HEAP32[$776 >> 2] | 0) + 36 >> 2] | 0, $776 | 0) | 0;
        $786 = __THREW__;
        __THREW__ = 0;
        if ($786 & 1) {
         label = 182;
         break L24;
        } else $$0$i$i327 = $785;
       } else $$0$i$i327 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$778 >> 0] | 0) | 0;
       $791 = HEAP32[$9 >> 2] | 0;
       HEAP32[$9 >> 2] = $791 + 1;
       HEAP8[$791 >> 0] = $$0$i$i327;
       HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + -1;
       $795 = HEAP32[$0 >> 2] | 0;
       $796 = $795 + 12 | 0;
       $797 = HEAP32[$796 >> 2] | 0;
       if (($797 | 0) == (HEAP32[$795 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        invoke_ii(HEAP32[(HEAP32[$795 >> 2] | 0) + 40 >> 2] | 0, $795 | 0) | 0;
        $804 = __THREW__;
        __THREW__ = 0;
        if ($804 & 1) {
         label = 182;
         break L24;
        }
       } else {
        HEAP32[$796 >> 2] = $797 + 1;
        __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$797 >> 0] | 0) | 0;
       }
       $730 = $941;
      }
     } while (0);
     if ((HEAP32[$9 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
      label = 259;
      break L24;
     } else $$1150 = $$0149;
     break;
    }
   default:
    $$1150 = $$0149;
   } while (0);
   L299 : do if ((label | 0) == 52) {
    label = 0;
    $160 = $925;
    while (1) {
     $143 = HEAP32[$0 >> 2] | 0;
     do if (!$143) $927 = 1; else {
      $146 = HEAP32[$143 + 12 >> 2] | 0;
      if (($146 | 0) == (HEAP32[$143 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $153 = invoke_ii(HEAP32[(HEAP32[$143 >> 2] | 0) + 36 >> 2] | 0, $143 | 0) | 0;
       $154 = __THREW__;
       __THREW__ = 0;
       if ($154 & 1) {
        label = 35;
        break L24;
       } else $$0$i$i$i$i185 = $153;
      } else $$0$i$i$i$i185 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$146 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i185, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $927 = 1;
       break;
      } else {
       $927 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     do if (!$160) label = 66; else {
      $163 = HEAP32[$160 + 12 >> 2] | 0;
      if (($163 | 0) == (HEAP32[$160 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $170 = invoke_ii(HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] | 0, $160 | 0) | 0;
       $171 = __THREW__;
       __THREW__ = 0;
       if ($171 & 1) {
        label = 35;
        break L24;
       } else $$0$i$i2$i$i191 = $170;
      } else $$0$i$i2$i$i191 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$163 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i191, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       label = 66;
       break;
      } else if ($927) {
       $928 = $160;
       break;
      } else {
       $$1150 = $$0149;
       break L299;
      }
     } while (0);
     if ((label | 0) == 66) {
      label = 0;
      if ($927) {
       $$1150 = $$0149;
       break L299;
      } else $928 = 0;
     }
     $177 = HEAP32[$0 >> 2] | 0;
     $179 = HEAP32[$177 + 12 >> 2] | 0;
     if (($179 | 0) == (HEAP32[$177 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $186 = invoke_ii(HEAP32[(HEAP32[$177 >> 2] | 0) + 36 >> 2] | 0, $177 | 0) | 0;
      $187 = __THREW__;
      __THREW__ = 0;
      if ($187 & 1) {
       label = 35;
       break L24;
      } else $$0$i$i199 = $186;
     } else $$0$i$i199 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$179 >> 0] | 0) | 0;
     if (($$0$i$i199 & 255) << 24 >> 24 <= -1) {
      $$1150 = $$0149;
      break L299;
     }
     if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i199 << 24 >> 24 << 1) >> 1] & 8192)) {
      $$1150 = $$0149;
      break L299;
     }
     $199 = HEAP32[$0 >> 2] | 0;
     $200 = $199 + 12 | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     if (($201 | 0) == (HEAP32[$199 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $208 = invoke_ii(HEAP32[(HEAP32[$199 >> 2] | 0) + 40 >> 2] | 0, $199 | 0) | 0;
      $209 = __THREW__;
      __THREW__ = 0;
      if ($209 & 1) {
       label = 35;
       break L24;
      } else $$0$i$i203 = $208;
     } else {
      HEAP32[$200 >> 2] = $201 + 1;
      $$0$i$i203 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$201 >> 0] | 0) | 0;
     }
     __THREW__ = 0;
     invoke_vii(47, $23 | 0, $$0$i$i203 & 255 | 0);
     $215 = __THREW__;
     __THREW__ = 0;
     if ($215 & 1) {
      label = 35;
      break L24;
     } else $160 = $928;
    }
   } while (0);
   $$0149 = $$1150;
   $$0158 = $$0158 + 1 | 0;
  }
  L336 : switch (label | 0) {
  case 35:
   {
    $lpad$phi$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$index2 = tempRet0;
    label = 37;
    break;
   }
  case 36:
   {
    $lpad$phi$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$index2 = tempRet0;
    label = 37;
    break;
   }
  case 50:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 113:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 154:
   {
    $$5142 = ___cxa_find_matching_catch_2() | 0;
    $$5148 = tempRet0;
    break L21;
    break;
   }
  case 155:
   {
    $$5142 = ___cxa_find_matching_catch_2() | 0;
    $$5148 = tempRet0;
    break L21;
    break;
   }
  case 158:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 182:
   {
    $lpad$phi420$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi420$index8 = tempRet0;
    label = 185;
    break;
   }
  case 183:
   {
    $lpad$phi420$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi420$index8 = tempRet0;
    label = 185;
    break;
   }
  case 184:
   {
    $lpad$phi420$index = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi420$index8 = tempRet0;
    label = 185;
    break;
   }
  case 186:
   {
    $$5142 = ___cxa_find_matching_catch_2() | 0;
    $$5148 = tempRet0;
    break L21;
    break;
   }
  case 222:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 248:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 259:
   {
    HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
    $$10 = 0;
    label = 300;
    break;
   }
  case 261:
   {
    L338 : do if ($$0149 | 0) {
     $815 = $$0149 + 11 | 0;
     $816 = $$0149 + 4 | 0;
     $$0 = 1;
     L340 : while (1) {
      $817 = HEAP8[$815 >> 0] | 0;
      if ($817 << 24 >> 24 < 0) $822 = HEAP32[$816 >> 2] | 0; else $822 = $817 & 255;
      if ($$0 >>> 0 >= $822 >>> 0) break L338;
      $823 = HEAP32[$0 >> 2] | 0;
      do if (!$823) $942 = 1; else {
       $826 = HEAP32[$823 + 12 >> 2] | 0;
       if (($826 | 0) == (HEAP32[$823 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $833 = invoke_ii(HEAP32[(HEAP32[$823 >> 2] | 0) + 36 >> 2] | 0, $823 | 0) | 0;
        $834 = __THREW__;
        __THREW__ = 0;
        if ($834 & 1) {
         label = 289;
         break L340;
        } else $$0$i$i$i$i333 = $833;
       } else $$0$i$i$i$i333 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$826 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i333, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$0 >> 2] = 0;
        $942 = 1;
        break;
       } else {
        $942 = (HEAP32[$0 >> 2] | 0) == 0;
        break;
       }
      } while (0);
      $840 = HEAP32[$1 >> 2] | 0;
      do if (!$840) label = 280; else {
       $843 = HEAP32[$840 + 12 >> 2] | 0;
       if (($843 | 0) == (HEAP32[$840 + 16 >> 2] | 0)) {
        __THREW__ = 0;
        $850 = invoke_ii(HEAP32[(HEAP32[$840 >> 2] | 0) + 36 >> 2] | 0, $840 | 0) | 0;
        $851 = __THREW__;
        __THREW__ = 0;
        if ($851 & 1) {
         label = 289;
         break L340;
        } else $$0$i$i2$i$i339 = $850;
       } else $$0$i$i2$i$i339 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$843 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i339, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        label = 280;
        break;
       } else if ($942) break; else {
        label = 288;
        break L340;
       }
      } while (0);
      if ((label | 0) == 280) {
       label = 0;
       if ($942) {
        label = 288;
        break;
       }
      }
      $857 = HEAP32[$0 >> 2] | 0;
      $859 = HEAP32[$857 + 12 >> 2] | 0;
      if (($859 | 0) == (HEAP32[$857 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $866 = invoke_ii(HEAP32[(HEAP32[$857 >> 2] | 0) + 36 >> 2] | 0, $857 | 0) | 0;
       $867 = __THREW__;
       __THREW__ = 0;
       if ($867 & 1) {
        label = 289;
        break;
       } else $$0$i$i247 = $866;
      } else $$0$i$i247 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$859 >> 0] | 0) | 0;
      if ((HEAP8[$815 >> 0] | 0) < 0) $876 = HEAP32[$$0149 >> 2] | 0; else $876 = $$0149;
      if ((HEAP8[$876 + $$0 >> 0] | 0) != ($$0$i$i247 & 255) << 24 >> 24) {
       label = 288;
       break;
      }
      $883 = HEAP32[$0 >> 2] | 0;
      $884 = $883 + 12 | 0;
      $885 = HEAP32[$884 >> 2] | 0;
      if (($885 | 0) == (HEAP32[$883 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       invoke_ii(HEAP32[(HEAP32[$883 >> 2] | 0) + 40 >> 2] | 0, $883 | 0) | 0;
       $892 = __THREW__;
       __THREW__ = 0;
       if ($892 & 1) {
        label = 289;
        break;
       }
      } else {
       HEAP32[$884 >> 2] = $885 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$885 >> 0] | 0) | 0;
      }
      $$0 = $$0 + 1 | 0;
     }
     if ((label | 0) == 288) {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $$10 = 0;
      label = 300;
      break L336;
     } else if ((label | 0) == 289) {
      $881 = ___cxa_find_matching_catch_2() | 0;
      $$5142 = $881;
      $$5148 = tempRet0;
      break L21;
     }
    } while (0);
    $897 = HEAP32[$13 >> 2] | 0;
    $898 = HEAP32[$14 >> 2] | 0;
    if (($897 | 0) == ($898 | 0)) {
     $$10 = 1;
     label = 300;
    } else {
     HEAP32[$25 >> 2] = 0;
     __THREW__ = 0;
     invoke_viiii(28, $19 | 0, $897 | 0, $898 | 0, $25 | 0);
     $900 = __THREW__;
     __THREW__ = 0;
     if ($900 & 1) {
      $906 = ___cxa_find_matching_catch_2() | 0;
      $$5142 = $906;
      $$5148 = tempRet0;
      break L21;
     }
     if (!(HEAP32[$25 >> 2] | 0)) {
      $$10 = 1;
      label = 300;
      break;
     } else {
      HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
      $$10 = 0;
      label = 300;
      break;
     }
    }
    break;
   }
  }
  if ((label | 0) == 37) {
   $$5142 = $lpad$phi$index;
   $$5148 = $lpad$phi$index2;
   break;
  } else if ((label | 0) == 185) {
   $$5142 = $lpad$phi420$index;
   $$5148 = $lpad$phi420$index8;
   break;
  } else if ((label | 0) == 300) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
   $908 = HEAP32[$13 >> 2] | 0;
   HEAP32[$13 >> 2] = 0;
   if ($908 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$13 + 4 >> 2] | 0, $908 | 0);
    $912 = __THREW__;
    __THREW__ = 0;
    if ($912 & 1) {
     $914 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($914);
    }
   }
   STACKTOP = sp;
   return $$10 | 0;
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($23);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($22);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($21);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 $916 = HEAP32[$13 >> 2] | 0;
 HEAP32[$13 >> 2] = 0;
 if ($916 | 0) {
  __THREW__ = 0;
  invoke_vi(HEAP32[$13 + 4 >> 2] | 0, $916 | 0);
  $920 = __THREW__;
  __THREW__ = 0;
  if ($920 & 1) {
   $922 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($922);
  }
 }
 ___resumeException($$5142 | 0);
 return 0;
}

function _malloc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i16$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$02065$i$i = 0, $$0207$lcssa$i$i = 0, $$02074$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024372$i = 0, $$0286$i$i = 0, $$028711$i$i = 0, $$0288$lcssa$i$i = 0, $$028810$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$034217$i = 0, $$0343$lcssa$i = 0, $$034316$i = 0, $$0345$i = 0, $$0351$i = 0, $$0357$i = 0, $$0358$i = 0, $$0360$i = 0, $$0361$i = 0, $$0367$i = 0, $$1194$i = 0, $$1194$i$be = 0, $$1194$i$ph = 0, $$1196$i = 0, $$1196$i$be = 0, $$1196$i$ph = 0, $$124471$i = 0, $$1290$i$i = 0, $$1290$i$i$be = 0, $$1290$i$i$ph = 0, $$1292$i$i = 0, $$1292$i$i$be = 0, $$1292$i$i$ph = 0, $$1341$i = 0, $$1346$i = 0, $$1362$i = 0, $$1369$i = 0, $$1369$i$be = 0, $$1369$i$ph = 0, $$1373$i = 0, $$1373$i$be = 0, $$1373$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3$i203218 = 0, $$3348$i = 0, $$3371$i = 0, $$4$lcssa$i = 0, $$420$i = 0, $$420$i$ph = 0, $$4236$i = 0, $$4349$lcssa$i = 0, $$434919$i = 0, $$434919$i$ph = 0, $$4355$i = 0, $$535618$i = 0, $$535618$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i209Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi17$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1000 = 0, $1003 = 0, $1008 = 0, $101 = 0, $1014 = 0, $1017 = 0, $1018 = 0, $102 = 0, $1025 = 0, $1037 = 0, $1042 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $14 = 0, $140 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $156 = 0, $158 = 0, $16 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $185 = 0, $19 = 0, $193 = 0, $198 = 0, $20 = 0, $202 = 0, $208 = 0, $215 = 0, $219 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $27 = 0, $276 = 0, $286 = 0, $290 = 0, $299 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $315 = 0, $317 = 0, $319 = 0, $321 = 0, $323 = 0, $333 = 0, $334 = 0, $336 = 0, $34 = 0, $340 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $380 = 0, $385 = 0, $388 = 0, $393 = 0, $397 = 0, $403 = 0, $41 = 0, $410 = 0, $414 = 0, $422 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $463 = 0, $465 = 0, $467 = 0, $469 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $52 = 0, $524 = 0, $528 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $550 = 0, $552 = 0, $553 = 0, $559 = 0, $56 = 0, $561 = 0, $568 = 0, $570 = 0, $572 = 0, $573 = 0, $574 = 0, $58 = 0, $582 = 0, $583 = 0, $586 = 0, $590 = 0, $593 = 0, $596 = 0, $6 = 0, $60 = 0, $602 = 0, $606 = 0, $610 = 0, $619 = 0, $62 = 0, $620 = 0, $626 = 0, $628 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $643 = 0, $648 = 0, $649 = 0, $650 = 0, $656 = 0, $658 = 0, $662 = 0, $664 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $752 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $807 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $889 = 0, $9 = 0, $901 = 0, $906 = 0, $913 = 0, $914 = 0, $915 = 0, $92 = 0, $923 = 0, $927 = 0, $93 = 0, $931 = 0, $933 = 0, $939 = 0, $940 = 0, $942 = 0, $943 = 0, $945 = 0, $947 = 0, $95 = 0, $952 = 0, $953 = 0, $954 = 0, $96 = 0, $960 = 0, $962 = 0, $968 = 0, $973 = 0, $976 = 0, $977 = 0, $978 = 0, $98 = 0, $982 = 0, $983 = 0, $989 = 0, $994 = 0, $995 = 0, $998 = 0, $spec$select$i205 = 0, $spec$select3$i = 0, $spec$select49$i = 0, label = 0, sp = 0, $962$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 do if ($0 >>> 0 < 245) {
  $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
  $7 = $6 >>> 3;
  $8 = HEAP32[15174] | 0;
  $9 = $8 >>> $7;
  if ($9 & 3 | 0) {
   $14 = ($9 & 1 ^ 1) + $7 | 0;
   $16 = 60736 + ($14 << 1 << 2) | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   $19 = $18 + 8 | 0;
   $20 = HEAP32[$19 >> 2] | 0;
   do if (($20 | 0) == ($16 | 0)) HEAP32[15174] = $8 & ~(1 << $14); else {
    if ((HEAP32[15178] | 0) >>> 0 > $20 >>> 0) _abort();
    $27 = $20 + 12 | 0;
    if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$27 >> 2] = $16;
     HEAP32[$17 >> 2] = $20;
     break;
    } else _abort();
   } while (0);
   $30 = $14 << 3;
   HEAP32[$18 + 4 >> 2] = $30 | 3;
   $34 = $18 + $30 + 4 | 0;
   HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1;
   $$0 = $19;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $37 = HEAP32[15176] | 0;
  if ($6 >>> 0 > $37 >>> 0) {
   if ($9 | 0) {
    $41 = 2 << $7;
    $44 = $9 << $7 & ($41 | 0 - $41);
    $47 = ($44 & 0 - $44) + -1 | 0;
    $49 = $47 >>> 12 & 16;
    $50 = $47 >>> $49;
    $52 = $50 >>> 5 & 8;
    $54 = $50 >>> $52;
    $56 = $54 >>> 2 & 4;
    $58 = $54 >>> $56;
    $60 = $58 >>> 1 & 2;
    $62 = $58 >>> $60;
    $64 = $62 >>> 1 & 1;
    $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0;
    $69 = 60736 + ($67 << 1 << 2) | 0;
    $70 = $69 + 8 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 + 8 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    do if (($73 | 0) == ($69 | 0)) {
     $77 = $8 & ~(1 << $67);
     HEAP32[15174] = $77;
     $98 = $77;
    } else {
     if ((HEAP32[15178] | 0) >>> 0 > $73 >>> 0) _abort();
     $80 = $73 + 12 | 0;
     if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
      HEAP32[$80 >> 2] = $69;
      HEAP32[$70 >> 2] = $73;
      $98 = $8;
      break;
     } else _abort();
    } while (0);
    $83 = $67 << 3;
    $84 = $83 - $6 | 0;
    HEAP32[$71 + 4 >> 2] = $6 | 3;
    $87 = $71 + $6 | 0;
    HEAP32[$87 + 4 >> 2] = $84 | 1;
    HEAP32[$71 + $83 >> 2] = $84;
    if ($37 | 0) {
     $92 = HEAP32[15179] | 0;
     $93 = $37 >>> 3;
     $95 = 60736 + ($93 << 1 << 2) | 0;
     $96 = 1 << $93;
     if (!($98 & $96)) {
      HEAP32[15174] = $98 | $96;
      $$0199 = $95;
      $$pre$phiZ2D = $95 + 8 | 0;
     } else {
      $101 = $95 + 8 | 0;
      $102 = HEAP32[$101 >> 2] | 0;
      if ((HEAP32[15178] | 0) >>> 0 > $102 >>> 0) _abort(); else {
       $$0199 = $102;
       $$pre$phiZ2D = $101;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $92;
     HEAP32[$$0199 + 12 >> 2] = $92;
     HEAP32[$92 + 8 >> 2] = $$0199;
     HEAP32[$92 + 12 >> 2] = $95;
    }
    HEAP32[15176] = $84;
    HEAP32[15179] = $87;
    $$0 = $72;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $108 = HEAP32[15175] | 0;
   if (!$108) $$0197 = $6; else {
    $112 = ($108 & 0 - $108) + -1 | 0;
    $114 = $112 >>> 12 & 16;
    $115 = $112 >>> $114;
    $117 = $115 >>> 5 & 8;
    $119 = $115 >>> $117;
    $121 = $119 >>> 2 & 4;
    $123 = $119 >>> $121;
    $125 = $123 >>> 1 & 2;
    $127 = $123 >>> $125;
    $129 = $127 >>> 1 & 1;
    $134 = HEAP32[61e3 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0;
    $$0189$i = $134;
    $$0190$i = $134;
    $$0191$i = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0;
    while (1) {
     $140 = HEAP32[$$0189$i + 16 >> 2] | 0;
     if (!$140) {
      $143 = HEAP32[$$0189$i + 20 >> 2] | 0;
      if (!$143) break; else $146 = $143;
     } else $146 = $140;
     $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0;
     $150 = $149 >>> 0 < $$0191$i >>> 0;
     $$0189$i = $146;
     $$0190$i = $150 ? $146 : $$0190$i;
     $$0191$i = $150 ? $149 : $$0191$i;
    }
    $151 = HEAP32[15178] | 0;
    if ($151 >>> 0 > $$0190$i >>> 0) _abort();
    $153 = $$0190$i + $6 | 0;
    if ($153 >>> 0 <= $$0190$i >>> 0) _abort();
    $156 = HEAP32[$$0190$i + 24 >> 2] | 0;
    $158 = HEAP32[$$0190$i + 12 >> 2] | 0;
    do if (($158 | 0) == ($$0190$i | 0)) {
     $169 = $$0190$i + 20 | 0;
     $170 = HEAP32[$169 >> 2] | 0;
     if (!$170) {
      $172 = $$0190$i + 16 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      if (!$173) {
       $$3$i = 0;
       break;
      } else {
       $$1194$i$ph = $173;
       $$1196$i$ph = $172;
      }
     } else {
      $$1194$i$ph = $170;
      $$1196$i$ph = $169;
     }
     $$1194$i = $$1194$i$ph;
     $$1196$i = $$1196$i$ph;
     while (1) {
      $175 = $$1194$i + 20 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      if (!$176) {
       $178 = $$1194$i + 16 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       if (!$179) break; else {
        $$1194$i$be = $179;
        $$1196$i$be = $178;
       }
      } else {
       $$1194$i$be = $176;
       $$1196$i$be = $175;
      }
      $$1194$i = $$1194$i$be;
      $$1196$i = $$1196$i$be;
     }
     if ($151 >>> 0 > $$1196$i >>> 0) _abort(); else {
      HEAP32[$$1196$i >> 2] = 0;
      $$3$i = $$1194$i;
      break;
     }
    } else {
     $161 = HEAP32[$$0190$i + 8 >> 2] | 0;
     if ($151 >>> 0 > $161 >>> 0) _abort();
     $163 = $161 + 12 | 0;
     if ((HEAP32[$163 >> 2] | 0) != ($$0190$i | 0)) _abort();
     $166 = $158 + 8 | 0;
     if ((HEAP32[$166 >> 2] | 0) == ($$0190$i | 0)) {
      HEAP32[$163 >> 2] = $158;
      HEAP32[$166 >> 2] = $161;
      $$3$i = $158;
      break;
     } else _abort();
    } while (0);
    L78 : do if ($156 | 0) {
     $184 = HEAP32[$$0190$i + 28 >> 2] | 0;
     $185 = 61e3 + ($184 << 2) | 0;
     do if (($$0190$i | 0) == (HEAP32[$185 >> 2] | 0)) {
      HEAP32[$185 >> 2] = $$3$i;
      if (!$$3$i) {
       HEAP32[15175] = $108 & ~(1 << $184);
       break L78;
      }
     } else if ((HEAP32[15178] | 0) >>> 0 > $156 >>> 0) _abort(); else {
      $193 = $156 + 16 | 0;
      HEAP32[((HEAP32[$193 >> 2] | 0) == ($$0190$i | 0) ? $193 : $156 + 20 | 0) >> 2] = $$3$i;
      if (!$$3$i) break L78; else break;
     } while (0);
     $198 = HEAP32[15178] | 0;
     if ($198 >>> 0 > $$3$i >>> 0) _abort();
     HEAP32[$$3$i + 24 >> 2] = $156;
     $202 = HEAP32[$$0190$i + 16 >> 2] | 0;
     do if ($202 | 0) if ($198 >>> 0 > $202 >>> 0) _abort(); else {
      HEAP32[$$3$i + 16 >> 2] = $202;
      HEAP32[$202 + 24 >> 2] = $$3$i;
      break;
     } while (0);
     $208 = HEAP32[$$0190$i + 20 >> 2] | 0;
     if ($208 | 0) if ((HEAP32[15178] | 0) >>> 0 > $208 >>> 0) _abort(); else {
      HEAP32[$$3$i + 20 >> 2] = $208;
      HEAP32[$208 + 24 >> 2] = $$3$i;
      break;
     }
    } while (0);
    if ($$0191$i >>> 0 < 16) {
     $215 = $$0191$i + $6 | 0;
     HEAP32[$$0190$i + 4 >> 2] = $215 | 3;
     $219 = $$0190$i + $215 + 4 | 0;
     HEAP32[$219 >> 2] = HEAP32[$219 >> 2] | 1;
    } else {
     HEAP32[$$0190$i + 4 >> 2] = $6 | 3;
     HEAP32[$153 + 4 >> 2] = $$0191$i | 1;
     HEAP32[$153 + $$0191$i >> 2] = $$0191$i;
     if ($37 | 0) {
      $228 = HEAP32[15179] | 0;
      $229 = $37 >>> 3;
      $231 = 60736 + ($229 << 1 << 2) | 0;
      $232 = 1 << $229;
      if (!($232 & $8)) {
       HEAP32[15174] = $232 | $8;
       $$0187$i = $231;
       $$pre$phi$iZ2D = $231 + 8 | 0;
      } else {
       $236 = $231 + 8 | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ((HEAP32[15178] | 0) >>> 0 > $237 >>> 0) _abort(); else {
        $$0187$i = $237;
        $$pre$phi$iZ2D = $236;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $228;
      HEAP32[$$0187$i + 12 >> 2] = $228;
      HEAP32[$228 + 8 >> 2] = $$0187$i;
      HEAP32[$228 + 12 >> 2] = $231;
     }
     HEAP32[15176] = $$0191$i;
     HEAP32[15179] = $153;
    }
    $$0 = $$0190$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
  } else $$0197 = $6;
 } else if ($0 >>> 0 > 4294967231) $$0197 = -1; else {
  $245 = $0 + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[15175] | 0;
  if (!$247) $$0197 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $$0357$i = 0; else if ($246 >>> 0 > 16777215) $$0357$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $$0357$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[61e3 + ($$0357$i << 2) >> 2] | 0;
   L122 : do if (!$276) {
    $$2353$i = 0;
    $$3$i203 = 0;
    $$3348$i = $249;
    label = 85;
   } else {
    $$0340$i = 0;
    $$0345$i = $249;
    $$0351$i = $276;
    $$0358$i = $246 << (($$0357$i | 0) == 31 ? 0 : 25 - ($$0357$i >>> 1) | 0);
    $$0361$i = 0;
    while (1) {
     $286 = (HEAP32[$$0351$i + 4 >> 2] & -8) - $246 | 0;
     if ($286 >>> 0 < $$0345$i >>> 0) if (!$286) {
      $$420$i$ph = $$0351$i;
      $$434919$i$ph = 0;
      $$535618$i$ph = $$0351$i;
      label = 89;
      break L122;
     } else {
      $$1341$i = $$0351$i;
      $$1346$i = $286;
     } else {
      $$1341$i = $$0340$i;
      $$1346$i = $$0345$i;
     }
     $290 = HEAP32[$$0351$i + 20 >> 2] | 0;
     $$0351$i = HEAP32[$$0351$i + 16 + ($$0358$i >>> 31 << 2) >> 2] | 0;
     $$1362$i = ($290 | 0) == 0 | ($290 | 0) == ($$0351$i | 0) ? $$0361$i : $290;
     if (!$$0351$i) {
      $$2353$i = $$1362$i;
      $$3$i203 = $$1341$i;
      $$3348$i = $$1346$i;
      label = 85;
      break;
     } else {
      $$0340$i = $$1341$i;
      $$0345$i = $$1346$i;
      $$0358$i = $$0358$i << 1;
      $$0361$i = $$1362$i;
     }
    }
   } while (0);
   if ((label | 0) == 85) {
    if (($$2353$i | 0) == 0 & ($$3$i203 | 0) == 0) {
     $299 = 2 << $$0357$i;
     $302 = ($299 | 0 - $299) & $247;
     if (!$302) {
      $$0197 = $246;
      break;
     }
     $306 = ($302 & 0 - $302) + -1 | 0;
     $308 = $306 >>> 12 & 16;
     $309 = $306 >>> $308;
     $311 = $309 >>> 5 & 8;
     $313 = $309 >>> $311;
     $315 = $313 >>> 2 & 4;
     $317 = $313 >>> $315;
     $319 = $317 >>> 1 & 2;
     $321 = $317 >>> $319;
     $323 = $321 >>> 1 & 1;
     $$3$i203218 = 0;
     $$4355$i = HEAP32[61e3 + (($311 | $308 | $315 | $319 | $323) + ($321 >>> $323) << 2) >> 2] | 0;
    } else {
     $$3$i203218 = $$3$i203;
     $$4355$i = $$2353$i;
    }
    if (!$$4355$i) {
     $$4$lcssa$i = $$3$i203218;
     $$4349$lcssa$i = $$3348$i;
    } else {
     $$420$i$ph = $$3$i203218;
     $$434919$i$ph = $$3348$i;
     $$535618$i$ph = $$4355$i;
     label = 89;
    }
   }
   if ((label | 0) == 89) {
    $$420$i = $$420$i$ph;
    $$434919$i = $$434919$i$ph;
    $$535618$i = $$535618$i$ph;
    while (1) {
     $333 = (HEAP32[$$535618$i + 4 >> 2] & -8) - $246 | 0;
     $334 = $333 >>> 0 < $$434919$i >>> 0;
     $spec$select$i205 = $334 ? $333 : $$434919$i;
     $spec$select3$i = $334 ? $$535618$i : $$420$i;
     $336 = HEAP32[$$535618$i + 16 >> 2] | 0;
     if (!$336) $340 = HEAP32[$$535618$i + 20 >> 2] | 0; else $340 = $336;
     if (!$340) {
      $$4$lcssa$i = $spec$select3$i;
      $$4349$lcssa$i = $spec$select$i205;
      break;
     } else {
      $$420$i = $spec$select3$i;
      $$434919$i = $spec$select$i205;
      $$535618$i = $340;
     }
    }
   }
   if (!$$4$lcssa$i) $$0197 = $246; else if ($$4349$lcssa$i >>> 0 < ((HEAP32[15176] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[15178] | 0;
    if ($346 >>> 0 > $$4$lcssa$i >>> 0) _abort();
    $348 = $$4$lcssa$i + $246 | 0;
    if ($348 >>> 0 <= $$4$lcssa$i >>> 0) _abort();
    $351 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($$4$lcssa$i | 0)) {
     $364 = $$4$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $$4$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $$3371$i = 0;
       break;
      } else {
       $$1369$i$ph = $368;
       $$1373$i$ph = $367;
      }
     } else {
      $$1369$i$ph = $365;
      $$1373$i$ph = $364;
     }
     $$1369$i = $$1369$i$ph;
     $$1373$i = $$1373$i$ph;
     while (1) {
      $370 = $$1369$i + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if (!$371) {
       $373 = $$1369$i + 16 | 0;
       $374 = HEAP32[$373 >> 2] | 0;
       if (!$374) break; else {
        $$1369$i$be = $374;
        $$1373$i$be = $373;
       }
      } else {
       $$1369$i$be = $371;
       $$1373$i$be = $370;
      }
      $$1369$i = $$1369$i$be;
      $$1373$i = $$1373$i$be;
     }
     if ($346 >>> 0 > $$1373$i >>> 0) _abort(); else {
      HEAP32[$$1373$i >> 2] = 0;
      $$3371$i = $$1369$i;
      break;
     }
    } else {
     $356 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0;
     if ($346 >>> 0 > $356 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($$4$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($$4$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $$3371$i = $353;
      break;
     } else _abort();
    } while (0);
    L176 : do if (!$351) $469 = $247; else {
     $379 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0;
     $380 = 61e3 + ($379 << 2) | 0;
     do if (($$4$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $$3371$i;
      if (!$$3371$i) {
       $385 = $247 & ~(1 << $379);
       HEAP32[15175] = $385;
       $469 = $385;
       break L176;
      }
     } else if ((HEAP32[15178] | 0) >>> 0 > $351 >>> 0) _abort(); else {
      $388 = $351 + 16 | 0;
      HEAP32[((HEAP32[$388 >> 2] | 0) == ($$4$lcssa$i | 0) ? $388 : $351 + 20 | 0) >> 2] = $$3371$i;
      if (!$$3371$i) {
       $469 = $247;
       break L176;
      } else break;
     } while (0);
     $393 = HEAP32[15178] | 0;
     if ($393 >>> 0 > $$3371$i >>> 0) _abort();
     HEAP32[$$3371$i + 24 >> 2] = $351;
     $397 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0;
     do if ($397 | 0) if ($393 >>> 0 > $397 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 16 >> 2] = $397;
      HEAP32[$397 + 24 >> 2] = $$3371$i;
      break;
     } while (0);
     $403 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0;
     if (!$403) $469 = $247; else if ((HEAP32[15178] | 0) >>> 0 > $403 >>> 0) _abort(); else {
      HEAP32[$$3371$i + 20 >> 2] = $403;
      HEAP32[$403 + 24 >> 2] = $$3371$i;
      $469 = $247;
      break;
     }
    } while (0);
    L200 : do if ($$4349$lcssa$i >>> 0 < 16) {
     $410 = $$4349$lcssa$i + $246 | 0;
     HEAP32[$$4$lcssa$i + 4 >> 2] = $410 | 3;
     $414 = $$4$lcssa$i + $410 + 4 | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$$4$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$348 + 4 >> 2] = $$4349$lcssa$i | 1;
     HEAP32[$348 + $$4349$lcssa$i >> 2] = $$4349$lcssa$i;
     $422 = $$4349$lcssa$i >>> 3;
     if ($$4349$lcssa$i >>> 0 < 256) {
      $425 = 60736 + ($422 << 1 << 2) | 0;
      $426 = HEAP32[15174] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[15174] = $426 | $427;
       $$0367$i = $425;
       $$pre$phi$i209Z2D = $425 + 8 | 0;
      } else {
       $431 = $425 + 8 | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ((HEAP32[15178] | 0) >>> 0 > $432 >>> 0) _abort(); else {
        $$0367$i = $432;
        $$pre$phi$i209Z2D = $431;
       }
      }
      HEAP32[$$pre$phi$i209Z2D >> 2] = $348;
      HEAP32[$$0367$i + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $$0367$i;
      HEAP32[$348 + 12 >> 2] = $425;
      break;
     }
     $438 = $$4349$lcssa$i >>> 8;
     if (!$438) $$0360$i = 0; else if ($$4349$lcssa$i >>> 0 > 16777215) $$0360$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $$0360$i = $$4349$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 61e3 + ($$0360$i << 2) | 0;
     HEAP32[$348 + 28 >> 2] = $$0360$i;
     $465 = $348 + 16 | 0;
     HEAP32[$465 + 4 >> 2] = 0;
     HEAP32[$465 >> 2] = 0;
     $467 = 1 << $$0360$i;
     if (!($469 & $467)) {
      HEAP32[15175] = $469 | $467;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$348 + 24 >> 2] = $463;
      HEAP32[$348 + 12 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L218 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) $$0343$lcssa$i = $475; else {
      $$034217$i = $$4349$lcssa$i << (($$0360$i | 0) == 31 ? 0 : 25 - ($$0360$i >>> 1) | 0);
      $$034316$i = $475;
      while (1) {
       $492 = $$034316$i + 16 + ($$034217$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) break;
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($$4349$lcssa$i | 0)) {
        $$0343$lcssa$i = $487;
        break L218;
       } else {
        $$034217$i = $$034217$i << 1;
        $$034316$i = $487;
       }
      }
      if ((HEAP32[15178] | 0) >>> 0 > $492 >>> 0) _abort(); else {
       HEAP32[$492 >> 2] = $348;
       HEAP32[$348 + 24 >> 2] = $$034316$i;
       HEAP32[$348 + 12 >> 2] = $348;
       HEAP32[$348 + 8 >> 2] = $348;
       break L200;
      }
     } while (0);
     $499 = $$0343$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[15178] | 0;
     if ($501 >>> 0 <= $500 >>> 0 & $501 >>> 0 <= $$0343$lcssa$i >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$348 + 8 >> 2] = $500;
      HEAP32[$348 + 12 >> 2] = $$0343$lcssa$i;
      HEAP32[$348 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $$4$lcssa$i + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else $$0197 = $246;
  }
 } while (0);
 $510 = HEAP32[15176] | 0;
 if ($510 >>> 0 >= $$0197 >>> 0) {
  $512 = $510 - $$0197 | 0;
  $513 = HEAP32[15179] | 0;
  if ($512 >>> 0 > 15) {
   $515 = $513 + $$0197 | 0;
   HEAP32[15179] = $515;
   HEAP32[15176] = $512;
   HEAP32[$515 + 4 >> 2] = $512 | 1;
   HEAP32[$513 + $510 >> 2] = $512;
   HEAP32[$513 + 4 >> 2] = $$0197 | 3;
  } else {
   HEAP32[15176] = 0;
   HEAP32[15179] = 0;
   HEAP32[$513 + 4 >> 2] = $510 | 3;
   $524 = $513 + $510 + 4 | 0;
   HEAP32[$524 >> 2] = HEAP32[$524 >> 2] | 1;
  }
  $$0 = $513 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $528 = HEAP32[15177] | 0;
 if ($528 >>> 0 > $$0197 >>> 0) {
  $530 = $528 - $$0197 | 0;
  HEAP32[15177] = $530;
  $531 = HEAP32[15180] | 0;
  $532 = $531 + $$0197 | 0;
  HEAP32[15180] = $532;
  HEAP32[$532 + 4 >> 2] = $530 | 1;
  HEAP32[$531 + 4 >> 2] = $$0197 | 3;
  $$0 = $531 + 8 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP32[15292] | 0)) {
  HEAP32[15294] = 4096;
  HEAP32[15293] = 4096;
  HEAP32[15295] = -1;
  HEAP32[15296] = -1;
  HEAP32[15297] = 0;
  HEAP32[15285] = 0;
  HEAP32[15292] = $1 & -16 ^ 1431655768;
  $546 = 4096;
 } else $546 = HEAP32[15294] | 0;
 $543 = $$0197 + 48 | 0;
 $544 = $$0197 + 47 | 0;
 $545 = $546 + $544 | 0;
 $547 = 0 - $546 | 0;
 $548 = $545 & $547;
 if ($548 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $550 = HEAP32[15284] | 0;
 if ($550 | 0) {
  $552 = HEAP32[15282] | 0;
  $553 = $552 + $548 | 0;
  if ($553 >>> 0 <= $552 >>> 0 | $553 >>> 0 > $550 >>> 0) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L257 : do if (!(HEAP32[15285] & 4)) {
  $559 = HEAP32[15180] | 0;
  L259 : do if (!$559) label = 173; else {
   $$0$i$i = 61144;
   while (1) {
    $561 = HEAP32[$$0$i$i >> 2] | 0;
    if ($561 >>> 0 <= $559 >>> 0) if (($561 + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0) >>> 0 > $559 >>> 0) break;
    $568 = HEAP32[$$0$i$i + 8 >> 2] | 0;
    if (!$568) {
     label = 173;
     break L259;
    } else $$0$i$i = $568;
   }
   $593 = $545 - $528 & $547;
   if ($593 >>> 0 < 2147483647) {
    $596 = _sbrk($593 | 0) | 0;
    if (($596 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$$0$i$i + 4 >> 2] | 0) | 0)) if (($596 | 0) == (-1 | 0)) $$2234243136$i = $593; else {
     $$723947$i = $593;
     $$748$i = $596;
     label = 190;
     break L257;
    } else {
     $$2247$ph$i = $596;
     $$2253$ph$i = $593;
     label = 181;
    }
   } else $$2234243136$i = 0;
  } while (0);
  do if ((label | 0) == 173) {
   $570 = _sbrk(0) | 0;
   if (($570 | 0) == (-1 | 0)) $$2234243136$i = 0; else {
    $572 = $570;
    $573 = HEAP32[15293] | 0;
    $574 = $573 + -1 | 0;
    $spec$select49$i = (($574 & $572 | 0) == 0 ? 0 : ($574 + $572 & 0 - $573) - $572 | 0) + $548 | 0;
    $582 = HEAP32[15282] | 0;
    $583 = $spec$select49$i + $582 | 0;
    if ($spec$select49$i >>> 0 > $$0197 >>> 0 & $spec$select49$i >>> 0 < 2147483647) {
     $586 = HEAP32[15284] | 0;
     if ($586 | 0) if ($583 >>> 0 <= $582 >>> 0 | $583 >>> 0 > $586 >>> 0) {
      $$2234243136$i = 0;
      break;
     }
     $590 = _sbrk($spec$select49$i | 0) | 0;
     if (($590 | 0) == ($570 | 0)) {
      $$723947$i = $spec$select49$i;
      $$748$i = $570;
      label = 190;
      break L257;
     } else {
      $$2247$ph$i = $590;
      $$2253$ph$i = $spec$select49$i;
      label = 181;
     }
    } else $$2234243136$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $602 = 0 - $$2253$ph$i | 0;
   if (!($543 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) if (($$2247$ph$i | 0) == (-1 | 0)) {
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   $606 = HEAP32[15294] | 0;
   $610 = $544 - $$2253$ph$i + $606 & 0 - $606;
   if ($610 >>> 0 >= 2147483647) {
    $$723947$i = $$2253$ph$i;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
   if ((_sbrk($610 | 0) | 0) == (-1 | 0)) {
    _sbrk($602 | 0) | 0;
    $$2234243136$i = 0;
    break;
   } else {
    $$723947$i = $610 + $$2253$ph$i | 0;
    $$748$i = $$2247$ph$i;
    label = 190;
    break L257;
   }
  } while (0);
  HEAP32[15285] = HEAP32[15285] | 4;
  $$4236$i = $$2234243136$i;
  label = 188;
 } else {
  $$4236$i = 0;
  label = 188;
 } while (0);
 if ((label | 0) == 188) if ($548 >>> 0 < 2147483647) {
  $619 = _sbrk($548 | 0) | 0;
  $620 = _sbrk(0) | 0;
  $626 = $620 - $619 | 0;
  $628 = $626 >>> 0 > ($$0197 + 40 | 0) >>> 0;
  if (!(($619 | 0) == (-1 | 0) | $628 ^ 1 | $619 >>> 0 < $620 >>> 0 & (($619 | 0) != (-1 | 0) & ($620 | 0) != (-1 | 0)) ^ 1)) {
   $$723947$i = $628 ? $626 : $$4236$i;
   $$748$i = $619;
   label = 190;
  }
 }
 if ((label | 0) == 190) {
  $632 = (HEAP32[15282] | 0) + $$723947$i | 0;
  HEAP32[15282] = $632;
  if ($632 >>> 0 > (HEAP32[15283] | 0) >>> 0) HEAP32[15283] = $632;
  $635 = HEAP32[15180] | 0;
  L294 : do if (!$635) {
   $637 = HEAP32[15178] | 0;
   if (($637 | 0) == 0 | $$748$i >>> 0 < $637 >>> 0) HEAP32[15178] = $$748$i;
   HEAP32[15286] = $$748$i;
   HEAP32[15287] = $$723947$i;
   HEAP32[15289] = 0;
   HEAP32[15183] = HEAP32[15292];
   HEAP32[15182] = -1;
   HEAP32[15187] = 60736;
   HEAP32[15186] = 60736;
   HEAP32[15189] = 60744;
   HEAP32[15188] = 60744;
   HEAP32[15191] = 60752;
   HEAP32[15190] = 60752;
   HEAP32[15193] = 60760;
   HEAP32[15192] = 60760;
   HEAP32[15195] = 60768;
   HEAP32[15194] = 60768;
   HEAP32[15197] = 60776;
   HEAP32[15196] = 60776;
   HEAP32[15199] = 60784;
   HEAP32[15198] = 60784;
   HEAP32[15201] = 60792;
   HEAP32[15200] = 60792;
   HEAP32[15203] = 60800;
   HEAP32[15202] = 60800;
   HEAP32[15205] = 60808;
   HEAP32[15204] = 60808;
   HEAP32[15207] = 60816;
   HEAP32[15206] = 60816;
   HEAP32[15209] = 60824;
   HEAP32[15208] = 60824;
   HEAP32[15211] = 60832;
   HEAP32[15210] = 60832;
   HEAP32[15213] = 60840;
   HEAP32[15212] = 60840;
   HEAP32[15215] = 60848;
   HEAP32[15214] = 60848;
   HEAP32[15217] = 60856;
   HEAP32[15216] = 60856;
   HEAP32[15219] = 60864;
   HEAP32[15218] = 60864;
   HEAP32[15221] = 60872;
   HEAP32[15220] = 60872;
   HEAP32[15223] = 60880;
   HEAP32[15222] = 60880;
   HEAP32[15225] = 60888;
   HEAP32[15224] = 60888;
   HEAP32[15227] = 60896;
   HEAP32[15226] = 60896;
   HEAP32[15229] = 60904;
   HEAP32[15228] = 60904;
   HEAP32[15231] = 60912;
   HEAP32[15230] = 60912;
   HEAP32[15233] = 60920;
   HEAP32[15232] = 60920;
   HEAP32[15235] = 60928;
   HEAP32[15234] = 60928;
   HEAP32[15237] = 60936;
   HEAP32[15236] = 60936;
   HEAP32[15239] = 60944;
   HEAP32[15238] = 60944;
   HEAP32[15241] = 60952;
   HEAP32[15240] = 60952;
   HEAP32[15243] = 60960;
   HEAP32[15242] = 60960;
   HEAP32[15245] = 60968;
   HEAP32[15244] = 60968;
   HEAP32[15247] = 60976;
   HEAP32[15246] = 60976;
   HEAP32[15249] = 60984;
   HEAP32[15248] = 60984;
   $641 = $$723947$i + -40 | 0;
   $643 = $$748$i + 8 | 0;
   $648 = ($643 & 7 | 0) == 0 ? 0 : 0 - $643 & 7;
   $649 = $$748$i + $648 | 0;
   $650 = $641 - $648 | 0;
   HEAP32[15180] = $649;
   HEAP32[15177] = $650;
   HEAP32[$649 + 4 >> 2] = $650 | 1;
   HEAP32[$$748$i + $641 + 4 >> 2] = 40;
   HEAP32[15181] = HEAP32[15296];
  } else {
   $$024372$i = 61144;
   while (1) {
    $656 = HEAP32[$$024372$i >> 2] | 0;
    $658 = HEAP32[$$024372$i + 4 >> 2] | 0;
    if (($$748$i | 0) == ($656 + $658 | 0)) {
     label = 199;
     break;
    }
    $662 = HEAP32[$$024372$i + 8 >> 2] | 0;
    if (!$662) break; else $$024372$i = $662;
   }
   if ((label | 0) == 199) {
    $664 = $$024372$i + 4 | 0;
    if (!(HEAP32[$$024372$i + 12 >> 2] & 8)) if ($$748$i >>> 0 > $635 >>> 0 & $656 >>> 0 <= $635 >>> 0) {
     HEAP32[$664 >> 2] = $658 + $$723947$i;
     $673 = (HEAP32[15177] | 0) + $$723947$i | 0;
     $675 = $635 + 8 | 0;
     $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7;
     $681 = $635 + $680 | 0;
     $682 = $673 - $680 | 0;
     HEAP32[15180] = $681;
     HEAP32[15177] = $682;
     HEAP32[$681 + 4 >> 2] = $682 | 1;
     HEAP32[$635 + $673 + 4 >> 2] = 40;
     HEAP32[15181] = HEAP32[15296];
     break;
    }
   }
   $688 = HEAP32[15178] | 0;
   if ($$748$i >>> 0 < $688 >>> 0) {
    HEAP32[15178] = $$748$i;
    $752 = $$748$i;
   } else $752 = $688;
   $690 = $$748$i + $$723947$i | 0;
   $$124471$i = 61144;
   while (1) {
    if ((HEAP32[$$124471$i >> 2] | 0) == ($690 | 0)) {
     label = 207;
     break;
    }
    $694 = HEAP32[$$124471$i + 8 >> 2] | 0;
    if (!$694) break; else $$124471$i = $694;
   }
   if ((label | 0) == 207) if (!(HEAP32[$$124471$i + 12 >> 2] & 8)) {
    HEAP32[$$124471$i >> 2] = $$748$i;
    $700 = $$124471$i + 4 | 0;
    HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i;
    $704 = $$748$i + 8 | 0;
    $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0;
    $712 = $690 + 8 | 0;
    $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0;
    $722 = $710 + $$0197 | 0;
    $723 = $718 - $710 - $$0197 | 0;
    HEAP32[$710 + 4 >> 2] = $$0197 | 3;
    L317 : do if (($635 | 0) == ($718 | 0)) {
     $728 = (HEAP32[15177] | 0) + $723 | 0;
     HEAP32[15177] = $728;
     HEAP32[15180] = $722;
     HEAP32[$722 + 4 >> 2] = $728 | 1;
    } else {
     if ((HEAP32[15179] | 0) == ($718 | 0)) {
      $734 = (HEAP32[15176] | 0) + $723 | 0;
      HEAP32[15176] = $734;
      HEAP32[15179] = $722;
      HEAP32[$722 + 4 >> 2] = $734 | 1;
      HEAP32[$722 + $734 >> 2] = $734;
      break;
     }
     $739 = HEAP32[$718 + 4 >> 2] | 0;
     if (($739 & 3 | 0) == 1) {
      $742 = $739 & -8;
      $743 = $739 >>> 3;
      L325 : do if ($739 >>> 0 < 256) {
       $746 = HEAP32[$718 + 8 >> 2] | 0;
       $748 = HEAP32[$718 + 12 >> 2] | 0;
       $750 = 60736 + ($743 << 1 << 2) | 0;
       do if (($746 | 0) != ($750 | 0)) {
        if ($752 >>> 0 > $746 >>> 0) _abort();
        if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) break;
        _abort();
       } while (0);
       if (($748 | 0) == ($746 | 0)) {
        HEAP32[15174] = HEAP32[15174] & ~(1 << $743);
        break;
       }
       do if (($748 | 0) == ($750 | 0)) $$pre$phi17$i$iZ2D = $748 + 8 | 0; else {
        if ($752 >>> 0 > $748 >>> 0) _abort();
        $764 = $748 + 8 | 0;
        if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
         $$pre$phi17$i$iZ2D = $764;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$746 + 12 >> 2] = $748;
       HEAP32[$$pre$phi17$i$iZ2D >> 2] = $746;
      } else {
       $769 = HEAP32[$718 + 24 >> 2] | 0;
       $771 = HEAP32[$718 + 12 >> 2] | 0;
       do if (($771 | 0) == ($718 | 0)) {
        $782 = $718 + 16 | 0;
        $783 = $782 + 4 | 0;
        $784 = HEAP32[$783 >> 2] | 0;
        if (!$784) {
         $786 = HEAP32[$782 >> 2] | 0;
         if (!$786) {
          $$3$i$i = 0;
          break;
         } else {
          $$1290$i$i$ph = $786;
          $$1292$i$i$ph = $782;
         }
        } else {
         $$1290$i$i$ph = $784;
         $$1292$i$i$ph = $783;
        }
        $$1290$i$i = $$1290$i$i$ph;
        $$1292$i$i = $$1292$i$i$ph;
        while (1) {
         $788 = $$1290$i$i + 20 | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $791 = $$1290$i$i + 16 | 0;
          $792 = HEAP32[$791 >> 2] | 0;
          if (!$792) break; else {
           $$1290$i$i$be = $792;
           $$1292$i$i$be = $791;
          }
         } else {
          $$1290$i$i$be = $789;
          $$1292$i$i$be = $788;
         }
         $$1290$i$i = $$1290$i$i$be;
         $$1292$i$i = $$1292$i$i$be;
        }
        if ($752 >>> 0 > $$1292$i$i >>> 0) _abort(); else {
         HEAP32[$$1292$i$i >> 2] = 0;
         $$3$i$i = $$1290$i$i;
         break;
        }
       } else {
        $774 = HEAP32[$718 + 8 >> 2] | 0;
        if ($752 >>> 0 > $774 >>> 0) _abort();
        $776 = $774 + 12 | 0;
        if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) _abort();
        $779 = $771 + 8 | 0;
        if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
         HEAP32[$776 >> 2] = $771;
         HEAP32[$779 >> 2] = $774;
         $$3$i$i = $771;
         break;
        } else _abort();
       } while (0);
       if (!$769) break;
       $797 = HEAP32[$718 + 28 >> 2] | 0;
       $798 = 61e3 + ($797 << 2) | 0;
       do if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
        HEAP32[$798 >> 2] = $$3$i$i;
        if ($$3$i$i | 0) break;
        HEAP32[15175] = HEAP32[15175] & ~(1 << $797);
        break L325;
       } else if ((HEAP32[15178] | 0) >>> 0 > $769 >>> 0) _abort(); else {
        $807 = $769 + 16 | 0;
        HEAP32[((HEAP32[$807 >> 2] | 0) == ($718 | 0) ? $807 : $769 + 20 | 0) >> 2] = $$3$i$i;
        if (!$$3$i$i) break L325; else break;
       } while (0);
       $812 = HEAP32[15178] | 0;
       if ($812 >>> 0 > $$3$i$i >>> 0) _abort();
       HEAP32[$$3$i$i + 24 >> 2] = $769;
       $815 = $718 + 16 | 0;
       $816 = HEAP32[$815 >> 2] | 0;
       do if ($816 | 0) if ($812 >>> 0 > $816 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 16 >> 2] = $816;
        HEAP32[$816 + 24 >> 2] = $$3$i$i;
        break;
       } while (0);
       $822 = HEAP32[$815 + 4 >> 2] | 0;
       if (!$822) break;
       if ((HEAP32[15178] | 0) >>> 0 > $822 >>> 0) _abort(); else {
        HEAP32[$$3$i$i + 20 >> 2] = $822;
        HEAP32[$822 + 24 >> 2] = $$3$i$i;
        break;
       }
      } while (0);
      $$0$i16$i = $718 + $742 | 0;
      $$0286$i$i = $742 + $723 | 0;
     } else {
      $$0$i16$i = $718;
      $$0286$i$i = $723;
     }
     $830 = $$0$i16$i + 4 | 0;
     HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2;
     HEAP32[$722 + 4 >> 2] = $$0286$i$i | 1;
     HEAP32[$722 + $$0286$i$i >> 2] = $$0286$i$i;
     $836 = $$0286$i$i >>> 3;
     if ($$0286$i$i >>> 0 < 256) {
      $839 = 60736 + ($836 << 1 << 2) | 0;
      $840 = HEAP32[15174] | 0;
      $841 = 1 << $836;
      do if (!($840 & $841)) {
       HEAP32[15174] = $840 | $841;
       $$0294$i$i = $839;
       $$pre$phi$i18$iZ2D = $839 + 8 | 0;
      } else {
       $845 = $839 + 8 | 0;
       $846 = HEAP32[$845 >> 2] | 0;
       if ((HEAP32[15178] | 0) >>> 0 <= $846 >>> 0) {
        $$0294$i$i = $846;
        $$pre$phi$i18$iZ2D = $845;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i18$iZ2D >> 2] = $722;
      HEAP32[$$0294$i$i + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $$0294$i$i;
      HEAP32[$722 + 12 >> 2] = $839;
      break;
     }
     $852 = $$0286$i$i >>> 8;
     do if (!$852) $$0295$i$i = 0; else {
      if ($$0286$i$i >>> 0 > 16777215) {
       $$0295$i$i = 31;
       break;
      }
      $857 = ($852 + 1048320 | 0) >>> 16 & 8;
      $858 = $852 << $857;
      $861 = ($858 + 520192 | 0) >>> 16 & 4;
      $863 = $858 << $861;
      $866 = ($863 + 245760 | 0) >>> 16 & 2;
      $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0;
      $$0295$i$i = $$0286$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1;
     } while (0);
     $877 = 61e3 + ($$0295$i$i << 2) | 0;
     HEAP32[$722 + 28 >> 2] = $$0295$i$i;
     $879 = $722 + 16 | 0;
     HEAP32[$879 + 4 >> 2] = 0;
     HEAP32[$879 >> 2] = 0;
     $881 = HEAP32[15175] | 0;
     $882 = 1 << $$0295$i$i;
     if (!($881 & $882)) {
      HEAP32[15175] = $881 | $882;
      HEAP32[$877 >> 2] = $722;
      HEAP32[$722 + 24 >> 2] = $877;
      HEAP32[$722 + 12 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $722;
      break;
     }
     $889 = HEAP32[$877 >> 2] | 0;
     L410 : do if ((HEAP32[$889 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) $$0288$lcssa$i$i = $889; else {
      $$028711$i$i = $$0286$i$i << (($$0295$i$i | 0) == 31 ? 0 : 25 - ($$0295$i$i >>> 1) | 0);
      $$028810$i$i = $889;
      while (1) {
       $906 = $$028810$i$i + 16 + ($$028711$i$i >>> 31 << 2) | 0;
       $901 = HEAP32[$906 >> 2] | 0;
       if (!$901) break;
       if ((HEAP32[$901 + 4 >> 2] & -8 | 0) == ($$0286$i$i | 0)) {
        $$0288$lcssa$i$i = $901;
        break L410;
       } else {
        $$028711$i$i = $$028711$i$i << 1;
        $$028810$i$i = $901;
       }
      }
      if ((HEAP32[15178] | 0) >>> 0 > $906 >>> 0) _abort(); else {
       HEAP32[$906 >> 2] = $722;
       HEAP32[$722 + 24 >> 2] = $$028810$i$i;
       HEAP32[$722 + 12 >> 2] = $722;
       HEAP32[$722 + 8 >> 2] = $722;
       break L317;
      }
     } while (0);
     $913 = $$0288$lcssa$i$i + 8 | 0;
     $914 = HEAP32[$913 >> 2] | 0;
     $915 = HEAP32[15178] | 0;
     if ($915 >>> 0 <= $914 >>> 0 & $915 >>> 0 <= $$0288$lcssa$i$i >>> 0) {
      HEAP32[$914 + 12 >> 2] = $722;
      HEAP32[$913 >> 2] = $722;
      HEAP32[$722 + 8 >> 2] = $914;
      HEAP32[$722 + 12 >> 2] = $$0288$lcssa$i$i;
      HEAP32[$722 + 24 >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $$0 = $710 + 8 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0$i$i$i = 61144;
   while (1) {
    $923 = HEAP32[$$0$i$i$i >> 2] | 0;
    if ($923 >>> 0 <= $635 >>> 0) {
     $927 = $923 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0;
     if ($927 >>> 0 > $635 >>> 0) break;
    }
    $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0;
   }
   $931 = $927 + -47 | 0;
   $933 = $931 + 8 | 0;
   $939 = $931 + (($933 & 7 | 0) == 0 ? 0 : 0 - $933 & 7) | 0;
   $940 = $635 + 16 | 0;
   $942 = $939 >>> 0 < $940 >>> 0 ? $635 : $939;
   $943 = $942 + 8 | 0;
   $945 = $$723947$i + -40 | 0;
   $947 = $$748$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $953 = $$748$i + $952 | 0;
   $954 = $945 - $952 | 0;
   HEAP32[15180] = $953;
   HEAP32[15177] = $954;
   HEAP32[$953 + 4 >> 2] = $954 | 1;
   HEAP32[$$748$i + $945 + 4 >> 2] = 40;
   HEAP32[15181] = HEAP32[15296];
   $960 = $942 + 4 | 0;
   HEAP32[$960 >> 2] = 27;
   HEAP32[$943 >> 2] = HEAP32[15286];
   HEAP32[$943 + 4 >> 2] = HEAP32[15287];
   HEAP32[$943 + 8 >> 2] = HEAP32[15288];
   HEAP32[$943 + 12 >> 2] = HEAP32[15289];
   HEAP32[15286] = $$748$i;
   HEAP32[15287] = $$723947$i;
   HEAP32[15289] = 0;
   HEAP32[15288] = $943;
   $962 = $942 + 24 | 0;
   do {
    $962$looptemp = $962;
    $962 = $962 + 4 | 0;
    HEAP32[$962 >> 2] = 7;
   } while (($962$looptemp + 8 | 0) >>> 0 < $927 >>> 0);
   if (($942 | 0) != ($635 | 0)) {
    $968 = $942 - $635 | 0;
    HEAP32[$960 >> 2] = HEAP32[$960 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $968 | 1;
    HEAP32[$942 >> 2] = $968;
    $973 = $968 >>> 3;
    if ($968 >>> 0 < 256) {
     $976 = 60736 + ($973 << 1 << 2) | 0;
     $977 = HEAP32[15174] | 0;
     $978 = 1 << $973;
     if (!($977 & $978)) {
      HEAP32[15174] = $977 | $978;
      $$0211$i$i = $976;
      $$pre$phi$i$iZ2D = $976 + 8 | 0;
     } else {
      $982 = $976 + 8 | 0;
      $983 = HEAP32[$982 >> 2] | 0;
      if ((HEAP32[15178] | 0) >>> 0 > $983 >>> 0) _abort(); else {
       $$0211$i$i = $983;
       $$pre$phi$i$iZ2D = $982;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$$0211$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $$0211$i$i;
     HEAP32[$635 + 12 >> 2] = $976;
     break;
    }
    $989 = $968 >>> 8;
    if (!$989) $$0212$i$i = 0; else if ($968 >>> 0 > 16777215) $$0212$i$i = 31; else {
     $994 = ($989 + 1048320 | 0) >>> 16 & 8;
     $995 = $989 << $994;
     $998 = ($995 + 520192 | 0) >>> 16 & 4;
     $1000 = $995 << $998;
     $1003 = ($1000 + 245760 | 0) >>> 16 & 2;
     $1008 = 14 - ($998 | $994 | $1003) + ($1000 << $1003 >>> 15) | 0;
     $$0212$i$i = $968 >>> ($1008 + 7 | 0) & 1 | $1008 << 1;
    }
    $1014 = 61e3 + ($$0212$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $$0212$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$940 >> 2] = 0;
    $1017 = HEAP32[15175] | 0;
    $1018 = 1 << $$0212$i$i;
    if (!($1017 & $1018)) {
     HEAP32[15175] = $1017 | $1018;
     HEAP32[$1014 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1014;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1025 = HEAP32[$1014 >> 2] | 0;
    L451 : do if ((HEAP32[$1025 + 4 >> 2] & -8 | 0) == ($968 | 0)) $$0207$lcssa$i$i = $1025; else {
     $$02065$i$i = $968 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0);
     $$02074$i$i = $1025;
     while (1) {
      $1042 = $$02074$i$i + 16 + ($$02065$i$i >>> 31 << 2) | 0;
      $1037 = HEAP32[$1042 >> 2] | 0;
      if (!$1037) break;
      if ((HEAP32[$1037 + 4 >> 2] & -8 | 0) == ($968 | 0)) {
       $$0207$lcssa$i$i = $1037;
       break L451;
      } else {
       $$02065$i$i = $$02065$i$i << 1;
       $$02074$i$i = $1037;
      }
     }
     if ((HEAP32[15178] | 0) >>> 0 > $1042 >>> 0) _abort(); else {
      HEAP32[$1042 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $$02074$i$i;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L294;
     }
    } while (0);
    $1049 = $$0207$lcssa$i$i + 8 | 0;
    $1050 = HEAP32[$1049 >> 2] | 0;
    $1051 = HEAP32[15178] | 0;
    if ($1051 >>> 0 <= $1050 >>> 0 & $1051 >>> 0 <= $$0207$lcssa$i$i >>> 0) {
     HEAP32[$1050 + 12 >> 2] = $635;
     HEAP32[$1049 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1050;
     HEAP32[$635 + 12 >> 2] = $$0207$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[15177] | 0;
  if ($1060 >>> 0 > $$0197 >>> 0) {
   $1062 = $1060 - $$0197 | 0;
   HEAP32[15177] = $1062;
   $1063 = HEAP32[15180] | 0;
   $1064 = $1063 + $$0197 | 0;
   HEAP32[15180] = $1064;
   HEAP32[$1064 + 4 >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $$0197 | 3;
   $$0 = $1063 + 8 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _transform($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $1001 = 0, $101 = 0, $1015 = 0, $1019 = 0, $1025 = 0, $1029 = 0, $1031 = 0, $1038 = 0, $1059 = 0, $106 = 0, $1061 = 0, $1068 = 0, $1085 = 0, $1087 = 0, $1092 = 0, $1099 = 0, $11 = 0, $110 = 0, $1101 = 0, $1106 = 0, $1113 = 0, $1115 = 0, $112 = 0, $1120 = 0, $1123 = 0, $1124 = 0, $1130 = 0, $1145 = 0, $1149 = 0, $1151 = 0, $1158 = 0, $1175 = 0, $1177 = 0, $1182 = 0, $1189 = 0, $119 = 0, $1191 = 0, $1196 = 0, $1202 = 0, $1204 = 0, $1206 = 0, $1211 = 0, $1215 = 0, $1217 = 0, $1224 = 0, $1238 = 0, $1242 = 0, $1244 = 0, $1251 = 0, $1268 = 0, $1269 = 0, $1273 = 0, $1279 = 0, $1281 = 0, $1286 = 0, $1292 = 0, $1294 = 0, $1296 = 0, $1301 = 0, $1305 = 0, $1307 = 0, $1314 = 0, $1328 = 0, $133 = 0, $1332 = 0, $1334 = 0, $1341 = 0, $1358 = 0, $1360 = 0, $1365 = 0, $137 = 0, $1372 = 0, $1374 = 0, $1379 = 0, $1385 = 0, $1387 = 0, $1389 = 0, $139 = 0, $1397 = 0, $1399 = 0, $1406 = 0, $1422 = 0, $1425 = 0, $1426 = 0, $1432 = 0, $1448 = 0, $1450 = 0, $1455 = 0, $146 = 0, $1462 = 0, $1464 = 0, $1469 = 0, $1475 = 0, $1477 = 0, $1479 = 0, $1484 = 0, $1488 = 0, $1490 = 0, $1497 = 0, $1513 = 0, $1517 = 0, $1519 = 0, $1526 = 0, $1542 = 0, $1544 = 0, $1549 = 0, $1556 = 0, $1558 = 0, $1563 = 0, $1569 = 0, $1571 = 0, $1573 = 0, $1578 = 0, $1582 = 0, $1584 = 0, $1591 = 0, $160 = 0, $1607 = 0, $1611 = 0, $1613 = 0, $1620 = 0, $1635 = 0, $1637 = 0, $164 = 0, $1642 = 0, $1649 = 0, $1651 = 0, $1656 = 0, $1662 = 0, $1664 = 0, $1666 = 0, $167 = 0, $1671 = 0, $1675 = 0, $1677 = 0, $1684 = 0, $1700 = 0, $1704 = 0, $1706 = 0, $1713 = 0, $172 = 0, $1730 = 0, $1732 = 0, $1737 = 0, $1743 = 0, $1745 = 0, $1750 = 0, $1756 = 0, $1758 = 0, $176 = 0, $1763 = 0, $1767 = 0, $1769 = 0, $1776 = 0, $178 = 0, $1795 = 0, $1797 = 0, $18 = 0, $1804 = 0, $1821 = 0, $1823 = 0, $1828 = 0, $1835 = 0, $1837 = 0, $1842 = 0, $1848 = 0, $185 = 0, $1850 = 0, $1852 = 0, $1857 = 0, $1860 = 0, $1861 = 0, $1867 = 0, $1882 = 0, $1886 = 0, $1888 = 0, $1895 = 0, $1912 = 0, $1914 = 0, $1919 = 0, $1926 = 0, $1928 = 0, $1933 = 0, $1939 = 0, $1941 = 0, $1943 = 0, $1948 = 0, $1952 = 0, $1954 = 0, $1961 = 0, $1975 = 0, $1979 = 0, $1981 = 0, $1988 = 0, $199 = 0, $2 = 0, $2005 = 0, $2007 = 0, $2012 = 0, $2019 = 0, $2021 = 0, $2026 = 0, $203 = 0, $2032 = 0, $2034 = 0, $2036 = 0, $2041 = 0, $2045 = 0, $2047 = 0, $205 = 0, $2054 = 0, $2068 = 0, $2072 = 0, $2074 = 0, $2081 = 0, $2098 = 0, $2100 = 0, $2105 = 0, $2112 = 0, $2114 = 0, $2119 = 0, $212 = 0, $2125 = 0, $2127 = 0, $2129 = 0, $2137 = 0, $2139 = 0, $2146 = 0, $2162 = 0, $2165 = 0, $2166 = 0, $2172 = 0, $2188 = 0, $2190 = 0, $2195 = 0, $2202 = 0, $2204 = 0, $2209 = 0, $2215 = 0, $2217 = 0, $2219 = 0, $2224 = 0, $2228 = 0, $2230 = 0, $2237 = 0, $2253 = 0, $2257 = 0, $2259 = 0, $226 = 0, $2266 = 0, $2282 = 0, $2284 = 0, $2289 = 0, $2296 = 0, $2298 = 0, $230 = 0, $2303 = 0, $2309 = 0, $2311 = 0, $2313 = 0, $2318 = 0, $2322 = 0, $2324 = 0, $233 = 0, $2331 = 0, $2347 = 0, $2351 = 0, $2353 = 0, $2360 = 0, $2375 = 0, $2377 = 0, $2382 = 0, $2389 = 0, $2391 = 0, $2396 = 0, $2402 = 0, $2404 = 0, $2406 = 0, $241 = 0, $2411 = 0, $2415 = 0, $2417 = 0, $2424 = 0, $243 = 0, $2440 = 0, $2444 = 0, $2446 = 0, $2453 = 0, $2470 = 0, $2472 = 0, $2477 = 0, $2484 = 0, $2485 = 0, $2489 = 0, $2494 = 0, $2496 = 0, $250 = 0, $2501 = 0, $2505 = 0, $2507 = 0, $2514 = 0, $2535 = 0, $2541 = 0, $2547 = 0, $2553 = 0, $2559 = 0, $2565 = 0, $2571 = 0, $2577 = 0, $266 = 0, $269 = 0, $270 = 0, $276 = 0, $289 = 0, $293 = 0, $296 = 0, $3 = 0, $301 = 0, $305 = 0, $307 = 0, $314 = 0, $32 = 0, $330 = 0, $334 = 0, $336 = 0, $343 = 0, $35 = 0, $356 = 0, $360 = 0, $363 = 0, $368 = 0, $37 = 0, $372 = 0, $374 = 0, $381 = 0, $397 = 0, $4 = 0, $401 = 0, $403 = 0, $410 = 0, $42 = 0, $422 = 0, $426 = 0, $429 = 0, $434 = 0, $438 = 0, $440 = 0, $447 = 0, $45 = 0, $46 = 0, $463 = 0, $467 = 0, $469 = 0, $476 = 0, $490 = 0, $494 = 0, $5 = 0, $500 = 0, $504 = 0, $506 = 0, $513 = 0, $52 = 0, $532 = 0, $534 = 0, $541 = 0, $555 = 0, $559 = 0, $562 = 0, $567 = 0, $570 = 0, $571 = 0, $577 = 0, $592 = 0, $596 = 0, $598 = 0, $6 = 0, $605 = 0, $619 = 0, $623 = 0, $626 = 0, $631 = 0, $635 = 0, $637 = 0, $644 = 0, $658 = 0, $662 = 0, $664 = 0, $67 = 0, $671 = 0, $685 = 0, $689 = 0, $692 = 0, $697 = 0, $7 = 0, $701 = 0, $703 = 0, $71 = 0, $710 = 0, $724 = 0, $728 = 0, $73 = 0, $730 = 0, $737 = 0, $751 = 0, $755 = 0, $758 = 0, $766 = 0, $768 = 0, $775 = 0, $791 = 0, $794 = 0, $795 = 0, $80 = 0, $801 = 0, $814 = 0, $818 = 0, $821 = 0, $826 = 0, $830 = 0, $832 = 0, $839 = 0, $855 = 0, $859 = 0, $861 = 0, $868 = 0, $881 = 0, $885 = 0, $888 = 0, $893 = 0, $897 = 0, $899 = 0, $9 = 0, $906 = 0, $922 = 0, $926 = 0, $928 = 0, $935 = 0, $94 = 0, $947 = 0, $951 = 0, $954 = 0, $959 = 0, $963 = 0, $965 = 0, $972 = 0, $98 = 0, $988 = 0, $992 = 0, $994 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 104 | 0;
 $3 = sp + 100 | 0;
 $4 = sp + 32 | 0;
 $5 = sp;
 $6 = sp + 96 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = HEAP32[$2 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
 HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
 HEAP32[$5 + 16 >> 2] = HEAP32[$7 + 16 >> 2];
 HEAP32[$5 + 20 >> 2] = HEAP32[$7 + 20 >> 2];
 HEAP32[$5 + 24 >> 2] = HEAP32[$7 + 24 >> 2];
 HEAP32[$5 + 28 >> 2] = HEAP32[$7 + 28 >> 2];
 $9 = HEAP32[$5 + 16 >> 2] | 0;
 $11 = HEAP32[$5 + 16 >> 2] | 0;
 $18 = _rotr_32($9 ^ (_rotr_32($11 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $32 = $18 + (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[3540] | 0) | 0;
 $35 = ___bswap_32(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
 HEAP32[$4 >> 2] = $35;
 $37 = $5 + 28 | 0;
 HEAP32[$37 >> 2] = (HEAP32[$37 >> 2] | 0) + ($32 + $35);
 $42 = $5 + 12 | 0;
 HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + (HEAP32[$5 + 28 >> 2] | 0);
 $45 = HEAP32[$5 >> 2] | 0;
 $46 = HEAP32[$5 >> 2] | 0;
 $52 = _rotr_32($45 ^ (_rotr_32($46 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $67 = $5 + 28 | 0;
 HEAP32[$67 >> 2] = (HEAP32[$67 >> 2] | 0) + ($52 + ((HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[$5 + 4 >> 2] & HEAP32[$5 + 8 >> 2])));
 $71 = HEAP32[$5 + 12 >> 2] | 0;
 $73 = HEAP32[$5 + 12 >> 2] | 0;
 $80 = _rotr_32($71 ^ (_rotr_32($73 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $94 = $80 + (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[3541] | 0) | 0;
 $98 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0;
 HEAP32[$4 + 4 >> 2] = $98;
 $101 = $5 + 24 | 0;
 HEAP32[$101 >> 2] = (HEAP32[$101 >> 2] | 0) + ($94 + $98);
 $106 = $5 + 8 | 0;
 HEAP32[$106 >> 2] = (HEAP32[$106 >> 2] | 0) + (HEAP32[$5 + 24 >> 2] | 0);
 $110 = HEAP32[$5 + 28 >> 2] | 0;
 $112 = HEAP32[$5 + 28 >> 2] | 0;
 $119 = _rotr_32($110 ^ (_rotr_32($112 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $133 = $5 + 24 | 0;
 HEAP32[$133 >> 2] = (HEAP32[$133 >> 2] | 0) + ($119 + ((HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[$5 >> 2] & HEAP32[$5 + 4 >> 2])));
 $137 = HEAP32[$5 + 8 >> 2] | 0;
 $139 = HEAP32[$5 + 8 >> 2] | 0;
 $146 = _rotr_32($137 ^ (_rotr_32($139 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $160 = $146 + (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[3542] | 0) | 0;
 $164 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) | 0;
 HEAP32[$4 + 8 >> 2] = $164;
 $167 = $5 + 20 | 0;
 HEAP32[$167 >> 2] = (HEAP32[$167 >> 2] | 0) + ($160 + $164);
 $172 = $5 + 4 | 0;
 HEAP32[$172 >> 2] = (HEAP32[$172 >> 2] | 0) + (HEAP32[$5 + 20 >> 2] | 0);
 $176 = HEAP32[$5 + 24 >> 2] | 0;
 $178 = HEAP32[$5 + 24 >> 2] | 0;
 $185 = _rotr_32($176 ^ (_rotr_32($178 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $199 = $5 + 20 | 0;
 HEAP32[$199 >> 2] = (HEAP32[$199 >> 2] | 0) + ($185 + ((HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[$5 + 28 >> 2] & HEAP32[$5 >> 2])));
 $203 = HEAP32[$5 + 4 >> 2] | 0;
 $205 = HEAP32[$5 + 4 >> 2] | 0;
 $212 = _rotr_32($203 ^ (_rotr_32($205 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $226 = $212 + (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[3543] | 0) | 0;
 $230 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) | 0;
 HEAP32[$4 + 12 >> 2] = $230;
 $233 = $5 + 16 | 0;
 HEAP32[$233 >> 2] = (HEAP32[$233 >> 2] | 0) + ($226 + $230);
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$5 + 16 >> 2] | 0);
 $241 = HEAP32[$5 + 20 >> 2] | 0;
 $243 = HEAP32[$5 + 20 >> 2] | 0;
 $250 = _rotr_32($241 ^ (_rotr_32($243 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $266 = $5 + 16 | 0;
 HEAP32[$266 >> 2] = (HEAP32[$266 >> 2] | 0) + ($250 + ((HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[$5 + 24 >> 2] & HEAP32[$5 + 28 >> 2])));
 $269 = HEAP32[$5 >> 2] | 0;
 $270 = HEAP32[$5 >> 2] | 0;
 $276 = _rotr_32($269 ^ (_rotr_32($270 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $289 = $276 + (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[3544] | 0) | 0;
 $293 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[$4 + 16 >> 2] = $293;
 $296 = $5 + 12 | 0;
 HEAP32[$296 >> 2] = (HEAP32[$296 >> 2] | 0) + ($289 + $293);
 $301 = $5 + 28 | 0;
 HEAP32[$301 >> 2] = (HEAP32[$301 >> 2] | 0) + (HEAP32[$5 + 12 >> 2] | 0);
 $305 = HEAP32[$5 + 16 >> 2] | 0;
 $307 = HEAP32[$5 + 16 >> 2] | 0;
 $314 = _rotr_32($305 ^ (_rotr_32($307 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $330 = $5 + 12 | 0;
 HEAP32[$330 >> 2] = (HEAP32[$330 >> 2] | 0) + ($314 + ((HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[$5 + 20 >> 2] & HEAP32[$5 + 24 >> 2])));
 $334 = HEAP32[$5 + 28 >> 2] | 0;
 $336 = HEAP32[$5 + 28 >> 2] | 0;
 $343 = _rotr_32($334 ^ (_rotr_32($336 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $356 = $343 + (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[3545] | 0) | 0;
 $360 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0) | 0;
 HEAP32[$4 + 20 >> 2] = $360;
 $363 = $5 + 8 | 0;
 HEAP32[$363 >> 2] = (HEAP32[$363 >> 2] | 0) + ($356 + $360);
 $368 = $5 + 24 | 0;
 HEAP32[$368 >> 2] = (HEAP32[$368 >> 2] | 0) + (HEAP32[$5 + 8 >> 2] | 0);
 $372 = HEAP32[$5 + 12 >> 2] | 0;
 $374 = HEAP32[$5 + 12 >> 2] | 0;
 $381 = _rotr_32($372 ^ (_rotr_32($374 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $397 = $5 + 8 | 0;
 HEAP32[$397 >> 2] = (HEAP32[$397 >> 2] | 0) + ($381 + ((HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[$5 + 16 >> 2] & HEAP32[$5 + 20 >> 2])));
 $401 = HEAP32[$5 + 24 >> 2] | 0;
 $403 = HEAP32[$5 + 24 >> 2] | 0;
 $410 = _rotr_32($401 ^ (_rotr_32($403 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $422 = $410 + (HEAP32[$5 >> 2] ^ HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[3546] | 0) | 0;
 $426 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] | 0) | 0;
 HEAP32[$4 + 24 >> 2] = $426;
 $429 = $5 + 4 | 0;
 HEAP32[$429 >> 2] = (HEAP32[$429 >> 2] | 0) + ($422 + $426);
 $434 = $5 + 20 | 0;
 HEAP32[$434 >> 2] = (HEAP32[$434 >> 2] | 0) + (HEAP32[$5 + 4 >> 2] | 0);
 $438 = HEAP32[$5 + 8 >> 2] | 0;
 $440 = HEAP32[$5 + 8 >> 2] | 0;
 $447 = _rotr_32($438 ^ (_rotr_32($440 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $463 = $5 + 4 | 0;
 HEAP32[$463 >> 2] = (HEAP32[$463 >> 2] | 0) + ($447 + ((HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[$5 + 12 >> 2] & HEAP32[$5 + 16 >> 2])));
 $467 = HEAP32[$5 + 20 >> 2] | 0;
 $469 = HEAP32[$5 + 20 >> 2] | 0;
 $476 = _rotr_32($467 ^ (_rotr_32($469 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $490 = $476 + (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[3547] | 0) | 0;
 $494 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] | 0) | 0;
 HEAP32[$4 + 28 >> 2] = $494;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($490 + $494);
 $500 = $5 + 16 | 0;
 HEAP32[$500 >> 2] = (HEAP32[$500 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 $504 = HEAP32[$5 + 4 >> 2] | 0;
 $506 = HEAP32[$5 + 4 >> 2] | 0;
 $513 = _rotr_32($504 ^ (_rotr_32($506 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($513 + ((HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[$5 + 8 >> 2] & HEAP32[$5 + 12 >> 2])));
 $532 = HEAP32[$5 + 16 >> 2] | 0;
 $534 = HEAP32[$5 + 16 >> 2] | 0;
 $541 = _rotr_32($532 ^ (_rotr_32($534 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $555 = $541 + (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[3548] | 0) | 0;
 $559 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] | 0) | 0;
 HEAP32[$4 + 32 >> 2] = $559;
 $562 = $5 + 28 | 0;
 HEAP32[$562 >> 2] = (HEAP32[$562 >> 2] | 0) + ($555 + $559);
 $567 = $5 + 12 | 0;
 HEAP32[$567 >> 2] = (HEAP32[$567 >> 2] | 0) + (HEAP32[$5 + 28 >> 2] | 0);
 $570 = HEAP32[$5 >> 2] | 0;
 $571 = HEAP32[$5 >> 2] | 0;
 $577 = _rotr_32($570 ^ (_rotr_32($571 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $592 = $5 + 28 | 0;
 HEAP32[$592 >> 2] = (HEAP32[$592 >> 2] | 0) + ($577 + ((HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[$5 + 4 >> 2] & HEAP32[$5 + 8 >> 2])));
 $596 = HEAP32[$5 + 12 >> 2] | 0;
 $598 = HEAP32[$5 + 12 >> 2] | 0;
 $605 = _rotr_32($596 ^ (_rotr_32($598 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $619 = $605 + (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[3549] | 0) | 0;
 $623 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) | 0;
 HEAP32[$4 + 36 >> 2] = $623;
 $626 = $5 + 24 | 0;
 HEAP32[$626 >> 2] = (HEAP32[$626 >> 2] | 0) + ($619 + $623);
 $631 = $5 + 8 | 0;
 HEAP32[$631 >> 2] = (HEAP32[$631 >> 2] | 0) + (HEAP32[$5 + 24 >> 2] | 0);
 $635 = HEAP32[$5 + 28 >> 2] | 0;
 $637 = HEAP32[$5 + 28 >> 2] | 0;
 $644 = _rotr_32($635 ^ (_rotr_32($637 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $658 = $5 + 24 | 0;
 HEAP32[$658 >> 2] = (HEAP32[$658 >> 2] | 0) + ($644 + ((HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[$5 >> 2] & HEAP32[$5 + 4 >> 2])));
 $662 = HEAP32[$5 + 8 >> 2] | 0;
 $664 = HEAP32[$5 + 8 >> 2] | 0;
 $671 = _rotr_32($662 ^ (_rotr_32($664 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $685 = $671 + (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[3550] | 0) | 0;
 $689 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 40 >> 2] | 0) | 0;
 HEAP32[$4 + 40 >> 2] = $689;
 $692 = $5 + 20 | 0;
 HEAP32[$692 >> 2] = (HEAP32[$692 >> 2] | 0) + ($685 + $689);
 $697 = $5 + 4 | 0;
 HEAP32[$697 >> 2] = (HEAP32[$697 >> 2] | 0) + (HEAP32[$5 + 20 >> 2] | 0);
 $701 = HEAP32[$5 + 24 >> 2] | 0;
 $703 = HEAP32[$5 + 24 >> 2] | 0;
 $710 = _rotr_32($701 ^ (_rotr_32($703 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $724 = $5 + 20 | 0;
 HEAP32[$724 >> 2] = (HEAP32[$724 >> 2] | 0) + ($710 + ((HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[$5 + 28 >> 2] & HEAP32[$5 >> 2])));
 $728 = HEAP32[$5 + 4 >> 2] | 0;
 $730 = HEAP32[$5 + 4 >> 2] | 0;
 $737 = _rotr_32($728 ^ (_rotr_32($730 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $751 = $737 + (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[3551] | 0) | 0;
 $755 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0) | 0;
 HEAP32[$4 + 44 >> 2] = $755;
 $758 = $5 + 16 | 0;
 HEAP32[$758 >> 2] = (HEAP32[$758 >> 2] | 0) + ($751 + $755);
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$5 + 16 >> 2] | 0);
 $766 = HEAP32[$5 + 20 >> 2] | 0;
 $768 = HEAP32[$5 + 20 >> 2] | 0;
 $775 = _rotr_32($766 ^ (_rotr_32($768 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $791 = $5 + 16 | 0;
 HEAP32[$791 >> 2] = (HEAP32[$791 >> 2] | 0) + ($775 + ((HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[$5 + 24 >> 2] & HEAP32[$5 + 28 >> 2])));
 $794 = HEAP32[$5 >> 2] | 0;
 $795 = HEAP32[$5 >> 2] | 0;
 $801 = _rotr_32($794 ^ (_rotr_32($795 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $814 = $801 + (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[3552] | 0) | 0;
 $818 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] | 0) | 0;
 HEAP32[$4 + 48 >> 2] = $818;
 $821 = $5 + 12 | 0;
 HEAP32[$821 >> 2] = (HEAP32[$821 >> 2] | 0) + ($814 + $818);
 $826 = $5 + 28 | 0;
 HEAP32[$826 >> 2] = (HEAP32[$826 >> 2] | 0) + (HEAP32[$5 + 12 >> 2] | 0);
 $830 = HEAP32[$5 + 16 >> 2] | 0;
 $832 = HEAP32[$5 + 16 >> 2] | 0;
 $839 = _rotr_32($830 ^ (_rotr_32($832 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $855 = $5 + 12 | 0;
 HEAP32[$855 >> 2] = (HEAP32[$855 >> 2] | 0) + ($839 + ((HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[$5 + 20 >> 2] & HEAP32[$5 + 24 >> 2])));
 $859 = HEAP32[$5 + 28 >> 2] | 0;
 $861 = HEAP32[$5 + 28 >> 2] | 0;
 $868 = _rotr_32($859 ^ (_rotr_32($861 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $881 = $868 + (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[3553] | 0) | 0;
 $885 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] | 0) | 0;
 HEAP32[$4 + 52 >> 2] = $885;
 $888 = $5 + 8 | 0;
 HEAP32[$888 >> 2] = (HEAP32[$888 >> 2] | 0) + ($881 + $885);
 $893 = $5 + 24 | 0;
 HEAP32[$893 >> 2] = (HEAP32[$893 >> 2] | 0) + (HEAP32[$5 + 8 >> 2] | 0);
 $897 = HEAP32[$5 + 12 >> 2] | 0;
 $899 = HEAP32[$5 + 12 >> 2] | 0;
 $906 = _rotr_32($897 ^ (_rotr_32($899 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $922 = $5 + 8 | 0;
 HEAP32[$922 >> 2] = (HEAP32[$922 >> 2] | 0) + ($906 + ((HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[$5 + 16 >> 2] & HEAP32[$5 + 20 >> 2])));
 $926 = HEAP32[$5 + 24 >> 2] | 0;
 $928 = HEAP32[$5 + 24 >> 2] | 0;
 $935 = _rotr_32($926 ^ (_rotr_32($928 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $947 = $935 + (HEAP32[$5 >> 2] ^ HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[3554] | 0) | 0;
 $951 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 56 >> 2] | 0) | 0;
 HEAP32[$4 + 56 >> 2] = $951;
 $954 = $5 + 4 | 0;
 HEAP32[$954 >> 2] = (HEAP32[$954 >> 2] | 0) + ($947 + $951);
 $959 = $5 + 20 | 0;
 HEAP32[$959 >> 2] = (HEAP32[$959 >> 2] | 0) + (HEAP32[$5 + 4 >> 2] | 0);
 $963 = HEAP32[$5 + 8 >> 2] | 0;
 $965 = HEAP32[$5 + 8 >> 2] | 0;
 $972 = _rotr_32($963 ^ (_rotr_32($965 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 $988 = $5 + 4 | 0;
 HEAP32[$988 >> 2] = (HEAP32[$988 >> 2] | 0) + ($972 + ((HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[$5 + 12 >> 2] & HEAP32[$5 + 16 >> 2])));
 $992 = HEAP32[$5 + 20 >> 2] | 0;
 $994 = HEAP32[$5 + 20 >> 2] | 0;
 $1001 = _rotr_32($992 ^ (_rotr_32($994 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
 $1015 = $1001 + (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[3555] | 0) | 0;
 $1019 = ___bswap_32(HEAP32[(HEAP32[$3 >> 2] | 0) + 60 >> 2] | 0) | 0;
 HEAP32[$4 + 60 >> 2] = $1019;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($1015 + $1019);
 $1025 = $5 + 16 | 0;
 HEAP32[$1025 >> 2] = (HEAP32[$1025 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 $1029 = HEAP32[$5 + 4 >> 2] | 0;
 $1031 = HEAP32[$5 + 4 >> 2] | 0;
 $1038 = _rotr_32($1029 ^ (_rotr_32($1031 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($1038 + ((HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[$5 + 8 >> 2] & HEAP32[$5 + 12 >> 2])));
 HEAP32[$6 >> 2] = 16;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >>> 0 >= 64) break;
  $1059 = HEAP32[$5 + 16 >> 2] | 0;
  $1061 = HEAP32[$5 + 16 >> 2] | 0;
  $1068 = _rotr_32($1059 ^ (_rotr_32($1061 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1085 = $1068 + (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[14160 + (0 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1087 = HEAP32[$4 + 56 >> 2] | 0;
  $1092 = _rotr_32($1087 ^ (_rotr_32(HEAP32[$4 + 56 >> 2] | 0, 2) | 0), 17) | 0;
  $1099 = ($1092 ^ (HEAP32[$4 + 56 >> 2] | 0) >>> 10) + (HEAP32[$4 + 36 >> 2] | 0) | 0;
  $1101 = HEAP32[$4 + 4 >> 2] | 0;
  $1106 = _rotr_32($1101 ^ (_rotr_32(HEAP32[$4 + 4 >> 2] | 0, 11) | 0), 7) | 0;
  $1113 = (HEAP32[$4 >> 2] | 0) + ($1099 + ($1106 ^ (HEAP32[$4 + 4 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$4 >> 2] = $1113;
  $1115 = $5 + 28 | 0;
  HEAP32[$1115 >> 2] = (HEAP32[$1115 >> 2] | 0) + ($1085 + $1113);
  $1120 = $5 + 12 | 0;
  HEAP32[$1120 >> 2] = (HEAP32[$1120 >> 2] | 0) + (HEAP32[$5 + 28 >> 2] | 0);
  $1123 = HEAP32[$5 >> 2] | 0;
  $1124 = HEAP32[$5 >> 2] | 0;
  $1130 = _rotr_32($1123 ^ (_rotr_32($1124 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1145 = $5 + 28 | 0;
  HEAP32[$1145 >> 2] = (HEAP32[$1145 >> 2] | 0) + ($1130 + ((HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[$5 + 4 >> 2] & HEAP32[$5 + 8 >> 2])));
  $1149 = HEAP32[$5 + 12 >> 2] | 0;
  $1151 = HEAP32[$5 + 12 >> 2] | 0;
  $1158 = _rotr_32($1149 ^ (_rotr_32($1151 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1175 = $1158 + (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[14160 + (1 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1177 = HEAP32[$4 + 60 >> 2] | 0;
  $1182 = _rotr_32($1177 ^ (_rotr_32(HEAP32[$4 + 60 >> 2] | 0, 2) | 0), 17) | 0;
  $1189 = ($1182 ^ (HEAP32[$4 + 60 >> 2] | 0) >>> 10) + (HEAP32[$4 + 40 >> 2] | 0) | 0;
  $1191 = HEAP32[$4 + 8 >> 2] | 0;
  $1196 = _rotr_32($1191 ^ (_rotr_32(HEAP32[$4 + 8 >> 2] | 0, 11) | 0), 7) | 0;
  $1202 = $4 + 4 | 0;
  $1204 = (HEAP32[$1202 >> 2] | 0) + ($1189 + ($1196 ^ (HEAP32[$4 + 8 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1202 >> 2] = $1204;
  $1206 = $5 + 24 | 0;
  HEAP32[$1206 >> 2] = (HEAP32[$1206 >> 2] | 0) + ($1175 + $1204);
  $1211 = $5 + 8 | 0;
  HEAP32[$1211 >> 2] = (HEAP32[$1211 >> 2] | 0) + (HEAP32[$5 + 24 >> 2] | 0);
  $1215 = HEAP32[$5 + 28 >> 2] | 0;
  $1217 = HEAP32[$5 + 28 >> 2] | 0;
  $1224 = _rotr_32($1215 ^ (_rotr_32($1217 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1238 = $5 + 24 | 0;
  HEAP32[$1238 >> 2] = (HEAP32[$1238 >> 2] | 0) + ($1224 + ((HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[$5 >> 2] & HEAP32[$5 + 4 >> 2])));
  $1242 = HEAP32[$5 + 8 >> 2] | 0;
  $1244 = HEAP32[$5 + 8 >> 2] | 0;
  $1251 = _rotr_32($1242 ^ (_rotr_32($1244 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1268 = $1251 + (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[14160 + (2 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1269 = HEAP32[$4 >> 2] | 0;
  $1273 = _rotr_32($1269 ^ (_rotr_32(HEAP32[$4 >> 2] | 0, 2) | 0), 17) | 0;
  $1279 = ($1273 ^ (HEAP32[$4 >> 2] | 0) >>> 10) + (HEAP32[$4 + 44 >> 2] | 0) | 0;
  $1281 = HEAP32[$4 + 12 >> 2] | 0;
  $1286 = _rotr_32($1281 ^ (_rotr_32(HEAP32[$4 + 12 >> 2] | 0, 11) | 0), 7) | 0;
  $1292 = $4 + 8 | 0;
  $1294 = (HEAP32[$1292 >> 2] | 0) + ($1279 + ($1286 ^ (HEAP32[$4 + 12 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1292 >> 2] = $1294;
  $1296 = $5 + 20 | 0;
  HEAP32[$1296 >> 2] = (HEAP32[$1296 >> 2] | 0) + ($1268 + $1294);
  $1301 = $5 + 4 | 0;
  HEAP32[$1301 >> 2] = (HEAP32[$1301 >> 2] | 0) + (HEAP32[$5 + 20 >> 2] | 0);
  $1305 = HEAP32[$5 + 24 >> 2] | 0;
  $1307 = HEAP32[$5 + 24 >> 2] | 0;
  $1314 = _rotr_32($1305 ^ (_rotr_32($1307 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1328 = $5 + 20 | 0;
  HEAP32[$1328 >> 2] = (HEAP32[$1328 >> 2] | 0) + ($1314 + ((HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[$5 + 28 >> 2] & HEAP32[$5 >> 2])));
  $1332 = HEAP32[$5 + 4 >> 2] | 0;
  $1334 = HEAP32[$5 + 4 >> 2] | 0;
  $1341 = _rotr_32($1332 ^ (_rotr_32($1334 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1358 = $1341 + (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[14160 + (3 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1360 = HEAP32[$4 + 4 >> 2] | 0;
  $1365 = _rotr_32($1360 ^ (_rotr_32(HEAP32[$4 + 4 >> 2] | 0, 2) | 0), 17) | 0;
  $1372 = ($1365 ^ (HEAP32[$4 + 4 >> 2] | 0) >>> 10) + (HEAP32[$4 + 48 >> 2] | 0) | 0;
  $1374 = HEAP32[$4 + 16 >> 2] | 0;
  $1379 = _rotr_32($1374 ^ (_rotr_32(HEAP32[$4 + 16 >> 2] | 0, 11) | 0), 7) | 0;
  $1385 = $4 + 12 | 0;
  $1387 = (HEAP32[$1385 >> 2] | 0) + ($1372 + ($1379 ^ (HEAP32[$4 + 16 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1385 >> 2] = $1387;
  $1389 = $5 + 16 | 0;
  HEAP32[$1389 >> 2] = (HEAP32[$1389 >> 2] | 0) + ($1358 + $1387);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$5 + 16 >> 2] | 0);
  $1397 = HEAP32[$5 + 20 >> 2] | 0;
  $1399 = HEAP32[$5 + 20 >> 2] | 0;
  $1406 = _rotr_32($1397 ^ (_rotr_32($1399 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1422 = $5 + 16 | 0;
  HEAP32[$1422 >> 2] = (HEAP32[$1422 >> 2] | 0) + ($1406 + ((HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[$5 + 24 >> 2] & HEAP32[$5 + 28 >> 2])));
  $1425 = HEAP32[$5 >> 2] | 0;
  $1426 = HEAP32[$5 >> 2] | 0;
  $1432 = _rotr_32($1425 ^ (_rotr_32($1426 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1448 = $1432 + (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[14160 + (4 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1450 = HEAP32[$4 + 8 >> 2] | 0;
  $1455 = _rotr_32($1450 ^ (_rotr_32(HEAP32[$4 + 8 >> 2] | 0, 2) | 0), 17) | 0;
  $1462 = ($1455 ^ (HEAP32[$4 + 8 >> 2] | 0) >>> 10) + (HEAP32[$4 + 52 >> 2] | 0) | 0;
  $1464 = HEAP32[$4 + 20 >> 2] | 0;
  $1469 = _rotr_32($1464 ^ (_rotr_32(HEAP32[$4 + 20 >> 2] | 0, 11) | 0), 7) | 0;
  $1475 = $4 + 16 | 0;
  $1477 = (HEAP32[$1475 >> 2] | 0) + ($1462 + ($1469 ^ (HEAP32[$4 + 20 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1475 >> 2] = $1477;
  $1479 = $5 + 12 | 0;
  HEAP32[$1479 >> 2] = (HEAP32[$1479 >> 2] | 0) + ($1448 + $1477);
  $1484 = $5 + 28 | 0;
  HEAP32[$1484 >> 2] = (HEAP32[$1484 >> 2] | 0) + (HEAP32[$5 + 12 >> 2] | 0);
  $1488 = HEAP32[$5 + 16 >> 2] | 0;
  $1490 = HEAP32[$5 + 16 >> 2] | 0;
  $1497 = _rotr_32($1488 ^ (_rotr_32($1490 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1513 = $5 + 12 | 0;
  HEAP32[$1513 >> 2] = (HEAP32[$1513 >> 2] | 0) + ($1497 + ((HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[$5 + 20 >> 2] & HEAP32[$5 + 24 >> 2])));
  $1517 = HEAP32[$5 + 28 >> 2] | 0;
  $1519 = HEAP32[$5 + 28 >> 2] | 0;
  $1526 = _rotr_32($1517 ^ (_rotr_32($1519 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1542 = $1526 + (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[14160 + (5 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1544 = HEAP32[$4 + 12 >> 2] | 0;
  $1549 = _rotr_32($1544 ^ (_rotr_32(HEAP32[$4 + 12 >> 2] | 0, 2) | 0), 17) | 0;
  $1556 = ($1549 ^ (HEAP32[$4 + 12 >> 2] | 0) >>> 10) + (HEAP32[$4 + 56 >> 2] | 0) | 0;
  $1558 = HEAP32[$4 + 24 >> 2] | 0;
  $1563 = _rotr_32($1558 ^ (_rotr_32(HEAP32[$4 + 24 >> 2] | 0, 11) | 0), 7) | 0;
  $1569 = $4 + 20 | 0;
  $1571 = (HEAP32[$1569 >> 2] | 0) + ($1556 + ($1563 ^ (HEAP32[$4 + 24 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1569 >> 2] = $1571;
  $1573 = $5 + 8 | 0;
  HEAP32[$1573 >> 2] = (HEAP32[$1573 >> 2] | 0) + ($1542 + $1571);
  $1578 = $5 + 24 | 0;
  HEAP32[$1578 >> 2] = (HEAP32[$1578 >> 2] | 0) + (HEAP32[$5 + 8 >> 2] | 0);
  $1582 = HEAP32[$5 + 12 >> 2] | 0;
  $1584 = HEAP32[$5 + 12 >> 2] | 0;
  $1591 = _rotr_32($1582 ^ (_rotr_32($1584 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1607 = $5 + 8 | 0;
  HEAP32[$1607 >> 2] = (HEAP32[$1607 >> 2] | 0) + ($1591 + ((HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[$5 + 16 >> 2] & HEAP32[$5 + 20 >> 2])));
  $1611 = HEAP32[$5 + 24 >> 2] | 0;
  $1613 = HEAP32[$5 + 24 >> 2] | 0;
  $1620 = _rotr_32($1611 ^ (_rotr_32($1613 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1635 = $1620 + (HEAP32[$5 >> 2] ^ HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[14160 + (6 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1637 = HEAP32[$4 + 16 >> 2] | 0;
  $1642 = _rotr_32($1637 ^ (_rotr_32(HEAP32[$4 + 16 >> 2] | 0, 2) | 0), 17) | 0;
  $1649 = ($1642 ^ (HEAP32[$4 + 16 >> 2] | 0) >>> 10) + (HEAP32[$4 + 60 >> 2] | 0) | 0;
  $1651 = HEAP32[$4 + 28 >> 2] | 0;
  $1656 = _rotr_32($1651 ^ (_rotr_32(HEAP32[$4 + 28 >> 2] | 0, 11) | 0), 7) | 0;
  $1662 = $4 + 24 | 0;
  $1664 = (HEAP32[$1662 >> 2] | 0) + ($1649 + ($1656 ^ (HEAP32[$4 + 28 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1662 >> 2] = $1664;
  $1666 = $5 + 4 | 0;
  HEAP32[$1666 >> 2] = (HEAP32[$1666 >> 2] | 0) + ($1635 + $1664);
  $1671 = $5 + 20 | 0;
  HEAP32[$1671 >> 2] = (HEAP32[$1671 >> 2] | 0) + (HEAP32[$5 + 4 >> 2] | 0);
  $1675 = HEAP32[$5 + 8 >> 2] | 0;
  $1677 = HEAP32[$5 + 8 >> 2] | 0;
  $1684 = _rotr_32($1675 ^ (_rotr_32($1677 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1700 = $5 + 4 | 0;
  HEAP32[$1700 >> 2] = (HEAP32[$1700 >> 2] | 0) + ($1684 + ((HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[$5 + 12 >> 2] & HEAP32[$5 + 16 >> 2])));
  $1704 = HEAP32[$5 + 20 >> 2] | 0;
  $1706 = HEAP32[$5 + 20 >> 2] | 0;
  $1713 = _rotr_32($1704 ^ (_rotr_32($1706 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1730 = $1713 + (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[14160 + (7 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1732 = HEAP32[$4 + 20 >> 2] | 0;
  $1737 = _rotr_32($1732 ^ (_rotr_32(HEAP32[$4 + 20 >> 2] | 0, 2) | 0), 17) | 0;
  $1743 = ($1737 ^ (HEAP32[$4 + 20 >> 2] | 0) >>> 10) + (HEAP32[$4 >> 2] | 0) | 0;
  $1745 = HEAP32[$4 + 32 >> 2] | 0;
  $1750 = _rotr_32($1745 ^ (_rotr_32(HEAP32[$4 + 32 >> 2] | 0, 11) | 0), 7) | 0;
  $1756 = $4 + 28 | 0;
  $1758 = (HEAP32[$1756 >> 2] | 0) + ($1743 + ($1750 ^ (HEAP32[$4 + 32 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1756 >> 2] = $1758;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($1730 + $1758);
  $1763 = $5 + 16 | 0;
  HEAP32[$1763 >> 2] = (HEAP32[$1763 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
  $1767 = HEAP32[$5 + 4 >> 2] | 0;
  $1769 = HEAP32[$5 + 4 >> 2] | 0;
  $1776 = _rotr_32($1767 ^ (_rotr_32($1769 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($1776 + ((HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[$5 + 8 >> 2] & HEAP32[$5 + 12 >> 2])));
  $1795 = HEAP32[$5 + 16 >> 2] | 0;
  $1797 = HEAP32[$5 + 16 >> 2] | 0;
  $1804 = _rotr_32($1795 ^ (_rotr_32($1797 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1821 = $1804 + (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[14160 + (8 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1823 = HEAP32[$4 + 24 >> 2] | 0;
  $1828 = _rotr_32($1823 ^ (_rotr_32(HEAP32[$4 + 24 >> 2] | 0, 2) | 0), 17) | 0;
  $1835 = ($1828 ^ (HEAP32[$4 + 24 >> 2] | 0) >>> 10) + (HEAP32[$4 + 4 >> 2] | 0) | 0;
  $1837 = HEAP32[$4 + 36 >> 2] | 0;
  $1842 = _rotr_32($1837 ^ (_rotr_32(HEAP32[$4 + 36 >> 2] | 0, 11) | 0), 7) | 0;
  $1848 = $4 + 32 | 0;
  $1850 = (HEAP32[$1848 >> 2] | 0) + ($1835 + ($1842 ^ (HEAP32[$4 + 36 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1848 >> 2] = $1850;
  $1852 = $5 + 28 | 0;
  HEAP32[$1852 >> 2] = (HEAP32[$1852 >> 2] | 0) + ($1821 + $1850);
  $1857 = $5 + 12 | 0;
  HEAP32[$1857 >> 2] = (HEAP32[$1857 >> 2] | 0) + (HEAP32[$5 + 28 >> 2] | 0);
  $1860 = HEAP32[$5 >> 2] | 0;
  $1861 = HEAP32[$5 >> 2] | 0;
  $1867 = _rotr_32($1860 ^ (_rotr_32($1861 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1882 = $5 + 28 | 0;
  HEAP32[$1882 >> 2] = (HEAP32[$1882 >> 2] | 0) + ($1867 + ((HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[$5 + 4 >> 2] & HEAP32[$5 + 8 >> 2])));
  $1886 = HEAP32[$5 + 12 >> 2] | 0;
  $1888 = HEAP32[$5 + 12 >> 2] | 0;
  $1895 = _rotr_32($1886 ^ (_rotr_32($1888 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $1912 = $1895 + (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[14160 + (9 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $1914 = HEAP32[$4 + 28 >> 2] | 0;
  $1919 = _rotr_32($1914 ^ (_rotr_32(HEAP32[$4 + 28 >> 2] | 0, 2) | 0), 17) | 0;
  $1926 = ($1919 ^ (HEAP32[$4 + 28 >> 2] | 0) >>> 10) + (HEAP32[$4 + 8 >> 2] | 0) | 0;
  $1928 = HEAP32[$4 + 40 >> 2] | 0;
  $1933 = _rotr_32($1928 ^ (_rotr_32(HEAP32[$4 + 40 >> 2] | 0, 11) | 0), 7) | 0;
  $1939 = $4 + 36 | 0;
  $1941 = (HEAP32[$1939 >> 2] | 0) + ($1926 + ($1933 ^ (HEAP32[$4 + 40 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$1939 >> 2] = $1941;
  $1943 = $5 + 24 | 0;
  HEAP32[$1943 >> 2] = (HEAP32[$1943 >> 2] | 0) + ($1912 + $1941);
  $1948 = $5 + 8 | 0;
  HEAP32[$1948 >> 2] = (HEAP32[$1948 >> 2] | 0) + (HEAP32[$5 + 24 >> 2] | 0);
  $1952 = HEAP32[$5 + 28 >> 2] | 0;
  $1954 = HEAP32[$5 + 28 >> 2] | 0;
  $1961 = _rotr_32($1952 ^ (_rotr_32($1954 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $1975 = $5 + 24 | 0;
  HEAP32[$1975 >> 2] = (HEAP32[$1975 >> 2] | 0) + ($1961 + ((HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[$5 >> 2] & HEAP32[$5 + 4 >> 2])));
  $1979 = HEAP32[$5 + 8 >> 2] | 0;
  $1981 = HEAP32[$5 + 8 >> 2] | 0;
  $1988 = _rotr_32($1979 ^ (_rotr_32($1981 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2005 = $1988 + (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[14160 + (10 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2007 = HEAP32[$4 + 32 >> 2] | 0;
  $2012 = _rotr_32($2007 ^ (_rotr_32(HEAP32[$4 + 32 >> 2] | 0, 2) | 0), 17) | 0;
  $2019 = ($2012 ^ (HEAP32[$4 + 32 >> 2] | 0) >>> 10) + (HEAP32[$4 + 12 >> 2] | 0) | 0;
  $2021 = HEAP32[$4 + 44 >> 2] | 0;
  $2026 = _rotr_32($2021 ^ (_rotr_32(HEAP32[$4 + 44 >> 2] | 0, 11) | 0), 7) | 0;
  $2032 = $4 + 40 | 0;
  $2034 = (HEAP32[$2032 >> 2] | 0) + ($2019 + ($2026 ^ (HEAP32[$4 + 44 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2032 >> 2] = $2034;
  $2036 = $5 + 20 | 0;
  HEAP32[$2036 >> 2] = (HEAP32[$2036 >> 2] | 0) + ($2005 + $2034);
  $2041 = $5 + 4 | 0;
  HEAP32[$2041 >> 2] = (HEAP32[$2041 >> 2] | 0) + (HEAP32[$5 + 20 >> 2] | 0);
  $2045 = HEAP32[$5 + 24 >> 2] | 0;
  $2047 = HEAP32[$5 + 24 >> 2] | 0;
  $2054 = _rotr_32($2045 ^ (_rotr_32($2047 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $2068 = $5 + 20 | 0;
  HEAP32[$2068 >> 2] = (HEAP32[$2068 >> 2] | 0) + ($2054 + ((HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[$5 + 28 >> 2] & HEAP32[$5 >> 2])));
  $2072 = HEAP32[$5 + 4 >> 2] | 0;
  $2074 = HEAP32[$5 + 4 >> 2] | 0;
  $2081 = _rotr_32($2072 ^ (_rotr_32($2074 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2098 = $2081 + (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[14160 + (11 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2100 = HEAP32[$4 + 36 >> 2] | 0;
  $2105 = _rotr_32($2100 ^ (_rotr_32(HEAP32[$4 + 36 >> 2] | 0, 2) | 0), 17) | 0;
  $2112 = ($2105 ^ (HEAP32[$4 + 36 >> 2] | 0) >>> 10) + (HEAP32[$4 + 16 >> 2] | 0) | 0;
  $2114 = HEAP32[$4 + 48 >> 2] | 0;
  $2119 = _rotr_32($2114 ^ (_rotr_32(HEAP32[$4 + 48 >> 2] | 0, 11) | 0), 7) | 0;
  $2125 = $4 + 44 | 0;
  $2127 = (HEAP32[$2125 >> 2] | 0) + ($2112 + ($2119 ^ (HEAP32[$4 + 48 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2125 >> 2] = $2127;
  $2129 = $5 + 16 | 0;
  HEAP32[$2129 >> 2] = (HEAP32[$2129 >> 2] | 0) + ($2098 + $2127);
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP32[$5 + 16 >> 2] | 0);
  $2137 = HEAP32[$5 + 20 >> 2] | 0;
  $2139 = HEAP32[$5 + 20 >> 2] | 0;
  $2146 = _rotr_32($2137 ^ (_rotr_32($2139 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $2162 = $5 + 16 | 0;
  HEAP32[$2162 >> 2] = (HEAP32[$2162 >> 2] | 0) + ($2146 + ((HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[$5 + 24 >> 2] & HEAP32[$5 + 28 >> 2])));
  $2165 = HEAP32[$5 >> 2] | 0;
  $2166 = HEAP32[$5 >> 2] | 0;
  $2172 = _rotr_32($2165 ^ (_rotr_32($2166 ^ (_rotr_32(HEAP32[$5 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2188 = $2172 + (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 >> 2] & (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 8 >> 2])) + (HEAP32[14160 + (12 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2190 = HEAP32[$4 + 40 >> 2] | 0;
  $2195 = _rotr_32($2190 ^ (_rotr_32(HEAP32[$4 + 40 >> 2] | 0, 2) | 0), 17) | 0;
  $2202 = ($2195 ^ (HEAP32[$4 + 40 >> 2] | 0) >>> 10) + (HEAP32[$4 + 20 >> 2] | 0) | 0;
  $2204 = HEAP32[$4 + 52 >> 2] | 0;
  $2209 = _rotr_32($2204 ^ (_rotr_32(HEAP32[$4 + 52 >> 2] | 0, 11) | 0), 7) | 0;
  $2215 = $4 + 48 | 0;
  $2217 = (HEAP32[$2215 >> 2] | 0) + ($2202 + ($2209 ^ (HEAP32[$4 + 52 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2215 >> 2] = $2217;
  $2219 = $5 + 12 | 0;
  HEAP32[$2219 >> 2] = (HEAP32[$2219 >> 2] | 0) + ($2188 + $2217);
  $2224 = $5 + 28 | 0;
  HEAP32[$2224 >> 2] = (HEAP32[$2224 >> 2] | 0) + (HEAP32[$5 + 12 >> 2] | 0);
  $2228 = HEAP32[$5 + 16 >> 2] | 0;
  $2230 = HEAP32[$5 + 16 >> 2] | 0;
  $2237 = _rotr_32($2228 ^ (_rotr_32($2230 ^ (_rotr_32(HEAP32[$5 + 16 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $2253 = $5 + 12 | 0;
  HEAP32[$2253 >> 2] = (HEAP32[$2253 >> 2] | 0) + ($2237 + ((HEAP32[$5 + 16 >> 2] & (HEAP32[$5 + 20 >> 2] ^ HEAP32[$5 + 24 >> 2])) + (HEAP32[$5 + 20 >> 2] & HEAP32[$5 + 24 >> 2])));
  $2257 = HEAP32[$5 + 28 >> 2] | 0;
  $2259 = HEAP32[$5 + 28 >> 2] | 0;
  $2266 = _rotr_32($2257 ^ (_rotr_32($2259 ^ (_rotr_32(HEAP32[$5 + 28 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2282 = $2266 + (HEAP32[$5 + 4 >> 2] ^ HEAP32[$5 + 28 >> 2] & (HEAP32[$5 >> 2] ^ HEAP32[$5 + 4 >> 2])) + (HEAP32[14160 + (13 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2284 = HEAP32[$4 + 44 >> 2] | 0;
  $2289 = _rotr_32($2284 ^ (_rotr_32(HEAP32[$4 + 44 >> 2] | 0, 2) | 0), 17) | 0;
  $2296 = ($2289 ^ (HEAP32[$4 + 44 >> 2] | 0) >>> 10) + (HEAP32[$4 + 24 >> 2] | 0) | 0;
  $2298 = HEAP32[$4 + 56 >> 2] | 0;
  $2303 = _rotr_32($2298 ^ (_rotr_32(HEAP32[$4 + 56 >> 2] | 0, 11) | 0), 7) | 0;
  $2309 = $4 + 52 | 0;
  $2311 = (HEAP32[$2309 >> 2] | 0) + ($2296 + ($2303 ^ (HEAP32[$4 + 56 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2309 >> 2] = $2311;
  $2313 = $5 + 8 | 0;
  HEAP32[$2313 >> 2] = (HEAP32[$2313 >> 2] | 0) + ($2282 + $2311);
  $2318 = $5 + 24 | 0;
  HEAP32[$2318 >> 2] = (HEAP32[$2318 >> 2] | 0) + (HEAP32[$5 + 8 >> 2] | 0);
  $2322 = HEAP32[$5 + 12 >> 2] | 0;
  $2324 = HEAP32[$5 + 12 >> 2] | 0;
  $2331 = _rotr_32($2322 ^ (_rotr_32($2324 ^ (_rotr_32(HEAP32[$5 + 12 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $2347 = $5 + 8 | 0;
  HEAP32[$2347 >> 2] = (HEAP32[$2347 >> 2] | 0) + ($2331 + ((HEAP32[$5 + 12 >> 2] & (HEAP32[$5 + 16 >> 2] ^ HEAP32[$5 + 20 >> 2])) + (HEAP32[$5 + 16 >> 2] & HEAP32[$5 + 20 >> 2])));
  $2351 = HEAP32[$5 + 24 >> 2] | 0;
  $2353 = HEAP32[$5 + 24 >> 2] | 0;
  $2360 = _rotr_32($2351 ^ (_rotr_32($2353 ^ (_rotr_32(HEAP32[$5 + 24 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2375 = $2360 + (HEAP32[$5 >> 2] ^ HEAP32[$5 + 24 >> 2] & (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 >> 2])) + (HEAP32[14160 + (14 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2377 = HEAP32[$4 + 48 >> 2] | 0;
  $2382 = _rotr_32($2377 ^ (_rotr_32(HEAP32[$4 + 48 >> 2] | 0, 2) | 0), 17) | 0;
  $2389 = ($2382 ^ (HEAP32[$4 + 48 >> 2] | 0) >>> 10) + (HEAP32[$4 + 28 >> 2] | 0) | 0;
  $2391 = HEAP32[$4 + 60 >> 2] | 0;
  $2396 = _rotr_32($2391 ^ (_rotr_32(HEAP32[$4 + 60 >> 2] | 0, 11) | 0), 7) | 0;
  $2402 = $4 + 56 | 0;
  $2404 = (HEAP32[$2402 >> 2] | 0) + ($2389 + ($2396 ^ (HEAP32[$4 + 60 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2402 >> 2] = $2404;
  $2406 = $5 + 4 | 0;
  HEAP32[$2406 >> 2] = (HEAP32[$2406 >> 2] | 0) + ($2375 + $2404);
  $2411 = $5 + 20 | 0;
  HEAP32[$2411 >> 2] = (HEAP32[$2411 >> 2] | 0) + (HEAP32[$5 + 4 >> 2] | 0);
  $2415 = HEAP32[$5 + 8 >> 2] | 0;
  $2417 = HEAP32[$5 + 8 >> 2] | 0;
  $2424 = _rotr_32($2415 ^ (_rotr_32($2417 ^ (_rotr_32(HEAP32[$5 + 8 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  $2440 = $5 + 4 | 0;
  HEAP32[$2440 >> 2] = (HEAP32[$2440 >> 2] | 0) + ($2424 + ((HEAP32[$5 + 8 >> 2] & (HEAP32[$5 + 12 >> 2] ^ HEAP32[$5 + 16 >> 2])) + (HEAP32[$5 + 12 >> 2] & HEAP32[$5 + 16 >> 2])));
  $2444 = HEAP32[$5 + 20 >> 2] | 0;
  $2446 = HEAP32[$5 + 20 >> 2] | 0;
  $2453 = _rotr_32($2444 ^ (_rotr_32($2446 ^ (_rotr_32(HEAP32[$5 + 20 >> 2] | 0, 14) | 0), 5) | 0), 6) | 0;
  $2470 = $2453 + (HEAP32[$5 + 28 >> 2] ^ HEAP32[$5 + 20 >> 2] & (HEAP32[$5 + 24 >> 2] ^ HEAP32[$5 + 28 >> 2])) + (HEAP32[14160 + (15 + (HEAP32[$6 >> 2] | 0) << 2) >> 2] | 0) | 0;
  $2472 = HEAP32[$4 + 52 >> 2] | 0;
  $2477 = _rotr_32($2472 ^ (_rotr_32(HEAP32[$4 + 52 >> 2] | 0, 2) | 0), 17) | 0;
  $2484 = ($2477 ^ (HEAP32[$4 + 52 >> 2] | 0) >>> 10) + (HEAP32[$4 + 32 >> 2] | 0) | 0;
  $2485 = HEAP32[$4 >> 2] | 0;
  $2489 = _rotr_32($2485 ^ (_rotr_32(HEAP32[$4 >> 2] | 0, 11) | 0), 7) | 0;
  $2494 = $4 + 60 | 0;
  $2496 = (HEAP32[$2494 >> 2] | 0) + ($2484 + ($2489 ^ (HEAP32[$4 >> 2] | 0) >>> 3)) | 0;
  HEAP32[$2494 >> 2] = $2496;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($2470 + $2496);
  $2501 = $5 + 16 | 0;
  HEAP32[$2501 >> 2] = (HEAP32[$2501 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
  $2505 = HEAP32[$5 + 4 >> 2] | 0;
  $2507 = HEAP32[$5 + 4 >> 2] | 0;
  $2514 = _rotr_32($2505 ^ (_rotr_32($2507 ^ (_rotr_32(HEAP32[$5 + 4 >> 2] | 0, 9) | 0), 11) | 0), 2) | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($2514 + ((HEAP32[$5 + 4 >> 2] & (HEAP32[$5 + 8 >> 2] ^ HEAP32[$5 + 12 >> 2])) + (HEAP32[$5 + 8 >> 2] & HEAP32[$5 + 12 >> 2])));
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 16;
 }
 $2535 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2535 >> 2] = (HEAP32[$2535 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 $2541 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 HEAP32[$2541 >> 2] = (HEAP32[$2541 >> 2] | 0) + (HEAP32[$5 + 4 >> 2] | 0);
 $2547 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAP32[$2547 >> 2] = (HEAP32[$2547 >> 2] | 0) + (HEAP32[$5 + 8 >> 2] | 0);
 $2553 = (HEAP32[$2 >> 2] | 0) + 12 | 0;
 HEAP32[$2553 >> 2] = (HEAP32[$2553 >> 2] | 0) + (HEAP32[$5 + 12 >> 2] | 0);
 $2559 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$2559 >> 2] = (HEAP32[$2559 >> 2] | 0) + (HEAP32[$5 + 16 >> 2] | 0);
 $2565 = (HEAP32[$2 >> 2] | 0) + 20 | 0;
 HEAP32[$2565 >> 2] = (HEAP32[$2565 >> 2] | 0) + (HEAP32[$5 + 20 >> 2] | 0);
 $2571 = (HEAP32[$2 >> 2] | 0) + 24 | 0;
 HEAP32[$2571 >> 2] = (HEAP32[$2571 >> 2] | 0) + (HEAP32[$5 + 24 >> 2] | 0);
 $2577 = (HEAP32[$2 >> 2] | 0) + 28 | 0;
 HEAP32[$2577 >> 2] = (HEAP32[$2577 >> 2] | 0) + (HEAP32[$5 + 28 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _main($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i$i = 0, $$017 = 0, $$017$i$i = 0, $$035 = 0, $$1 = 0, $$10 = 0, $$1027 = 0, $$11 = 0, $$1128 = 0, $$118 = 0, $$13 = 0, $$1330 = 0, $$136 = 0, $$14 = 0, $$1431 = 0, $$15 = 0, $$1532 = 0, $$16 = 0, $$1633 = 0, $$17 = 0, $$1734 = 0, $$2 = 0, $$219 = 0, $$3 = 0, $$320 = 0, $$4 = 0, $$421 = 0, $$7 = 0, $$724 = 0, $$8 = 0, $$825 = 0, $$9 = 0, $$926 = 0, $$pre$phi225Z2D = 0, $$pre224$pre$phiZZ2D = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $123 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $144 = 0, $146 = 0, $147 = 0, $153 = 0, $155 = 0, $157 = 0, $159 = 0, $161 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $170 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $184 = 0, $185 = 0, $187 = 0, $188 = 0, $19 = 0, $190 = 0, $192 = 0, $194 = 0, $195 = 0, $2 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $207 = 0, $209 = 0, $211 = 0, $212 = 0, $218 = 0, $219 = 0, $221 = 0, $229 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $265 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $277 = 0, $278 = 0, $28 = 0, $280 = 0, $281 = 0, $283 = 0, $285 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $300 = 0, $302 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $335 = 0, $336 = 0, $347 = 0, $348 = 0, $358 = 0, $360 = 0, $361 = 0, $372 = 0, $374 = 0, $375 = 0, $381 = 0, $383 = 0, $384 = 0, $391 = 0, $393 = 0, $394 = 0, $4 = 0, $40 = 0, $404 = 0, $406 = 0, $407 = 0, $41 = 0, $418 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $431 = 0, $432 = 0, $437 = 0, $438 = 0, $440 = 0, $441 = 0, $442 = 0, $444 = 0, $446 = 0, $448 = 0, $450 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $78 = 0, $79 = 0, $8 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $eh$lpad$body126$index8Z2D = 0, $eh$lpad$body126$indexZ2D = 0, $eh$lpad$body130$index13Z2D = 0, $eh$lpad$body130$indexZ2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer = sp + 24 | 0;
 $2 = sp + 96 | 0;
 $3 = sp;
 $4 = sp + 80 | 0;
 $5 = sp + 120 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 32 | 0;
 $11 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 $12 = _strlen($11) | 0;
 do if ($12 >>> 0 > 4294967279) {
  __THREW__ = 0;
  invoke_vi(185, $7 | 0);
  __THREW__ = 0;
  label = 42;
 } else {
  if ($12 >>> 0 < 11) {
   HEAP8[$7 + 11 >> 0] = $12;
   if (!$12) $$017$i$i = $7; else {
    $$016$i$i = $7;
    label = 7;
   }
  } else {
   $17 = $12 + 16 & -16;
   __THREW__ = 0;
   $18 = invoke_ii(79, $17 | 0) | 0;
   $19 = __THREW__;
   __THREW__ = 0;
   if ($19 & 1) {
    label = 42;
    break;
   }
   HEAP32[$7 >> 2] = $18;
   HEAP32[$7 + 8 >> 2] = $17 | -2147483648;
   HEAP32[$7 + 4 >> 2] = $12;
   $$016$i$i = $18;
   label = 7;
  }
  if ((label | 0) == 7) {
   _memcpy($$016$i$i | 0, $11 | 0, $12 | 0) | 0;
   $$017$i$i = $$016$i$i;
  }
  HEAP8[$$017$i$i + $12 >> 0] = 0;
  __THREW__ = 0;
  $28 = invoke_iiii(38, 61496, 48270, 33) | 0;
  $29 = __THREW__;
  __THREW__ = 0;
  do if ($29 & 1) label = 43; else {
   $31 = $7 + 11 | 0;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 << 24 >> 24 < 0;
   __THREW__ = 0;
   $40 = invoke_iiii(38, $28 | 0, ($33 ? HEAP32[$7 >> 2] | 0 : $7) | 0, ($33 ? HEAP32[$7 + 4 >> 2] | 0 : $32 & 255) | 0) | 0;
   $41 = __THREW__;
   __THREW__ = 0;
   if ($41 & 1) label = 43; else {
    __ZNKSt3__28ios_base6getlocEv($2, $40 + (HEAP32[(HEAP32[$40 >> 2] | 0) + -12 >> 2] | 0) | 0);
    __THREW__ = 0;
    $47 = invoke_iii(32, $2 | 0, 62368) | 0;
    $48 = __THREW__;
    __THREW__ = 0;
    if (!($48 & 1)) {
     __THREW__ = 0;
     $53 = invoke_iii(HEAP32[(HEAP32[$47 >> 2] | 0) + 28 >> 2] | 0, $47 | 0, 10) | 0;
     $54 = __THREW__;
     __THREW__ = 0;
     if (!($54 & 1)) {
      __ZNSt3__26localeD2Ev($2);
      __THREW__ = 0;
      invoke_iii(33, $40 | 0, $53 | 0) | 0;
      $58 = __THREW__;
      __THREW__ = 0;
      if ($58 & 1) {
       label = 43;
       break;
      }
      __THREW__ = 0;
      invoke_ii(80, $40 | 0) | 0;
      $60 = __THREW__;
      __THREW__ = 0;
      if ($60 & 1) {
       label = 43;
       break;
      }
      __THREW__ = 0;
      invoke_vii(40, $8 | 0, $7 | 0);
      $62 = __THREW__;
      __THREW__ = 0;
      if ($62 & 1) {
       $157 = ___cxa_find_matching_catch_3(42696) | 0;
       $$14 = $157;
       $$1431 = tempRet0;
      } else {
       __THREW__ = 0;
       $64 = invoke_iiii(38, 61496, 48304, 12) | 0;
       $65 = __THREW__;
       __THREW__ = 0;
       do if ($65 & 1) label = 46; else {
        __THREW__ = 0;
        $67 = invoke_ii(81, $8 | 0) | 0;
        $68 = tempRet0;
        $69 = __THREW__;
        __THREW__ = 0;
        if ($69 & 1) label = 46; else {
         __THREW__ = 0;
         $71 = invoke_iiii(39, $64 | 0, $67 | 0, $68 | 0) | 0;
         $72 = __THREW__;
         __THREW__ = 0;
         if ($72 & 1) label = 46; else {
          __ZNKSt3__28ios_base6getlocEv($2, $71 + (HEAP32[(HEAP32[$71 >> 2] | 0) + -12 >> 2] | 0) | 0);
          __THREW__ = 0;
          $78 = invoke_iii(32, $2 | 0, 62368) | 0;
          $79 = __THREW__;
          __THREW__ = 0;
          if (!($79 & 1)) {
           __THREW__ = 0;
           $84 = invoke_iii(HEAP32[(HEAP32[$78 >> 2] | 0) + 28 >> 2] | 0, $78 | 0, 10) | 0;
           $85 = __THREW__;
           __THREW__ = 0;
           if (!($85 & 1)) {
            __ZNSt3__26localeD2Ev($2);
            __THREW__ = 0;
            invoke_iii(33, $71 | 0, $84 | 0) | 0;
            $89 = __THREW__;
            __THREW__ = 0;
            if ($89 & 1) {
             label = 46;
             break;
            }
            __THREW__ = 0;
            invoke_ii(80, $71 | 0) | 0;
            $91 = __THREW__;
            __THREW__ = 0;
            if ($91 & 1) {
             label = 46;
             break;
            }
            __THREW__ = 0;
            invoke_vii(41, $2 | 0, $8 | 0);
            $93 = __THREW__;
            __THREW__ = 0;
            do if ($93 & 1) {
             $161 = ___cxa_find_matching_catch_3(42696) | 0;
             $$11 = $161;
             $$1128 = tempRet0;
            } else {
             $95 = $3 + 12 | 0;
             $96 = $2 + 4 | 0;
             $97 = $3 + 4 | 0;
             $98 = $2 + 8 | 0;
             $99 = $2 + 12 | 0;
             $100 = $2 + 16 | 0;
             $101 = $3 + 11 | 0;
             $102 = $3 + 4 | 0;
             $103 = $4 + 11 | 0;
             $104 = $4 + 4 | 0;
             $105 = $3 + 11 | 0;
             $106 = $6 + 11 | 0;
             $107 = $6 + 4 | 0;
             $108 = $3 + 20 | 0;
             $109 = $9 + 4 | 0;
             $$035 = 0;
             L34 : while (1) {
              __THREW__ = 0;
              invoke_vii(42, $3 | 0, $8 | 0);
              $110 = __THREW__;
              __THREW__ = 0;
              if ($110 & 1) {
               label = 49;
               break;
              }
              $112 = HEAP32[$2 >> 2] | 0;
              if (!$112) label = 30; else {
               $114 = HEAP32[$96 >> 2] | 0;
               __THREW__ = 0;
               $115 = invoke_ii(82, $112 | 0) | 0;
               $116 = __THREW__;
               __THREW__ = 0;
               if ($116 & 1) {
                label = 50;
                break;
               }
               if ($114 >>> 0 < $115 >>> 0) label = 33; else label = 30;
              }
              do if ((label | 0) == 30) {
               label = 0;
               $119 = HEAP32[$3 >> 2] | 0;
               if (!$119) {
                $134 = 0;
                break;
               }
               $121 = HEAP32[$97 >> 2] | 0;
               __THREW__ = 0;
               $122 = invoke_ii(82, $119 | 0) | 0;
               $123 = __THREW__;
               __THREW__ = 0;
               if ($123 & 1) {
                label = 50;
                break L34;
               }
               if ($121 >>> 0 < $122 >>> 0) label = 33; else $134 = 0;
              } while (0);
              do if ((label | 0) == 33) {
               label = 0;
               if ((HEAP32[$2 >> 2] | 0) != (HEAP32[$3 >> 2] | 0)) {
                $134 = 1;
                break;
               }
               $134 = (HEAP32[$96 >> 2] | 0) != (HEAP32[$97 >> 2] | 0);
              } while (0);
              $133 = ($$035 | 0) < 10 & $134;
              $135 = HEAP32[$95 >> 2] | 0;
              do if ($135 | 0) {
               $137 = $135 + 4 | 0;
               $138 = HEAP32[$137 >> 2] | 0;
               HEAP32[$137 >> 2] = $138 + -1;
               if ($138 | 0) break;
               FUNCTION_TABLE_vi[HEAP32[(HEAP32[$135 >> 2] | 0) + 8 >> 2] & 255]($135);
               __ZNSt3__219__shared_weak_count14__release_weakEv($135);
              } while (0);
              if (!$133) {
               label = 39;
               break;
              }
              __THREW__ = 0;
              invoke_ii(83, $2 | 0) | 0;
              $176 = __THREW__;
              __THREW__ = 0;
              if ($176 & 1) {
               label = 103;
               break;
              }
              __THREW__ = 0;
              $178 = invoke_ii(84, $98 | 0) | 0;
              $179 = __THREW__;
              __THREW__ = 0;
              if ($179 & 1) {
               label = 103;
               break;
              }
              do if ($178 << 24 >> 24 == 65) {
               __THREW__ = 0;
               invoke_ii(83, $2 | 0) | 0;
               $182 = __THREW__;
               __THREW__ = 0;
               if ($182 & 1) {
                label = 103;
                break L34;
               }
               __THREW__ = 0;
               $184 = invoke_ii(85, $98 | 0) | 0;
               $185 = __THREW__;
               __THREW__ = 0;
               if ($185 & 1) {
                label = 103;
                break L34;
               }
               if ($184) {
                $$136 = $$035;
                break;
               }
               __THREW__ = 0;
               $187 = invoke_iiii(38, 61496, 48317, 5) | 0;
               $188 = __THREW__;
               __THREW__ = 0;
               if ($188 & 1) {
                label = 103;
                break L34;
               }
               __THREW__ = 0;
               invoke_ii(83, $2 | 0) | 0;
               $190 = __THREW__;
               __THREW__ = 0;
               if ($190 & 1) {
                label = 104;
                break L34;
               }
               __THREW__ = 0;
               invoke_vii(43, $3 | 0, $98 | 0);
               $192 = __THREW__;
               __THREW__ = 0;
               if ($192 & 1) {
                label = 104;
                break L34;
               }
               $194 = HEAP8[$101 >> 0] | 0;
               $195 = $194 << 24 >> 24 < 0;
               __THREW__ = 0;
               $201 = invoke_iiii(38, $187 | 0, ($195 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($195 ? HEAP32[$102 >> 2] | 0 : $194 & 255) | 0) | 0;
               $202 = __THREW__;
               __THREW__ = 0;
               if ($202 & 1) {
                label = 105;
                break L34;
               }
               __THREW__ = 0;
               $204 = invoke_iiii(38, $201 | 0, 48323, 8) | 0;
               $205 = __THREW__;
               __THREW__ = 0;
               if ($205 & 1) {
                label = 105;
                break L34;
               }
               __THREW__ = 0;
               invoke_ii(83, $2 | 0) | 0;
               $207 = __THREW__;
               __THREW__ = 0;
               if ($207 & 1) {
                label = 106;
                break L34;
               }
               __THREW__ = 0;
               invoke_vii(44, $4 | 0, $98 | 0);
               $209 = __THREW__;
               __THREW__ = 0;
               if ($209 & 1) {
                label = 106;
                break L34;
               }
               $211 = HEAP8[$103 >> 0] | 0;
               $212 = $211 << 24 >> 24 < 0;
               __THREW__ = 0;
               $218 = invoke_iiii(38, $204 | 0, ($212 ? HEAP32[$4 >> 2] | 0 : $4) | 0, ($212 ? HEAP32[$104 >> 2] | 0 : $211 & 255) | 0) | 0;
               $219 = __THREW__;
               __THREW__ = 0;
               if ($219 & 1) {
                label = 107;
                break L34;
               }
               HEAP8[$6 >> 0] = 10;
               __THREW__ = 0;
               invoke_iiii(38, $218 | 0, $6 | 0, 1) | 0;
               $221 = __THREW__;
               __THREW__ = 0;
               if ($221 & 1) {
                label = 107;
                break L34;
               }
               if ((HEAP8[$103 >> 0] | 0) < 0) __ZdlPv(HEAP32[$4 >> 2] | 0);
               if ((HEAP8[$101 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
               __THREW__ = 0;
               invoke_ii(83, $2 | 0) | 0;
               $229 = __THREW__;
               __THREW__ = 0;
               if ($229 & 1) {
                label = 113;
                break L34;
               }
               __THREW__ = 0;
               invoke_vii(43, $6 | 0, $98 | 0);
               $231 = __THREW__;
               __THREW__ = 0;
               if ($231 & 1) {
                label = 113;
                break L34;
               }
               $233 = __ZNSt3__26chrono12steady_clock3nowEv() | 0;
               $234 = tempRet0;
               __THREW__ = 0;
               invoke_viii(6, $3 | 0, 48332, $6 | 0);
               $235 = __THREW__;
               __THREW__ = 0;
               if ($235 & 1) {
                label = 114;
                break L34;
               }
               __THREW__ = 0;
               invoke_viii(7, $9 | 0, $8 | 0, $3 | 0);
               $237 = __THREW__;
               __THREW__ = 0;
               if ($237 & 1) {
                label = 115;
                break L34;
               }
               if ((HEAP8[$105 >> 0] | 0) < 0) __ZdlPv(HEAP32[$3 >> 2] | 0);
               __THREW__ = 0;
               $242 = invoke_iiii(38, 61496, 48335, 8) | 0;
               $243 = __THREW__;
               __THREW__ = 0;
               if ($243 & 1) {
                label = 118;
                break L34;
               }
               $245 = HEAP8[$106 >> 0] | 0;
               $246 = $245 << 24 >> 24 < 0;
               __THREW__ = 0;
               $252 = invoke_iiii(38, $242 | 0, ($246 ? HEAP32[$6 >> 2] | 0 : $6) | 0, ($246 ? HEAP32[$107 >> 2] | 0 : $245 & 255) | 0) | 0;
               $253 = __THREW__;
               __THREW__ = 0;
               if ($253 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               $255 = invoke_iiii(38, $252 | 0, 48344, 8) | 0;
               $256 = __THREW__;
               __THREW__ = 0;
               if ($256 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               $258 = invoke_ii(86, $9 | 0) | 0;
               $259 = tempRet0;
               $260 = __THREW__;
               __THREW__ = 0;
               if ($260 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               $262 = invoke_iiii(39, $255 | 0, $258 | 0, $259 | 0) | 0;
               $263 = __THREW__;
               __THREW__ = 0;
               if ($263 & 1) {
                label = 118;
                break L34;
               }
               HEAP8[$5 >> 0] = 10;
               __THREW__ = 0;
               invoke_iiii(38, $262 | 0, $5 | 0, 1) | 0;
               $265 = __THREW__;
               __THREW__ = 0;
               if ($265 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               $267 = invoke_iiii(38, 61496, 48353, 21) | 0;
               $268 = __THREW__;
               __THREW__ = 0;
               if ($268 & 1) {
                label = 118;
                break L34;
               }
               $270 = HEAP8[$106 >> 0] | 0;
               $271 = $270 << 24 >> 24 < 0;
               __THREW__ = 0;
               $277 = invoke_iiii(38, $267 | 0, ($271 ? HEAP32[$6 >> 2] | 0 : $6) | 0, ($271 ? HEAP32[$107 >> 2] | 0 : $270 & 255) | 0) | 0;
               $278 = __THREW__;
               __THREW__ = 0;
               if ($278 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               $280 = invoke_iiii(38, $277 | 0, 48375, 3) | 0;
               $281 = __THREW__;
               __THREW__ = 0;
               if ($281 & 1) {
                label = 118;
                break L34;
               }
               HEAP8[$4 >> 0] = 10;
               __THREW__ = 0;
               invoke_iiii(38, $280 | 0, $4 | 0, 1) | 0;
               $283 = __THREW__;
               __THREW__ = 0;
               if ($283 & 1) {
                label = 118;
                break L34;
               }
               __THREW__ = 0;
               invoke_viiii(17, $3 | 0, $9 | 0, 0, 0);
               $285 = __THREW__;
               __THREW__ = 0;
               if ($285 & 1) {
                label = 119;
                break L34;
               }
               $287 = HEAP32[$3 >> 2] | 0;
               HEAP32[$vararg_buffer >> 2] = 30;
               HEAP32[$vararg_buffer + 4 >> 2] = $287;
               _printf(48379, $vararg_buffer) | 0;
               $288 = HEAP32[$108 >> 2] | 0;
               do if ($288 | 0) {
                $290 = $288 + 4 | 0;
                $291 = HEAP32[$290 >> 2] | 0;
                HEAP32[$290 >> 2] = $291 + -1;
                if ($291 | 0) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$288 >> 2] | 0) + 8 >> 2] & 255]($288);
                __ZNSt3__219__shared_weak_count14__release_weakEv($288);
               } while (0);
               $297 = __ZNSt3__26chrono12steady_clock3nowEv() | 0;
               $298 = tempRet0;
               __THREW__ = 0;
               $299 = invoke_iiii(38, 61496, 48385, 8) | 0;
               $300 = __THREW__;
               __THREW__ = 0;
               if ($300 & 1) {
                label = 120;
                break L34;
               }
               $302 = _i64Subtract($297 | 0, $298 | 0, $233 | 0, $234 | 0) | 0;
               $304 = ___divdi3($302 | 0, tempRet0 | 0, 1e6, 0) | 0;
               $305 = tempRet0;
               __THREW__ = 0;
               $306 = invoke_iiii(40, $299 | 0, $304 | 0, $305 | 0) | 0;
               $307 = __THREW__;
               __THREW__ = 0;
               if ($307 & 1) {
                label = 120;
                break L34;
               }
               __THREW__ = 0;
               $309 = invoke_iiii(38, $306 | 0, 48394, 14) | 0;
               $310 = __THREW__;
               __THREW__ = 0;
               if ($310 & 1) {
                label = 120;
                break L34;
               }
               HEAP8[$3 >> 0] = 10;
               __THREW__ = 0;
               invoke_iiii(38, $309 | 0, $3 | 0, 1) | 0;
               $312 = __THREW__;
               __THREW__ = 0;
               if ($312 & 1) {
                label = 120;
                break L34;
               }
               $314 = $$035 + 1 | 0;
               $315 = HEAP32[$109 >> 2] | 0;
               do if ($315 | 0) {
                $317 = $315 + 4 | 0;
                $318 = HEAP32[$317 >> 2] | 0;
                HEAP32[$317 >> 2] = $318 + -1;
                if ($318 | 0) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$315 >> 2] | 0) + 8 >> 2] & 255]($315);
                __ZNSt3__219__shared_weak_count14__release_weakEv($315);
               } while (0);
               if ((HEAP8[$106 >> 0] | 0) < 0) __ZdlPv(HEAP32[$6 >> 2] | 0);
               $$136 = $314;
              } else $$136 = $$035; while (0);
              HEAP32[$96 >> 2] = (HEAP32[$96 >> 2] | 0) + 1;
              HEAP32[$98 >> 2] = 0;
              $372 = HEAP32[$99 >> 2] | 0;
              HEAP32[$99 >> 2] = 0;
              do if ($372 | 0) {
               $374 = $372 + 4 | 0;
               $375 = HEAP32[$374 >> 2] | 0;
               HEAP32[$374 >> 2] = $375 + -1;
               if ($375 | 0) break;
               FUNCTION_TABLE_vi[HEAP32[(HEAP32[$372 >> 2] | 0) + 8 >> 2] & 255]($372);
               __ZNSt3__219__shared_weak_count14__release_weakEv($372);
              } while (0);
              HEAP32[$100 >> 2] = -1;
              $$035 = $$136;
             }
             switch (label | 0) {
             case 39:
              {
               $144 = HEAP32[$99 >> 2] | 0;
               do if ($144 | 0) {
                $146 = $144 + 4 | 0;
                $147 = HEAP32[$146 >> 2] | 0;
                HEAP32[$146 >> 2] = $147 + -1;
                if ($147 | 0) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$144 >> 2] | 0) + 8 >> 2] & 255]($144);
                __ZNSt3__219__shared_weak_count14__release_weakEv($144);
               } while (0);
               $391 = HEAP32[$8 + 4 >> 2] | 0;
               do if ($391 | 0) {
                $393 = $391 + 4 | 0;
                $394 = HEAP32[$393 >> 2] | 0;
                HEAP32[$393 >> 2] = $394 + -1;
                if ($394 | 0) break;
                FUNCTION_TABLE_vi[HEAP32[(HEAP32[$391 >> 2] | 0) + 8 >> 2] & 255]($391);
                __ZNSt3__219__shared_weak_count14__release_weakEv($391);
               } while (0);
               if ((HEAP8[$31 >> 0] | 0) < 0) __ZdlPv(HEAP32[$7 >> 2] | 0);
               STACKTOP = sp;
               return 0;
              }
             case 49:
              {
               $$0 = ___cxa_find_matching_catch_3(42696) | 0;
               $$017 = tempRet0;
               label = 53;
               break;
              }
             case 50:
              {
               $165 = ___cxa_find_matching_catch_3(42696) | 0;
               $166 = tempRet0;
               $167 = HEAP32[$95 >> 2] | 0;
               if (!$167) {
                $$0 = $165;
                $$017 = $166;
                label = 53;
                break;
               }
               $169 = $167 + 4 | 0;
               $170 = HEAP32[$169 >> 2] | 0;
               HEAP32[$169 >> 2] = $170 + -1;
               if ($170 | 0) {
                $$0 = $165;
                $$017 = $166;
                label = 53;
                break;
               }
               FUNCTION_TABLE_vi[HEAP32[(HEAP32[$167 >> 2] | 0) + 8 >> 2] & 255]($167);
               __ZNSt3__219__shared_weak_count14__release_weakEv($167);
               $$0 = $165;
               $$017 = $166;
               label = 53;
               break;
              }
             case 103:
              {
               $$10 = ___cxa_find_matching_catch_3(42696) | 0;
               $$1027 = tempRet0;
               break;
              }
             case 104:
              {
               $$3 = ___cxa_find_matching_catch_3(42696) | 0;
               $$320 = tempRet0;
               label = 112;
               break;
              }
             case 105:
              {
               $$2 = ___cxa_find_matching_catch_3(42696) | 0;
               $$219 = tempRet0;
               label = 110;
               break;
              }
             case 106:
              {
               $$1 = ___cxa_find_matching_catch_3(42696) | 0;
               $$118 = tempRet0;
               label = 109;
               break;
              }
             case 107:
              {
               $335 = ___cxa_find_matching_catch_3(42696) | 0;
               $336 = tempRet0;
               if ((HEAP8[$103 >> 0] | 0) >= 0) {
                $$1 = $335;
                $$118 = $336;
                label = 109;
                break;
               }
               __ZdlPv(HEAP32[$4 >> 2] | 0);
               $$1 = $335;
               $$118 = $336;
               label = 109;
               break;
              }
             case 113:
              {
               $$9 = ___cxa_find_matching_catch_3(42696) | 0;
               $$926 = tempRet0;
               label = 126;
               break;
              }
             case 114:
              {
               $$4 = ___cxa_find_matching_catch_3(42696) | 0;
               $$421 = tempRet0;
               label = 117;
               break;
              }
             case 115:
              {
               $347 = ___cxa_find_matching_catch_3(42696) | 0;
               $348 = tempRet0;
               if ((HEAP8[$105 >> 0] | 0) >= 0) {
                $$4 = $347;
                $$421 = $348;
                label = 117;
                break;
               }
               __ZdlPv(HEAP32[$3 >> 2] | 0);
               $$4 = $347;
               $$421 = $348;
               label = 117;
               break;
              }
             case 118:
              {
               $$7 = ___cxa_find_matching_catch_3(42696) | 0;
               $$724 = tempRet0;
               label = 121;
               break;
              }
             case 119:
              {
               $$7 = ___cxa_find_matching_catch_3(42696) | 0;
               $$724 = tempRet0;
               label = 121;
               break;
              }
             case 120:
              {
               $$7 = ___cxa_find_matching_catch_3(42696) | 0;
               $$724 = tempRet0;
               label = 121;
               break;
              }
             }
             do if ((label | 0) == 53) {
              $$10 = $$0;
              $$1027 = $$017;
             } else if ((label | 0) == 109) {
              $$2 = $$1;
              $$219 = $$118;
              label = 110;
             } else if ((label | 0) == 117) {
              $$8 = $$4;
              $$825 = $$421;
              label = 124;
             } else if ((label | 0) == 121) {
              $358 = HEAP32[$109 >> 2] | 0;
              if (!$358) {
               $$8 = $$7;
               $$825 = $$724;
               label = 124;
               break;
              }
              $360 = $358 + 4 | 0;
              $361 = HEAP32[$360 >> 2] | 0;
              HEAP32[$360 >> 2] = $361 + -1;
              if ($361 | 0) {
               $$8 = $$7;
               $$825 = $$724;
               label = 124;
               break;
              }
              FUNCTION_TABLE_vi[HEAP32[(HEAP32[$358 >> 2] | 0) + 8 >> 2] & 255]($358);
              __ZNSt3__219__shared_weak_count14__release_weakEv($358);
              $$8 = $$7;
              $$825 = $$724;
              label = 124;
             } while (0);
             do if ((label | 0) == 110) {
              if ((HEAP8[$101 >> 0] | 0) >= 0) {
               $$3 = $$2;
               $$320 = $$219;
               label = 112;
               break;
              }
              __ZdlPv(HEAP32[$3 >> 2] | 0);
              $$3 = $$2;
              $$320 = $$219;
              label = 112;
             } else if ((label | 0) == 124) {
              if ((HEAP8[$106 >> 0] | 0) >= 0) {
               $$9 = $$8;
               $$926 = $$825;
               label = 126;
               break;
              }
              __ZdlPv(HEAP32[$6 >> 2] | 0);
              $$9 = $$8;
              $$926 = $$825;
              label = 126;
             } while (0);
             if ((label | 0) == 112) {
              $$10 = $$3;
              $$1027 = $$320;
             } else if ((label | 0) == 126) {
              $$10 = $$9;
              $$1027 = $$926;
             }
             $381 = HEAP32[$99 >> 2] | 0;
             if (!$381) {
              $$11 = $$10;
              $$1128 = $$1027;
              break;
             }
             $383 = $381 + 4 | 0;
             $384 = HEAP32[$383 >> 2] | 0;
             HEAP32[$383 >> 2] = $384 + -1;
             if ($384 | 0) {
              $$11 = $$10;
              $$1128 = $$1027;
              break;
             }
             FUNCTION_TABLE_vi[HEAP32[(HEAP32[$381 >> 2] | 0) + 8 >> 2] & 255]($381);
             __ZNSt3__219__shared_weak_count14__release_weakEv($381);
             $$11 = $$10;
             $$1128 = $$1027;
            } while (0);
            $$13 = $$11;
            $$1330 = $$1128;
            break;
           }
          }
          $87 = ___cxa_find_matching_catch_3(42696) | 0;
          $88 = tempRet0;
          __ZNSt3__26localeD2Ev($2);
          $eh$lpad$body126$index8Z2D = $88;
          $eh$lpad$body126$indexZ2D = $87;
          label = 47;
         }
        }
       } while (0);
       if ((label | 0) == 46) {
        $159 = ___cxa_find_matching_catch_3(42696) | 0;
        $eh$lpad$body126$index8Z2D = tempRet0;
        $eh$lpad$body126$indexZ2D = $159;
        label = 47;
       }
       if ((label | 0) == 47) {
        $$13 = $eh$lpad$body126$indexZ2D;
        $$1330 = $eh$lpad$body126$index8Z2D;
       }
       $404 = HEAP32[$8 + 4 >> 2] | 0;
       if (!$404) {
        $$14 = $$13;
        $$1431 = $$1330;
       } else {
        $406 = $404 + 4 | 0;
        $407 = HEAP32[$406 >> 2] | 0;
        HEAP32[$406 >> 2] = $407 + -1;
        if (!$407) {
         FUNCTION_TABLE_vi[HEAP32[(HEAP32[$404 >> 2] | 0) + 8 >> 2] & 255]($404);
         __ZNSt3__219__shared_weak_count14__release_weakEv($404);
         $$14 = $$13;
         $$1431 = $$1330;
        } else {
         $$14 = $$13;
         $$1431 = $$1330;
        }
       }
      }
      $$15 = $$14;
      $$1532 = $$1431;
      $$pre$phi225Z2D = $31;
      break;
     }
    }
    $56 = ___cxa_find_matching_catch_3(42696) | 0;
    $57 = tempRet0;
    __ZNSt3__26localeD2Ev($2);
    $$pre224$pre$phiZZ2D = $31;
    $eh$lpad$body$index3Z2D = $57;
    $eh$lpad$body$indexZ2D = $56;
    label = 44;
   }
  } while (0);
  if ((label | 0) == 43) {
   $155 = ___cxa_find_matching_catch_3(42696) | 0;
   $$pre224$pre$phiZZ2D = $7 + 11 | 0;
   $eh$lpad$body$index3Z2D = tempRet0;
   $eh$lpad$body$indexZ2D = $155;
   label = 44;
  }
  if ((label | 0) == 44) {
   $$15 = $eh$lpad$body$indexZ2D;
   $$1532 = $eh$lpad$body$index3Z2D;
   $$pre$phi225Z2D = $$pre224$pre$phiZZ2D;
  }
  if ((HEAP8[$$pre$phi225Z2D >> 0] | 0) < 0) {
   __ZdlPv(HEAP32[$7 >> 2] | 0);
   $$16 = $$15;
   $$1633 = $$1532;
  } else {
   $$16 = $$15;
   $$1633 = $$1532;
  }
 } while (0);
 if ((label | 0) == 42) {
  $153 = ___cxa_find_matching_catch_3(42696) | 0;
  $$16 = $153;
  $$1633 = tempRet0;
 }
 if (($$1633 | 0) != (_llvm_eh_typeid_for(42696) | 0)) {
  $$17 = $$16;
  $$1734 = $$1633;
  ___resumeException($$17 | 0);
 }
 $418 = ___cxa_begin_catch($$16 | 0) | 0;
 $422 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$418 >> 2] | 0) + 8 >> 2] & 127]($418) | 0;
 $423 = _strlen($422) | 0;
 __THREW__ = 0;
 $424 = invoke_iiii(38, 61664, $422 | 0, $423 | 0) | 0;
 $425 = __THREW__;
 __THREW__ = 0;
 do if ($425 & 1) label = 156; else {
  __ZNKSt3__28ios_base6getlocEv($2, $424 + (HEAP32[(HEAP32[$424 >> 2] | 0) + -12 >> 2] | 0) | 0);
  __THREW__ = 0;
  $431 = invoke_iii(32, $2 | 0, 62368) | 0;
  $432 = __THREW__;
  __THREW__ = 0;
  if (!($432 & 1)) {
   __THREW__ = 0;
   $437 = invoke_iii(HEAP32[(HEAP32[$431 >> 2] | 0) + 28 >> 2] | 0, $431 | 0, 10) | 0;
   $438 = __THREW__;
   __THREW__ = 0;
   if (!($438 & 1)) {
    __ZNSt3__26localeD2Ev($2);
    __THREW__ = 0;
    invoke_iii(33, $424 | 0, $437 | 0) | 0;
    $442 = __THREW__;
    __THREW__ = 0;
    if ($442 & 1) {
     label = 156;
     break;
    }
    __THREW__ = 0;
    invoke_ii(80, $424 | 0) | 0;
    $444 = __THREW__;
    __THREW__ = 0;
    if ($444 & 1) {
     label = 156;
     break;
    }
    ___cxa_end_catch();
    STACKTOP = sp;
    return 0;
   }
  }
  $440 = ___cxa_find_matching_catch_2() | 0;
  $441 = tempRet0;
  __ZNSt3__26localeD2Ev($2);
  $eh$lpad$body130$index13Z2D = $441;
  $eh$lpad$body130$indexZ2D = $440;
 } while (0);
 if ((label | 0) == 156) {
  $446 = ___cxa_find_matching_catch_2() | 0;
  $eh$lpad$body130$index13Z2D = tempRet0;
  $eh$lpad$body130$indexZ2D = $446;
 }
 __THREW__ = 0;
 invoke_v(3);
 $448 = __THREW__;
 __THREW__ = 0;
 if ($448 & 1) {
  $450 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($450);
 }
 $$17 = $eh$lpad$body130$indexZ2D;
 $$1734 = $eh$lpad$body130$index13Z2D;
 ___resumeException($$17 | 0);
 return 0;
}

function __ZNK3zim10FileReader4readEPcNS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $119 = 0, $12 = 0, $124 = 0, $125 = 0, $129 = 0, $13 = 0, $134 = 0, $135 = 0, $14 = 0, $140 = 0, $146 = 0, $15 = 0, $152 = 0, $158 = 0, $16 = 0, $164 = 0, $17 = 0, $170 = 0, $172 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $198 = 0, $20 = 0, $204 = 0, $21 = 0, $210 = 0, $22 = 0, $220 = 0, $223 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $251 = 0, $252 = 0, $254 = 0, $258 = 0, $26 = 0, $263 = 0, $264 = 0, $268 = 0, $27 = 0, $273 = 0, $28 = 0, $280 = 0, $288 = 0, $29 = 0, $290 = 0, $294 = 0, $30 = 0, $300 = 0, $306 = 0, $308 = 0, $31 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $32 = 0, $322 = 0, $324 = 0, $329 = 0, $33 = 0, $338 = 0, $34 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $351 = 0, $356 = 0, $358 = 0, $36 = 0, $363 = 0, $365 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0, $383 = 0, $384 = 0, $39 = 0, $392 = 0, $393 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $412 = 0, $414 = 0, $415 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $422 = 0, $424 = 0, $425 = 0, $428 = 0, $43 = 0, $430 = 0, $434 = 0, $44 = 0, $440 = 0, $441 = 0, $443 = 0, $445 = 0, $446 = 0, $448 = 0, $449 = 0, $45 = 0, $451 = 0, $452 = 0, $455 = 0, $456 = 0, $458 = 0, $46 = 0, $460 = 0, $461 = 0, $463 = 0, $469 = 0, $47 = 0, $470 = 0, $472 = 0, $474 = 0, $475 = 0, $477 = 0, $48 = 0, $483 = 0, $484 = 0, $486 = 0, $488 = 0, $489 = 0, $49 = 0, $491 = 0, $497 = 0, $498 = 0, $5 = 0, $50 = 0, $500 = 0, $502 = 0, $503 = 0, $505 = 0, $51 = 0, $511 = 0, $512 = 0, $514 = 0, $516 = 0, $517 = 0, $52 = 0, $521 = 0, $522 = 0, $523 = 0, $525 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $534 = 0, $537 = 0, $539 = 0, $54 = 0, $542 = 0, $544 = 0, $546 = 0, $549 = 0, $55 = 0, $559 = 0, $56 = 0, $561 = 0, $57 = 0, $573 = 0, $58 = 0, $583 = 0, $59 = 0, $591 = 0, $596 = 0, $597 = 0, $6 = 0, $60 = 0, $601 = 0, $61 = 0, $611 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688 | 0;
 $$byval_copy7 = sp + 200 | 0;
 $$byval_copy6 = sp + 192 | 0;
 $4 = sp + 672 | 0;
 $5 = sp + 668 | 0;
 $6 = sp + 664 | 0;
 $7 = sp + 660 | 0;
 $8 = sp + 656 | 0;
 $9 = sp + 652 | 0;
 $10 = sp + 648 | 0;
 $11 = sp + 644 | 0;
 $12 = sp + 640 | 0;
 $13 = sp + 636 | 0;
 $14 = sp + 632 | 0;
 $15 = sp + 628 | 0;
 $16 = sp + 624 | 0;
 $17 = sp + 620 | 0;
 $18 = sp + 616 | 0;
 $19 = sp + 612 | 0;
 $20 = sp + 608 | 0;
 $21 = sp + 604 | 0;
 $22 = sp + 600 | 0;
 $23 = sp + 596 | 0;
 $24 = sp + 592 | 0;
 $25 = sp + 588 | 0;
 $26 = sp + 584 | 0;
 $27 = sp + 580 | 0;
 $28 = sp + 576 | 0;
 $29 = sp + 572 | 0;
 $30 = sp + 568 | 0;
 $31 = sp + 564 | 0;
 $32 = sp + 560 | 0;
 $33 = sp + 556 | 0;
 $34 = sp + 184 | 0;
 $35 = sp + 552 | 0;
 $36 = sp + 548 | 0;
 $37 = sp + 677 | 0;
 $38 = sp + 544 | 0;
 $39 = sp + 540 | 0;
 $40 = sp + 536 | 0;
 $41 = sp + 532 | 0;
 $42 = sp + 528 | 0;
 $43 = sp + 524 | 0;
 $44 = sp + 520 | 0;
 $45 = sp + 516 | 0;
 $46 = sp + 512 | 0;
 $47 = sp + 508 | 0;
 $48 = sp + 504 | 0;
 $49 = sp + 500 | 0;
 $50 = sp + 496 | 0;
 $51 = sp + 492 | 0;
 $52 = sp + 488 | 0;
 $53 = sp + 484 | 0;
 $54 = sp + 480 | 0;
 $55 = sp + 476 | 0;
 $56 = sp + 472 | 0;
 $57 = sp + 468 | 0;
 $58 = sp + 464 | 0;
 $59 = sp + 460 | 0;
 $60 = sp + 456 | 0;
 $61 = sp + 452 | 0;
 $62 = sp + 448 | 0;
 $63 = sp + 444 | 0;
 $64 = sp + 440 | 0;
 $65 = sp + 436 | 0;
 $66 = sp + 432 | 0;
 $67 = sp + 428 | 0;
 $68 = sp + 424 | 0;
 $69 = sp + 420 | 0;
 $70 = sp + 416 | 0;
 $71 = sp + 176 | 0;
 $72 = sp + 168 | 0;
 $73 = sp + 160 | 0;
 $74 = sp + 152 | 0;
 $75 = sp + 408 | 0;
 $76 = sp + 144 | 0;
 $77 = sp + 136 | 0;
 $78 = sp + 404 | 0;
 $79 = sp + 400 | 0;
 $80 = sp + 120 | 0;
 $81 = sp + 112 | 0;
 $82 = sp + 104 | 0;
 $83 = sp + 96 | 0;
 $84 = sp + 396 | 0;
 $85 = sp + 88 | 0;
 $86 = sp + 80 | 0;
 $87 = sp + 72 | 0;
 $88 = sp + 392 | 0;
 $89 = sp + 388 | 0;
 $90 = sp + 64 | 0;
 $91 = sp + 56 | 0;
 $92 = sp + 48 | 0;
 $93 = sp + 384 | 0;
 $94 = sp + 248 | 0;
 $95 = sp + 40 | 0;
 $96 = sp + 240 | 0;
 $97 = sp + 232 | 0;
 $98 = sp + 216 | 0;
 $99 = sp + 676 | 0;
 $100 = sp + 32 | 0;
 $101 = sp + 24 | 0;
 $102 = sp + 16 | 0;
 $103 = sp + 8 | 0;
 $104 = sp + 212 | 0;
 $105 = sp;
 $106 = sp + 208 | 0;
 HEAP32[$69 >> 2] = $0;
 HEAP32[$70 >> 2] = $1;
 $107 = HEAP32[$69 >> 2] | 0;
 $108 = $2;
 $113 = HEAP32[$108 + 4 >> 2] | 0;
 $114 = $71;
 HEAP32[$114 >> 2] = HEAP32[$108 >> 2];
 HEAP32[$114 + 4 >> 2] = $113;
 $119 = $107 + 24 | 0;
 $124 = HEAP32[$119 + 4 >> 2] | 0;
 $125 = $72;
 HEAP32[$125 >> 2] = HEAP32[$119 >> 2];
 HEAP32[$125 + 4 >> 2] = $124;
 $129 = $71;
 $134 = HEAP32[$129 + 4 >> 2] | 0;
 $135 = $72;
 $140 = HEAP32[$135 + 4 >> 2] | 0;
 if (!($134 >>> 0 < $140 >>> 0 | (($134 | 0) == ($140 | 0) ? (HEAP32[$129 >> 2] | 0) >>> 0 < (HEAP32[$135 >> 2] | 0) >>> 0 : 0))) {
  $146 = $71;
  $152 = $72;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49044, HEAP32[$146 >> 2] | 0, HEAP32[$146 + 4 >> 2] | 0, HEAP32[$152 >> 2] | 0, HEAP32[$152 + 4 >> 2] | 0, 48618, 92);
 }
 $158 = $2;
 $164 = $3;
 $170 = _i64Add(HEAP32[$158 >> 2] | 0, HEAP32[$158 + 4 >> 2] | 0, HEAP32[$164 >> 2] | 0, HEAP32[$164 + 4 >> 2] | 0) | 0;
 $172 = $73;
 HEAP32[$172 >> 2] = $170;
 HEAP32[$172 + 4 >> 2] = tempRet0;
 $177 = $107 + 24 | 0;
 $182 = HEAP32[$177 + 4 >> 2] | 0;
 $183 = $74;
 HEAP32[$183 >> 2] = HEAP32[$177 >> 2];
 HEAP32[$183 + 4 >> 2] = $182;
 $187 = $73;
 $192 = HEAP32[$187 + 4 >> 2] | 0;
 $193 = $74;
 $198 = HEAP32[$193 + 4 >> 2] | 0;
 if (!($192 >>> 0 < $198 >>> 0 | (($192 | 0) == ($198 | 0) ? (HEAP32[$187 >> 2] | 0) >>> 0 <= (HEAP32[$193 >> 2] | 0) >>> 0 : 0))) {
  $204 = $73;
  $210 = $74;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(48830, 51100, 49044, HEAP32[$204 >> 2] | 0, HEAP32[$204 + 4 >> 2] | 0, HEAP32[$210 >> 2] | 0, HEAP32[$210 + 4 >> 2] | 0, 48618, 93);
 }
 if (!(__ZNK12REAL_TYPEDEFIyEcvbEv($3) | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZpLIN3zim8offset_tEERT_S3_RKS2_($2, $107 + 16 | 0) | 0;
 HEAP32[$68 >> 2] = $107 + 4;
 $220 = HEAP32[HEAP32[$68 >> 2] >> 2] | 0;
 HEAP32[$76 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$76 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$77 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$77 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$76 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$76 + 4 >> 2];
 HEAP32[$$byval_copy7 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$77 + 4 >> 2];
 __ZNK3zim12FileCompound6locateENS_8offset_tENS_7zsize_tE($75, $220, $$byval_copy6, $$byval_copy7);
 HEAP32[$78 >> 2] = HEAP32[$75 >> 2];
 while (1) {
  HEAP32[$66 >> 2] = $78;
  HEAP32[$67 >> 2] = $75 + 4;
  $223 = HEAP32[$67 >> 2] | 0;
  HEAP32[$64 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$65 >> 2] = $223;
  $225 = HEAP32[$65 >> 2] | 0;
  HEAP32[$62 >> 2] = HEAP32[$64 >> 2];
  HEAP32[$63 >> 2] = $225;
  if (!((HEAP32[HEAP32[$62 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$63 >> 2] >> 2] | 0) ^ 1)) {
   label = 63;
   break;
  }
  HEAP32[$61 >> 2] = $78;
  HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
  HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
  HEAP32[$58 >> 2] = (HEAP32[HEAP32[$59 >> 2] >> 2] | 0) + 16;
  HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
  HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
  HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
  HEAP32[$79 >> 2] = HEAP32[(HEAP32[$55 >> 2] | 0) + 16 >> 2];
  HEAP32[$44 >> 2] = $78;
  HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
  HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
  HEAP32[$41 >> 2] = (HEAP32[HEAP32[$42 >> 2] >> 2] | 0) + 16;
  HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
  $251 = HEAP32[$38 >> 2] | 0;
  HEAP32[$80 >> 2] = HEAP32[$251 >> 2];
  HEAP32[$80 + 4 >> 2] = HEAP32[$251 + 4 >> 2];
  HEAP32[$80 + 8 >> 2] = HEAP32[$251 + 8 >> 2];
  HEAP32[$80 + 12 >> 2] = HEAP32[$251 + 12 >> 2];
  HEAP32[$82 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$82 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$82 >> 2];
  HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
  $252 = __ZmiIN3zim8offset_tEET_S2_RKS2_($$byval_copy7, $80) | 0;
  $254 = $81;
  HEAP32[$254 >> 2] = $252;
  HEAP32[$254 + 4 >> 2] = tempRet0;
  $258 = $3;
  $263 = HEAP32[$258 + 4 >> 2] | 0;
  $264 = $83;
  HEAP32[$264 >> 2] = HEAP32[$258 >> 2];
  HEAP32[$264 + 4 >> 2] = $263;
  HEAP32[$84 >> 2] = 0;
  $268 = $83;
  $273 = HEAP32[$268 + 4 >> 2] | 0;
  if (!($273 >>> 0 > 0 | (($273 | 0) == 0 ? (HEAP32[$268 >> 2] | 0) >>> 0 > (HEAP32[$84 >> 2] | 0) >>> 0 : 0))) {
   $280 = $83;
   __Z15_on_assert_failIyjEvPKcS1_S1_T_T0_S1_i(49364, 49371, 49373, HEAP32[$280 >> 2] | 0, HEAP32[$280 + 4 >> 2] | 0, HEAP32[$84 >> 2] | 0, 48618, 103);
  }
  $288 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$79 >> 2] | 0) | 0;
  $290 = $87;
  HEAP32[$290 >> 2] = $288;
  HEAP32[$290 + 4 >> 2] = tempRet0;
  $294 = $87;
  $300 = $81;
  $306 = _i64Subtract(HEAP32[$294 >> 2] | 0, HEAP32[$294 + 4 >> 2] | 0, HEAP32[$300 >> 2] | 0, HEAP32[$300 + 4 >> 2] | 0) | 0;
  $308 = $86;
  HEAP32[$308 >> 2] = $306;
  HEAP32[$308 + 4 >> 2] = tempRet0;
  HEAP32[$35 >> 2] = $3;
  HEAP32[$36 >> 2] = $86;
  $312 = HEAP32[$35 >> 2] | 0;
  $313 = HEAP32[$36 >> 2] | 0;
  HEAP8[$34 >> 0] = HEAP8[$37 >> 0] | 0;
  HEAP32[$32 >> 2] = $312;
  HEAP32[$33 >> 2] = $313;
  $314 = HEAP32[$33 >> 2] | 0;
  $315 = HEAP32[$32 >> 2] | 0;
  HEAP32[$29 >> 2] = $34;
  HEAP32[$30 >> 2] = $314;
  HEAP32[$31 >> 2] = $315;
  $317 = HEAP32[$30 >> 2] | 0;
  $322 = HEAP32[$317 + 4 >> 2] | 0;
  $324 = HEAP32[$31 >> 2] | 0;
  $329 = HEAP32[$324 + 4 >> 2] | 0;
  $338 = $322 >>> 0 < $329 >>> 0 | (($322 | 0) == ($329 | 0) ? (HEAP32[$317 >> 2] | 0) >>> 0 < (HEAP32[$324 >> 2] | 0) >>> 0 : 0) ? HEAP32[$33 >> 2] | 0 : HEAP32[$32 >> 2] | 0;
  __ZN3zim7zsize_tC2Ey($85, HEAP32[$338 >> 2] | 0, HEAP32[$338 + 4 >> 2] | 0);
  $345 = __ZNK3zim8FilePartINS_4unix2FSEE7fhandleEv(HEAP32[$79 >> 2] | 0) | 0;
  $346 = HEAP32[$70 >> 2] | 0;
  HEAP32[$90 >> 2] = HEAP32[$85 >> 2];
  HEAP32[$90 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
  HEAP32[$91 >> 2] = HEAP32[$81 >> 2];
  HEAP32[$91 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
  __THREW__ = 0;
  HEAP32[$$byval_copy6 >> 2] = HEAP32[$90 >> 2];
  HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$90 + 4 >> 2];
  HEAP32[$$byval_copy7 >> 2] = HEAP32[$91 >> 2];
  HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$91 + 4 >> 2];
  $347 = invoke_iiiii(10, $345 | 0, $346 | 0, $$byval_copy6 | 0, $$byval_copy7 | 0) | 0;
  $348 = tempRet0;
  $349 = __THREW__;
  __THREW__ = 0;
  if ($349 & 1) break;
  $351 = $92;
  HEAP32[$351 >> 2] = $347;
  HEAP32[$351 + 4 >> 2] = $348;
  HEAP32[$100 >> 2] = HEAP32[$85 >> 2];
  HEAP32[$100 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
  HEAP32[$101 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$101 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  if (!(__ZleIN3zim7zsize_tEEbRKT_S4_($100, $101) | 0)) {
   HEAP32[$102 >> 2] = HEAP32[$100 >> 2];
   HEAP32[$102 + 4 >> 2] = HEAP32[$100 + 4 >> 2];
   HEAP32[$103 >> 2] = HEAP32[$101 >> 2];
   HEAP32[$103 + 4 >> 2] = HEAP32[$101 + 4 >> 2];
   HEAP32[$$byval_copy6 >> 2] = HEAP32[$102 >> 2];
   HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$102 + 4 >> 2];
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$103 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$103 + 4 >> 2];
   __Z15_on_assert_failIN3zim7zsize_tES1_EvPKcS3_S3_T_T0_S3_i(49433, 51100, 48607, $$byval_copy6, $$byval_copy7, 48618, 121);
  }
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + (HEAP32[$85 >> 2] | 0);
  __ZmIIN3zim7zsize_tEERT_S3_RKS2_($3, $85) | 0;
  __ZN3zimpLERNS_8offset_tERKNS_7zsize_tE($2, $85) | 0;
  HEAP32[$53 >> 2] = $78;
  HEAP32[$54 >> 2] = 0;
  $559 = HEAP32[$53 >> 2] | 0;
  HEAP32[$52 >> 2] = HEAP32[$559 >> 2];
  HEAP32[$51 >> 2] = $559;
  HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
  $561 = HEAP32[$50 >> 2] | 0;
  HEAP32[$49 >> 2] = HEAP32[$561 >> 2];
  if (HEAP32[(HEAP32[$49 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$47 >> 2] = HEAP32[(HEAP32[$49 >> 2] | 0) + 4 >> 2];
   while (1) {
    $573 = HEAP32[$47 >> 2] | 0;
    if (!(HEAP32[HEAP32[$47 >> 2] >> 2] | 0)) break;
    HEAP32[$47 >> 2] = HEAP32[$573 >> 2];
   }
   HEAP32[$48 >> 2] = $573;
  } else {
   while (1) {
    HEAP32[$46 >> 2] = HEAP32[$49 >> 2];
    $583 = HEAP32[$49 >> 2] | 0;
    if (!((HEAP32[$46 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$46 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$45 >> 2] = $583;
    HEAP32[$49 >> 2] = HEAP32[(HEAP32[$45 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$48 >> 2] = HEAP32[$583 + 8 >> 2];
  }
  HEAP32[$561 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$104 >> 2] = HEAP32[$52 >> 2];
 }
 if ((label | 0) == 63) {
  $591 = $3;
  $596 = HEAP32[$591 + 4 >> 2] | 0;
  $597 = $105;
  HEAP32[$597 >> 2] = HEAP32[$591 >> 2];
  HEAP32[$597 + 4 >> 2] = $596;
  HEAP32[$106 >> 2] = 0;
  $601 = $105;
  if ((HEAP32[$601 + 4 >> 2] | 0) == 0 ? (HEAP32[$601 >> 2] | 0) == (HEAP32[$106 >> 2] | 0) : 0) {
   STACKTOP = sp;
   return;
  }
  $611 = $105;
  __Z15_on_assert_failIyjEvPKcS1_S1_T_T0_S1_i(49364, 50958, 49373, HEAP32[$611 >> 2] | 0, HEAP32[$611 + 4 >> 2] | 0, HEAP32[$106 >> 2] | 0, 48618, 126);
  STACKTOP = sp;
  return;
 }
 $356 = ___cxa_find_matching_catch_3(42792) | 0;
 HEAP32[$88 >> 2] = $356;
 HEAP32[$89 >> 2] = tempRet0;
 $358 = HEAP32[$89 >> 2] | 0;
 if (($358 | 0) != (_llvm_eh_typeid_for(42792) | 0)) {
  $618 = HEAP32[$88 >> 2] | 0;
  $619 = HEAP32[$89 >> 2] | 0;
  ___resumeException($618 | 0);
 }
 HEAP32[$93 >> 2] = ___cxa_begin_catch(HEAP32[$88 >> 2] | 0) | 0;
 HEAP32[$27 >> 2] = $94;
 HEAP32[$28 >> 2] = 16;
 $363 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = $363 + 56;
 $365 = HEAP32[$26 >> 2] | 0;
 HEAP32[$25 >> 2] = $365;
 HEAP32[HEAP32[$25 >> 2] >> 2] = 44548;
 HEAP32[$365 >> 2] = 44532;
 HEAP32[$363 >> 2] = 43256;
 HEAP32[$363 + 56 >> 2] = 43276;
 HEAP32[$10 >> 2] = $363;
 HEAP32[$11 >> 2] = 43288;
 HEAP32[$12 >> 2] = $363 + 4;
 $370 = HEAP32[$10 >> 2] | 0;
 $371 = HEAP32[$11 >> 2] | 0;
 HEAP32[$370 >> 2] = HEAP32[$371 >> 2];
 HEAP32[$370 + (HEAP32[(HEAP32[$370 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$371 + 4 >> 2];
 $383 = HEAP32[$12 >> 2] | 0;
 HEAP32[$8 >> 2] = $370 + (HEAP32[(HEAP32[$370 >> 2] | 0) + -12 >> 2] | 0);
 HEAP32[$9 >> 2] = $383;
 $384 = HEAP32[$8 >> 2] | 0;
 __ZNSt3__28ios_base4initEPv($384, HEAP32[$9 >> 2] | 0);
 HEAP32[$384 + 72 >> 2] = 0;
 HEAP32[$384 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$363 >> 2] = 43256;
 HEAP32[$363 + 56 >> 2] = 43276;
 $392 = HEAP32[$28 >> 2] | 16;
 HEAP32[$23 >> 2] = $363 + 4;
 HEAP32[$24 >> 2] = $392;
 $393 = HEAP32[$23 >> 2] | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($393);
 HEAP32[$393 >> 2] = 43308;
 HEAP32[$22 >> 2] = $393 + 32;
 $395 = HEAP32[$22 >> 2] | 0;
 HEAP32[$21 >> 2] = $395;
 $396 = HEAP32[$21 >> 2] | 0;
 HEAP32[$20 >> 2] = $396;
 $397 = HEAP32[$20 >> 2] | 0;
 HEAP32[$397 >> 2] = 0;
 HEAP32[$397 + 4 >> 2] = 0;
 HEAP32[$397 + 8 >> 2] = 0;
 HEAP32[$19 >> 2] = $396;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$15 >> 2] = $395;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$16 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$17 >> 2] = 0;
 while (1) {
  if ((HEAP32[$17 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$16 >> 2] | 0) + (HEAP32[$17 >> 2] << 2) >> 2] = 0;
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
 }
 HEAP32[$393 + 44 >> 2] = 0;
 HEAP32[$393 + 48 >> 2] = HEAP32[$24 >> 2];
 __THREW__ = 0;
 invoke_iii(35, $94 | 0, 49376) | 0;
 $412 = __THREW__;
 __THREW__ = 0;
 do if ($412 & 1) label = 46; else {
  __THREW__ = 0;
  $414 = invoke_iii(35, $94 | 0, 49107) | 0;
  $415 = __THREW__;
  __THREW__ = 0;
  if ($415 & 1) label = 46; else {
   $418 = __ZNK3zim8FilePartINS_4unix2FSEE8filenameEv(HEAP32[$79 >> 2] | 0) | 0;
   __THREW__ = 0;
   $419 = invoke_iii(36, $414 | 0, $418 | 0) | 0;
   $420 = __THREW__;
   __THREW__ = 0;
   if ($420 & 1) label = 46; else {
    __THREW__ = 0;
    invoke_iii(35, $419 | 0, 49124) | 0;
    $422 = __THREW__;
    __THREW__ = 0;
    if ($422 & 1) label = 46; else {
     __THREW__ = 0;
     $424 = invoke_iii(35, $94 | 0, 49126) | 0;
     $425 = __THREW__;
     __THREW__ = 0;
     if ($425 & 1) label = 46; else {
      $428 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$79 >> 2] | 0) | 0;
      $430 = $95;
      HEAP32[$430 >> 2] = $428;
      HEAP32[$430 + 4 >> 2] = tempRet0;
      $434 = $95;
      __THREW__ = 0;
      $440 = invoke_iiii(39, $424 | 0, HEAP32[$434 >> 2] | 0, HEAP32[$434 + 4 >> 2] | 0) | 0;
      $441 = __THREW__;
      __THREW__ = 0;
      if ($441 & 1) label = 46; else {
       __THREW__ = 0;
       invoke_iii(35, $440 | 0, 49124) | 0;
       $443 = __THREW__;
       __THREW__ = 0;
       if ($443 & 1) label = 46; else {
        __THREW__ = 0;
        $445 = invoke_iii(35, $94 | 0, 49148) | 0;
        $446 = __THREW__;
        __THREW__ = 0;
        if ($446 & 1) label = 46; else {
         __THREW__ = 0;
         $448 = invoke_iii(37, $445 | 0, $80 | 0) | 0;
         $449 = __THREW__;
         __THREW__ = 0;
         if ($449 & 1) label = 46; else {
          __THREW__ = 0;
          $451 = invoke_iii(35, $448 | 0, 49171) | 0;
          $452 = __THREW__;
          __THREW__ = 0;
          if ($452 & 1) label = 46; else {
           __THREW__ = 0;
           $455 = invoke_iii(37, $451 | 0, $80 + 8 | 0) | 0;
           $456 = __THREW__;
           __THREW__ = 0;
           if ($456 & 1) label = 46; else {
            __THREW__ = 0;
            invoke_iii(35, $455 | 0, 49124) | 0;
            $458 = __THREW__;
            __THREW__ = 0;
            if ($458 & 1) label = 46; else {
             __THREW__ = 0;
             $460 = invoke_iii(35, $94 | 0, 49396) | 0;
             $461 = __THREW__;
             __THREW__ = 0;
             if ($461 & 1) label = 46; else {
              $463 = $85;
              __THREW__ = 0;
              $469 = invoke_iiii(39, $460 | 0, HEAP32[$463 >> 2] | 0, HEAP32[$463 + 4 >> 2] | 0) | 0;
              $470 = __THREW__;
              __THREW__ = 0;
              if ($470 & 1) label = 46; else {
               __THREW__ = 0;
               invoke_iii(35, $469 | 0, 49124) | 0;
               $472 = __THREW__;
               __THREW__ = 0;
               if ($472 & 1) label = 46; else {
                __THREW__ = 0;
                $474 = invoke_iii(35, $94 | 0, 49415) | 0;
                $475 = __THREW__;
                __THREW__ = 0;
                if ($475 & 1) {
                 label = 46;
                 break;
                }
                $477 = $3;
                __THREW__ = 0;
                $483 = invoke_iiii(39, $474 | 0, HEAP32[$477 >> 2] | 0, HEAP32[$477 + 4 >> 2] | 0) | 0;
                $484 = __THREW__;
                __THREW__ = 0;
                if ($484 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $483 | 0, 49124) | 0;
                $486 = __THREW__;
                __THREW__ = 0;
                if ($486 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                $488 = invoke_iii(35, $94 | 0, 49173) | 0;
                $489 = __THREW__;
                __THREW__ = 0;
                if ($489 & 1) {
                 label = 46;
                 break;
                }
                $491 = $2;
                __THREW__ = 0;
                $497 = invoke_iiii(39, $488 | 0, HEAP32[$491 >> 2] | 0, HEAP32[$491 + 4 >> 2] | 0) | 0;
                $498 = __THREW__;
                __THREW__ = 0;
                if ($498 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $497 | 0, 49124) | 0;
                $500 = __THREW__;
                __THREW__ = 0;
                if ($500 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                $502 = invoke_iii(35, $94 | 0, 49195) | 0;
                $503 = __THREW__;
                __THREW__ = 0;
                if ($503 & 1) {
                 label = 46;
                 break;
                }
                $505 = $81;
                __THREW__ = 0;
                $511 = invoke_iiii(39, $502 | 0, HEAP32[$505 >> 2] | 0, HEAP32[$505 + 4 >> 2] | 0) | 0;
                $512 = __THREW__;
                __THREW__ = 0;
                if ($512 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $511 | 0, 49124) | 0;
                $514 = __THREW__;
                __THREW__ = 0;
                if ($514 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                $516 = invoke_iii(35, $94 | 0, 49215) | 0;
                $517 = __THREW__;
                __THREW__ = 0;
                if ($517 & 1) {
                 label = 46;
                 break;
                }
                $521 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
                __THREW__ = 0;
                $522 = invoke_iii(35, $516 | 0, $521 | 0) | 0;
                $523 = __THREW__;
                __THREW__ = 0;
                if ($523 & 1) {
                 label = 46;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $522 | 0, 49124) | 0;
                $525 = __THREW__;
                __THREW__ = 0;
                if ($525 & 1) {
                 label = 46;
                 break;
                }
                $528 = HEAP32[(___errno_location() | 0) >> 2] | 0;
                $529 = __ZNSt3__216generic_categoryEv() | 0;
                HEAP32[$5 >> 2] = $96;
                HEAP32[$6 >> 2] = $528;
                HEAP32[$7 >> 2] = $529;
                $530 = HEAP32[$5 >> 2] | 0;
                HEAP32[$530 >> 2] = HEAP32[$6 >> 2];
                HEAP32[$530 + 4 >> 2] = HEAP32[$7 >> 2];
                $534 = ___cxa_allocate_exception(16) | 0;
                HEAP8[$99 >> 0] = 1;
                HEAP32[$97 >> 2] = HEAP32[$96 >> 2];
                HEAP32[$97 + 4 >> 2] = HEAP32[$96 + 4 >> 2];
                HEAP32[$4 >> 2] = $94;
                __THREW__ = 0;
                invoke_vii(48, $98 | 0, (HEAP32[$4 >> 2] | 0) + 4 | 0);
                $537 = __THREW__;
                __THREW__ = 0;
                if ($537 & 1) {
                 $544 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$88 >> 2] = $544;
                 HEAP32[$89 >> 2] = tempRet0;
                } else {
                 __THREW__ = 0;
                 HEAP32[$$byval_copy7 >> 2] = HEAP32[$97 >> 2];
                 HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$97 + 4 >> 2];
                 invoke_viii(10, $534 | 0, $$byval_copy7 | 0, $98 | 0);
                 $539 = __THREW__;
                 __THREW__ = 0;
                 if (!($539 & 1)) {
                  HEAP8[$99 >> 0] = 0;
                  __THREW__ = 0;
                  invoke_viii(11, $534 | 0, 42680, 165);
                  __THREW__ = 0;
                 }
                 $546 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$88 >> 2] = $546;
                 HEAP32[$89 >> 2] = tempRet0;
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($98);
                }
                if (!(HEAP8[$99 >> 0] & 1)) break;
                ___cxa_free_exception($534 | 0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 46) {
  $542 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$88 >> 2] = $542;
  HEAP32[$89 >> 2] = tempRet0;
 }
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($94);
 __THREW__ = 0;
 invoke_v(3);
 $549 = __THREW__;
 __THREW__ = 0;
 if ($549 & 1) {
  $620 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($620);
 } else {
  $618 = HEAP32[$88 >> 2] | 0;
  $619 = HEAP32[$89 >> 2] | 0;
  ___resumeException($618 | 0);
 }
}

function __ZNSt3__210shared_ptrIN3zim9SubBufferEE11make_sharedIJNS0_IKNS1_6BufferEEERNS1_8offset_tERNS1_7zsize_tEEEES3_DpOT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $256 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $262 = 0, $264 = 0, $27 = 0, $271 = 0, $272 = 0, $276 = 0, $278 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $288 = 0, $289 = 0, $29 = 0, $291 = 0, $295 = 0, $297 = 0, $299 = 0, $30 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $32 = 0, $323 = 0, $325 = 0, $327 = 0, $329 = 0, $33 = 0, $331 = 0, $333 = 0, $334 = 0, $336 = 0, $338 = 0, $34 = 0, $340 = 0, $341 = 0, $343 = 0, $344 = 0, $349 = 0, $35 = 0, $350 = 0, $355 = 0, $356 = 0, $359 = 0, $36 = 0, $364 = 0, $365 = 0, $369 = 0, $37 = 0, $370 = 0, $38 = 0, $384 = 0, $389 = 0, $39 = 0, $390 = 0, $392 = 0, $395 = 0, $397 = 0, $399 = 0, $4 = 0, $40 = 0, $403 = 0, $408 = 0, $41 = 0, $418 = 0, $42 = 0, $426 = 0, $43 = 0, $430 = 0, $431 = 0, $435 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $46 = 0, $464 = 0, $465 = 0, $466 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $48 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $491 = 0, $492 = 0, $5 = 0, $50 = 0, $505 = 0, $51 = 0, $52 = 0, $520 = 0, $521 = 0, $523 = 0, $525 = 0, $527 = 0, $528 = 0, $53 = 0, $532 = 0, $536 = 0, $54 = 0, $544 = 0, $545 = 0, $547 = 0, $549 = 0, $55 = 0, $551 = 0, $552 = 0, $555 = 0, $556 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120 | 0;
 $$byval_copy1 = sp + 184 | 0;
 $$byval_copy = sp + 176 | 0;
 $4 = sp + 1096 | 0;
 $5 = sp + 1092 | 0;
 $6 = sp + 1088 | 0;
 $7 = sp + 1084 | 0;
 $8 = sp + 1080 | 0;
 $9 = sp + 1076 | 0;
 $10 = sp + 1072 | 0;
 $11 = sp + 1068 | 0;
 $12 = sp + 1064 | 0;
 $13 = sp + 1060 | 0;
 $14 = sp + 1056 | 0;
 $15 = sp + 1052 | 0;
 $16 = sp + 1048 | 0;
 $17 = sp + 1044 | 0;
 $18 = sp + 1040 | 0;
 $19 = sp + 1036 | 0;
 $20 = sp + 1032 | 0;
 $21 = sp + 1028 | 0;
 $22 = sp + 1024 | 0;
 $23 = sp + 1020 | 0;
 $24 = sp + 1016 | 0;
 $25 = sp + 1012 | 0;
 $26 = sp + 1008 | 0;
 $27 = sp + 1004 | 0;
 $28 = sp + 1e3 | 0;
 $29 = sp + 996 | 0;
 $30 = sp + 992 | 0;
 $31 = sp + 988 | 0;
 $32 = sp + 984 | 0;
 $33 = sp + 980 | 0;
 $34 = sp + 976 | 0;
 $35 = sp + 972 | 0;
 $36 = sp + 968 | 0;
 $37 = sp + 964 | 0;
 $38 = sp + 168 | 0;
 $39 = sp + 160 | 0;
 $40 = sp + 152 | 0;
 $41 = sp + 144 | 0;
 $42 = sp + 960 | 0;
 $43 = sp + 956 | 0;
 $44 = sp + 952 | 0;
 $45 = sp + 948 | 0;
 $46 = sp + 944 | 0;
 $47 = sp + 1115 | 0;
 $48 = sp + 1114 | 0;
 $49 = sp + 1113 | 0;
 $50 = sp + 1112 | 0;
 $51 = sp + 940 | 0;
 $52 = sp + 936 | 0;
 $53 = sp + 932 | 0;
 $54 = sp + 928 | 0;
 $55 = sp + 924 | 0;
 $56 = sp + 920 | 0;
 $57 = sp + 916 | 0;
 $58 = sp + 912 | 0;
 $59 = sp + 908 | 0;
 $60 = sp + 904 | 0;
 $61 = sp + 900 | 0;
 $62 = sp + 896 | 0;
 $63 = sp + 136 | 0;
 $64 = sp + 128 | 0;
 $65 = sp + 120 | 0;
 $66 = sp + 112 | 0;
 $67 = sp + 892 | 0;
 $68 = sp + 888 | 0;
 $69 = sp + 1111 | 0;
 $70 = sp + 1110 | 0;
 $71 = sp + 1109 | 0;
 $72 = sp + 1108 | 0;
 $73 = sp + 884 | 0;
 $74 = sp + 880 | 0;
 $75 = sp + 876 | 0;
 $76 = sp + 872 | 0;
 $77 = sp + 868 | 0;
 $78 = sp + 864 | 0;
 $79 = sp + 860 | 0;
 $80 = sp + 856 | 0;
 $81 = sp + 104 | 0;
 $82 = sp + 96 | 0;
 $83 = sp + 88 | 0;
 $84 = sp + 852 | 0;
 $85 = sp + 848 | 0;
 $86 = sp + 844 | 0;
 $87 = sp + 840 | 0;
 $88 = sp + 836 | 0;
 $89 = sp + 832 | 0;
 $90 = sp + 828 | 0;
 $91 = sp + 824 | 0;
 $92 = sp + 820 | 0;
 $93 = sp + 816 | 0;
 $94 = sp + 812 | 0;
 $95 = sp + 808 | 0;
 $96 = sp + 800 | 0;
 $97 = sp + 80 | 0;
 $98 = sp + 72 | 0;
 $99 = sp + 792 | 0;
 $100 = sp + 788 | 0;
 $101 = sp + 64 | 0;
 $102 = sp + 48 | 0;
 $103 = sp + 40 | 0;
 $104 = sp + 784 | 0;
 $105 = sp + 780 | 0;
 $106 = sp + 1107 | 0;
 $107 = sp + 776 | 0;
 $108 = sp + 1106 | 0;
 $109 = sp + 1105 | 0;
 $110 = sp + 764 | 0;
 $111 = sp + 1104 | 0;
 $112 = sp + 24 | 0;
 $113 = sp + 16 | 0;
 $114 = sp + 8 | 0;
 $115 = sp + 760 | 0;
 $116 = sp + 756 | 0;
 $117 = sp + 752 | 0;
 $118 = sp + 748 | 0;
 $119 = sp + 744 | 0;
 $120 = sp + 740 | 0;
 $121 = sp + 736 | 0;
 $122 = sp + 732 | 0;
 $123 = sp + 1103 | 0;
 $124 = sp + 728 | 0;
 $125 = sp + 716 | 0;
 $126 = sp + 712 | 0;
 $127 = sp + 708 | 0;
 $128 = sp;
 $129 = sp + 704 | 0;
 $130 = sp + 700 | 0;
 $131 = sp + 696 | 0;
 $132 = sp + 692 | 0;
 $133 = sp + 688 | 0;
 $134 = sp + 684 | 0;
 $135 = sp + 680 | 0;
 $136 = sp + 676 | 0;
 $137 = sp + 672 | 0;
 $138 = sp + 668 | 0;
 $139 = sp + 664 | 0;
 $140 = sp + 660 | 0;
 $141 = sp + 656 | 0;
 $142 = sp + 652 | 0;
 $143 = sp + 648 | 0;
 $144 = sp + 644 | 0;
 $145 = sp + 640 | 0;
 $146 = sp + 636 | 0;
 $147 = sp + 632 | 0;
 $148 = sp + 628 | 0;
 $149 = sp + 624 | 0;
 $150 = sp + 620 | 0;
 $151 = sp + 616 | 0;
 $152 = sp + 608 | 0;
 $153 = sp + 604 | 0;
 $154 = sp + 600 | 0;
 $155 = sp + 596 | 0;
 $156 = sp + 592 | 0;
 $157 = sp + 588 | 0;
 $158 = sp + 584 | 0;
 $159 = sp + 580 | 0;
 $160 = sp + 576 | 0;
 $161 = sp + 572 | 0;
 $162 = sp + 568 | 0;
 $163 = sp + 564 | 0;
 $164 = sp + 560 | 0;
 $165 = sp + 556 | 0;
 $166 = sp + 552 | 0;
 $167 = sp + 548 | 0;
 $168 = sp + 544 | 0;
 $169 = sp + 536 | 0;
 $170 = sp + 528 | 0;
 $171 = sp + 524 | 0;
 $172 = sp + 520 | 0;
 $173 = sp + 516 | 0;
 $174 = sp + 512 | 0;
 $175 = sp + 508 | 0;
 $176 = sp + 504 | 0;
 $177 = sp + 500 | 0;
 $178 = sp + 496 | 0;
 $179 = sp + 492 | 0;
 $180 = sp + 488 | 0;
 $181 = sp + 484 | 0;
 $182 = sp + 480 | 0;
 $183 = sp + 476 | 0;
 $184 = sp + 472 | 0;
 $185 = sp + 468 | 0;
 $186 = sp + 464 | 0;
 $187 = sp + 460 | 0;
 $188 = sp + 456 | 0;
 $189 = sp + 452 | 0;
 $190 = sp + 448 | 0;
 $191 = sp + 444 | 0;
 $192 = sp + 440 | 0;
 $193 = sp + 436 | 0;
 $194 = sp + 432 | 0;
 $195 = sp + 428 | 0;
 $196 = sp + 424 | 0;
 $197 = sp + 420 | 0;
 $198 = sp + 416 | 0;
 $199 = sp + 412 | 0;
 $200 = sp + 408 | 0;
 $201 = sp + 404 | 0;
 $202 = sp + 400 | 0;
 $203 = sp + 396 | 0;
 $204 = sp + 392 | 0;
 $205 = sp + 388 | 0;
 $206 = sp + 384 | 0;
 $207 = sp + 380 | 0;
 $208 = sp + 376 | 0;
 $209 = sp + 372 | 0;
 $210 = sp + 368 | 0;
 $211 = sp + 364 | 0;
 $212 = sp + 360 | 0;
 $213 = sp + 356 | 0;
 $214 = sp + 352 | 0;
 $215 = sp + 348 | 0;
 $216 = sp + 344 | 0;
 $217 = sp + 340 | 0;
 $218 = sp + 336 | 0;
 $219 = sp + 332 | 0;
 $220 = sp + 328 | 0;
 $222 = sp + 320 | 0;
 $223 = sp + 316 | 0;
 $225 = sp + 308 | 0;
 $226 = sp + 304 | 0;
 $227 = sp + 300 | 0;
 $228 = sp + 296 | 0;
 $229 = sp + 292 | 0;
 $230 = sp + 288 | 0;
 $231 = sp + 284 | 0;
 $232 = sp + 280 | 0;
 $233 = sp + 276 | 0;
 $234 = sp + 272 | 0;
 $235 = sp + 268 | 0;
 $236 = sp + 264 | 0;
 $237 = sp + 260 | 0;
 $238 = sp + 256 | 0;
 $239 = sp + 252 | 0;
 $240 = sp + 248 | 0;
 $241 = sp + 244 | 0;
 $242 = sp + 240 | 0;
 $243 = sp + 236 | 0;
 $245 = sp + 228 | 0;
 $246 = sp + 224 | 0;
 $247 = sp + 220 | 0;
 $248 = sp + 1102 | 0;
 $249 = sp + 208 | 0;
 $250 = sp + 200 | 0;
 $251 = sp + 1101 | 0;
 $252 = sp + 196 | 0;
 $253 = sp + 192 | 0;
 $254 = sp + 1100 | 0;
 HEAP32[$245 >> 2] = $1;
 HEAP32[$246 >> 2] = $2;
 HEAP32[$247 >> 2] = $3;
 HEAP32[sp + 232 >> 2] = $248;
 HEAP32[$222 >> 2] = $248;
 HEAP32[$223 >> 2] = 1;
 HEAP32[sp + 312 >> 2] = 0;
 $256 = HEAP32[$223 >> 2] | 0;
 HEAP32[sp + 324 >> 2] = HEAP32[$222 >> 2];
 if ($256 >>> 0 > 89478485) {
  HEAP32[$217 >> 2] = 55296;
  $258 = ___cxa_allocate_exception(8) | 0;
  $259 = HEAP32[$217 >> 2] | 0;
  HEAP32[$215 >> 2] = $258;
  HEAP32[$216 >> 2] = $259;
  $260 = HEAP32[$215 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $260 | 0, HEAP32[$216 >> 2] | 0);
  $262 = __THREW__;
  __THREW__ = 0;
  if ($262 & 1) {
   $264 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$218 >> 2] = $264;
   HEAP32[$219 >> 2] = tempRet0;
   ___cxa_free_exception($258 | 0);
   ___resumeException(HEAP32[$218 >> 2] | 0);
  } else {
   HEAP32[$260 >> 2] = 48176;
   ___cxa_throw($258 | 0, 42808, 176);
  }
 }
 HEAP32[$220 >> 2] = (HEAP32[$223 >> 2] | 0) * 48;
 $271 = __Znwm(HEAP32[$220 >> 2] | 0) | 0;
 HEAP32[$212 >> 2] = $250;
 HEAP32[$213 >> 2] = $248;
 HEAP32[$214 >> 2] = 1;
 $272 = HEAP32[$212 >> 2] | 0;
 HEAP32[$272 >> 2] = HEAP32[$213 >> 2];
 HEAP32[$272 + 4 >> 2] = HEAP32[$214 >> 2];
 HEAP32[$209 >> 2] = $249;
 HEAP32[$210 >> 2] = $271;
 HEAP32[$211 >> 2] = $250;
 $276 = HEAP32[$209 >> 2] | 0;
 HEAP32[$208 >> 2] = HEAP32[$211 >> 2];
 $278 = HEAP32[$208 >> 2] | 0;
 HEAP32[$205 >> 2] = $276;
 HEAP32[$206 >> 2] = $210;
 HEAP32[$207 >> 2] = $278;
 $279 = HEAP32[$205 >> 2] | 0;
 HEAP32[$204 >> 2] = HEAP32[$206 >> 2];
 $281 = HEAP32[$204 >> 2] | 0;
 HEAP32[$198 >> 2] = $279;
 HEAP32[$199 >> 2] = $281;
 $282 = HEAP32[$198 >> 2] | 0;
 HEAP32[$197 >> 2] = HEAP32[$199 >> 2];
 HEAP32[$282 >> 2] = HEAP32[HEAP32[$197 >> 2] >> 2];
 HEAP32[$200 >> 2] = HEAP32[$207 >> 2];
 $288 = HEAP32[$200 >> 2] | 0;
 HEAP32[$202 >> 2] = $279 + 4;
 HEAP32[$203 >> 2] = $288;
 $289 = HEAP32[$202 >> 2] | 0;
 HEAP32[$201 >> 2] = HEAP32[$203 >> 2];
 $291 = HEAP32[$201 >> 2] | 0;
 HEAP32[$289 >> 2] = HEAP32[$291 >> 2];
 HEAP32[$289 + 4 >> 2] = HEAP32[$291 + 4 >> 2];
 HEAP32[$196 >> 2] = $249;
 HEAP32[$195 >> 2] = HEAP32[$196 >> 2];
 HEAP32[$194 >> 2] = HEAP32[$195 >> 2];
 $295 = HEAP32[HEAP32[$194 >> 2] >> 2] | 0;
 HEAP32[$192 >> 2] = $251;
 HEAP32[$193 >> 2] = $248;
 HEAP32[$191 >> 2] = HEAP32[$245 >> 2];
 $297 = HEAP32[$191 >> 2] | 0;
 HEAP32[$190 >> 2] = HEAP32[$246 >> 2];
 $299 = HEAP32[$190 >> 2] | 0;
 HEAP32[$170 >> 2] = HEAP32[$247 >> 2];
 $301 = HEAP32[$170 >> 2] | 0;
 HEAP8[$128 >> 0] = HEAP8[$251 >> 0] | 0;
 HEAP32[$119 >> 2] = $295;
 HEAP32[$120 >> 2] = $297;
 HEAP32[$121 >> 2] = $299;
 HEAP32[$122 >> 2] = $301;
 $302 = HEAP32[$119 >> 2] | 0;
 HEAP32[$117 >> 2] = $302;
 HEAP32[$118 >> 2] = 0;
 $303 = HEAP32[$117 >> 2] | 0;
 $304 = HEAP32[$118 >> 2] | 0;
 HEAP32[$115 >> 2] = $303;
 HEAP32[$116 >> 2] = $304;
 $305 = HEAP32[$115 >> 2] | 0;
 HEAP32[$305 >> 2] = 47864;
 HEAP32[$305 + 4 >> 2] = HEAP32[$116 >> 2];
 HEAP32[$303 >> 2] = 47884;
 HEAP32[$303 + 8 >> 2] = HEAP32[$118 >> 2];
 HEAP32[$302 >> 2] = 43168;
 $310 = $302 + 16 | 0;
 HEAP32[$75 >> 2] = $128;
 HEAP32[$73 >> 2] = HEAP32[$75 >> 2];
 $312 = HEAP32[$73 >> 2] | 0;
 HEAP32[$67 >> 2] = $74;
 HEAP32[$68 >> 2] = $312;
 $313 = HEAP32[$67 >> 2] | 0;
 $314 = HEAP32[$68 >> 2] | 0;
 HEAP8[$63 >> 0] = HEAP8[$72 >> 0] | 0;
 HEAP8[$64 >> 0] = HEAP8[$71 >> 0] | 0;
 HEAP8[$65 >> 0] = HEAP8[$70 >> 0] | 0;
 HEAP8[$66 >> 0] = HEAP8[$69 >> 0] | 0;
 HEAP32[$61 >> 2] = $313;
 HEAP32[$62 >> 2] = $314;
 $315 = HEAP32[$61 >> 2] | 0;
 HEAP32[$60 >> 2] = HEAP32[$62 >> 2];
 $317 = HEAP32[$60 >> 2] | 0;
 HEAP32[$58 >> 2] = $315;
 HEAP32[$59 >> 2] = $317;
 $318 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$318 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$124 >> 2] = HEAP32[$74 >> 2];
 HEAP32[$56 >> 2] = HEAP32[$120 >> 2];
 $323 = HEAP32[$56 >> 2] | 0;
 HEAP32[$55 >> 2] = HEAP32[$121 >> 2];
 $325 = HEAP32[$55 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$122 >> 2];
 $327 = HEAP32[$17 >> 2] | 0;
 HEAP32[$52 >> 2] = $323;
 HEAP32[$53 >> 2] = $325;
 HEAP32[$54 >> 2] = $327;
 HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
 $329 = HEAP32[$51 >> 2] | 0;
 HEAP32[$18 >> 2] = HEAP32[$53 >> 2];
 $331 = HEAP32[$18 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$54 >> 2];
 $333 = HEAP32[$19 >> 2] | 0;
 HEAP32[$43 >> 2] = $125;
 HEAP32[$44 >> 2] = $329;
 HEAP32[$45 >> 2] = $331;
 HEAP32[$46 >> 2] = $333;
 $334 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = HEAP32[$44 >> 2];
 $336 = HEAP32[$42 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$45 >> 2];
 $338 = HEAP32[$20 >> 2] | 0;
 HEAP32[$21 >> 2] = HEAP32[$46 >> 2];
 $340 = HEAP32[$21 >> 2] | 0;
 HEAP8[$38 >> 0] = HEAP8[$50 >> 0] | 0;
 HEAP8[$39 >> 0] = HEAP8[$49 >> 0] | 0;
 HEAP8[$40 >> 0] = HEAP8[$48 >> 0] | 0;
 HEAP8[$41 >> 0] = HEAP8[$47 >> 0] | 0;
 HEAP32[$34 >> 2] = $334;
 HEAP32[$35 >> 2] = $336;
 HEAP32[$36 >> 2] = $338;
 HEAP32[$37 >> 2] = $340;
 $341 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
 $343 = HEAP32[$33 >> 2] | 0;
 HEAP32[$23 >> 2] = $341;
 HEAP32[$24 >> 2] = $343;
 $344 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$344 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$36 >> 2];
 $349 = HEAP32[$25 >> 2] | 0;
 HEAP32[$27 >> 2] = $341 + 4;
 HEAP32[$28 >> 2] = $349;
 $350 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$350 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$37 >> 2];
 $355 = HEAP32[$29 >> 2] | 0;
 HEAP32[$31 >> 2] = $341 + 8;
 HEAP32[$32 >> 2] = $355;
 $356 = HEAP32[$31 >> 2] | 0;
 HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$356 >> 2] = HEAP32[$30 >> 2];
 dest = $112;
 src = $125;
 stop = dest + 12 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$113 >> 0] = HEAP8[$124 >> 0] | 0;
 HEAP8[$113 + 1 >> 0] = HEAP8[$124 + 1 >> 0] | 0;
 HEAP8[$113 + 2 >> 0] = HEAP8[$124 + 2 >> 0] | 0;
 HEAP8[$113 + 3 >> 0] = HEAP8[$124 + 3 >> 0] | 0;
 HEAP8[$114 >> 0] = HEAP8[$123 >> 0] | 0;
 HEAP32[$105 >> 2] = $310;
 $359 = HEAP32[$105 >> 2] | 0;
 HEAP32[$104 >> 2] = $113;
 HEAP32[$107 >> 2] = HEAP32[HEAP32[$104 >> 2] >> 2];
 HEAP8[$81 >> 0] = HEAP8[$108 >> 0] | 0;
 HEAP8[$82 >> 0] = HEAP8[$107 >> 0] | 0;
 HEAP8[$82 + 1 >> 0] = HEAP8[$107 + 1 >> 0] | 0;
 HEAP8[$82 + 2 >> 0] = HEAP8[$107 + 2 >> 0] | 0;
 HEAP8[$82 + 3 >> 0] = HEAP8[$107 + 3 >> 0] | 0;
 HEAP8[$83 >> 0] = HEAP8[$106 >> 0] | 0;
 HEAP32[$80 >> 2] = $359;
 HEAP32[$79 >> 2] = $82;
 HEAP32[$78 >> 2] = HEAP32[$79 >> 2];
 HEAP32[$77 >> 2] = HEAP32[HEAP32[$78 >> 2] >> 2];
 HEAP32[$76 >> 2] = $112;
 $364 = HEAP32[$76 >> 2] | 0;
 HEAP32[$110 >> 2] = HEAP32[$364 >> 2];
 HEAP32[$110 + 4 >> 2] = HEAP32[$364 + 4 >> 2];
 HEAP32[$110 + 8 >> 2] = HEAP32[$364 + 8 >> 2];
 HEAP8[$101 >> 0] = HEAP8[$111 >> 0] | 0;
 dest = $102;
 src = $110;
 stop = dest + 12 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP8[$103 >> 0] = HEAP8[$109 >> 0] | 0;
 HEAP32[$95 >> 2] = $359;
 $365 = HEAP32[$95 >> 2] | 0;
 HEAP32[$94 >> 2] = $102;
 HEAP32[$93 >> 2] = HEAP32[$94 >> 2];
 HEAP32[$92 >> 2] = HEAP32[HEAP32[$93 >> 2] >> 2];
 $369 = HEAP32[$92 >> 2] | 0;
 HEAP32[$90 >> 2] = $96;
 HEAP32[$91 >> 2] = $369;
 $370 = HEAP32[$90 >> 2] | 0;
 HEAP32[$370 >> 2] = HEAP32[HEAP32[$91 >> 2] >> 2];
 HEAP32[$370 + 4 >> 2] = HEAP32[(HEAP32[$91 >> 2] | 0) + 4 >> 2];
 HEAP32[HEAP32[$91 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$91 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[$89 >> 2] = $102;
 HEAP32[$88 >> 2] = (HEAP32[$89 >> 2] | 0) + 4;
 HEAP32[$84 >> 2] = HEAP32[HEAP32[$88 >> 2] >> 2];
 $384 = HEAP32[$84 >> 2] | 0;
 HEAP32[$97 >> 2] = HEAP32[$384 >> 2];
 HEAP32[$97 + 4 >> 2] = HEAP32[$384 + 4 >> 2];
 HEAP32[$86 >> 2] = $102;
 HEAP32[$85 >> 2] = (HEAP32[$86 >> 2] | 0) + 8;
 HEAP32[$87 >> 2] = HEAP32[HEAP32[$85 >> 2] >> 2];
 $389 = HEAP32[$87 >> 2] | 0;
 HEAP32[$98 >> 2] = HEAP32[$389 >> 2];
 HEAP32[$98 + 4 >> 2] = HEAP32[$389 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$97 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$97 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$98 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$98 + 4 >> 2];
 invoke_viiii(20, $365 | 0, $96 | 0, $$byval_copy | 0, $$byval_copy1 | 0);
 $390 = __THREW__;
 __THREW__ = 0;
 if ($390 & 1) {
  $392 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$99 >> 2] = $392;
  HEAP32[$100 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($96);
  $395 = HEAP32[$100 >> 2] | 0;
  HEAP32[$126 >> 2] = HEAP32[$99 >> 2];
  HEAP32[$127 >> 2] = $395;
  __ZNSt3__214__shared_countD2Ev($302);
  $397 = HEAP32[$127 >> 2] | 0;
  HEAP32[$252 >> 2] = HEAP32[$126 >> 2];
  HEAP32[$253 >> 2] = $397;
  HEAP32[$189 >> 2] = $249;
  HEAP32[$186 >> 2] = HEAP32[$189 >> 2];
  HEAP32[$187 >> 2] = 0;
  $399 = HEAP32[$186 >> 2] | 0;
  HEAP32[$185 >> 2] = $399;
  HEAP32[$184 >> 2] = HEAP32[$185 >> 2];
  HEAP32[$188 >> 2] = HEAP32[HEAP32[$184 >> 2] >> 2];
  $403 = HEAP32[$187 >> 2] | 0;
  HEAP32[$174 >> 2] = $399;
  HEAP32[$173 >> 2] = HEAP32[$174 >> 2];
  HEAP32[HEAP32[$173 >> 2] >> 2] = $403;
  if (!(HEAP32[$188 >> 2] | 0)) {
   $555 = HEAP32[$252 >> 2] | 0;
   $556 = HEAP32[$253 >> 2] | 0;
   ___resumeException($555 | 0);
  }
  HEAP32[$172 >> 2] = $399;
  HEAP32[$171 >> 2] = (HEAP32[$172 >> 2] | 0) + 4;
  $520 = HEAP32[$188 >> 2] | 0;
  HEAP32[$182 >> 2] = HEAP32[$171 >> 2];
  HEAP32[$183 >> 2] = $520;
  $521 = HEAP32[$182 >> 2] | 0;
  $523 = HEAP32[$183 >> 2] | 0;
  $525 = HEAP32[$521 + 4 >> 2] | 0;
  HEAP32[$179 >> 2] = HEAP32[$521 >> 2];
  HEAP32[$180 >> 2] = $523;
  HEAP32[$181 >> 2] = $525;
  $527 = HEAP32[$180 >> 2] | 0;
  $528 = HEAP32[$181 >> 2] | 0;
  HEAP32[$176 >> 2] = HEAP32[$179 >> 2];
  HEAP32[$177 >> 2] = $527;
  HEAP32[$178 >> 2] = $528;
  HEAP32[$175 >> 2] = HEAP32[$177 >> 2];
  __ZdlPv(HEAP32[$175 >> 2] | 0);
  $555 = HEAP32[$252 >> 2] | 0;
  $556 = HEAP32[$253 >> 2] | 0;
  ___resumeException($555 | 0);
 }
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($96);
 HEAP8[$254 >> 0] = 0;
 HEAP32[$16 >> 2] = $0;
 $408 = HEAP32[$16 >> 2] | 0;
 HEAP32[$408 >> 2] = 0;
 HEAP32[$408 + 4 >> 2] = 0;
 HEAP32[$15 >> 2] = $249;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$13 >> 2] >> 2];
 HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 16;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = $249;
 $418 = HEAP32[$8 >> 2] | 0;
 HEAP32[$7 >> 2] = $418;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
 HEAP32[$5 >> 2] = $418;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[HEAP32[$4 >> 2] >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$9 >> 2];
 $426 = HEAP32[$0 >> 2] | 0;
 $430 = HEAP32[$0 >> 2] | 0;
 HEAP32[$166 >> 2] = $0;
 HEAP32[$167 >> 2] = ($426 | 0) == 0 ? 0 : $426 + 4 | 0;
 HEAP32[$168 >> 2] = $430;
 $431 = HEAP32[$166 >> 2] | 0;
 do if (HEAP32[$167 >> 2] | 0) {
  HEAP32[$165 >> 2] = HEAP32[$167 >> 2];
  $435 = HEAP32[$165 >> 2] | 0;
  if (HEAP32[$435 + 4 >> 2] | 0) {
   HEAP32[$164 >> 2] = HEAP32[$435 + 4 >> 2];
   HEAP32[$163 >> 2] = HEAP32[$164 >> 2];
   HEAP32[$161 >> 2] = (HEAP32[$163 >> 2] | 0) + 4;
   HEAP32[$162 >> 2] = HEAP32[HEAP32[$161 >> 2] >> 2];
   if ((HEAP32[$162 >> 2] | 0) + 1 | 0) break;
  }
  $449 = HEAP32[$168 >> 2] | 0;
  HEAP32[$158 >> 2] = $169;
  HEAP32[$159 >> 2] = $431;
  HEAP32[$160 >> 2] = $449;
  $450 = HEAP32[$158 >> 2] | 0;
  HEAP32[$450 >> 2] = HEAP32[$160 >> 2];
  HEAP32[$450 + 4 >> 2] = HEAP32[(HEAP32[$159 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$450 + 4 >> 2] | 0) {
   HEAP32[$157 >> 2] = HEAP32[$450 + 4 >> 2];
   HEAP32[$156 >> 2] = HEAP32[$157 >> 2];
   HEAP32[$153 >> 2] = (HEAP32[$156 >> 2] | 0) + 4;
   $464 = HEAP32[$153 >> 2] | 0;
   HEAP32[$154 >> 2] = 1;
   $465 = HEAP32[$154 >> 2] | 0;
   $466 = HEAP32[$464 >> 2] | 0;
   HEAP32[$464 >> 2] = $466 + $465;
   HEAP32[$155 >> 2] = $466 + $465;
  }
  HEAP32[$150 >> 2] = HEAP32[$167 >> 2];
  HEAP32[$151 >> 2] = $169;
  $470 = HEAP32[$150 >> 2] | 0;
  $471 = HEAP32[$151 >> 2] | 0;
  HEAP32[$147 >> 2] = $152;
  HEAP32[$148 >> 2] = $471;
  HEAP32[$149 >> 2] = 0;
  $472 = HEAP32[$147 >> 2] | 0;
  HEAP32[$472 >> 2] = HEAP32[HEAP32[$148 >> 2] >> 2];
  HEAP32[$472 + 4 >> 2] = HEAP32[(HEAP32[$148 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$472 + 4 >> 2] | 0) {
   HEAP32[$146 >> 2] = HEAP32[$472 + 4 >> 2];
   HEAP32[$143 >> 2] = (HEAP32[$146 >> 2] | 0) + 8;
   $486 = HEAP32[$143 >> 2] | 0;
   HEAP32[$144 >> 2] = 1;
   $487 = HEAP32[$144 >> 2] | 0;
   $488 = HEAP32[$486 >> 2] | 0;
   HEAP32[$486 >> 2] = $488 + $487;
   HEAP32[$145 >> 2] = $488 + $487;
  }
  HEAP32[$141 >> 2] = $152;
  HEAP32[$142 >> 2] = $470;
  $491 = HEAP32[$141 >> 2] | 0;
  $492 = HEAP32[$142 >> 2] | 0;
  HEAP32[$138 >> 2] = $491;
  HEAP32[$139 >> 2] = $492;
  HEAP32[$137 >> 2] = HEAP32[$138 >> 2];
  HEAP32[$140 >> 2] = HEAP32[HEAP32[$137 >> 2] >> 2];
  HEAP32[$135 >> 2] = HEAP32[$139 >> 2];
  HEAP32[HEAP32[$138 >> 2] >> 2] = HEAP32[HEAP32[$135 >> 2] >> 2];
  HEAP32[$136 >> 2] = $140;
  HEAP32[HEAP32[$139 >> 2] >> 2] = HEAP32[HEAP32[$136 >> 2] >> 2];
  $505 = (HEAP32[$142 >> 2] | 0) + 4 | 0;
  HEAP32[$132 >> 2] = $491 + 4;
  HEAP32[$133 >> 2] = $505;
  HEAP32[$131 >> 2] = HEAP32[$132 >> 2];
  HEAP32[$134 >> 2] = HEAP32[HEAP32[$131 >> 2] >> 2];
  HEAP32[$129 >> 2] = HEAP32[$133 >> 2];
  HEAP32[HEAP32[$132 >> 2] >> 2] = HEAP32[HEAP32[$129 >> 2] >> 2];
  HEAP32[$130 >> 2] = $134;
  HEAP32[HEAP32[$133 >> 2] >> 2] = HEAP32[HEAP32[$130 >> 2] >> 2];
  __ZNSt3__28weak_ptrIN3zim6BufferEED2Ev($152);
  __ZNSt3__210shared_ptrIN3zim6BufferEED2Ev($169);
 } while (0);
 HEAP8[$254 >> 0] = 1;
 if (!(HEAP8[$254 >> 0] & 1)) __ZNSt3__210shared_ptrIN3zim9SubBufferEED2Ev($0);
 HEAP32[$243 >> 2] = $249;
 HEAP32[$240 >> 2] = HEAP32[$243 >> 2];
 HEAP32[$241 >> 2] = 0;
 $532 = HEAP32[$240 >> 2] | 0;
 HEAP32[$239 >> 2] = $532;
 HEAP32[$238 >> 2] = HEAP32[$239 >> 2];
 HEAP32[$242 >> 2] = HEAP32[HEAP32[$238 >> 2] >> 2];
 $536 = HEAP32[$241 >> 2] | 0;
 HEAP32[$228 >> 2] = $532;
 HEAP32[$227 >> 2] = HEAP32[$228 >> 2];
 HEAP32[HEAP32[$227 >> 2] >> 2] = $536;
 if (!(HEAP32[$242 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$226 >> 2] = $532;
 HEAP32[$225 >> 2] = (HEAP32[$226 >> 2] | 0) + 4;
 $544 = HEAP32[$242 >> 2] | 0;
 HEAP32[$236 >> 2] = HEAP32[$225 >> 2];
 HEAP32[$237 >> 2] = $544;
 $545 = HEAP32[$236 >> 2] | 0;
 $547 = HEAP32[$237 >> 2] | 0;
 $549 = HEAP32[$545 + 4 >> 2] | 0;
 HEAP32[$233 >> 2] = HEAP32[$545 >> 2];
 HEAP32[$234 >> 2] = $547;
 HEAP32[$235 >> 2] = $549;
 $551 = HEAP32[$234 >> 2] | 0;
 $552 = HEAP32[$235 >> 2] | 0;
 HEAP32[$230 >> 2] = HEAP32[$233 >> 2];
 HEAP32[$231 >> 2] = $551;
 HEAP32[$232 >> 2] = $552;
 HEAP32[$229 >> 2] = HEAP32[$231 >> 2];
 __ZdlPv(HEAP32[$229 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim10FileReader4readENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy4 = 0, $$byval_copy6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $16 = 0, $162 = 0, $168 = 0, $17 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $220 = 0, $221 = 0, $223 = 0, $23 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $243 = 0, $248 = 0, $25 = 0, $250 = 0, $255 = 0, $257 = 0, $26 = 0, $262 = 0, $263 = 0, $27 = 0, $275 = 0, $276 = 0, $28 = 0, $284 = 0, $285 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $30 = 0, $304 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $326 = 0, $327 = 0, $33 = 0, $34 = 0, $340 = 0, $342 = 0, $346 = 0, $35 = 0, $352 = 0, $353 = 0, $355 = 0, $357 = 0, $358 = 0, $36 = 0, $369 = 0, $37 = 0, $370 = 0, $372 = 0, $373 = 0, $38 = 0, $385 = 0, $386 = 0, $388 = 0, $39 = 0, $390 = 0, $391 = 0, $393 = 0, $399 = 0, $4 = 0, $400 = 0, $402 = 0, $404 = 0, $405 = 0, $407 = 0, $41 = 0, $413 = 0, $414 = 0, $416 = 0, $418 = 0, $419 = 0, $42 = 0, $423 = 0, $424 = 0, $425 = 0, $427 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $436 = 0, $439 = 0, $44 = 0, $441 = 0, $444 = 0, $446 = 0, $448 = 0, $45 = 0, $451 = 0, $453 = 0, $454 = 0, $455 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720 | 0;
 $$byval_copy6 = sp + 136 | 0;
 $$byval_copy4 = sp + 128 | 0;
 $2 = sp + 708 | 0;
 $3 = sp + 704 | 0;
 $4 = sp + 700 | 0;
 $5 = sp + 696 | 0;
 $6 = sp + 692 | 0;
 $7 = sp + 688 | 0;
 $8 = sp + 684 | 0;
 $9 = sp + 680 | 0;
 $10 = sp + 676 | 0;
 $11 = sp + 672 | 0;
 $12 = sp + 668 | 0;
 $13 = sp + 664 | 0;
 $14 = sp + 660 | 0;
 $15 = sp + 656 | 0;
 $16 = sp + 652 | 0;
 $17 = sp + 648 | 0;
 $18 = sp + 644 | 0;
 $19 = sp + 640 | 0;
 $20 = sp + 636 | 0;
 $21 = sp + 632 | 0;
 $22 = sp + 628 | 0;
 $23 = sp + 624 | 0;
 $24 = sp + 620 | 0;
 $25 = sp + 616 | 0;
 $26 = sp + 612 | 0;
 $27 = sp + 608 | 0;
 $28 = sp + 604 | 0;
 $29 = sp + 600 | 0;
 $30 = sp + 596 | 0;
 $31 = sp + 592 | 0;
 $32 = sp + 588 | 0;
 $33 = sp + 584 | 0;
 $34 = sp + 580 | 0;
 $35 = sp + 576 | 0;
 $36 = sp + 572 | 0;
 $37 = sp + 568 | 0;
 $38 = sp + 564 | 0;
 $39 = sp + 560 | 0;
 $41 = sp + 552 | 0;
 $42 = sp + 548 | 0;
 $43 = sp + 544 | 0;
 $44 = sp + 540 | 0;
 $45 = sp + 536 | 0;
 $46 = sp + 532 | 0;
 $47 = sp + 528 | 0;
 $48 = sp + 524 | 0;
 $49 = sp + 520 | 0;
 $50 = sp + 516 | 0;
 $51 = sp + 512 | 0;
 $52 = sp + 508 | 0;
 $53 = sp + 504 | 0;
 $54 = sp + 500 | 0;
 $55 = sp + 496 | 0;
 $56 = sp + 492 | 0;
 $57 = sp + 488 | 0;
 $58 = sp + 484 | 0;
 $59 = sp + 480 | 0;
 $60 = sp + 476 | 0;
 $61 = sp + 472 | 0;
 $62 = sp + 468 | 0;
 $63 = sp + 464 | 0;
 $64 = sp + 460 | 0;
 $65 = sp + 456 | 0;
 $66 = sp + 452 | 0;
 $67 = sp + 448 | 0;
 $68 = sp + 444 | 0;
 $69 = sp + 440 | 0;
 $70 = sp + 436 | 0;
 $71 = sp + 432 | 0;
 $72 = sp + 428 | 0;
 $73 = sp + 424 | 0;
 $74 = sp + 420 | 0;
 $75 = sp + 416 | 0;
 $76 = sp + 412 | 0;
 $77 = sp + 120 | 0;
 $78 = sp + 408 | 0;
 $79 = sp + 404 | 0;
 $80 = sp + 400 | 0;
 $81 = sp + 396 | 0;
 $82 = sp + 392 | 0;
 $83 = sp + 388 | 0;
 $84 = sp + 384 | 0;
 $85 = sp + 380 | 0;
 $86 = sp + 376 | 0;
 $87 = sp + 372 | 0;
 $88 = sp + 368 | 0;
 $89 = sp + 364 | 0;
 $90 = sp + 360 | 0;
 $91 = sp + 356 | 0;
 $92 = sp + 352 | 0;
 $93 = sp + 348 | 0;
 $94 = sp + 344 | 0;
 $95 = sp + 340 | 0;
 $96 = sp + 336 | 0;
 $97 = sp + 332 | 0;
 $98 = sp + 112 | 0;
 $99 = sp + 104 | 0;
 $100 = sp + 328 | 0;
 $101 = sp + 88 | 0;
 $102 = sp + 80 | 0;
 $103 = sp + 324 | 0;
 $104 = sp + 72 | 0;
 $105 = sp + 64 | 0;
 $106 = sp + 56 | 0;
 $107 = sp + 48 | 0;
 $108 = sp + 40 | 0;
 $109 = sp + 32 | 0;
 $110 = sp + 713 | 0;
 $111 = sp + 24 | 0;
 $112 = sp + 320 | 0;
 $113 = sp + 316 | 0;
 $114 = sp + 16 | 0;
 $117 = sp + 176 | 0;
 $118 = sp;
 $119 = sp + 168 | 0;
 $120 = sp + 160 | 0;
 $121 = sp + 144 | 0;
 $122 = sp + 712 | 0;
 HEAP32[$97 >> 2] = $0;
 $123 = HEAP32[$97 >> 2] | 0;
 $124 = $1;
 $129 = HEAP32[$124 + 4 >> 2] | 0;
 $130 = $98;
 HEAP32[$130 >> 2] = HEAP32[$124 >> 2];
 HEAP32[$130 + 4 >> 2] = $129;
 $135 = $123 + 24 | 0;
 $140 = HEAP32[$135 + 4 >> 2] | 0;
 $141 = $99;
 HEAP32[$141 >> 2] = HEAP32[$135 >> 2];
 HEAP32[$141 + 4 >> 2] = $140;
 $145 = $98;
 $150 = HEAP32[$145 + 4 >> 2] | 0;
 $151 = $99;
 $156 = HEAP32[$151 + 4 >> 2] | 0;
 if (!($150 >>> 0 < $156 >>> 0 | (($150 | 0) == ($156 | 0) ? (HEAP32[$145 >> 2] | 0) >>> 0 < (HEAP32[$151 >> 2] | 0) >>> 0 : 0))) {
  $162 = $98;
  $168 = $99;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49044, HEAP32[$162 >> 2] | 0, HEAP32[$162 + 4 >> 2] | 0, HEAP32[$168 >> 2] | 0, HEAP32[$168 + 4 >> 2] | 0, 48618, 65);
 }
 __ZpLIN3zim8offset_tEERT_S3_RKS2_($1, $123 + 16 | 0) | 0;
 HEAP32[$96 >> 2] = $123 + 4;
 $177 = HEAP32[HEAP32[$96 >> 2] >> 2] | 0;
 HEAP32[$102 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$102 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$102 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$102 + 4 >> 2];
 __ZN3zim5RangeC2ENS_8offset_tE($101, $$byval_copy6);
 HEAP32[$93 >> 2] = $177;
 HEAP32[$94 >> 2] = $101;
 $179 = HEAP32[$94 >> 2] | 0;
 HEAP32[$90 >> 2] = HEAP32[$93 >> 2];
 HEAP32[$91 >> 2] = $179;
 $180 = HEAP32[$90 >> 2] | 0;
 $181 = HEAP32[$91 >> 2] | 0;
 HEAP32[$88 >> 2] = $180;
 HEAP32[$87 >> 2] = HEAP32[$88 >> 2];
 HEAP32[$86 >> 2] = (HEAP32[$87 >> 2] | 0) + 4;
 HEAP32[$85 >> 2] = HEAP32[$86 >> 2];
 HEAP32[$84 >> 2] = HEAP32[$85 >> 2];
 HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
 $189 = HEAP32[HEAP32[$83 >> 2] >> 2] | 0;
 HEAP32[$82 >> 2] = $180;
 HEAP32[$81 >> 2] = (HEAP32[$82 >> 2] | 0) + 4;
 HEAP32[$80 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$79 >> 2] = HEAP32[$80 >> 2];
 HEAP32[$78 >> 2] = HEAP32[$79 >> 2];
 HEAP32[$89 >> 2] = __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE13__lower_boundIS3_EENS_21__tree_const_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEERKT_SL_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISJ_EEEE($180, $181, $189, HEAP32[$78 >> 2] | 0) | 0;
 HEAP32[$95 >> 2] = HEAP32[$89 >> 2];
 HEAP8[$77 >> 0] = HEAP8[$95 >> 0] | 0;
 HEAP8[$77 + 1 >> 0] = HEAP8[$95 + 1 >> 0] | 0;
 HEAP8[$77 + 2 >> 0] = HEAP8[$95 + 2 >> 0] | 0;
 HEAP8[$77 + 3 >> 0] = HEAP8[$95 + 3 >> 0] | 0;
 HEAP32[$76 >> 2] = $92;
 HEAP32[HEAP32[$76 >> 2] >> 2] = HEAP32[$77 >> 2];
 HEAP32[$100 >> 2] = HEAP32[$92 >> 2];
 HEAP32[$75 >> 2] = $100;
 HEAP32[$74 >> 2] = HEAP32[$75 >> 2];
 HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
 HEAP32[$72 >> 2] = (HEAP32[HEAP32[$73 >> 2] >> 2] | 0) + 16;
 HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$70 >> 2] = HEAP32[$71 >> 2];
 HEAP32[$69 >> 2] = HEAP32[$70 >> 2];
 HEAP32[$103 >> 2] = __ZNK3zim8FilePartINS_4unix2FSEE7fhandleEv(HEAP32[(HEAP32[$69 >> 2] | 0) + 16 >> 2] | 0) | 0;
 HEAP32[$105 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$105 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$68 >> 2] = $100;
 HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
 HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
 HEAP32[$65 >> 2] = (HEAP32[HEAP32[$66 >> 2] >> 2] | 0) + 16;
 HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
 HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
 $220 = HEAP32[$62 >> 2] | 0;
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$105 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$105 + 4 >> 2];
 $221 = __ZmiIN3zim8offset_tEET_S2_RKS2_($$byval_copy6, $220) | 0;
 $223 = $104;
 HEAP32[$223 >> 2] = $221;
 HEAP32[$223 + 4 >> 2] = tempRet0;
 HEAP32[$106 >> 2] = HEAP32[$104 >> 2];
 HEAP32[$106 + 4 >> 2] = HEAP32[$104 + 4 >> 2];
 HEAP32[$60 >> 2] = $100;
 HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
 HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$57 >> 2] = (HEAP32[HEAP32[$58 >> 2] >> 2] | 0) + 16;
 HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
 $236 = (HEAP32[$54 >> 2] | 0) + 8 | 0;
 HEAP32[$107 >> 2] = HEAP32[$236 >> 2];
 HEAP32[$107 + 4 >> 2] = HEAP32[$236 + 4 >> 2];
 if (!(__ZleIN3zim8offset_tEEbRKT_S4_($106, $107) | 0)) {
  HEAP32[$108 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$108 + 4 >> 2] = HEAP32[$106 + 4 >> 2];
  HEAP32[$109 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$109 + 4 >> 2] = HEAP32[$107 + 4 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$108 >> 2];
  HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$108 + 4 >> 2];
  HEAP32[$$byval_copy6 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$109 + 4 >> 2];
  __Z15_on_assert_failIN3zim8offset_tES1_EvPKcS3_S3_T_T0_S3_i(49052, 51100, 49065, $$byval_copy4, $$byval_copy6, 48618, 70);
 }
 $238 = HEAP32[$103 >> 2] | 0;
 __ZN3zim7zsize_tC2Ey($111, 1, 0);
 HEAP32[$114 >> 2] = HEAP32[$104 >> 2];
 HEAP32[$114 + 4 >> 2] = HEAP32[$104 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$111 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$111 + 4 >> 2];
 HEAP32[$$byval_copy6 >> 2] = HEAP32[$114 >> 2];
 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
 $239 = invoke_iiiii(10, $238 | 0, $110 | 0, $$byval_copy4 | 0, $$byval_copy6 | 0) | 0;
 $240 = tempRet0;
 $241 = __THREW__;
 __THREW__ = 0;
 if (!($241 & 1)) {
  $243 = sp + 8 | 0;
  HEAP32[$243 >> 2] = $239;
  HEAP32[$243 + 4 >> 2] = $240;
  STACKTOP = sp;
  return HEAP8[$110 >> 0] | 0;
 }
 $248 = ___cxa_find_matching_catch_3(42792) | 0;
 HEAP32[$112 >> 2] = $248;
 HEAP32[$113 >> 2] = tempRet0;
 $250 = HEAP32[$113 >> 2] | 0;
 if (($250 | 0) != (_llvm_eh_typeid_for(42792) | 0)) {
  $453 = HEAP32[$112 >> 2] | 0;
  $454 = HEAP32[$113 >> 2] | 0;
  ___resumeException($453 | 0);
 }
 HEAP32[sp + 312 >> 2] = ___cxa_begin_catch(HEAP32[$112 >> 2] | 0) | 0;
 HEAP32[$49 >> 2] = $117;
 HEAP32[$50 >> 2] = 16;
 $255 = HEAP32[$49 >> 2] | 0;
 HEAP32[$48 >> 2] = $255 + 56;
 $257 = HEAP32[$48 >> 2] | 0;
 HEAP32[$47 >> 2] = $257;
 HEAP32[HEAP32[$47 >> 2] >> 2] = 44548;
 HEAP32[$257 >> 2] = 44532;
 HEAP32[$255 >> 2] = 43256;
 HEAP32[$255 + 56 >> 2] = 43276;
 HEAP32[$32 >> 2] = $255;
 HEAP32[$33 >> 2] = 43288;
 HEAP32[$34 >> 2] = $255 + 4;
 $262 = HEAP32[$32 >> 2] | 0;
 $263 = HEAP32[$33 >> 2] | 0;
 HEAP32[$262 >> 2] = HEAP32[$263 >> 2];
 HEAP32[$262 + (HEAP32[(HEAP32[$262 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$263 + 4 >> 2];
 $275 = HEAP32[$34 >> 2] | 0;
 HEAP32[$30 >> 2] = $262 + (HEAP32[(HEAP32[$262 >> 2] | 0) + -12 >> 2] | 0);
 HEAP32[$31 >> 2] = $275;
 $276 = HEAP32[$30 >> 2] | 0;
 __ZNSt3__28ios_base4initEPv($276, HEAP32[$31 >> 2] | 0);
 HEAP32[$276 + 72 >> 2] = 0;
 HEAP32[$276 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$255 >> 2] = 43256;
 HEAP32[$255 + 56 >> 2] = 43276;
 $284 = HEAP32[$50 >> 2] | 16;
 HEAP32[$45 >> 2] = $255 + 4;
 HEAP32[$46 >> 2] = $284;
 $285 = HEAP32[$45 >> 2] | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($285);
 HEAP32[$285 >> 2] = 43308;
 HEAP32[$44 >> 2] = $285 + 32;
 $287 = HEAP32[$44 >> 2] | 0;
 HEAP32[$43 >> 2] = $287;
 $288 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $288;
 $289 = HEAP32[$42 >> 2] | 0;
 HEAP32[$289 >> 2] = 0;
 HEAP32[$289 + 4 >> 2] = 0;
 HEAP32[$289 + 8 >> 2] = 0;
 HEAP32[$41 >> 2] = $288;
 HEAP32[sp + 556 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$37 >> 2] = $287;
 HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$38 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$39 >> 2] = 0;
 while (1) {
  if ((HEAP32[$39 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$38 >> 2] | 0) + (HEAP32[$39 >> 2] << 2) >> 2] = 0;
  HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1;
 }
 HEAP32[$285 + 44 >> 2] = 0;
 HEAP32[$285 + 48 >> 2] = HEAP32[$46 >> 2];
 __THREW__ = 0;
 invoke_iii(35, $117 | 0, 49086) | 0;
 $304 = __THREW__;
 __THREW__ = 0;
 do if ($304 & 1) label = 35; else {
  __THREW__ = 0;
  $306 = invoke_iii(35, $117 | 0, 49107) | 0;
  $307 = __THREW__;
  __THREW__ = 0;
  if ($307 & 1) label = 35; else {
   HEAP32[$29 >> 2] = $100;
   HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
   HEAP32[$26 >> 2] = (HEAP32[HEAP32[$27 >> 2] >> 2] | 0) + 16;
   HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
   $320 = __ZNK3zim8FilePartINS_4unix2FSEE8filenameEv(HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0) | 0;
   __THREW__ = 0;
   $321 = invoke_iii(36, $306 | 0, $320 | 0) | 0;
   $322 = __THREW__;
   __THREW__ = 0;
   if ($322 & 1) label = 35; else {
    __THREW__ = 0;
    invoke_iii(35, $321 | 0, 49124) | 0;
    $324 = __THREW__;
    __THREW__ = 0;
    if ($324 & 1) label = 35; else {
     __THREW__ = 0;
     $326 = invoke_iii(35, $117 | 0, 49126) | 0;
     $327 = __THREW__;
     __THREW__ = 0;
     if ($327 & 1) label = 35; else {
      HEAP32[$22 >> 2] = $100;
      HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
      HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
      HEAP32[$19 >> 2] = (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) + 16;
      HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
      HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
      HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
      $340 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[(HEAP32[$16 >> 2] | 0) + 16 >> 2] | 0) | 0;
      $342 = $118;
      HEAP32[$342 >> 2] = $340;
      HEAP32[$342 + 4 >> 2] = tempRet0;
      $346 = $118;
      __THREW__ = 0;
      $352 = invoke_iiii(39, $326 | 0, HEAP32[$346 >> 2] | 0, HEAP32[$346 + 4 >> 2] | 0) | 0;
      $353 = __THREW__;
      __THREW__ = 0;
      if ($353 & 1) label = 35; else {
       __THREW__ = 0;
       invoke_iii(35, $352 | 0, 49124) | 0;
       $355 = __THREW__;
       __THREW__ = 0;
       if ($355 & 1) label = 35; else {
        __THREW__ = 0;
        $357 = invoke_iii(35, $117 | 0, 49148) | 0;
        $358 = __THREW__;
        __THREW__ = 0;
        if ($358 & 1) label = 35; else {
         HEAP32[$15 >> 2] = $100;
         HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
         HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
         HEAP32[$12 >> 2] = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) + 16;
         HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
         HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
         HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
         __THREW__ = 0;
         $369 = invoke_iii(37, $357 | 0, HEAP32[$9 >> 2] | 0) | 0;
         $370 = __THREW__;
         __THREW__ = 0;
         if ($370 & 1) label = 35; else {
          __THREW__ = 0;
          $372 = invoke_iii(35, $369 | 0, 49171) | 0;
          $373 = __THREW__;
          __THREW__ = 0;
          if ($373 & 1) label = 35; else {
           HEAP32[$8 >> 2] = $100;
           HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
           HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
           HEAP32[$5 >> 2] = (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 16;
           HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
           HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
           HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
           __THREW__ = 0;
           $385 = invoke_iii(37, $372 | 0, (HEAP32[$2 >> 2] | 0) + 8 | 0) | 0;
           $386 = __THREW__;
           __THREW__ = 0;
           if ($386 & 1) label = 35; else {
            __THREW__ = 0;
            invoke_iii(35, $385 | 0, 49124) | 0;
            $388 = __THREW__;
            __THREW__ = 0;
            if ($388 & 1) label = 35; else {
             __THREW__ = 0;
             $390 = invoke_iii(35, $117 | 0, 49173) | 0;
             $391 = __THREW__;
             __THREW__ = 0;
             if ($391 & 1) label = 35; else {
              $393 = $1;
              __THREW__ = 0;
              $399 = invoke_iiii(39, $390 | 0, HEAP32[$393 >> 2] | 0, HEAP32[$393 + 4 >> 2] | 0) | 0;
              $400 = __THREW__;
              __THREW__ = 0;
              if ($400 & 1) label = 35; else {
               __THREW__ = 0;
               invoke_iii(35, $399 | 0, 49124) | 0;
               $402 = __THREW__;
               __THREW__ = 0;
               if ($402 & 1) label = 35; else {
                __THREW__ = 0;
                $404 = invoke_iii(35, $117 | 0, 49195) | 0;
                $405 = __THREW__;
                __THREW__ = 0;
                if ($405 & 1) {
                 label = 35;
                 break;
                }
                $407 = $104;
                __THREW__ = 0;
                $413 = invoke_iiii(39, $404 | 0, HEAP32[$407 >> 2] | 0, HEAP32[$407 + 4 >> 2] | 0) | 0;
                $414 = __THREW__;
                __THREW__ = 0;
                if ($414 & 1) {
                 label = 35;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $413 | 0, 49124) | 0;
                $416 = __THREW__;
                __THREW__ = 0;
                if ($416 & 1) {
                 label = 35;
                 break;
                }
                __THREW__ = 0;
                $418 = invoke_iii(35, $117 | 0, 49215) | 0;
                $419 = __THREW__;
                __THREW__ = 0;
                if ($419 & 1) {
                 label = 35;
                 break;
                }
                $423 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
                __THREW__ = 0;
                $424 = invoke_iii(35, $418 | 0, $423 | 0) | 0;
                $425 = __THREW__;
                __THREW__ = 0;
                if ($425 & 1) {
                 label = 35;
                 break;
                }
                __THREW__ = 0;
                invoke_iii(35, $424 | 0, 49124) | 0;
                $427 = __THREW__;
                __THREW__ = 0;
                if ($427 & 1) {
                 label = 35;
                 break;
                }
                $430 = HEAP32[(___errno_location() | 0) >> 2] | 0;
                $431 = __ZNSt3__216generic_categoryEv() | 0;
                HEAP32[$51 >> 2] = $119;
                HEAP32[$52 >> 2] = $430;
                HEAP32[$53 >> 2] = $431;
                $432 = HEAP32[$51 >> 2] | 0;
                HEAP32[$432 >> 2] = HEAP32[$52 >> 2];
                HEAP32[$432 + 4 >> 2] = HEAP32[$53 >> 2];
                $436 = ___cxa_allocate_exception(16) | 0;
                HEAP8[$122 >> 0] = 1;
                HEAP32[$120 >> 2] = HEAP32[$119 >> 2];
                HEAP32[$120 + 4 >> 2] = HEAP32[$119 + 4 >> 2];
                HEAP32[$61 >> 2] = $117;
                __THREW__ = 0;
                invoke_vii(48, $121 | 0, (HEAP32[$61 >> 2] | 0) + 4 | 0);
                $439 = __THREW__;
                __THREW__ = 0;
                if ($439 & 1) {
                 $446 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$112 >> 2] = $446;
                 HEAP32[$113 >> 2] = tempRet0;
                } else {
                 __THREW__ = 0;
                 HEAP32[$$byval_copy6 >> 2] = HEAP32[$120 >> 2];
                 HEAP32[$$byval_copy6 + 4 >> 2] = HEAP32[$120 + 4 >> 2];
                 invoke_viii(10, $436 | 0, $$byval_copy6 | 0, $121 | 0);
                 $441 = __THREW__;
                 __THREW__ = 0;
                 if (!($441 & 1)) {
                  HEAP8[$122 >> 0] = 0;
                  __THREW__ = 0;
                  invoke_viii(11, $436 | 0, 42680, 165);
                  __THREW__ = 0;
                 }
                 $448 = ___cxa_find_matching_catch_2() | 0;
                 HEAP32[$112 >> 2] = $448;
                 HEAP32[$113 >> 2] = tempRet0;
                 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($121);
                }
                if (!(HEAP8[$122 >> 0] & 1)) break;
                ___cxa_free_exception($436 | 0);
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 35) {
  $444 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$112 >> 2] = $444;
  HEAP32[$113 >> 2] = tempRet0;
 }
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($117);
 __THREW__ = 0;
 invoke_v(3);
 $451 = __THREW__;
 __THREW__ = 0;
 if ($451 & 1) {
  $455 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($455);
 } else {
  $453 = HEAP32[$112 >> 2] | 0;
  $454 = HEAP32[$113 >> 2] | 0;
  ___resumeException($453 | 0);
 }
 return 0;
}

function __ZN3zim8FileImpl5findxEcRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $20 = 0, $206 = 0, $21 = 0, $22 = 0, $229 = 0, $23 = 0, $236 = 0, $24 = 0, $242 = 0, $245 = 0, $246 = 0, $248 = 0, $25 = 0, $250 = 0, $26 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $290 = 0, $291 = 0, $295 = 0, $296 = 0, $30 = 0, $31 = 0, $316 = 0, $32 = 0, $321 = 0, $33 = 0, $339 = 0, $34 = 0, $340 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $367 = 0, $37 = 0, $375 = 0, $38 = 0, $386 = 0, $389 = 0, $39 = 0, $390 = 0, $392 = 0, $394 = 0, $4 = 0, $40 = 0, $41 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $43 = 0, $434 = 0, $435 = 0, $439 = 0, $44 = 0, $440 = 0, $45 = 0, $46 = 0, $460 = 0, $465 = 0, $47 = 0, $48 = 0, $483 = 0, $484 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $5 = 0, $50 = 0, $51 = 0, $514 = 0, $52 = 0, $528 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800 | 0;
 $$byval_copy1 = sp + 780 | 0;
 $4 = sp + 776 | 0;
 $5 = sp + 772 | 0;
 $6 = sp + 768 | 0;
 $7 = sp + 764 | 0;
 $8 = sp + 760 | 0;
 $9 = sp + 756 | 0;
 $10 = sp + 752 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 748 | 0;
 $13 = sp + 744 | 0;
 $14 = sp + 790 | 0;
 $15 = sp + 740 | 0;
 $16 = sp + 736 | 0;
 $17 = sp + 732 | 0;
 $18 = sp + 728 | 0;
 $19 = sp + 724 | 0;
 $20 = sp + 720 | 0;
 $21 = sp + 716 | 0;
 $22 = sp + 712 | 0;
 $23 = sp + 708 | 0;
 $24 = sp + 704 | 0;
 $25 = sp + 700 | 0;
 $26 = sp + 696 | 0;
 $27 = sp + 692 | 0;
 $28 = sp + 688 | 0;
 $29 = sp + 684 | 0;
 $30 = sp + 680 | 0;
 $31 = sp + 676 | 0;
 $32 = sp + 672 | 0;
 $33 = sp + 668 | 0;
 $34 = sp + 664 | 0;
 $35 = sp + 660 | 0;
 $36 = sp + 656 | 0;
 $37 = sp + 652 | 0;
 $38 = sp + 648 | 0;
 $39 = sp + 644 | 0;
 $40 = sp + 640 | 0;
 $41 = sp + 636 | 0;
 $42 = sp + 632 | 0;
 $43 = sp + 628 | 0;
 $44 = sp + 624 | 0;
 $45 = sp + 16 | 0;
 $46 = sp + 620 | 0;
 $47 = sp + 616 | 0;
 $48 = sp + 612 | 0;
 $49 = sp + 608 | 0;
 $50 = sp + 604 | 0;
 $51 = sp + 600 | 0;
 $52 = sp + 596 | 0;
 $53 = sp + 592 | 0;
 $54 = sp + 588 | 0;
 $55 = sp + 584 | 0;
 $56 = sp + 580 | 0;
 $57 = sp + 576 | 0;
 $58 = sp + 572 | 0;
 $59 = sp + 568 | 0;
 $60 = sp + 564 | 0;
 $61 = sp + 560 | 0;
 $62 = sp + 556 | 0;
 $63 = sp + 552 | 0;
 $64 = sp + 548 | 0;
 $65 = sp + 544 | 0;
 $66 = sp + 540 | 0;
 $67 = sp + 536 | 0;
 $68 = sp + 532 | 0;
 $69 = sp + 528 | 0;
 $70 = sp + 524 | 0;
 $71 = sp + 520 | 0;
 $72 = sp + 516 | 0;
 $73 = sp + 512 | 0;
 $74 = sp + 508 | 0;
 $75 = sp + 504 | 0;
 $76 = sp + 496 | 0;
 $77 = sp + 488 | 0;
 $78 = sp + 484 | 0;
 $79 = sp + 480 | 0;
 $80 = sp + 476 | 0;
 $81 = sp + 472 | 0;
 $82 = sp + 468 | 0;
 $83 = sp + 464 | 0;
 $84 = sp + 460 | 0;
 $85 = sp + 456 | 0;
 $86 = sp + 452 | 0;
 $87 = sp + 448 | 0;
 $88 = sp + 8 | 0;
 $89 = sp + 444 | 0;
 $90 = sp + 440 | 0;
 $91 = sp + 789 | 0;
 $92 = sp + 436 | 0;
 $93 = sp + 432 | 0;
 $94 = sp + 428 | 0;
 $95 = sp + 424 | 0;
 $96 = sp + 420 | 0;
 $97 = sp + 416 | 0;
 $98 = sp + 412 | 0;
 $99 = sp + 408 | 0;
 $100 = sp + 404 | 0;
 $101 = sp + 400 | 0;
 $102 = sp + 396 | 0;
 $103 = sp + 392 | 0;
 $104 = sp + 388 | 0;
 $105 = sp + 384 | 0;
 $106 = sp + 380 | 0;
 $107 = sp + 376 | 0;
 $108 = sp + 372 | 0;
 $109 = sp + 368 | 0;
 $110 = sp + 364 | 0;
 $111 = sp + 360 | 0;
 $112 = sp + 356 | 0;
 $113 = sp + 352 | 0;
 $114 = sp + 348 | 0;
 $115 = sp + 344 | 0;
 $116 = sp + 340 | 0;
 $117 = sp + 336 | 0;
 $118 = sp + 332 | 0;
 $119 = sp + 328 | 0;
 $120 = sp + 324 | 0;
 $121 = sp + 320 | 0;
 $122 = sp;
 $123 = sp + 316 | 0;
 $124 = sp + 312 | 0;
 $125 = sp + 308 | 0;
 $126 = sp + 304 | 0;
 $127 = sp + 300 | 0;
 $128 = sp + 296 | 0;
 $129 = sp + 292 | 0;
 $130 = sp + 288 | 0;
 $131 = sp + 284 | 0;
 $132 = sp + 280 | 0;
 $133 = sp + 276 | 0;
 $134 = sp + 272 | 0;
 $135 = sp + 268 | 0;
 $136 = sp + 264 | 0;
 $137 = sp + 260 | 0;
 $138 = sp + 256 | 0;
 $139 = sp + 252 | 0;
 $140 = sp + 248 | 0;
 $141 = sp + 244 | 0;
 $142 = sp + 240 | 0;
 $143 = sp + 236 | 0;
 $144 = sp + 232 | 0;
 $145 = sp + 228 | 0;
 $146 = sp + 224 | 0;
 $147 = sp + 220 | 0;
 $148 = sp + 216 | 0;
 $149 = sp + 212 | 0;
 $150 = sp + 208 | 0;
 $151 = sp + 204 | 0;
 $152 = sp + 200 | 0;
 $153 = sp + 192 | 0;
 $154 = sp + 184 | 0;
 $155 = sp + 180 | 0;
 $156 = sp + 176 | 0;
 $157 = sp + 172 | 0;
 $158 = sp + 168 | 0;
 $159 = sp + 164 | 0;
 $160 = sp + 160 | 0;
 $161 = sp + 156 | 0;
 $162 = sp + 152 | 0;
 $163 = sp + 148 | 0;
 $164 = sp + 144 | 0;
 $165 = sp + 140 | 0;
 $166 = sp + 136 | 0;
 $167 = sp + 132 | 0;
 $168 = sp + 128 | 0;
 $169 = sp + 124 | 0;
 $170 = sp + 120 | 0;
 $171 = sp + 116 | 0;
 $172 = sp + 112 | 0;
 $173 = sp + 788 | 0;
 $174 = sp + 108 | 0;
 $175 = sp + 104 | 0;
 $176 = sp + 100 | 0;
 $177 = sp + 96 | 0;
 $178 = sp + 92 | 0;
 $179 = sp + 787 | 0;
 $180 = sp + 88 | 0;
 $181 = sp + 84 | 0;
 $182 = sp + 80 | 0;
 $183 = sp + 72 | 0;
 $184 = sp + 68 | 0;
 $185 = sp + 64 | 0;
 $186 = sp + 786 | 0;
 $187 = sp + 60 | 0;
 $188 = sp + 56 | 0;
 $189 = sp + 48 | 0;
 $190 = sp + 40 | 0;
 $191 = sp + 36 | 0;
 $192 = sp + 785 | 0;
 $193 = sp + 32 | 0;
 $194 = sp + 784 | 0;
 $195 = sp + 28 | 0;
 HEAP32[$172 >> 2] = $1;
 HEAP8[$173 >> 0] = $2;
 HEAP32[$174 >> 2] = $3;
 $196 = HEAP32[$172 >> 2] | 0;
 HEAP32[$176 >> 2] = __ZN3zim8FileImpl23getNamespaceBeginOffsetEc($196, HEAP8[$173 >> 0] | 0) | 0;
 HEAP32[$175 >> 2] = __ZNK12REAL_TYPEDEFIjEcvjEv($176) | 0;
 HEAP32[$178 >> 2] = __ZN3zim8FileImpl21getNamespaceEndOffsetEc($196, HEAP8[$173 >> 0] | 0) | 0;
 HEAP32[$177 >> 2] = __ZNK12REAL_TYPEDEFIjEcvjEv($178) | 0;
 if ((HEAP32[$175 >> 2] | 0) == (HEAP32[$177 >> 2] | 0)) {
  HEAP8[$179 >> 0] = 0;
  __ZN3zim15article_index_tC2Ej($180, 0);
  HEAP32[$169 >> 2] = $0;
  HEAP32[$170 >> 2] = $179;
  HEAP32[$171 >> 2] = $180;
  $206 = HEAP32[$169 >> 2] | 0;
  HEAP32[$168 >> 2] = HEAP32[$170 >> 2];
  HEAP8[$206 >> 0] = HEAP8[HEAP32[$168 >> 2] >> 0] & 1;
  HEAP32[$167 >> 2] = HEAP32[$171 >> 2];
  HEAP32[$206 + 4 >> 2] = HEAP32[HEAP32[$167 >> 2] >> 2];
  STACKTOP = sp;
  return;
 }
 HEAP32[$181 >> 2] = 0;
 while (1) {
  if (((HEAP32[$177 >> 2] | 0) - (HEAP32[$175 >> 2] | 0) | 0) >>> 0 <= 1) break;
  HEAP32[$181 >> 2] = (HEAP32[$181 >> 2] | 0) + 1;
  HEAP32[$182 >> 2] = (HEAP32[$175 >> 2] | 0) + ((((HEAP32[$177 >> 2] | 0) - (HEAP32[$175 >> 2] | 0) | 0) >>> 0) / 2 | 0);
  __ZN3zim15article_index_tC2Ej($184, HEAP32[$182 >> 2] | 0);
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$184 >> 2];
  __ZN3zim8FileImpl9getDirentENS_15article_index_tE($183, $196, $$byval_copy1);
  $229 = HEAP8[$173 >> 0] | 0;
  HEAP32[$166 >> 2] = $183;
  if (($229 | 0) < ((__ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$166 >> 2] >> 2] | 0) | 0) << 24 >> 24 | 0)) $367 = -1; else {
   $236 = HEAP8[$173 >> 0] | 0;
   HEAP32[$160 >> 2] = $183;
   if (($236 | 0) > ((__ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$160 >> 2] >> 2] | 0) | 0) << 24 >> 24 | 0)) $367 = 1; else {
    $242 = HEAP32[$174 >> 2] | 0;
    HEAP32[$159 >> 2] = $183;
    $245 = __ZNK3zim6Dirent6getUrlEv(HEAP32[HEAP32[$159 >> 2] >> 2] | 0) | 0;
    HEAP32[$151 >> 2] = $242;
    HEAP32[$152 >> 2] = $245;
    $246 = HEAP32[$151 >> 2] | 0;
    HEAP32[$150 >> 2] = HEAP32[$152 >> 2];
    $248 = HEAP32[$150 >> 2] | 0;
    HEAP32[$149 >> 2] = $248;
    HEAP32[$148 >> 2] = HEAP32[$149 >> 2];
    $250 = HEAP32[$148 >> 2] | 0;
    HEAP32[$147 >> 2] = $250;
    HEAP32[$146 >> 2] = HEAP32[$147 >> 2];
    HEAP32[$145 >> 2] = HEAP32[$146 >> 2];
    if (HEAPU8[(HEAP32[$145 >> 2] | 0) + 11 >> 0] & 128 | 0) {
     HEAP32[$139 >> 2] = $250;
     HEAP32[$138 >> 2] = HEAP32[$139 >> 2];
     HEAP32[$137 >> 2] = HEAP32[$138 >> 2];
     $268 = HEAP32[HEAP32[$137 >> 2] >> 2] | 0;
    } else {
     HEAP32[$144 >> 2] = $250;
     HEAP32[$143 >> 2] = HEAP32[$144 >> 2];
     HEAP32[$142 >> 2] = HEAP32[$143 >> 2];
     HEAP32[$141 >> 2] = HEAP32[$142 >> 2];
     HEAP32[$140 >> 2] = HEAP32[$141 >> 2];
     $268 = HEAP32[$140 >> 2] | 0;
    }
    HEAP32[$136 >> 2] = $268;
    $269 = HEAP32[$136 >> 2] | 0;
    HEAP32[$132 >> 2] = $248;
    $270 = HEAP32[$132 >> 2] | 0;
    HEAP32[$131 >> 2] = $270;
    HEAP32[$130 >> 2] = HEAP32[$131 >> 2];
    HEAP32[$129 >> 2] = HEAP32[$130 >> 2];
    if (HEAPU8[(HEAP32[$129 >> 2] | 0) + 11 >> 0] & 128 | 0) {
     HEAP32[$125 >> 2] = $270;
     HEAP32[$124 >> 2] = HEAP32[$125 >> 2];
     HEAP32[$123 >> 2] = HEAP32[$124 >> 2];
     $290 = HEAP32[(HEAP32[$123 >> 2] | 0) + 4 >> 2] | 0;
    } else {
     HEAP32[$128 >> 2] = $270;
     HEAP32[$127 >> 2] = HEAP32[$128 >> 2];
     HEAP32[$126 >> 2] = HEAP32[$127 >> 2];
     $290 = HEAPU8[(HEAP32[$126 >> 2] | 0) + 11 >> 0] | 0;
    }
    HEAP32[$133 >> 2] = $153;
    HEAP32[$134 >> 2] = $269;
    HEAP32[$135 >> 2] = $290;
    $291 = HEAP32[$133 >> 2] | 0;
    HEAP32[$291 >> 2] = HEAP32[$134 >> 2];
    HEAP32[$291 + 4 >> 2] = HEAP32[$135 >> 2];
    HEAP8[$122 >> 0] = HEAP8[$153 >> 0] | 0;
    HEAP8[$122 + 1 >> 0] = HEAP8[$153 + 1 >> 0] | 0;
    HEAP8[$122 + 2 >> 0] = HEAP8[$153 + 2 >> 0] | 0;
    HEAP8[$122 + 3 >> 0] = HEAP8[$153 + 3 >> 0] | 0;
    HEAP8[$122 + 4 >> 0] = HEAP8[$153 + 4 >> 0] | 0;
    HEAP8[$122 + 5 >> 0] = HEAP8[$153 + 5 >> 0] | 0;
    HEAP8[$122 + 6 >> 0] = HEAP8[$153 + 6 >> 0] | 0;
    HEAP8[$122 + 7 >> 0] = HEAP8[$153 + 7 >> 0] | 0;
    HEAP32[$118 >> 2] = $246;
    $295 = HEAP32[$118 >> 2] | 0;
    HEAP32[$116 >> 2] = $295;
    $296 = HEAP32[$116 >> 2] | 0;
    HEAP32[$115 >> 2] = $296;
    HEAP32[$114 >> 2] = HEAP32[$115 >> 2];
    HEAP32[$113 >> 2] = HEAP32[$114 >> 2];
    if (HEAPU8[(HEAP32[$113 >> 2] | 0) + 11 >> 0] & 128 | 0) {
     HEAP32[$109 >> 2] = $296;
     HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
     HEAP32[$107 >> 2] = HEAP32[$108 >> 2];
     $316 = HEAP32[(HEAP32[$107 >> 2] | 0) + 4 >> 2] | 0;
    } else {
     HEAP32[$112 >> 2] = $296;
     HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
     HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
     $316 = HEAPU8[(HEAP32[$110 >> 2] | 0) + 11 >> 0] | 0;
    }
    HEAP32[$119 >> 2] = $316;
    HEAP32[$106 >> 2] = $122;
    HEAP32[$120 >> 2] = HEAP32[(HEAP32[$106 >> 2] | 0) + 4 >> 2];
    HEAP32[$105 >> 2] = $295;
    HEAP32[$104 >> 2] = HEAP32[$105 >> 2];
    $321 = HEAP32[$104 >> 2] | 0;
    HEAP32[$103 >> 2] = $321;
    HEAP32[$102 >> 2] = HEAP32[$103 >> 2];
    HEAP32[$101 >> 2] = HEAP32[$102 >> 2];
    if (HEAPU8[(HEAP32[$101 >> 2] | 0) + 11 >> 0] & 128 | 0) {
     HEAP32[$95 >> 2] = $321;
     HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
     HEAP32[$93 >> 2] = HEAP32[$94 >> 2];
     $339 = HEAP32[HEAP32[$93 >> 2] >> 2] | 0;
    } else {
     HEAP32[$100 >> 2] = $321;
     HEAP32[$99 >> 2] = HEAP32[$100 >> 2];
     HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
     HEAP32[$97 >> 2] = HEAP32[$98 >> 2];
     HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
     $339 = HEAP32[$96 >> 2] | 0;
    }
    HEAP32[$92 >> 2] = $339;
    $340 = HEAP32[$92 >> 2] | 0;
    HEAP32[$82 >> 2] = $122;
    $342 = HEAP32[HEAP32[$82 >> 2] >> 2] | 0;
    HEAP32[$89 >> 2] = $119;
    HEAP32[$90 >> 2] = $120;
    $343 = HEAP32[$89 >> 2] | 0;
    $344 = HEAP32[$90 >> 2] | 0;
    HEAP8[$88 >> 0] = HEAP8[$91 >> 0] | 0;
    HEAP32[$86 >> 2] = $343;
    HEAP32[$87 >> 2] = $344;
    $345 = HEAP32[$87 >> 2] | 0;
    $346 = HEAP32[$86 >> 2] | 0;
    HEAP32[$83 >> 2] = $88;
    HEAP32[$84 >> 2] = $345;
    HEAP32[$85 >> 2] = $346;
    HEAP32[$121 >> 2] = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($340, $342, HEAP32[((HEAP32[HEAP32[$84 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$85 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$87 >> 2] | 0 : HEAP32[$86 >> 2] | 0) >> 2] | 0) | 0;
    do if (HEAP32[$121 >> 2] | 0) HEAP32[$117 >> 2] = HEAP32[$121 >> 2]; else {
     if ((HEAP32[$119 >> 2] | 0) >>> 0 < (HEAP32[$120 >> 2] | 0) >>> 0) {
      HEAP32[$117 >> 2] = -1;
      break;
     }
     if ((HEAP32[$119 >> 2] | 0) >>> 0 > (HEAP32[$120 >> 2] | 0) >>> 0) {
      HEAP32[$117 >> 2] = 1;
      break;
     } else {
      HEAP32[$117 >> 2] = 0;
      break;
     }
    } while (0);
    $367 = HEAP32[$117 >> 2] | 0;
   }
  }
  HEAP32[$185 >> 2] = $367;
  do if ((HEAP32[$185 >> 2] | 0) < 0) {
   HEAP32[$177 >> 2] = HEAP32[$182 >> 2];
   label = 32;
  } else if ((HEAP32[$185 >> 2] | 0) > 0) {
   HEAP32[$175 >> 2] = HEAP32[$182 >> 2];
   label = 32;
   break;
  } else {
   HEAP8[$186 >> 0] = 1;
   __ZN3zim15article_index_tC2Ej($187, HEAP32[$182 >> 2] | 0);
   HEAP32[$79 >> 2] = $0;
   HEAP32[$80 >> 2] = $186;
   HEAP32[$81 >> 2] = $187;
   $375 = HEAP32[$79 >> 2] | 0;
   HEAP32[$78 >> 2] = HEAP32[$80 >> 2];
   HEAP8[$375 >> 0] = HEAP8[HEAP32[$78 >> 2] >> 0] & 1;
   HEAP32[$77 >> 2] = HEAP32[$81 >> 2];
   HEAP32[$375 + 4 >> 2] = HEAP32[HEAP32[$77 >> 2] >> 2];
   HEAP32[$188 >> 2] = 1;
   break;
  } while (0);
  if ((label | 0) == 32) {
   label = 0;
   HEAP32[$188 >> 2] = 0;
  }
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($183);
  if ((HEAP32[$188 >> 2] | 0) >>> 0 >= 1) {
   label = 58;
   break;
  }
 }
 if ((label | 0) == 58) {
  STACKTOP = sp;
  return;
 }
 __ZN3zim15article_index_tC2Ej($190, HEAP32[$175 >> 2] | 0);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$190 >> 2];
 __ZN3zim8FileImpl9getDirentENS_15article_index_tE($189, $196, $$byval_copy1);
 $386 = HEAP32[$174 >> 2] | 0;
 HEAP32[$4 >> 2] = $189;
 $389 = __ZNK3zim6Dirent6getUrlEv(HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
 HEAP32[$74 >> 2] = $386;
 HEAP32[$75 >> 2] = $389;
 $390 = HEAP32[$74 >> 2] | 0;
 HEAP32[$73 >> 2] = HEAP32[$75 >> 2];
 $392 = HEAP32[$73 >> 2] | 0;
 HEAP32[$72 >> 2] = $392;
 HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
 $394 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = $394;
 HEAP32[$69 >> 2] = HEAP32[$70 >> 2];
 HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
 if (HEAPU8[(HEAP32[$68 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$62 >> 2] = $394;
  HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
  $412 = HEAP32[HEAP32[$60 >> 2] >> 2] | 0;
 } else {
  HEAP32[$67 >> 2] = $394;
  HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
  HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
  HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
  $412 = HEAP32[$63 >> 2] | 0;
 }
 HEAP32[$59 >> 2] = $412;
 $413 = HEAP32[$59 >> 2] | 0;
 HEAP32[$55 >> 2] = $392;
 $414 = HEAP32[$55 >> 2] | 0;
 HEAP32[$54 >> 2] = $414;
 HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$52 >> 2] = HEAP32[$53 >> 2];
 if (HEAPU8[(HEAP32[$52 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$48 >> 2] = $414;
  HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
  $434 = HEAP32[(HEAP32[$46 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$51 >> 2] = $414;
  HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
  $434 = HEAPU8[(HEAP32[$49 >> 2] | 0) + 11 >> 0] | 0;
 }
 HEAP32[$56 >> 2] = $76;
 HEAP32[$57 >> 2] = $413;
 HEAP32[$58 >> 2] = $434;
 $435 = HEAP32[$56 >> 2] | 0;
 HEAP32[$435 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$435 + 4 >> 2] = HEAP32[$58 >> 2];
 HEAP8[$45 >> 0] = HEAP8[$76 >> 0] | 0;
 HEAP8[$45 + 1 >> 0] = HEAP8[$76 + 1 >> 0] | 0;
 HEAP8[$45 + 2 >> 0] = HEAP8[$76 + 2 >> 0] | 0;
 HEAP8[$45 + 3 >> 0] = HEAP8[$76 + 3 >> 0] | 0;
 HEAP8[$45 + 4 >> 0] = HEAP8[$76 + 4 >> 0] | 0;
 HEAP8[$45 + 5 >> 0] = HEAP8[$76 + 5 >> 0] | 0;
 HEAP8[$45 + 6 >> 0] = HEAP8[$76 + 6 >> 0] | 0;
 HEAP8[$45 + 7 >> 0] = HEAP8[$76 + 7 >> 0] | 0;
 HEAP32[$41 >> 2] = $390;
 $439 = HEAP32[$41 >> 2] | 0;
 HEAP32[$39 >> 2] = $439;
 $440 = HEAP32[$39 >> 2] | 0;
 HEAP32[$38 >> 2] = $440;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
 if (HEAPU8[(HEAP32[$36 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$32 >> 2] = $440;
  HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
  $460 = HEAP32[(HEAP32[$30 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$35 >> 2] = $440;
  HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  $460 = HEAPU8[(HEAP32[$33 >> 2] | 0) + 11 >> 0] | 0;
 }
 HEAP32[$42 >> 2] = $460;
 HEAP32[$29 >> 2] = $45;
 HEAP32[$43 >> 2] = HEAP32[(HEAP32[$29 >> 2] | 0) + 4 >> 2];
 HEAP32[$28 >> 2] = $439;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 $465 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = $465;
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 if (HEAPU8[(HEAP32[$24 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$18 >> 2] = $465;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  $483 = HEAP32[HEAP32[$16 >> 2] >> 2] | 0;
 } else {
  HEAP32[$23 >> 2] = $465;
  HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
  $483 = HEAP32[$19 >> 2] | 0;
 }
 HEAP32[$15 >> 2] = $483;
 $484 = HEAP32[$15 >> 2] | 0;
 HEAP32[$5 >> 2] = $45;
 $486 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
 HEAP32[$12 >> 2] = $42;
 HEAP32[$13 >> 2] = $43;
 $487 = HEAP32[$12 >> 2] | 0;
 $488 = HEAP32[$13 >> 2] | 0;
 HEAP8[$11 >> 0] = HEAP8[$14 >> 0] | 0;
 HEAP32[$9 >> 2] = $487;
 HEAP32[$10 >> 2] = $488;
 $489 = HEAP32[$10 >> 2] | 0;
 $490 = HEAP32[$9 >> 2] | 0;
 HEAP32[$6 >> 2] = $11;
 HEAP32[$7 >> 2] = $489;
 HEAP32[$8 >> 2] = $490;
 HEAP32[$44 >> 2] = __ZNSt3__211char_traitsIcE7compareEPKcS3_m($484, $486, HEAP32[((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$8 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$10 >> 2] | 0 : HEAP32[$9 >> 2] | 0) >> 2] | 0) | 0;
 do if (HEAP32[$44 >> 2] | 0) HEAP32[$40 >> 2] = HEAP32[$44 >> 2]; else {
  if ((HEAP32[$42 >> 2] | 0) >>> 0 < (HEAP32[$43 >> 2] | 0) >>> 0) {
   HEAP32[$40 >> 2] = -1;
   break;
  }
  if ((HEAP32[$42 >> 2] | 0) >>> 0 > (HEAP32[$43 >> 2] | 0) >>> 0) {
   HEAP32[$40 >> 2] = 1;
   break;
  } else {
   HEAP32[$40 >> 2] = 0;
   break;
  }
 } while (0);
 HEAP32[$191 >> 2] = HEAP32[$40 >> 2];
 if (!(HEAP32[$191 >> 2] | 0)) {
  HEAP8[$192 >> 0] = 1;
  __ZN3zim15article_index_tC2Ej($193, HEAP32[$175 >> 2] | 0);
  HEAP32[$156 >> 2] = $0;
  HEAP32[$157 >> 2] = $192;
  HEAP32[$158 >> 2] = $193;
  $514 = HEAP32[$156 >> 2] | 0;
  HEAP32[$155 >> 2] = HEAP32[$157 >> 2];
  HEAP8[$514 >> 0] = HEAP8[HEAP32[$155 >> 2] >> 0] & 1;
  HEAP32[$154 >> 2] = HEAP32[$158 >> 2];
  HEAP32[$514 + 4 >> 2] = HEAP32[HEAP32[$154 >> 2] >> 2];
  HEAP32[$188 >> 2] = 1;
 } else {
  HEAP8[$194 >> 0] = 0;
  __ZN3zim15article_index_tC2Ej($195, (HEAP32[$191 >> 2] | 0) < 0 ? HEAP32[$175 >> 2] | 0 : HEAP32[$177 >> 2] | 0);
  HEAP32[$163 >> 2] = $0;
  HEAP32[$164 >> 2] = $194;
  HEAP32[$165 >> 2] = $195;
  $528 = HEAP32[$163 >> 2] | 0;
  HEAP32[$162 >> 2] = HEAP32[$164 >> 2];
  HEAP8[$528 >> 0] = HEAP8[HEAP32[$162 >> 2] >> 0] & 1;
  HEAP32[$161 >> 2] = HEAP32[$165 >> 2];
  HEAP32[$528 + 4 >> 2] = HEAP32[HEAP32[$161 >> 2] >> 2];
  HEAP32[$188 >> 2] = 1;
 }
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($189);
 STACKTOP = sp;
 return;
}

function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0266$lcssa = 0, $$0266409 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph$ph = 0, $$0280$ph = 0, $$0280$ph$ph = 0, $$0285419 = 0, $$0288411 = 0, $$0290416 = 0, $$0294 = 0, $$0295 = 0, $$0308414 = 0, $$10 = 0, $$10318 = 0, $$11 = 0, $$12 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1281 = 0, $$1286 = 0, $$1291 = 0, $$1309 = 0, $$2 = 0, $$2275 = 0, $$2278$ph = 0, $$2282 = 0, $$2282$ph = 0, $$2287 = 0, $$2292 = 0, $$2310$ph = 0, $$3$lcssa = 0, $$3283 = 0, $$3293 = 0, $$3408 = 0, $$4 = 0, $$4284 = 0, $$5 = 0, $$5313 = 0, $$6 = 0, $$6302 = 0, $$6314 = 0, $$7 = 0, $$7315 = 0, $$8 = 0, $$8316 = 0, $$9 = 0, $$9317 = 0, $$ph$ph = 0, $$pre$phi493Z2D = 0, $$pre$phiZ2D = 0, $$sroa$2$0$$sroa_idx13 = 0, $102 = 0, $103 = 0, $108 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $118 = 0, $121 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $141 = 0, $147 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $165 = 0, $17 = 0, $170 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $18 = 0, $183 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $199 = 0, $20 = 0, $207 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $233 = 0, $242 = 0, $245 = 0, $25 = 0, $253 = 0, $260 = 0, $268 = 0, $275 = 0, $280 = 0, $281 = 0, $288 = 0, $298 = 0.0, $3 = 0, $30 = 0, $318 = 0, $319 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $37 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $66 = 0, $92 = 0, $93 = 0, $spec$select = 0, $spec$select319 = 0, $trunc = 0, label = 0, sp = 0, $$2282$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $3 = sp + 264 | 0;
 $4 = sp;
 $5 = sp + 260 | 0;
 $6 = sp + 272 | 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $319 = ___lockfile($0) | 0; else $319 = 0;
 $11 = HEAP8[$1 >> 0] | 0;
 L4 : do if (!($11 << 24 >> 24)) $$3293 = 0; else {
  $13 = $0 + 4 | 0;
  $14 = $0 + 100 | 0;
  $15 = $0 + 108 | 0;
  $16 = $0 + 8 | 0;
  $17 = $4 + 10 | 0;
  $18 = $4 + 33 | 0;
  $19 = $4 + 46 | 0;
  $20 = $4 + 94 | 0;
  $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0;
  $$0273420 = $1;
  $$0285419 = 0;
  $$0290416 = 0;
  $$0308414 = 0;
  $22 = $11;
  $321 = 0;
  L6 : while (1) {
   L8 : do if (!(_isspace($22 & 255) | 0)) {
    $52 = (HEAP8[$$0273420 >> 0] | 0) == 37;
    L10 : do if ($52) {
     $53 = $$0273420 + 1 | 0;
     $54 = HEAP8[$53 >> 0] | 0;
     L12 : do switch ($54 << 24 >> 24) {
     case 37:
      {
       break L10;
       break;
      }
     case 42:
      {
       $$0295 = 0;
       $$2275 = $$0273420 + 2 | 0;
       break;
      }
     default:
      {
       if (_isdigit($54 & 255) | 0) if ((HEAP8[$$0273420 + 2 >> 0] | 0) == 36) {
        $$0295 = _arg_n($2, (HEAPU8[$53 >> 0] | 0) + -48 | 0) | 0;
        $$2275 = $$0273420 + 3 | 0;
        break L12;
       }
       $92 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
       $93 = HEAP32[$92 >> 2] | 0;
       HEAP32[$2 >> 2] = $92 + 4;
       $$0295 = $93;
       $$2275 = $53;
      }
     } while (0);
     if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
      $$0266$lcssa = 0;
      $$3$lcssa = $$2275;
     } else {
      $$0266409 = 0;
      $$3408 = $$2275;
      while (1) {
       $102 = ($$0266409 * 10 | 0) + -48 + (HEAPU8[$$3408 >> 0] | 0) | 0;
       $103 = $$3408 + 1 | 0;
       if (!(_isdigit(HEAPU8[$103 >> 0] | 0) | 0)) {
        $$0266$lcssa = $102;
        $$3$lcssa = $103;
        break;
       } else {
        $$0266409 = $102;
        $$3408 = $103;
       }
      }
     }
     $108 = HEAP8[$$3$lcssa >> 0] | 0;
     $110 = $$3$lcssa + 1 | 0;
     if ($108 << 24 >> 24 == 109) {
      $$0270 = ($$0295 | 0) != 0 & 1;
      $$1309 = 0;
      $$4 = $110;
      $$pre$phiZ2D = $$3$lcssa + 2 | 0;
      $113 = HEAP8[$110 >> 0] | 0;
      $324 = 0;
     } else {
      $$0270 = 0;
      $$1309 = $$0308414;
      $$4 = $$3$lcssa;
      $$pre$phiZ2D = $110;
      $113 = $108;
      $324 = $321;
     }
     switch ($113 << 24 >> 24) {
     case 104:
      {
       $115 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 104;
       $$0268 = $115 ? -2 : -1;
       $$5 = $115 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 108:
      {
       $118 = (HEAP8[$$pre$phiZ2D >> 0] | 0) == 108;
       $$0268 = $118 ? 3 : 1;
       $$5 = $118 ? $$4 + 2 | 0 : $$pre$phiZ2D;
       break;
      }
     case 106:
      {
       $$0268 = 3;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 116:
     case 122:
      {
       $$0268 = 1;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 76:
      {
       $$0268 = 2;
       $$5 = $$pre$phiZ2D;
       break;
      }
     case 110:
     case 112:
     case 67:
     case 83:
     case 91:
     case 99:
     case 115:
     case 88:
     case 71:
     case 70:
     case 69:
     case 65:
     case 103:
     case 102:
     case 101:
     case 97:
     case 120:
     case 117:
     case 111:
     case 105:
     case 100:
      {
       $$0268 = 0;
       $$5 = $$4;
       break;
      }
     default:
      {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
     }
     $121 = HEAPU8[$$5 >> 0] | 0;
     $123 = ($121 & 47 | 0) == 3;
     $spec$select = $123 ? $121 | 32 : $121;
     $spec$select319 = $123 ? 1 : $$0268;
     $trunc = $spec$select & 255;
     switch ($trunc << 24 >> 24) {
     case 99:
      {
       $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1;
       $$1286 = $$0285419;
       break;
      }
     case 91:
      {
       $$1267 = $$0266$lcssa;
       $$1286 = $$0285419;
       break;
      }
     case 110:
      {
       _store_int($$0295, $spec$select319, $$0285419, (($$0285419 | 0) < 0) << 31 >> 31);
       $$12 = $$5;
       $$1291 = $$0290416;
       $$2287 = $$0285419;
       $$7315 = $$1309;
       $322 = $324;
       break L8;
       break;
      }
     default:
      {
       ___shlim($0, 0);
       do {
        $128 = HEAP32[$13 >> 2] | 0;
        if ($128 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
         HEAP32[$13 >> 2] = $128 + 1;
         $135 = HEAPU8[$128 >> 0] | 0;
        } else $135 = ___shgetc($0) | 0;
       } while ((_isspace($135) | 0) != 0);
       if (!(HEAP32[$14 >> 2] | 0)) $147 = HEAP32[$13 >> 2] | 0; else {
        $141 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $141;
        $147 = $141;
       }
       $$1267 = $$0266$lcssa;
       $$1286 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $147 - (HEAP32[$16 >> 2] | 0) | 0;
      }
     }
     ___shlim($0, $$1267);
     $149 = HEAP32[$13 >> 2] | 0;
     $150 = HEAP32[$14 >> 2] | 0;
     if ($149 >>> 0 < $150 >>> 0) {
      HEAP32[$13 >> 2] = $149 + 1;
      $155 = $150;
     } else {
      if ((___shgetc($0) | 0) < 0) {
       $$8316 = $$1309;
       $325 = $324;
       label = 143;
       break L6;
      }
      $155 = HEAP32[$14 >> 2] | 0;
     }
     if ($155 | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
     L59 : do switch ($trunc << 24 >> 24) {
     case 91:
     case 99:
     case 115:
      {
       $159 = ($spec$select | 0) == 99;
       L61 : do if (($spec$select | 16 | 0) == 115) {
        _memset($4 | 0, -1, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        if (($spec$select | 0) == 115) {
         HEAP8[$18 >> 0] = 0;
         HEAP16[$17 >> 1] = 0;
         HEAP16[$17 + 2 >> 1] = 0;
         HEAP8[$17 + 4 >> 0] = 0;
         $$10 = $$5;
        } else $$10 = $$5;
       } else {
        $163 = $$5 + 1 | 0;
        $165 = (HEAP8[$163 >> 0] | 0) == 94;
        $$0294 = $165 & 1;
        $$6 = $165 ? $$5 + 2 | 0 : $163;
        _memset($4 | 0, $$0294 | 0, 257) | 0;
        HEAP8[$4 >> 0] = 0;
        switch (HEAP8[$$6 >> 0] | 0) {
        case 45:
         {
          $170 = ($$0294 ^ 1) & 255;
          HEAP8[$19 >> 0] = $170;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $170;
          break;
         }
        case 93:
         {
          $173 = ($$0294 ^ 1) & 255;
          HEAP8[$20 >> 0] = $173;
          $$7 = $$6 + 1 | 0;
          $$pre$phi493Z2D = $173;
          break;
         }
        default:
         {
          $$7 = $$6;
          $$pre$phi493Z2D = ($$0294 ^ 1) & 255;
         }
        }
        $$8 = $$7;
        while (1) {
         $174 = HEAP8[$$8 >> 0] | 0;
         L72 : do switch ($174 << 24 >> 24) {
         case 0:
          {
           $$8316 = $$1309;
           $325 = $324;
           label = 143;
           break L6;
           break;
          }
         case 93:
          {
           $$10 = $$8;
           break L61;
           break;
          }
         case 45:
          {
           $175 = $$8 + 1 | 0;
           $176 = HEAP8[$175 >> 0] | 0;
           switch ($176 << 24 >> 24) {
           case 93:
           case 0:
            {
             $$9 = $$8;
             $187 = 45;
             break L72;
             break;
            }
           default:
            {}
           }
           $178 = HEAP8[$$8 + -1 >> 0] | 0;
           if (($178 & 255) < ($176 & 255)) {
            $$0288411 = $178 & 255;
            do {
             $$0288411 = $$0288411 + 1 | 0;
             HEAP8[$4 + $$0288411 >> 0] = $$pre$phi493Z2D;
             $183 = HEAP8[$175 >> 0] | 0;
            } while ($$0288411 >>> 0 < ($183 & 255) >>> 0);
            $$9 = $175;
            $187 = $183;
           } else {
            $$9 = $175;
            $187 = $176;
           }
           break;
          }
         default:
          {
           $$9 = $$8;
           $187 = $174;
          }
         } while (0);
         HEAP8[$4 + (($187 & 255) + 1) >> 0] = $$pre$phi493Z2D;
         $$8 = $$9 + 1 | 0;
        }
       } while (0);
       $192 = $159 ? $$1267 + 1 | 0 : 31;
       $193 = ($spec$select319 | 0) == 1;
       $194 = ($$0270 | 0) != 0;
       L80 : do if ($193) {
        if ($194) {
         $196 = _malloc($192 << 2) | 0;
         if (!$196) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         } else $327 = $196;
        } else $327 = $$0295;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0;
        $$0276$ph$ph = $192;
        $$0280$ph$ph = 0;
        $$ph$ph = $327;
        L85 : while (1) {
         $198 = ($$ph$ph | 0) == 0;
         $$0280$ph = $$0280$ph$ph;
         while (1) {
          L89 : while (1) {
           $199 = HEAP32[$13 >> 2] | 0;
           if ($199 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $199 + 1;
            $207 = HEAPU8[$199 >> 0] | 0;
           } else $207 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($207 + 1) >> 0] | 0)) break L85;
           HEAP8[$6 >> 0] = $207;
           switch (_mbrtowc($5, $6, 1, $3) | 0) {
           case -1:
            {
             $$8316 = 0;
             $325 = $$ph$ph;
             label = 143;
             break L6;
             break;
            }
           case -2:
            break;
           default:
            break L89;
           }
          }
          if ($198) $$1281 = $$0280$ph; else {
           HEAP32[$$ph$ph + ($$0280$ph << 2) >> 2] = HEAP32[$5 >> 2];
           $$1281 = $$0280$ph + 1 | 0;
          }
          if ($194 & ($$1281 | 0) == ($$0276$ph$ph | 0)) break; else $$0280$ph = $$1281;
         }
         $$0276$ph$ph = $$0276$ph$ph << 1 | 1;
         $219 = _realloc($$ph$ph, $$0276$ph$ph << 2) | 0;
         if (!$219) {
          $$8316 = 0;
          $325 = $$ph$ph;
          label = 143;
          break L6;
         } else {
          $$0280$ph$ph = $$1281;
          $$ph$ph = $219;
         }
        }
        if (!(_mbsinit($3) | 0)) {
         $$8316 = 0;
         $325 = $$ph$ph;
         label = 143;
         break L6;
        } else {
         $$4284 = $$0280$ph;
         $$5313 = 0;
         $$6302 = $$ph$ph;
         $328 = $$ph$ph;
        }
       } else {
        if ($194) {
         $223 = _malloc($192) | 0;
         if (!$223) {
          $$8316 = 0;
          $325 = 0;
          label = 143;
          break L6;
         }
         $$2278$ph = $192;
         $$2282$ph = 0;
         $$2310$ph = $223;
         while (1) {
          $$2282 = $$2282$ph;
          do {
           $225 = HEAP32[$13 >> 2] | 0;
           if ($225 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $225 + 1;
            $233 = HEAPU8[$225 >> 0] | 0;
           } else $233 = ___shgetc($0) | 0;
           if (!(HEAP8[$4 + ($233 + 1) >> 0] | 0)) {
            $$4284 = $$2282;
            $$5313 = $$2310$ph;
            $$6302 = 0;
            $328 = 0;
            break L80;
           }
           $$2282$looptemp = $$2282;
           $$2282 = $$2282 + 1 | 0;
           HEAP8[$$2310$ph + $$2282$looptemp >> 0] = $233;
          } while (($$2282 | 0) != ($$2278$ph | 0));
          $$2278$ph = $$2278$ph << 1 | 1;
          $242 = _realloc($$2310$ph, $$2278$ph) | 0;
          if (!$242) {
           $$8316 = $$2310$ph;
           $325 = 0;
           label = 143;
           break L6;
          } else {
           $$2282$ph = $$2282;
           $$2310$ph = $242;
          }
         }
        }
        if (!$$0295) while (1) {
         $260 = HEAP32[$13 >> 2] | 0;
         if ($260 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $260 + 1;
          $268 = HEAPU8[$260 >> 0] | 0;
         } else $268 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($268 + 1) >> 0] | 0)) {
          $$4284 = 0;
          $$5313 = 0;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
        }
        $$3283 = 0;
        while (1) {
         $245 = HEAP32[$13 >> 2] | 0;
         if ($245 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
          HEAP32[$13 >> 2] = $245 + 1;
          $253 = HEAPU8[$245 >> 0] | 0;
         } else $253 = ___shgetc($0) | 0;
         if (!(HEAP8[$4 + ($253 + 1) >> 0] | 0)) {
          $$4284 = $$3283;
          $$5313 = $$0295;
          $$6302 = 0;
          $328 = 0;
          break L80;
         }
         HEAP8[$$0295 + $$3283 >> 0] = $253;
         $$3283 = $$3283 + 1 | 0;
        }
       } while (0);
       if (!(HEAP32[$14 >> 2] | 0)) $280 = HEAP32[$13 >> 2] | 0; else {
        $275 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
        HEAP32[$13 >> 2] = $275;
        $280 = $275;
       }
       $281 = $280 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0;
       if (!$281) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       if (!(($281 | 0) == ($$1267 | 0) | $159 ^ 1)) {
        $$10318 = $$5313;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $328;
        break L6;
       }
       do if ($194) if ($193) {
        HEAP32[$$0295 >> 2] = $$6302;
        break;
       } else {
        HEAP32[$$0295 >> 2] = $$5313;
        break;
       } while (0);
       if ($159) {
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       } else {
        if ($$6302 | 0) HEAP32[$$6302 + ($$4284 << 2) >> 2] = 0;
        if (!$$5313) {
         $$11 = $$10;
         $$6314 = 0;
         $326 = $328;
         break L59;
        }
        HEAP8[$$5313 + $$4284 >> 0] = 0;
        $$11 = $$10;
        $$6314 = $$5313;
        $326 = $328;
       }
       break;
      }
     case 120:
     case 88:
     case 112:
      {
       $$0272 = 16;
       label = 131;
       break;
      }
     case 111:
      {
       $$0272 = 8;
       label = 131;
       break;
      }
     case 117:
     case 100:
      {
       $$0272 = 10;
       label = 131;
       break;
      }
     case 105:
      {
       $$0272 = 0;
       label = 131;
       break;
      }
     case 71:
     case 103:
     case 70:
     case 102:
     case 69:
     case 101:
     case 65:
     case 97:
      {
       $298 = +___floatscan($0, $spec$select319, 0);
       if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
        $$10318 = $$1309;
        $$2 = $$0270;
        $$2292 = $$0290416;
        $318 = $324;
        break L6;
       }
       if (!$$0295) {
        $$11 = $$5;
        $$6314 = $$1309;
        $326 = $324;
       } else switch ($spec$select319 | 0) {
       case 0:
        {
         HEAPF32[$$0295 >> 2] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 1:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       case 2:
        {
         HEAPF64[$$0295 >> 3] = $298;
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
         break;
        }
       default:
        {
         $$11 = $$5;
         $$6314 = $$1309;
         $326 = $324;
         break L59;
        }
       }
       break;
      }
     default:
      {
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
      }
     } while (0);
     do if ((label | 0) == 131) {
      label = 0;
      $288 = ___intscan($0, $$0272, 0, -1, -1) | 0;
      if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
       $$10318 = $$1309;
       $$2 = $$0270;
       $$2292 = $$0290416;
       $318 = $324;
       break L6;
      }
      if (($$0295 | 0) != 0 & ($spec$select | 0) == 112) {
       HEAP32[$$0295 >> 2] = $288;
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      } else {
       _store_int($$0295, $spec$select319, $288, tempRet0);
       $$11 = $$5;
       $$6314 = $$1309;
       $326 = $324;
       break;
      }
     } while (0);
     $$12 = $$11;
     $$1291 = $$0290416 + (($$0295 | 0) != 0 & 1) | 0;
     $$2287 = (HEAP32[$15 >> 2] | 0) + $$1286 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0;
     $$7315 = $$6314;
     $322 = $326;
     break L8;
    } while (0);
    $56 = $$0273420 + ($52 & 1) | 0;
    ___shlim($0, 0);
    $57 = HEAP32[$13 >> 2] | 0;
    if ($57 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $57 + 1;
     $66 = HEAPU8[$57 >> 0] | 0;
    } else $66 = ___shgetc($0) | 0;
    if (($66 | 0) != (HEAPU8[$56 >> 0] | 0)) {
     label = 23;
     break L6;
    }
    $$12 = $56;
    $$1291 = $$0290416;
    $$2287 = $$0285419 + 1 | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } else {
    $$1274 = $$0273420;
    while (1) {
     $25 = $$1274 + 1 | 0;
     if (!(_isspace(HEAPU8[$25 >> 0] | 0) | 0)) break; else $$1274 = $25;
    }
    ___shlim($0, 0);
    do {
     $30 = HEAP32[$13 >> 2] | 0;
     if ($30 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
      HEAP32[$13 >> 2] = $30 + 1;
      $37 = HEAPU8[$30 >> 0] | 0;
     } else $37 = ___shgetc($0) | 0;
    } while ((_isspace($37) | 0) != 0);
    if (!(HEAP32[$14 >> 2] | 0)) $49 = HEAP32[$13 >> 2] | 0; else {
     $43 = (HEAP32[$13 >> 2] | 0) + -1 | 0;
     HEAP32[$13 >> 2] = $43;
     $49 = $43;
    }
    $$12 = $$1274;
    $$1291 = $$0290416;
    $$2287 = (HEAP32[$15 >> 2] | 0) + $$0285419 + $49 - (HEAP32[$16 >> 2] | 0) | 0;
    $$7315 = $$0308414;
    $322 = $321;
   } while (0);
   $$0273420 = $$12 + 1 | 0;
   $22 = HEAP8[$$0273420 >> 0] | 0;
   if (!($22 << 24 >> 24)) {
    $$3293 = $$1291;
    break L4;
   } else {
    $$0285419 = $$2287;
    $$0290416 = $$1291;
    $$0308414 = $$7315;
    $321 = $322;
   }
  }
  if ((label | 0) == 23) {
   if (HEAP32[$14 >> 2] | 0) HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1;
   if (($$0290416 | 0) != 0 | ($66 | 0) > -1) {
    $$3293 = $$0290416;
    break;
   } else {
    $$1271 = 0;
    $$9317 = $$0308414;
    $323 = $321;
    label = 144;
   }
  } else if ((label | 0) == 143) if (!$$0290416) {
   $$1271 = $$0270;
   $$9317 = $$8316;
   $323 = $325;
   label = 144;
  } else {
   $$10318 = $$8316;
   $$2 = $$0270;
   $$2292 = $$0290416;
   $318 = $325;
  }
  if ((label | 0) == 144) {
   $$10318 = $$9317;
   $$2 = $$1271;
   $$2292 = -1;
   $318 = $323;
  }
  if (!$$2) $$3293 = $$2292; else {
   _free($$10318);
   _free($318);
   $$3293 = $$2292;
  }
 } while (0);
 if ($319 | 0) ___unlockfile($0);
 STACKTOP = sp;
 return $$3293 | 0;
}

function __ZNSt3__210shared_ptrIKN3zim6DirentEE11make_sharedIJNS_10unique_ptrINS1_6BufferENS_14default_deleteIS7_EEEEEEES4_DpOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $232 = 0, $234 = 0, $24 = 0, $241 = 0, $242 = 0, $246 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $252 = 0, $258 = 0, $259 = 0, $26 = 0, $261 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $29 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $302 = 0, $308 = 0, $31 = 0, $312 = 0, $313 = 0, $315 = 0, $32 = 0, $326 = 0, $327 = 0, $329 = 0, $33 = 0, $330 = 0, $335 = 0, $337 = 0, $34 = 0, $340 = 0, $344 = 0, $35 = 0, $351 = 0, $352 = 0, $357 = 0, $36 = 0, $360 = 0, $364 = 0, $37 = 0, $371 = 0, $372 = 0, $378 = 0, $38 = 0, $380 = 0, $382 = 0, $386 = 0, $39 = 0, $391 = 0, $4 = 0, $40 = 0, $401 = 0, $41 = 0, $410 = 0, $415 = 0, $416 = 0, $418 = 0, $42 = 0, $420 = 0, $422 = 0, $423 = 0, $427 = 0, $43 = 0, $431 = 0, $439 = 0, $44 = 0, $440 = 0, $442 = 0, $444 = 0, $446 = 0, $447 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944 | 0;
 $vararg_buffer = sp + 144 | 0;
 $2 = sp + 916 | 0;
 $3 = sp + 912 | 0;
 $4 = sp + 908 | 0;
 $5 = sp + 904 | 0;
 $6 = sp + 900 | 0;
 $7 = sp + 896 | 0;
 $8 = sp + 892 | 0;
 $9 = sp + 888 | 0;
 $10 = sp + 884 | 0;
 $11 = sp + 880 | 0;
 $12 = sp + 876 | 0;
 $13 = sp + 872 | 0;
 $14 = sp + 868 | 0;
 $15 = sp + 864 | 0;
 $16 = sp + 860 | 0;
 $17 = sp + 856 | 0;
 $18 = sp + 852 | 0;
 $19 = sp + 848 | 0;
 $20 = sp + 844 | 0;
 $21 = sp + 840 | 0;
 $22 = sp + 836 | 0;
 $23 = sp + 832 | 0;
 $24 = sp + 828 | 0;
 $25 = sp + 824 | 0;
 $26 = sp + 820 | 0;
 $27 = sp + 816 | 0;
 $28 = sp + 812 | 0;
 $29 = sp + 808 | 0;
 $30 = sp + 804 | 0;
 $31 = sp + 800 | 0;
 $32 = sp + 796 | 0;
 $33 = sp + 792 | 0;
 $34 = sp + 788 | 0;
 $35 = sp + 784 | 0;
 $36 = sp + 780 | 0;
 $37 = sp + 776 | 0;
 $38 = sp + 772 | 0;
 $39 = sp + 768 | 0;
 $40 = sp + 136 | 0;
 $41 = sp + 128 | 0;
 $42 = sp + 120 | 0;
 $43 = sp + 112 | 0;
 $44 = sp + 764 | 0;
 $45 = sp + 760 | 0;
 $46 = sp + 756 | 0;
 $47 = sp + 935 | 0;
 $48 = sp + 934 | 0;
 $49 = sp + 933 | 0;
 $50 = sp + 932 | 0;
 $51 = sp + 752 | 0;
 $52 = sp + 748 | 0;
 $53 = sp + 744 | 0;
 $54 = sp + 740 | 0;
 $55 = sp + 736 | 0;
 $56 = sp + 732 | 0;
 $57 = sp + 728 | 0;
 $58 = sp + 724 | 0;
 $59 = sp + 720 | 0;
 $60 = sp + 716 | 0;
 $61 = sp + 104 | 0;
 $62 = sp + 96 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 80 | 0;
 $65 = sp + 712 | 0;
 $66 = sp + 708 | 0;
 $67 = sp + 931 | 0;
 $68 = sp + 930 | 0;
 $69 = sp + 929 | 0;
 $70 = sp + 928 | 0;
 $71 = sp + 704 | 0;
 $72 = sp + 700 | 0;
 $73 = sp + 696 | 0;
 $74 = sp + 692 | 0;
 $75 = sp + 688 | 0;
 $76 = sp + 684 | 0;
 $77 = sp + 680 | 0;
 $78 = sp + 676 | 0;
 $79 = sp + 72 | 0;
 $80 = sp + 64 | 0;
 $81 = sp + 56 | 0;
 $82 = sp + 672 | 0;
 $83 = sp + 668 | 0;
 $84 = sp + 664 | 0;
 $85 = sp + 660 | 0;
 $86 = sp + 656 | 0;
 $87 = sp + 652 | 0;
 $88 = sp + 648 | 0;
 $89 = sp + 644 | 0;
 $90 = sp + 640 | 0;
 $91 = sp + 636 | 0;
 $92 = sp + 632 | 0;
 $93 = sp + 628 | 0;
 $94 = sp + 624 | 0;
 $95 = sp + 620 | 0;
 $96 = sp + 616 | 0;
 $97 = sp + 612 | 0;
 $98 = sp + 608 | 0;
 $99 = sp + 604 | 0;
 $100 = sp + 600 | 0;
 $101 = sp + 596 | 0;
 $102 = sp + 592 | 0;
 $103 = sp + 588 | 0;
 $104 = sp + 584 | 0;
 $105 = sp + 580 | 0;
 $106 = sp + 576 | 0;
 $107 = sp + 572 | 0;
 $108 = sp + 568 | 0;
 $109 = sp + 564 | 0;
 $110 = sp + 560 | 0;
 $111 = sp + 556 | 0;
 $112 = sp + 552 | 0;
 $113 = sp + 548 | 0;
 $114 = sp + 544 | 0;
 $115 = sp + 540 | 0;
 $116 = sp + 536 | 0;
 $117 = sp + 532 | 0;
 $118 = sp + 528 | 0;
 $119 = sp + 524 | 0;
 $120 = sp + 520 | 0;
 $121 = sp + 516 | 0;
 $122 = sp + 512 | 0;
 $123 = sp + 508 | 0;
 $124 = sp + 504 | 0;
 $125 = sp + 500 | 0;
 $126 = sp + 496 | 0;
 $127 = sp + 492 | 0;
 $128 = sp + 488 | 0;
 $129 = sp + 484 | 0;
 $130 = sp + 480 | 0;
 $131 = sp + 476 | 0;
 $132 = sp + 472 | 0;
 $133 = sp + 468 | 0;
 $134 = sp + 464 | 0;
 $135 = sp + 460 | 0;
 $136 = sp + 456 | 0;
 $137 = sp + 48 | 0;
 $138 = sp + 40 | 0;
 $139 = sp + 32 | 0;
 $140 = sp + 452 | 0;
 $141 = sp + 448 | 0;
 $142 = sp + 927 | 0;
 $143 = sp + 444 | 0;
 $144 = sp + 926 | 0;
 $145 = sp + 925 | 0;
 $146 = sp + 440 | 0;
 $147 = sp + 924 | 0;
 $148 = sp + 24 | 0;
 $149 = sp + 16 | 0;
 $150 = sp + 8 | 0;
 $151 = sp + 436 | 0;
 $152 = sp + 432 | 0;
 $153 = sp + 428 | 0;
 $154 = sp + 424 | 0;
 $155 = sp + 420 | 0;
 $156 = sp + 416 | 0;
 $157 = sp + 923 | 0;
 $158 = sp + 412 | 0;
 $159 = sp + 408 | 0;
 $160 = sp + 404 | 0;
 $161 = sp + 400 | 0;
 $162 = sp;
 $163 = sp + 396 | 0;
 $164 = sp + 392 | 0;
 $165 = sp + 388 | 0;
 $166 = sp + 384 | 0;
 $167 = sp + 380 | 0;
 $168 = sp + 376 | 0;
 $169 = sp + 372 | 0;
 $170 = sp + 368 | 0;
 $171 = sp + 364 | 0;
 $172 = sp + 360 | 0;
 $173 = sp + 356 | 0;
 $174 = sp + 352 | 0;
 $175 = sp + 348 | 0;
 $176 = sp + 344 | 0;
 $177 = sp + 340 | 0;
 $178 = sp + 336 | 0;
 $179 = sp + 332 | 0;
 $180 = sp + 328 | 0;
 $181 = sp + 324 | 0;
 $182 = sp + 320 | 0;
 $183 = sp + 316 | 0;
 $184 = sp + 312 | 0;
 $185 = sp + 308 | 0;
 $186 = sp + 304 | 0;
 $187 = sp + 300 | 0;
 $188 = sp + 296 | 0;
 $189 = sp + 292 | 0;
 $190 = sp + 288 | 0;
 $191 = sp + 284 | 0;
 $192 = sp + 280 | 0;
 $194 = sp + 272 | 0;
 $195 = sp + 268 | 0;
 $197 = sp + 260 | 0;
 $198 = sp + 256 | 0;
 $199 = sp + 252 | 0;
 $200 = sp + 248 | 0;
 $201 = sp + 244 | 0;
 $202 = sp + 240 | 0;
 $203 = sp + 236 | 0;
 $204 = sp + 232 | 0;
 $205 = sp + 228 | 0;
 $206 = sp + 224 | 0;
 $207 = sp + 220 | 0;
 $208 = sp + 216 | 0;
 $209 = sp + 212 | 0;
 $210 = sp + 208 | 0;
 $211 = sp + 204 | 0;
 $212 = sp + 200 | 0;
 $213 = sp + 196 | 0;
 $214 = sp + 192 | 0;
 $215 = sp + 188 | 0;
 $217 = sp + 180 | 0;
 $218 = sp + 922 | 0;
 $219 = sp + 168 | 0;
 $220 = sp + 160 | 0;
 $221 = sp + 921 | 0;
 $222 = sp + 156 | 0;
 $223 = sp + 152 | 0;
 $224 = sp + 920 | 0;
 HEAP32[$217 >> 2] = $1;
 HEAP32[sp + 184 >> 2] = $218;
 HEAP32[$194 >> 2] = $218;
 HEAP32[$195 >> 2] = 1;
 HEAP32[sp + 264 >> 2] = 0;
 $226 = HEAP32[$195 >> 2] | 0;
 HEAP32[sp + 276 >> 2] = HEAP32[$194 >> 2];
 if ($226 >>> 0 > 59652323) {
  HEAP32[$189 >> 2] = 55296;
  $228 = ___cxa_allocate_exception(8) | 0;
  $229 = HEAP32[$189 >> 2] | 0;
  HEAP32[$187 >> 2] = $228;
  HEAP32[$188 >> 2] = $229;
  $230 = HEAP32[$187 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $230 | 0, HEAP32[$188 >> 2] | 0);
  $232 = __THREW__;
  __THREW__ = 0;
  if ($232 & 1) {
   $234 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$190 >> 2] = $234;
   HEAP32[$191 >> 2] = tempRet0;
   ___cxa_free_exception($228 | 0);
   ___resumeException(HEAP32[$190 >> 2] | 0);
  } else {
   HEAP32[$230 >> 2] = 48176;
   ___cxa_throw($228 | 0, 42808, 176);
  }
 }
 HEAP32[$192 >> 2] = (HEAP32[$195 >> 2] | 0) * 72;
 $241 = __Znwm(HEAP32[$192 >> 2] | 0) | 0;
 HEAP32[$184 >> 2] = $220;
 HEAP32[$185 >> 2] = $218;
 HEAP32[$186 >> 2] = 1;
 $242 = HEAP32[$184 >> 2] | 0;
 HEAP32[$242 >> 2] = HEAP32[$185 >> 2];
 HEAP32[$242 + 4 >> 2] = HEAP32[$186 >> 2];
 HEAP32[$181 >> 2] = $219;
 HEAP32[$182 >> 2] = $241;
 HEAP32[$183 >> 2] = $220;
 $246 = HEAP32[$181 >> 2] | 0;
 HEAP32[$180 >> 2] = HEAP32[$183 >> 2];
 $248 = HEAP32[$180 >> 2] | 0;
 HEAP32[$177 >> 2] = $246;
 HEAP32[$178 >> 2] = $182;
 HEAP32[$179 >> 2] = $248;
 $249 = HEAP32[$177 >> 2] | 0;
 HEAP32[$176 >> 2] = HEAP32[$178 >> 2];
 $251 = HEAP32[$176 >> 2] | 0;
 HEAP32[$170 >> 2] = $249;
 HEAP32[$171 >> 2] = $251;
 $252 = HEAP32[$170 >> 2] | 0;
 HEAP32[$169 >> 2] = HEAP32[$171 >> 2];
 HEAP32[$252 >> 2] = HEAP32[HEAP32[$169 >> 2] >> 2];
 HEAP32[$172 >> 2] = HEAP32[$179 >> 2];
 $258 = HEAP32[$172 >> 2] | 0;
 HEAP32[$174 >> 2] = $249 + 4;
 HEAP32[$175 >> 2] = $258;
 $259 = HEAP32[$174 >> 2] | 0;
 HEAP32[$173 >> 2] = HEAP32[$175 >> 2];
 $261 = HEAP32[$173 >> 2] | 0;
 HEAP32[$259 >> 2] = HEAP32[$261 >> 2];
 HEAP32[$259 + 4 >> 2] = HEAP32[$261 + 4 >> 2];
 HEAP32[$168 >> 2] = $219;
 HEAP32[$167 >> 2] = HEAP32[$168 >> 2];
 HEAP32[$166 >> 2] = HEAP32[$167 >> 2];
 $265 = HEAP32[HEAP32[$166 >> 2] >> 2] | 0;
 HEAP32[$164 >> 2] = $221;
 HEAP32[$165 >> 2] = $218;
 HEAP32[$163 >> 2] = HEAP32[$217 >> 2];
 $267 = HEAP32[$163 >> 2] | 0;
 HEAP8[$162 >> 0] = HEAP8[$221 >> 0] | 0;
 HEAP32[$155 >> 2] = $265;
 HEAP32[$156 >> 2] = $267;
 $268 = HEAP32[$155 >> 2] | 0;
 HEAP32[$153 >> 2] = $268;
 HEAP32[$154 >> 2] = 0;
 $269 = HEAP32[$153 >> 2] | 0;
 $270 = HEAP32[$154 >> 2] | 0;
 HEAP32[$151 >> 2] = $269;
 HEAP32[$152 >> 2] = $270;
 $271 = HEAP32[$151 >> 2] | 0;
 HEAP32[$271 >> 2] = 47864;
 HEAP32[$271 + 4 >> 2] = HEAP32[$152 >> 2];
 HEAP32[$269 >> 2] = 47884;
 HEAP32[$269 + 8 >> 2] = HEAP32[$154 >> 2];
 HEAP32[$268 >> 2] = 43544;
 HEAP32[$73 >> 2] = $162;
 HEAP32[$71 >> 2] = HEAP32[$73 >> 2];
 $278 = HEAP32[$71 >> 2] | 0;
 HEAP32[$65 >> 2] = $72;
 HEAP32[$66 >> 2] = $278;
 $279 = HEAP32[$65 >> 2] | 0;
 $280 = HEAP32[$66 >> 2] | 0;
 HEAP8[$61 >> 0] = HEAP8[$70 >> 0] | 0;
 HEAP8[$62 >> 0] = HEAP8[$69 >> 0] | 0;
 HEAP8[$63 >> 0] = HEAP8[$68 >> 0] | 0;
 HEAP8[$64 >> 0] = HEAP8[$67 >> 0] | 0;
 HEAP32[$59 >> 2] = $279;
 HEAP32[$60 >> 2] = $280;
 $281 = HEAP32[$59 >> 2] | 0;
 HEAP32[$58 >> 2] = HEAP32[$60 >> 2];
 $283 = HEAP32[$58 >> 2] | 0;
 HEAP32[$56 >> 2] = $281;
 HEAP32[$57 >> 2] = $283;
 $284 = HEAP32[$56 >> 2] | 0;
 HEAP32[$55 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$284 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$158 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$54 >> 2] = HEAP32[$156 >> 2];
 HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$51 >> 2] = HEAP32[$53 >> 2];
 $291 = HEAP32[$51 >> 2] | 0;
 HEAP32[$45 >> 2] = $52;
 HEAP32[$46 >> 2] = $291;
 $292 = HEAP32[$45 >> 2] | 0;
 HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
 $294 = HEAP32[$44 >> 2] | 0;
 HEAP8[$40 >> 0] = HEAP8[$50 >> 0] | 0;
 HEAP8[$41 >> 0] = HEAP8[$49 >> 0] | 0;
 HEAP8[$42 >> 0] = HEAP8[$48 >> 0] | 0;
 HEAP8[$43 >> 0] = HEAP8[$47 >> 0] | 0;
 HEAP32[$38 >> 2] = $292;
 HEAP32[$39 >> 2] = $294;
 $295 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$39 >> 2];
 $297 = HEAP32[$37 >> 2] | 0;
 HEAP32[$35 >> 2] = $295;
 HEAP32[$36 >> 2] = $297;
 $298 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$298 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$159 >> 2] = HEAP32[$52 >> 2];
 HEAP8[$148 >> 0] = HEAP8[$159 >> 0] | 0;
 HEAP8[$148 + 1 >> 0] = HEAP8[$159 + 1 >> 0] | 0;
 HEAP8[$148 + 2 >> 0] = HEAP8[$159 + 2 >> 0] | 0;
 HEAP8[$148 + 3 >> 0] = HEAP8[$159 + 3 >> 0] | 0;
 HEAP8[$149 >> 0] = HEAP8[$158 >> 0] | 0;
 HEAP8[$149 + 1 >> 0] = HEAP8[$158 + 1 >> 0] | 0;
 HEAP8[$149 + 2 >> 0] = HEAP8[$158 + 2 >> 0] | 0;
 HEAP8[$149 + 3 >> 0] = HEAP8[$158 + 3 >> 0] | 0;
 HEAP8[$150 >> 0] = HEAP8[$157 >> 0] | 0;
 HEAP32[$141 >> 2] = $268 + 12;
 $302 = HEAP32[$141 >> 2] | 0;
 HEAP32[$140 >> 2] = $149;
 HEAP32[$143 >> 2] = HEAP32[HEAP32[$140 >> 2] >> 2];
 HEAP8[$79 >> 0] = HEAP8[$144 >> 0] | 0;
 HEAP8[$80 >> 0] = HEAP8[$143 >> 0] | 0;
 HEAP8[$80 + 1 >> 0] = HEAP8[$143 + 1 >> 0] | 0;
 HEAP8[$80 + 2 >> 0] = HEAP8[$143 + 2 >> 0] | 0;
 HEAP8[$80 + 3 >> 0] = HEAP8[$143 + 3 >> 0] | 0;
 HEAP8[$81 >> 0] = HEAP8[$142 >> 0] | 0;
 HEAP32[$78 >> 2] = $302;
 HEAP32[$77 >> 2] = $80;
 HEAP32[$76 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$75 >> 2] = HEAP32[HEAP32[$76 >> 2] >> 2];
 HEAP32[$74 >> 2] = $148;
 HEAP32[$146 >> 2] = HEAP32[HEAP32[$74 >> 2] >> 2];
 HEAP8[$137 >> 0] = HEAP8[$147 >> 0] | 0;
 HEAP8[$138 >> 0] = HEAP8[$146 >> 0] | 0;
 HEAP8[$138 + 1 >> 0] = HEAP8[$146 + 1 >> 0] | 0;
 HEAP8[$138 + 2 >> 0] = HEAP8[$146 + 2 >> 0] | 0;
 HEAP8[$138 + 3 >> 0] = HEAP8[$146 + 3 >> 0] | 0;
 HEAP8[$139 >> 0] = HEAP8[$145 >> 0] | 0;
 HEAP32[$133 >> 2] = $302;
 $308 = HEAP32[$133 >> 2] | 0;
 HEAP32[$132 >> 2] = $138;
 HEAP32[$131 >> 2] = HEAP32[$132 >> 2];
 HEAP32[$118 >> 2] = HEAP32[HEAP32[$131 >> 2] >> 2];
 $312 = HEAP32[$118 >> 2] | 0;
 HEAP32[$103 >> 2] = $134;
 HEAP32[$104 >> 2] = $312;
 $313 = HEAP32[$103 >> 2] | 0;
 HEAP32[$101 >> 2] = HEAP32[$104 >> 2];
 $315 = HEAP32[$101 >> 2] | 0;
 HEAP32[$100 >> 2] = $315;
 HEAP32[$99 >> 2] = HEAP32[$100 >> 2];
 HEAP32[$102 >> 2] = HEAP32[HEAP32[$99 >> 2] >> 2];
 HEAP32[$98 >> 2] = $315;
 HEAP32[$97 >> 2] = HEAP32[$98 >> 2];
 HEAP32[HEAP32[$97 >> 2] >> 2] = 0;
 HEAP32[$105 >> 2] = HEAP32[$102 >> 2];
 HEAP32[$96 >> 2] = HEAP32[$104 >> 2];
 HEAP32[$95 >> 2] = HEAP32[$96 >> 2];
 HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
 HEAP32[$82 >> 2] = HEAP32[$94 >> 2];
 $326 = HEAP32[$82 >> 2] | 0;
 HEAP32[$91 >> 2] = $313;
 HEAP32[$92 >> 2] = $105;
 HEAP32[$93 >> 2] = $326;
 $327 = HEAP32[$91 >> 2] | 0;
 HEAP32[$90 >> 2] = HEAP32[$92 >> 2];
 $329 = HEAP32[$90 >> 2] | 0;
 HEAP32[$84 >> 2] = $327;
 HEAP32[$85 >> 2] = $329;
 $330 = HEAP32[$84 >> 2] | 0;
 HEAP32[$83 >> 2] = HEAP32[$85 >> 2];
 HEAP32[$330 >> 2] = HEAP32[HEAP32[$83 >> 2] >> 2];
 HEAP32[$86 >> 2] = HEAP32[$93 >> 2];
 $335 = HEAP32[$86 >> 2] | 0;
 HEAP32[$88 >> 2] = $327;
 HEAP32[$89 >> 2] = $335;
 HEAP32[$87 >> 2] = HEAP32[$89 >> 2];
 __THREW__ = 0;
 invoke_vii(72, $308 | 0, $134 | 0);
 $337 = __THREW__;
 __THREW__ = 0;
 if ($337 & 1) {
  $357 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$135 >> 2] = $357;
  HEAP32[$136 >> 2] = tempRet0;
  HEAP32[$130 >> 2] = $134;
  HEAP32[$127 >> 2] = HEAP32[$130 >> 2];
  HEAP32[$128 >> 2] = 0;
  $360 = HEAP32[$127 >> 2] | 0;
  HEAP32[$126 >> 2] = $360;
  HEAP32[$125 >> 2] = HEAP32[$126 >> 2];
  HEAP32[$129 >> 2] = HEAP32[HEAP32[$125 >> 2] >> 2];
  $364 = HEAP32[$128 >> 2] | 0;
  HEAP32[$122 >> 2] = $360;
  HEAP32[$121 >> 2] = HEAP32[$122 >> 2];
  HEAP32[HEAP32[$121 >> 2] >> 2] = $364;
  if (HEAP32[$129 >> 2] | 0) {
   HEAP32[$120 >> 2] = $360;
   HEAP32[$119 >> 2] = HEAP32[$120 >> 2];
   $371 = HEAP32[$129 >> 2] | 0;
   HEAP32[$123 >> 2] = HEAP32[$119 >> 2];
   HEAP32[$124 >> 2] = $371;
   $372 = HEAP32[$124 >> 2] | 0;
   if ($372 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$372 >> 2] | 0) + 4 >> 2] & 255]($372);
  }
  $378 = HEAP32[$136 >> 2] | 0;
  HEAP32[$160 >> 2] = HEAP32[$135 >> 2];
  HEAP32[$161 >> 2] = $378;
  __ZNSt3__214__shared_countD2Ev($268);
  $380 = HEAP32[$161 >> 2] | 0;
  HEAP32[$222 >> 2] = HEAP32[$160 >> 2];
  HEAP32[$223 >> 2] = $380;
  HEAP32[$20 >> 2] = $219;
  HEAP32[$17 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$18 >> 2] = 0;
  $382 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $382;
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$19 >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
  $386 = HEAP32[$18 >> 2] | 0;
  HEAP32[$5 >> 2] = $382;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[HEAP32[$4 >> 2] >> 2] = $386;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $450 = HEAP32[$222 >> 2] | 0;
   $451 = HEAP32[$223 >> 2] | 0;
   ___resumeException($450 | 0);
  }
  HEAP32[$3 >> 2] = $382;
  HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
  $415 = HEAP32[$19 >> 2] | 0;
  HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$14 >> 2] = $415;
  $416 = HEAP32[$13 >> 2] | 0;
  $418 = HEAP32[$14 >> 2] | 0;
  $420 = HEAP32[$416 + 4 >> 2] | 0;
  HEAP32[$10 >> 2] = HEAP32[$416 >> 2];
  HEAP32[$11 >> 2] = $418;
  HEAP32[$12 >> 2] = $420;
  $422 = HEAP32[$11 >> 2] | 0;
  $423 = HEAP32[$12 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8 >> 2] = $422;
  HEAP32[$9 >> 2] = $423;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  __ZdlPv(HEAP32[$6 >> 2] | 0);
  $450 = HEAP32[$222 >> 2] | 0;
  $451 = HEAP32[$223 >> 2] | 0;
  ___resumeException($450 | 0);
 }
 HEAP32[$117 >> 2] = $134;
 HEAP32[$114 >> 2] = HEAP32[$117 >> 2];
 HEAP32[$115 >> 2] = 0;
 $340 = HEAP32[$114 >> 2] | 0;
 HEAP32[$113 >> 2] = $340;
 HEAP32[$112 >> 2] = HEAP32[$113 >> 2];
 HEAP32[$116 >> 2] = HEAP32[HEAP32[$112 >> 2] >> 2];
 $344 = HEAP32[$115 >> 2] | 0;
 HEAP32[$109 >> 2] = $340;
 HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
 HEAP32[HEAP32[$108 >> 2] >> 2] = $344;
 if (HEAP32[$116 >> 2] | 0) {
  HEAP32[$107 >> 2] = $340;
  HEAP32[$106 >> 2] = HEAP32[$107 >> 2];
  $351 = HEAP32[$116 >> 2] | 0;
  HEAP32[$110 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$111 >> 2] = $351;
  $352 = HEAP32[$111 >> 2] | 0;
  if ($352 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$352 >> 2] | 0) + 4 >> 2] & 255]($352);
 }
 HEAP8[$224 >> 0] = 0;
 HEAP32[$33 >> 2] = $0;
 $391 = HEAP32[$33 >> 2] | 0;
 HEAP32[$391 >> 2] = 0;
 HEAP32[$391 + 4 >> 2] = 0;
 HEAP32[$32 >> 2] = $219;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$29 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
 HEAP32[$28 >> 2] = (HEAP32[$29 >> 2] | 0) + 12;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$25 >> 2] = $219;
 $401 = HEAP32[$25 >> 2] | 0;
 HEAP32[$24 >> 2] = $401;
 HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$26 >> 2] = HEAP32[HEAP32[$23 >> 2] >> 2];
 HEAP32[$22 >> 2] = $401;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = HEAP32[$26 >> 2];
 $410 = HEAP32[$0 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $410;
 __ZNSt3__210shared_ptrIKN3zim6DirentEE18__enable_weak_thisEz($0, $vararg_buffer);
 HEAP8[$224 >> 0] = 1;
 if (!(HEAP8[$224 >> 0] & 1)) __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($0);
 HEAP32[$215 >> 2] = $219;
 HEAP32[$212 >> 2] = HEAP32[$215 >> 2];
 HEAP32[$213 >> 2] = 0;
 $427 = HEAP32[$212 >> 2] | 0;
 HEAP32[$211 >> 2] = $427;
 HEAP32[$210 >> 2] = HEAP32[$211 >> 2];
 HEAP32[$214 >> 2] = HEAP32[HEAP32[$210 >> 2] >> 2];
 $431 = HEAP32[$213 >> 2] | 0;
 HEAP32[$200 >> 2] = $427;
 HEAP32[$199 >> 2] = HEAP32[$200 >> 2];
 HEAP32[HEAP32[$199 >> 2] >> 2] = $431;
 if (!(HEAP32[$214 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$198 >> 2] = $427;
 HEAP32[$197 >> 2] = (HEAP32[$198 >> 2] | 0) + 4;
 $439 = HEAP32[$214 >> 2] | 0;
 HEAP32[$208 >> 2] = HEAP32[$197 >> 2];
 HEAP32[$209 >> 2] = $439;
 $440 = HEAP32[$208 >> 2] | 0;
 $442 = HEAP32[$209 >> 2] | 0;
 $444 = HEAP32[$440 + 4 >> 2] | 0;
 HEAP32[$205 >> 2] = HEAP32[$440 >> 2];
 HEAP32[$206 >> 2] = $442;
 HEAP32[$207 >> 2] = $444;
 $446 = HEAP32[$206 >> 2] | 0;
 $447 = HEAP32[$207 >> 2] | 0;
 HEAP32[$202 >> 2] = HEAP32[$205 >> 2];
 HEAP32[$203 >> 2] = $446;
 HEAP32[$204 >> 2] = $447;
 HEAP32[$201 >> 2] = HEAP32[$203 >> 2];
 __ZdlPv(HEAP32[$201 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim7Cluster11read_headerIyEENS_8offset_tEv($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $149 = 0, $15 = 0, $151 = 0, $158 = 0, $159 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $188 = 0, $189 = 0, $19 = 0, $192 = 0, $195 = 0, $197 = 0, $2 = 0, $20 = 0, $208 = 0, $21 = 0, $213 = 0, $216 = 0, $217 = 0, $22 = 0, $225 = 0, $229 = 0, $23 = 0, $231 = 0, $24 = 0, $241 = 0, $244 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $26 = 0, $265 = 0, $268 = 0, $269 = 0, $27 = 0, $275 = 0, $278 = 0, $28 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $29 = 0, $290 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $300 = 0, $305 = 0, $306 = 0, $31 = 0, $310 = 0, $315 = 0, $316 = 0, $32 = 0, $321 = 0, $327 = 0, $33 = 0, $333 = 0, $339 = 0, $34 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $35 = 0, $350 = 0, $351 = 0, $355 = 0, $36 = 0, $360 = 0, $361 = 0, $365 = 0, $37 = 0, $370 = 0, $371 = 0, $376 = 0, $38 = 0, $382 = 0, $388 = 0, $39 = 0, $394 = 0, $396 = 0, $4 = 0, $40 = 0, $401 = 0, $402 = 0, $408 = 0, $41 = 0, $411 = 0, $412 = 0, $413 = 0, $415 = 0, $419 = 0, $42 = 0, $424 = 0, $425 = 0, $429 = 0, $43 = 0, $434 = 0, $435 = 0, $44 = 0, $440 = 0, $446 = 0, $45 = 0, $452 = 0, $458 = 0, $46 = 0, $460 = 0, $465 = 0, $466 = 0, $47 = 0, $471 = 0, $477 = 0, $48 = 0, $483 = 0, $484 = 0, $485 = 0, $487 = 0, $489 = 0, $49 = 0, $499 = 0, $5 = 0, $50 = 0, $502 = 0, $504 = 0, $505 = 0, $506 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $512 = 0, $513 = 0, $515 = 0, $516 = 0, $52 = 0, $521 = 0, $523 = 0, $527 = 0, $53 = 0, $532 = 0, $533 = 0, $539 = 0, $54 = 0, $542 = 0, $543 = 0, $544 = 0, $546 = 0, $55 = 0, $550 = 0, $555 = 0, $556 = 0, $56 = 0, $560 = 0, $566 = 0, $57 = 0, $575 = 0, $58 = 0, $581 = 0, $587 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640 | 0;
 $$byval_copy3 = sp + 200 | 0;
 $$byval_copy1 = sp + 192 | 0;
 $1 = sp + 620 | 0;
 $2 = sp + 616 | 0;
 $3 = sp + 612 | 0;
 $4 = sp + 608 | 0;
 $5 = sp + 604 | 0;
 $6 = sp + 600 | 0;
 $7 = sp + 596 | 0;
 $8 = sp + 592 | 0;
 $9 = sp + 588 | 0;
 $10 = sp + 584 | 0;
 $11 = sp + 580 | 0;
 $12 = sp + 576 | 0;
 $13 = sp + 572 | 0;
 $14 = sp + 184 | 0;
 $15 = sp + 568 | 0;
 $16 = sp + 564 | 0;
 $17 = sp + 560 | 0;
 $18 = sp + 556 | 0;
 $19 = sp + 628 | 0;
 $20 = sp + 552 | 0;
 $21 = sp + 548 | 0;
 $22 = sp + 544 | 0;
 $23 = sp + 540 | 0;
 $24 = sp + 536 | 0;
 $25 = sp + 532 | 0;
 $26 = sp + 528 | 0;
 $27 = sp + 524 | 0;
 $28 = sp + 520 | 0;
 $29 = sp + 516 | 0;
 $30 = sp + 627 | 0;
 $31 = sp + 512 | 0;
 $32 = sp + 508 | 0;
 $33 = sp + 504 | 0;
 $34 = sp + 500 | 0;
 $35 = sp + 496 | 0;
 $36 = sp + 492 | 0;
 $37 = sp + 488 | 0;
 $38 = sp + 484 | 0;
 $39 = sp + 480 | 0;
 $40 = sp + 476 | 0;
 $41 = sp + 472 | 0;
 $42 = sp + 468 | 0;
 $43 = sp + 464 | 0;
 $44 = sp + 460 | 0;
 $45 = sp + 456 | 0;
 $46 = sp + 452 | 0;
 $47 = sp + 448 | 0;
 $48 = sp + 176 | 0;
 $49 = sp + 444 | 0;
 $50 = sp + 440 | 0;
 $51 = sp + 436 | 0;
 $52 = sp + 432 | 0;
 $53 = sp + 626 | 0;
 $54 = sp + 428 | 0;
 $55 = sp + 424 | 0;
 $56 = sp + 420 | 0;
 $57 = sp + 416 | 0;
 $58 = sp + 412 | 0;
 $59 = sp + 408 | 0;
 $60 = sp + 404 | 0;
 $61 = sp + 400 | 0;
 $62 = sp + 396 | 0;
 $63 = sp + 392 | 0;
 $64 = sp + 625 | 0;
 $65 = sp + 388 | 0;
 $66 = sp + 384 | 0;
 $67 = sp + 380 | 0;
 $68 = sp + 376 | 0;
 $69 = sp + 372 | 0;
 $70 = sp + 368 | 0;
 $71 = sp + 364 | 0;
 $72 = sp + 360 | 0;
 $73 = sp + 356 | 0;
 $74 = sp + 352 | 0;
 $75 = sp + 348 | 0;
 $76 = sp + 344 | 0;
 $77 = sp + 340 | 0;
 $78 = sp + 336 | 0;
 $79 = sp + 332 | 0;
 $80 = sp + 328 | 0;
 $81 = sp + 324 | 0;
 $82 = sp + 320 | 0;
 $83 = sp + 316 | 0;
 $84 = sp + 312 | 0;
 $85 = sp + 308 | 0;
 $86 = sp + 304 | 0;
 $87 = sp + 300 | 0;
 $88 = sp + 296 | 0;
 $89 = sp + 292 | 0;
 $90 = sp + 288 | 0;
 $91 = sp + 168 | 0;
 $92 = sp + 284 | 0;
 $93 = sp + 280 | 0;
 $94 = sp + 624 | 0;
 $95 = sp + 276 | 0;
 $96 = sp + 272 | 0;
 $97 = sp + 268 | 0;
 $98 = sp + 264 | 0;
 $99 = sp + 260 | 0;
 $100 = sp + 256 | 0;
 $101 = sp + 252 | 0;
 $102 = sp + 248 | 0;
 $103 = sp + 244 | 0;
 $104 = sp + 240 | 0;
 $105 = sp + 236 | 0;
 $106 = sp + 232 | 0;
 $107 = sp + 160 | 0;
 $108 = sp + 228 | 0;
 $109 = sp + 152 | 0;
 $110 = sp + 144 | 0;
 $111 = sp + 224 | 0;
 $112 = sp + 136 | 0;
 $113 = sp + 216 | 0;
 $114 = sp + 128 | 0;
 $115 = sp + 120 | 0;
 $116 = sp + 112 | 0;
 $117 = sp + 212 | 0;
 $118 = sp + 208 | 0;
 $119 = sp + 104 | 0;
 $120 = sp + 96 | 0;
 $121 = sp + 88 | 0;
 $122 = sp + 80 | 0;
 $123 = sp + 72 | 0;
 $124 = sp + 64 | 0;
 $125 = sp + 56 | 0;
 $126 = sp + 48 | 0;
 $127 = sp + 40 | 0;
 $128 = sp + 32 | 0;
 $129 = sp + 24 | 0;
 $130 = sp + 16 | 0;
 $131 = sp + 8 | 0;
 $132 = sp;
 HEAP32[$108 >> 2] = $0;
 $133 = HEAP32[$108 >> 2] | 0;
 HEAP32[$106 >> 2] = $133 + 28;
 $136 = HEAP32[HEAP32[$106 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($110, 0, 0);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
 $137 = __ZNK3zim6Reader4readIyEET_NS_8offset_tE($136, $$byval_copy3) | 0;
 $139 = $109;
 HEAP32[$139 >> 2] = $137;
 HEAP32[$139 + 4 >> 2] = tempRet0;
 $143 = $109;
 $149 = ___udivdi3(HEAP32[$143 >> 2] | 0, HEAP32[$143 + 4 >> 2] | 0, 8, 0) | 0;
 HEAP32[$111 >> 2] = $149;
 $151 = $109;
 __ZN3zim8offset_tC2Ey($107, HEAP32[$151 >> 2] | 0, HEAP32[$151 + 4 >> 2] | 0);
 HEAP32[$104 >> 2] = $133 + 16;
 $158 = HEAP32[$104 >> 2] | 0;
 HEAP32[$103 >> 2] = $158;
 $159 = HEAP32[$103 >> 2] | 0;
 HEAP32[$105 >> 2] = ((HEAP32[$159 + 4 >> 2] | 0) - (HEAP32[$159 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[$102 >> 2] = $158;
 $167 = HEAP32[$102 >> 2] | 0;
 $168 = HEAP32[$167 >> 2] | 0;
 HEAP32[$99 >> 2] = $167;
 HEAP32[$100 >> 2] = $168;
 $169 = HEAP32[$99 >> 2] | 0;
 HEAP32[$101 >> 2] = HEAP32[$169 + 4 >> 2];
 while (1) {
  if ((HEAP32[$100 >> 2] | 0) == (HEAP32[$101 >> 2] | 0)) break;
  HEAP32[$98 >> 2] = $169;
  HEAP32[$97 >> 2] = (HEAP32[$98 >> 2] | 0) + 8;
  HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
  $178 = HEAP32[$96 >> 2] | 0;
  $180 = (HEAP32[$101 >> 2] | 0) + -8 | 0;
  HEAP32[$101 >> 2] = $180;
  HEAP32[$95 >> 2] = $180;
  $181 = HEAP32[$95 >> 2] | 0;
  HEAP32[$92 >> 2] = $178;
  HEAP32[$93 >> 2] = $181;
  $182 = HEAP32[$92 >> 2] | 0;
  $183 = HEAP32[$93 >> 2] | 0;
  HEAP8[$91 >> 0] = HEAP8[$94 >> 0] | 0;
  HEAP32[$89 >> 2] = $182;
  HEAP32[$90 >> 2] = $183;
  $185 = HEAP32[$90 >> 2] | 0;
  HEAP32[$87 >> 2] = HEAP32[$89 >> 2];
  HEAP32[$88 >> 2] = $185;
 }
 HEAP32[$169 + 4 >> 2] = HEAP32[$100 >> 2];
 $188 = HEAP32[$105 >> 2] | 0;
 HEAP32[$84 >> 2] = $158;
 HEAP32[$85 >> 2] = $188;
 $189 = HEAP32[$84 >> 2] | 0;
 HEAP32[$83 >> 2] = $189;
 HEAP32[$82 >> 2] = HEAP32[HEAP32[$83 >> 2] >> 2];
 $192 = HEAP32[$82 >> 2] | 0;
 HEAP32[$66 >> 2] = $189;
 HEAP32[$65 >> 2] = HEAP32[HEAP32[$66 >> 2] >> 2];
 $195 = HEAP32[$65 >> 2] | 0;
 HEAP32[$71 >> 2] = $189;
 HEAP32[$70 >> 2] = HEAP32[$71 >> 2];
 $197 = HEAP32[$70 >> 2] | 0;
 HEAP32[$69 >> 2] = $197;
 HEAP32[$68 >> 2] = (HEAP32[$69 >> 2] | 0) + 8;
 HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
 $208 = $195 + ((((HEAP32[HEAP32[$67 >> 2] >> 2] | 0) - (HEAP32[$197 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$73 >> 2] = $189;
 HEAP32[$72 >> 2] = HEAP32[HEAP32[$73 >> 2] >> 2];
 $213 = (HEAP32[$72 >> 2] | 0) + (HEAP32[$85 >> 2] << 3) | 0;
 HEAP32[$75 >> 2] = $189;
 HEAP32[$74 >> 2] = HEAP32[HEAP32[$75 >> 2] >> 2];
 $216 = HEAP32[$74 >> 2] | 0;
 HEAP32[$76 >> 2] = $189;
 $217 = HEAP32[$76 >> 2] | 0;
 $225 = $216 + ((((HEAP32[$217 + 4 >> 2] | 0) - (HEAP32[$217 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$77 >> 2] = $189;
 HEAP32[$78 >> 2] = $192;
 HEAP32[$79 >> 2] = $208;
 HEAP32[$80 >> 2] = $213;
 HEAP32[$81 >> 2] = $225;
 HEAP32[$86 >> 2] = $158;
 __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE7reserveEm($133 + 16 | 0, HEAP32[$111 >> 2] | 0);
 __ZN3zim8offset_tC2Ey($112, 0, 0);
 HEAP32[$62 >> 2] = $133 + 16;
 HEAP32[$63 >> 2] = $112;
 $229 = HEAP32[$62 >> 2] | 0;
 $231 = HEAP32[$229 + 4 >> 2] | 0;
 HEAP32[$61 >> 2] = $229;
 HEAP32[$60 >> 2] = (HEAP32[$61 >> 2] | 0) + 8;
 HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
 if ($231 >>> 0 < (HEAP32[HEAP32[$59 >> 2] >> 2] | 0) >>> 0) {
  HEAP32[$56 >> 2] = $64;
  HEAP32[$57 >> 2] = $229;
  HEAP32[$58 >> 2] = 1;
  HEAP32[$37 >> 2] = $229;
  HEAP32[$36 >> 2] = (HEAP32[$37 >> 2] | 0) + 8;
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  $241 = HEAP32[$35 >> 2] | 0;
  HEAP32[$38 >> 2] = HEAP32[$229 + 4 >> 2];
  $244 = HEAP32[$38 >> 2] | 0;
  HEAP32[$39 >> 2] = HEAP32[$63 >> 2];
  $246 = HEAP32[$39 >> 2] | 0;
  HEAP32[$50 >> 2] = $241;
  HEAP32[$51 >> 2] = $244;
  HEAP32[$52 >> 2] = $246;
  $247 = HEAP32[$50 >> 2] | 0;
  $248 = HEAP32[$51 >> 2] | 0;
  HEAP32[$49 >> 2] = HEAP32[$52 >> 2];
  $250 = HEAP32[$49 >> 2] | 0;
  HEAP8[$48 >> 0] = HEAP8[$53 >> 0] | 0;
  HEAP32[$45 >> 2] = $247;
  HEAP32[$46 >> 2] = $248;
  HEAP32[$47 >> 2] = $250;
  $251 = HEAP32[$45 >> 2] | 0;
  $252 = HEAP32[$46 >> 2] | 0;
  HEAP32[$44 >> 2] = HEAP32[$47 >> 2];
  $254 = HEAP32[$44 >> 2] | 0;
  HEAP32[$41 >> 2] = $251;
  HEAP32[$42 >> 2] = $252;
  HEAP32[$43 >> 2] = $254;
  $255 = HEAP32[$42 >> 2] | 0;
  HEAP32[$40 >> 2] = HEAP32[$43 >> 2];
  $257 = HEAP32[$40 >> 2] | 0;
  HEAP32[$255 >> 2] = HEAP32[$257 >> 2];
  HEAP32[$255 + 4 >> 2] = HEAP32[$257 + 4 >> 2];
  HEAP32[$54 >> 2] = $64;
  $258 = $229 + 4 | 0;
  HEAP32[$258 >> 2] = (HEAP32[$258 >> 2] | 0) + 8;
 } else {
  HEAP32[$55 >> 2] = HEAP32[$63 >> 2];
  __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($229, HEAP32[$55 >> 2] | 0);
 }
 HEAP32[$34 >> 2] = $133 + 28;
 $265 = HEAP32[HEAP32[$34 >> 2] >> 2] | 0;
 $268 = HEAP32[(HEAP32[$265 >> 2] | 0) + 20 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($114, 0, 0);
 $269 = $109;
 __ZN3zim7zsize_tC2Ey($115, HEAP32[$269 >> 2] | 0, HEAP32[$269 + 4 >> 2] | 0);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$114 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$115 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$115 + 4 >> 2];
 FUNCTION_TABLE_viiii[$268 & 31]($113, $265, $$byval_copy1, $$byval_copy3);
 __THREW__ = 0;
 invoke_viii(16, $116 | 0, 8, 0);
 $275 = __THREW__;
 __THREW__ = 0;
 if ($275 & 1) {
  $341 = ___cxa_find_matching_catch_2() | 0;
  $342 = tempRet0;
  HEAP32[$117 >> 2] = $341;
  HEAP32[$118 >> 2] = $342;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
  $343 = HEAP32[$117 >> 2] | 0;
  $344 = HEAP32[$118 >> 2] | 0;
  ___resumeException($343 | 0);
 }
 while (1) {
  $278 = (HEAP32[$111 >> 2] | 0) + -1 | 0;
  HEAP32[$111 >> 2] = $278;
  if (!$278) {
   label = 24;
   break;
  }
  HEAP32[$33 >> 2] = $113;
  $281 = HEAP32[HEAP32[$33 >> 2] >> 2] | 0;
  HEAP32[$120 >> 2] = HEAP32[$116 >> 2];
  HEAP32[$120 + 4 >> 2] = HEAP32[$116 + 4 >> 2];
  __THREW__ = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$120 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$120 + 4 >> 2];
  $282 = invoke_iii(40, $281 | 0, $$byval_copy3 | 0) | 0;
  $283 = tempRet0;
  $284 = __THREW__;
  __THREW__ = 0;
  if ($284 & 1) {
   label = 13;
   break;
  }
  $286 = $119;
  HEAP32[$286 >> 2] = $282;
  HEAP32[$286 + 4 >> 2] = $283;
  $290 = $119;
  $295 = HEAP32[$290 + 4 >> 2] | 0;
  $296 = $121;
  HEAP32[$296 >> 2] = HEAP32[$290 >> 2];
  HEAP32[$296 + 4 >> 2] = $295;
  $300 = $109;
  $305 = HEAP32[$300 + 4 >> 2] | 0;
  $306 = $122;
  HEAP32[$306 >> 2] = HEAP32[$300 >> 2];
  HEAP32[$306 + 4 >> 2] = $305;
  $310 = $121;
  $315 = HEAP32[$310 + 4 >> 2] | 0;
  $316 = $122;
  $321 = HEAP32[$316 + 4 >> 2] | 0;
  if (!($315 >>> 0 > $321 >>> 0 | (($315 | 0) == ($321 | 0) ? (HEAP32[$310 >> 2] | 0) >>> 0 >= (HEAP32[$316 >> 2] | 0) >>> 0 : 0))) {
   $327 = $121;
   $333 = $122;
   __THREW__ = 0;
   invoke_viiiiiiiii(1, 49871, 49882, 49885, HEAP32[$327 >> 2] | 0, HEAP32[$327 + 4 >> 2] | 0, HEAP32[$333 >> 2] | 0, HEAP32[$333 + 4 >> 2] | 0, 49852, 77);
   $339 = __THREW__;
   __THREW__ = 0;
   if ($339 & 1) {
    label = 13;
    break;
   }
  }
  $345 = $109;
  $350 = HEAP32[$345 + 4 >> 2] | 0;
  $351 = $123;
  HEAP32[$351 >> 2] = HEAP32[$345 >> 2];
  HEAP32[$351 + 4 >> 2] = $350;
  $355 = $107;
  $360 = HEAP32[$355 + 4 >> 2] | 0;
  $361 = $124;
  HEAP32[$361 >> 2] = HEAP32[$355 >> 2];
  HEAP32[$361 + 4 >> 2] = $360;
  $365 = $123;
  $370 = HEAP32[$365 + 4 >> 2] | 0;
  $371 = $124;
  $376 = HEAP32[$371 + 4 >> 2] | 0;
  if (!($370 >>> 0 > $376 >>> 0 | (($370 | 0) == ($376 | 0) ? (HEAP32[$365 >> 2] | 0) >>> 0 >= (HEAP32[$371 >> 2] | 0) >>> 0 : 0))) {
   $382 = $123;
   $388 = $124;
   __THREW__ = 0;
   invoke_viiiiiiiii(1, 49885, 49882, 49892, HEAP32[$382 >> 2] | 0, HEAP32[$382 + 4 >> 2] | 0, HEAP32[$388 >> 2] | 0, HEAP32[$388 + 4 >> 2] | 0, 49852, 78);
   $394 = __THREW__;
   __THREW__ = 0;
   if ($394 & 1) {
    label = 13;
    break;
   }
  }
  $396 = $109;
  $401 = HEAP32[$396 + 4 >> 2] | 0;
  $402 = $125;
  HEAP32[$402 >> 2] = HEAP32[$396 >> 2];
  HEAP32[$402 + 4 >> 2] = $401;
  HEAP32[$31 >> 2] = $133 + 28;
  $408 = HEAP32[HEAP32[$31 >> 2] >> 2] | 0;
  __THREW__ = 0;
  $411 = invoke_ii(HEAP32[HEAP32[$408 >> 2] >> 2] | 0, $408 | 0) | 0;
  $412 = tempRet0;
  $413 = __THREW__;
  __THREW__ = 0;
  if ($413 & 1) {
   label = 13;
   break;
  }
  $415 = $127;
  HEAP32[$415 >> 2] = $411;
  HEAP32[$415 + 4 >> 2] = $412;
  $419 = $127;
  $424 = HEAP32[$419 + 4 >> 2] | 0;
  $425 = $126;
  HEAP32[$425 >> 2] = HEAP32[$419 >> 2];
  HEAP32[$425 + 4 >> 2] = $424;
  $429 = $125;
  $434 = HEAP32[$429 + 4 >> 2] | 0;
  $435 = $126;
  $440 = HEAP32[$435 + 4 >> 2] | 0;
  if (!($434 >>> 0 < $440 >>> 0 | (($434 | 0) == ($440 | 0) ? (HEAP32[$429 >> 2] | 0) >>> 0 <= (HEAP32[$435 >> 2] | 0) >>> 0 : 0))) {
   $446 = $125;
   $452 = $126;
   __THREW__ = 0;
   invoke_viiiiiiiii(1, 49885, 51100, 49907, HEAP32[$446 >> 2] | 0, HEAP32[$446 + 4 >> 2] | 0, HEAP32[$452 >> 2] | 0, HEAP32[$452 + 4 >> 2] | 0, 49852, 79);
   $458 = __THREW__;
   __THREW__ = 0;
   if ($458 & 1) {
    label = 13;
    break;
   }
  }
  $460 = $119;
  $465 = HEAP32[$460 + 4 >> 2] | 0;
  $466 = $109;
  HEAP32[$466 >> 2] = HEAP32[$460 >> 2];
  HEAP32[$466 + 4 >> 2] = $465;
  $471 = $109;
  $477 = $107;
  $483 = _i64Subtract(HEAP32[$471 >> 2] | 0, HEAP32[$471 + 4 >> 2] | 0, HEAP32[$477 >> 2] | 0, HEAP32[$477 + 4 >> 2] | 0) | 0;
  $484 = tempRet0;
  __THREW__ = 0;
  invoke_viii(16, $128 | 0, $483 | 0, $484 | 0);
  $485 = __THREW__;
  __THREW__ = 0;
  if ($485 & 1) {
   label = 13;
   break;
  }
  HEAP32[$28 >> 2] = $133 + 16;
  HEAP32[$29 >> 2] = $128;
  $487 = HEAP32[$28 >> 2] | 0;
  $489 = HEAP32[$487 + 4 >> 2] | 0;
  HEAP32[$27 >> 2] = $487;
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 8;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  if ($489 >>> 0 < (HEAP32[HEAP32[$25 >> 2] >> 2] | 0) >>> 0) {
   HEAP32[$22 >> 2] = $30;
   HEAP32[$23 >> 2] = $487;
   HEAP32[$24 >> 2] = 1;
   HEAP32[$3 >> 2] = $487;
   HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   $499 = HEAP32[$1 >> 2] | 0;
   HEAP32[$4 >> 2] = HEAP32[$487 + 4 >> 2];
   $502 = HEAP32[$4 >> 2] | 0;
   HEAP32[$5 >> 2] = HEAP32[$29 >> 2];
   $504 = HEAP32[$5 >> 2] | 0;
   HEAP32[$16 >> 2] = $499;
   HEAP32[$17 >> 2] = $502;
   HEAP32[$18 >> 2] = $504;
   $505 = HEAP32[$16 >> 2] | 0;
   $506 = HEAP32[$17 >> 2] | 0;
   HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
   $508 = HEAP32[$15 >> 2] | 0;
   HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
   HEAP32[$11 >> 2] = $505;
   HEAP32[$12 >> 2] = $506;
   HEAP32[$13 >> 2] = $508;
   $509 = HEAP32[$11 >> 2] | 0;
   $510 = HEAP32[$12 >> 2] | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   $512 = HEAP32[$10 >> 2] | 0;
   HEAP32[$7 >> 2] = $509;
   HEAP32[$8 >> 2] = $510;
   HEAP32[$9 >> 2] = $512;
   $513 = HEAP32[$8 >> 2] | 0;
   HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
   $515 = HEAP32[$6 >> 2] | 0;
   HEAP32[$513 >> 2] = HEAP32[$515 >> 2];
   HEAP32[$513 + 4 >> 2] = HEAP32[$515 + 4 >> 2];
   HEAP32[$20 >> 2] = $30;
   $516 = $487 + 4 | 0;
   HEAP32[$516 >> 2] = (HEAP32[$516 >> 2] | 0) + 8;
  } else {
   HEAP32[$21 >> 2] = HEAP32[$29 >> 2];
   __THREW__ = 0;
   invoke_vii(61, $487 | 0, HEAP32[$21 >> 2] | 0);
   $521 = __THREW__;
   __THREW__ = 0;
   if ($521 & 1) {
    label = 13;
    break;
   }
  }
  $523 = $129;
  HEAP32[$523 >> 2] = 8;
  HEAP32[$523 + 4 >> 2] = 0;
  __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($116, $129) | 0;
 }
 if ((label | 0) == 13) {
  $341 = ___cxa_find_matching_catch_2() | 0;
  $342 = tempRet0;
  HEAP32[$117 >> 2] = $341;
  HEAP32[$118 >> 2] = $342;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
  $343 = HEAP32[$117 >> 2] | 0;
  $344 = HEAP32[$118 >> 2] | 0;
  ___resumeException($343 | 0);
 } else if ((label | 0) == 24) {
  $527 = $109;
  $532 = HEAP32[$527 + 4 >> 2] | 0;
  $533 = $130;
  HEAP32[$533 >> 2] = HEAP32[$527 >> 2];
  HEAP32[$533 + 4 >> 2] = $532;
  HEAP32[$32 >> 2] = $133 + 28;
  $539 = HEAP32[HEAP32[$32 >> 2] >> 2] | 0;
  __THREW__ = 0;
  $542 = invoke_ii(HEAP32[HEAP32[$539 >> 2] >> 2] | 0, $539 | 0) | 0;
  $543 = tempRet0;
  $544 = __THREW__;
  __THREW__ = 0;
  if ($544 & 1) {
   $341 = ___cxa_find_matching_catch_2() | 0;
   $342 = tempRet0;
   HEAP32[$117 >> 2] = $341;
   HEAP32[$118 >> 2] = $342;
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $343 = HEAP32[$117 >> 2] | 0;
   $344 = HEAP32[$118 >> 2] | 0;
   ___resumeException($343 | 0);
  }
  $546 = $132;
  HEAP32[$546 >> 2] = $542;
  HEAP32[$546 + 4 >> 2] = $543;
  $550 = $132;
  $555 = HEAP32[$550 + 4 >> 2] | 0;
  $556 = $131;
  HEAP32[$556 >> 2] = HEAP32[$550 >> 2];
  HEAP32[$556 + 4 >> 2] = $555;
  $560 = $130;
  $566 = $131;
  if ((HEAP32[$560 >> 2] | 0) == (HEAP32[$566 >> 2] | 0) ? (HEAP32[$560 + 4 >> 2] | 0) == (HEAP32[$566 + 4 >> 2] | 0) : 0) {
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $589 = $107;
   $590 = $589;
   $591 = HEAP32[$590 >> 2] | 0;
   $592 = $589 + 4 | 0;
   $593 = $592;
   $594 = HEAP32[$593 >> 2] | 0;
   tempRet0 = $594;
   STACKTOP = sp;
   return $591 | 0;
  }
  $575 = $130;
  $581 = $131;
  __THREW__ = 0;
  invoke_viiiiiiiii(1, 49885, 50958, 49907, HEAP32[$575 >> 2] | 0, HEAP32[$575 + 4 >> 2] | 0, HEAP32[$581 >> 2] | 0, HEAP32[$581 + 4 >> 2] | 0, 49852, 85);
  $587 = __THREW__;
  __THREW__ = 0;
  if ($587 & 1) {
   $341 = ___cxa_find_matching_catch_2() | 0;
   $342 = tempRet0;
   HEAP32[$117 >> 2] = $341;
   HEAP32[$118 >> 2] = $342;
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $343 = HEAP32[$117 >> 2] | 0;
   $344 = HEAP32[$118 >> 2] | 0;
   ___resumeException($343 | 0);
  } else {
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $589 = $107;
   $590 = $589;
   $591 = HEAP32[$590 >> 2] | 0;
   $592 = $589 + 4 | 0;
   $593 = $592;
   $594 = HEAP32[$593 >> 2] | 0;
   tempRet0 = $594;
   STACKTOP = sp;
   return $591 | 0;
  }
 }
 return 0;
}

function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1530621 = 0, $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0, $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0, $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $12 = 0, $123 = 0, $126 = 0, $13 = 0, $132 = 0, $134 = 0, $136 = 0, $139 = 0, $141 = 0, $142 = 0, $145 = 0, $147 = 0, $15 = 0.0, $151 = 0, $153 = 0, $158 = 0, $16 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $188 = 0, $202 = 0, $203 = 0, $206 = 0, $211 = 0, $212 = 0, $214 = 0, $222 = 0, $223 = 0, $225 = 0, $227 = 0, $229 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $25 = 0, $251 = 0, $253 = 0, $255 = 0, $257 = 0, $262 = 0, $263 = 0, $266 = 0, $268 = 0, $270 = 0, $272 = 0, $286 = 0, $291 = 0, $30 = 0, $300 = 0, $301 = 0, $305 = 0, $308 = 0, $310 = 0, $312 = 0, $316 = 0, $319 = 0, $320 = 0, $324 = 0, $334 = 0, $339 = 0, $34 = 0, $342 = 0, $343 = 0, $344 = 0, $346 = 0, $351 = 0, $364 = 0, $368 = 0, $373 = 0, $38 = 0.0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $389 = 0, $39 = 0, $393 = 0, $395 = 0, $398 = 0, $401 = 0, $412 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $6 = 0, $63 = 0, $66 = 0, $69 = 0, $7 = 0, $71 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540723 = 0, $spec$select541 = 0, $spec$select544 = 0.0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select567 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 536 | 0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540 | 0;
 HEAP32[$7 >> 2] = 0;
 $11 = $10 + 12 | 0;
 $12 = ___DOUBLE_BITS_498($1) | 0;
 $13 = tempRet0;
 if (($13 | 0) < 0) {
  $15 = -$1;
  $16 = ___DOUBLE_BITS_498($15) | 0;
  $$0471 = $15;
  $$0522 = 1;
  $$0523 = 52208;
  $25 = tempRet0;
  $412 = $16;
 } else {
  $$0471 = $1;
  $$0522 = ($4 & 2049 | 0) != 0 & 1;
  $$0523 = ($4 & 2048 | 0) == 0 ? (($4 & 1 | 0) == 0 ? 52209 : 52214) : 52211;
  $25 = $13;
  $412 = $12;
 }
 do if (0 == 0 & ($25 & 2146435072 | 0) == 2146435072) {
  $30 = ($5 & 32 | 0) != 0;
  $34 = $$0522 + 3 | 0;
  _pad_497($0, 32, $2, $34, $4 & -65537);
  _out_491($0, $$0523, $$0522);
  _out_491($0, $$0471 != $$0471 | 0.0 != 0.0 ? ($30 ? 52235 : 52239) : $30 ? 52227 : 52231, 3);
  _pad_497($0, 32, $2, $34, $4 ^ 8192);
  $$sink757 = $34;
 } else {
  $38 = +_frexpl($$0471, $7) * 2.0;
  $39 = $38 != 0.0;
  if ($39) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  $42 = $5 | 32;
  if (($42 | 0) == 97) {
   $44 = $5 & 32;
   $spec$select = ($44 | 0) == 0 ? $$0523 : $$0523 + 9 | 0;
   $47 = $$0522 | 2;
   $49 = 12 - $3 | 0;
   do if ($3 >>> 0 > 11 | ($49 | 0) == 0) $$1472 = $38; else {
    $$0511586 = 8.0;
    $$1510587 = $49;
    do {
     $$1510587 = $$1510587 + -1 | 0;
     $$0511586 = $$0511586 * 16.0;
    } while (($$1510587 | 0) != 0);
    if ((HEAP8[$spec$select >> 0] | 0) == 45) {
     $$1472 = -($$0511586 + (-$38 - $$0511586));
     break;
    } else {
     $$1472 = $38 + $$0511586 - $$0511586;
     break;
    }
   } while (0);
   $63 = HEAP32[$7 >> 2] | 0;
   $66 = ($63 | 0) < 0 ? 0 - $63 | 0 : $63;
   $69 = _fmt_u($66, (($66 | 0) < 0) << 31 >> 31, $11) | 0;
   if (($69 | 0) == ($11 | 0)) {
    $71 = $10 + 11 | 0;
    HEAP8[$71 >> 0] = 48;
    $$0513 = $71;
   } else $$0513 = $69;
   HEAP8[$$0513 + -1 >> 0] = ($63 >> 31 & 2) + 43;
   $79 = $$0513 + -2 | 0;
   HEAP8[$79 >> 0] = $5 + 15;
   $80 = ($3 | 0) < 1;
   $82 = ($4 & 8 | 0) == 0;
   $$0525 = $8;
   $$2473 = $$1472;
   while (1) {
    $83 = ~~$$2473;
    $89 = $$0525 + 1 | 0;
    HEAP8[$$0525 >> 0] = $44 | HEAPU8[36480 + $83 >> 0];
    $$2473 = ($$2473 - +($83 | 0)) * 16.0;
    if (($89 - $9 | 0) == 1) if ($82 & ($80 & $$2473 == 0.0)) $$1526 = $89; else {
     HEAP8[$89 >> 0] = 46;
     $$1526 = $$0525 + 2 | 0;
    } else $$1526 = $89;
    if (!($$2473 != 0.0)) break; else $$0525 = $$1526;
   }
   $$pre720 = $$1526;
   if (!$3) label = 25; else if ((-2 - $9 + $$pre720 | 0) < ($3 | 0)) {
    $103 = $11;
    $104 = $79;
    $$0527 = $3 + 2 + $103 - $104 | 0;
    $$pre$phi717Z2D = $103;
    $$pre$phi718Z2D = $104;
   } else label = 25;
   if ((label | 0) == 25) {
    $108 = $11;
    $109 = $79;
    $$0527 = $108 - $9 - $109 + $$pre720 | 0;
    $$pre$phi717Z2D = $108;
    $$pre$phi718Z2D = $109;
   }
   $113 = $$0527 + $47 | 0;
   _pad_497($0, 32, $2, $113, $4);
   _out_491($0, $spec$select, $47);
   _pad_497($0, 48, $2, $113, $4 ^ 65536);
   $115 = $$pre720 - $9 | 0;
   _out_491($0, $8, $115);
   $116 = $$pre$phi717Z2D - $$pre$phi718Z2D | 0;
   _pad_497($0, 48, $$0527 - ($115 + $116) | 0, 0, 0);
   _out_491($0, $79, $116);
   _pad_497($0, 32, $2, $113, $4 ^ 8192);
   $$sink757 = $113;
   break;
  }
  $spec$select539 = ($3 | 0) < 0 ? 6 : $3;
  if ($39) {
   $123 = (HEAP32[$7 >> 2] | 0) + -28 | 0;
   HEAP32[$7 >> 2] = $123;
   $$3 = $38 * 268435456.0;
   $$pr = $123;
  } else {
   $$3 = $38;
   $$pr = HEAP32[$7 >> 2] | 0;
  }
  $$0498 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0;
  $$1499 = $$0498;
  $$4 = $$3;
  do {
   $126 = ~~$$4 >>> 0;
   HEAP32[$$1499 >> 2] = $126;
   $$1499 = $$1499 + 4 | 0;
   $$4 = ($$4 - +($126 >>> 0)) * 1.0e9;
  } while ($$4 != 0.0);
  $132 = $$0498;
  if (($$pr | 0) > 0) {
   $$1482683 = $$0498;
   $$2500682 = $$1499;
   $134 = $$pr;
   while (1) {
    $136 = ($134 | 0) < 29 ? $134 : 29;
    $$0488669 = $$2500682 + -4 | 0;
    if ($$0488669 >>> 0 < $$1482683 >>> 0) $$2483 = $$1482683; else {
     $$0488671 = $$0488669;
     $$0497670 = 0;
     do {
      $139 = _bitshift64Shl(HEAP32[$$0488671 >> 2] | 0, 0, $136 | 0) | 0;
      $141 = _i64Add($139 | 0, tempRet0 | 0, $$0497670 | 0, 0) | 0;
      $142 = tempRet0;
      $$0497670 = ___udivdi3($141 | 0, $142 | 0, 1e9, 0) | 0;
      $145 = ___muldi3($$0497670 | 0, tempRet0 | 0, 1e9, 0) | 0;
      $147 = _i64Subtract($141 | 0, $142 | 0, $145 | 0, tempRet0 | 0) | 0;
      HEAP32[$$0488671 >> 2] = $147;
      $$0488671 = $$0488671 + -4 | 0;
     } while ($$0488671 >>> 0 >= $$1482683 >>> 0);
     if (!$$0497670) $$2483 = $$1482683; else {
      $151 = $$1482683 + -4 | 0;
      HEAP32[$151 >> 2] = $$0497670;
      $$2483 = $151;
     }
    }
    L57 : do if ($$2500682 >>> 0 > $$2483 >>> 0) {
     $$3501676 = $$2500682;
     while (1) {
      $153 = $$3501676 + -4 | 0;
      if (HEAP32[$153 >> 2] | 0) {
       $$3501$lcssa = $$3501676;
       break L57;
      }
      if ($153 >>> 0 > $$2483 >>> 0) $$3501676 = $153; else {
       $$3501$lcssa = $153;
       break;
      }
     }
    } else $$3501$lcssa = $$2500682; while (0);
    $158 = (HEAP32[$7 >> 2] | 0) - $136 | 0;
    HEAP32[$7 >> 2] = $158;
    if (($158 | 0) > 0) {
     $$1482683 = $$2483;
     $$2500682 = $$3501$lcssa;
     $134 = $158;
    } else {
     $$1482$lcssa = $$2483;
     $$2500$lcssa = $$3501$lcssa;
     $$pr564 = $158;
     break;
    }
   }
  } else {
   $$1482$lcssa = $$0498;
   $$2500$lcssa = $$1499;
   $$pr564 = $$pr;
  }
  if (($$pr564 | 0) < 0) {
   $163 = (($spec$select539 + 25 | 0) / 9 | 0) + 1 | 0;
   $164 = ($42 | 0) == 102;
   $$3484663 = $$1482$lcssa;
   $$4502662 = $$2500$lcssa;
   $166 = $$pr564;
   while (1) {
    $165 = 0 - $166 | 0;
    $168 = ($165 | 0) < 9 ? $165 : 9;
    if ($$3484663 >>> 0 < $$4502662 >>> 0) {
     $174 = (1 << $168) + -1 | 0;
     $175 = 1e9 >>> $168;
     $$0487657 = 0;
     $$1489656 = $$3484663;
     do {
      $176 = HEAP32[$$1489656 >> 2] | 0;
      HEAP32[$$1489656 >> 2] = ($176 >>> $168) + $$0487657;
      $$0487657 = Math_imul($176 & $174, $175) | 0;
      $$1489656 = $$1489656 + 4 | 0;
     } while ($$1489656 >>> 0 < $$4502662 >>> 0);
     $spec$select540 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
     if (!$$0487657) {
      $$5503 = $$4502662;
      $spec$select540723 = $spec$select540;
     } else {
      HEAP32[$$4502662 >> 2] = $$0487657;
      $$5503 = $$4502662 + 4 | 0;
      $spec$select540723 = $spec$select540;
     }
    } else {
     $$5503 = $$4502662;
     $spec$select540723 = (HEAP32[$$3484663 >> 2] | 0) == 0 ? $$3484663 + 4 | 0 : $$3484663;
    }
    $188 = $164 ? $$0498 : $spec$select540723;
    $spec$select541 = ($$5503 - $188 >> 2 | 0) > ($163 | 0) ? $188 + ($163 << 2) | 0 : $$5503;
    $166 = (HEAP32[$7 >> 2] | 0) + $168 | 0;
    HEAP32[$7 >> 2] = $166;
    if (($166 | 0) >= 0) {
     $$3484$lcssa = $spec$select540723;
     $$4502$lcssa = $spec$select541;
     break;
    } else {
     $$3484663 = $spec$select540723;
     $$4502662 = $spec$select541;
    }
   }
  } else {
   $$3484$lcssa = $$1482$lcssa;
   $$4502$lcssa = $$2500$lcssa;
  }
  if ($$3484$lcssa >>> 0 < $$4502$lcssa >>> 0) {
   $202 = ($132 - $$3484$lcssa >> 2) * 9 | 0;
   $203 = HEAP32[$$3484$lcssa >> 2] | 0;
   if ($203 >>> 0 < 10) $$1517 = $202; else {
    $$0516652 = $202;
    $$0532651 = 10;
    while (1) {
     $$0532651 = $$0532651 * 10 | 0;
     $206 = $$0516652 + 1 | 0;
     if ($203 >>> 0 < $$0532651 >>> 0) {
      $$1517 = $206;
      break;
     } else $$0516652 = $206;
    }
   }
  } else $$1517 = 0;
  $211 = ($42 | 0) == 103;
  $212 = ($spec$select539 | 0) != 0;
  $214 = $spec$select539 - (($42 | 0) == 102 ? 0 : $$1517) + (($212 & $211) << 31 >> 31) | 0;
  if (($214 | 0) < ((($$4502$lcssa - $132 >> 2) * 9 | 0) + -9 | 0)) {
   $222 = $214 + 9216 | 0;
   $223 = ($222 | 0) / 9 | 0;
   $225 = $$0498 + 4 + ($223 + -1024 << 2) | 0;
   $227 = $222 - ($223 * 9 | 0) | 0;
   if (($227 | 0) < 8) {
    $$0529$in646 = $227;
    $$1533645 = 10;
    while (1) {
     $229 = $$1533645 * 10 | 0;
     if (($$0529$in646 | 0) < 7) {
      $$0529$in646 = $$0529$in646 + 1 | 0;
      $$1533645 = $229;
     } else {
      $$1533$lcssa = $229;
      break;
     }
    }
   } else $$1533$lcssa = 10;
   $231 = HEAP32[$225 >> 2] | 0;
   $232 = ($231 >>> 0) / ($$1533$lcssa >>> 0) | 0;
   $234 = $231 - (Math_imul($232, $$1533$lcssa) | 0) | 0;
   $237 = ($225 + 4 | 0) == ($$4502$lcssa | 0);
   if ($237 & ($234 | 0) == 0) {
    $$4492 = $225;
    $$4520 = $$1517;
    $$8 = $$3484$lcssa;
   } else {
    $spec$select544 = ($232 & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
    $240 = $$1533$lcssa >>> 1;
    $spec$select567 = $234 >>> 0 < $240 >>> 0 ? .5 : $237 & ($234 | 0) == ($240 | 0) ? 1.0 : 1.5;
    if (!$$0522) {
     $$1467 = $spec$select567;
     $$1469 = $spec$select544;
    } else {
     $245 = (HEAP8[$$0523 >> 0] | 0) == 45;
     $$1467 = $245 ? -$spec$select567 : $spec$select567;
     $$1469 = $245 ? -$spec$select544 : $spec$select544;
    }
    $248 = $231 - $234 | 0;
    HEAP32[$225 >> 2] = $248;
    if ($$1469 + $$1467 != $$1469) {
     $251 = $248 + $$1533$lcssa | 0;
     HEAP32[$225 >> 2] = $251;
     if ($251 >>> 0 > 999999999) {
      $$2490638 = $225;
      $$5486639 = $$3484$lcssa;
      while (1) {
       $253 = $$2490638 + -4 | 0;
       HEAP32[$$2490638 >> 2] = 0;
       if ($253 >>> 0 < $$5486639 >>> 0) {
        $255 = $$5486639 + -4 | 0;
        HEAP32[$255 >> 2] = 0;
        $$6 = $255;
       } else $$6 = $$5486639;
       $257 = (HEAP32[$253 >> 2] | 0) + 1 | 0;
       HEAP32[$253 >> 2] = $257;
       if ($257 >>> 0 > 999999999) {
        $$2490638 = $253;
        $$5486639 = $$6;
       } else {
        $$2490$lcssa = $253;
        $$5486$lcssa = $$6;
        break;
       }
      }
     } else {
      $$2490$lcssa = $225;
      $$5486$lcssa = $$3484$lcssa;
     }
     $262 = ($132 - $$5486$lcssa >> 2) * 9 | 0;
     $263 = HEAP32[$$5486$lcssa >> 2] | 0;
     if ($263 >>> 0 < 10) {
      $$4492 = $$2490$lcssa;
      $$4520 = $262;
      $$8 = $$5486$lcssa;
     } else {
      $$2518634 = $262;
      $$2534633 = 10;
      while (1) {
       $$2534633 = $$2534633 * 10 | 0;
       $266 = $$2518634 + 1 | 0;
       if ($263 >>> 0 < $$2534633 >>> 0) {
        $$4492 = $$2490$lcssa;
        $$4520 = $266;
        $$8 = $$5486$lcssa;
        break;
       } else $$2518634 = $266;
      }
     }
    } else {
     $$4492 = $225;
     $$4520 = $$1517;
     $$8 = $$3484$lcssa;
    }
   }
   $268 = $$4492 + 4 | 0;
   $$5521 = $$4520;
   $$8506 = $$4502$lcssa >>> 0 > $268 >>> 0 ? $268 : $$4502$lcssa;
   $$9 = $$8;
  } else {
   $$5521 = $$1517;
   $$8506 = $$4502$lcssa;
   $$9 = $$3484$lcssa;
  }
  $270 = 0 - $$5521 | 0;
  L109 : do if ($$8506 >>> 0 > $$9 >>> 0) {
   $$9507625 = $$8506;
   while (1) {
    $272 = $$9507625 + -4 | 0;
    if (HEAP32[$272 >> 2] | 0) {
     $$9507$lcssa = $$9507625;
     $$lcssa583 = 1;
     break L109;
    }
    if ($272 >>> 0 > $$9 >>> 0) $$9507625 = $272; else {
     $$9507$lcssa = $272;
     $$lcssa583 = 0;
     break;
    }
   }
  } else {
   $$9507$lcssa = $$8506;
   $$lcssa583 = 0;
  } while (0);
  do if ($211) {
   $spec$select548 = $spec$select539 + (($212 ^ 1) & 1) | 0;
   if (($spec$select548 | 0) > ($$5521 | 0) & ($$5521 | 0) > -5) {
    $$0479 = $5 + -1 | 0;
    $$2476 = $spec$select548 + -1 - $$5521 | 0;
   } else {
    $$0479 = $5 + -2 | 0;
    $$2476 = $spec$select548 + -1 | 0;
   }
   if (!($4 & 8)) {
    if ($$lcssa583) {
     $286 = HEAP32[$$9507$lcssa + -4 >> 2] | 0;
     if (!$286) $$2531 = 9; else if (!(($286 >>> 0) % 10 | 0)) {
      $$1530621 = 0;
      $$3535620 = 10;
      while (1) {
       $$3535620 = $$3535620 * 10 | 0;
       $291 = $$1530621 + 1 | 0;
       if (($286 >>> 0) % ($$3535620 >>> 0) | 0 | 0) {
        $$2531 = $291;
        break;
       } else $$1530621 = $291;
      }
     } else $$2531 = 0;
    } else $$2531 = 9;
    $300 = (($$9507$lcssa - $132 >> 2) * 9 | 0) + -9 | 0;
    if (($$0479 | 32 | 0) == 102) {
     $301 = $300 - $$2531 | 0;
     $spec$select549 = ($301 | 0) > 0 ? $301 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select549 | 0) ? $$2476 : $spec$select549;
     break;
    } else {
     $305 = $300 + $$5521 - $$2531 | 0;
     $spec$select551 = ($305 | 0) > 0 ? $305 : 0;
     $$1480 = $$0479;
     $$3477 = ($$2476 | 0) < ($spec$select551 | 0) ? $$2476 : $spec$select551;
     break;
    }
   } else {
    $$1480 = $$0479;
    $$3477 = $$2476;
   }
  } else {
   $$1480 = $5;
   $$3477 = $spec$select539;
  } while (0);
  $308 = ($$3477 | 0) != 0;
  $310 = $308 ? 1 : $4 >>> 3 & 1;
  $312 = ($$1480 | 32 | 0) == 102;
  if ($312) {
   $$2515 = 0;
   $$pn = ($$5521 | 0) > 0 ? $$5521 : 0;
  } else {
   $316 = ($$5521 | 0) < 0 ? $270 : $$5521;
   $319 = _fmt_u($316, (($316 | 0) < 0) << 31 >> 31, $11) | 0;
   $320 = $11;
   if (($320 - $319 | 0) < 2) {
    $$1514614 = $319;
    while (1) {
     $324 = $$1514614 + -1 | 0;
     HEAP8[$324 >> 0] = 48;
     if (($320 - $324 | 0) < 2) $$1514614 = $324; else {
      $$1514$lcssa = $324;
      break;
     }
    }
   } else $$1514$lcssa = $319;
   HEAP8[$$1514$lcssa + -1 >> 0] = ($$5521 >> 31 & 2) + 43;
   $334 = $$1514$lcssa + -2 | 0;
   HEAP8[$334 >> 0] = $$1480;
   $$2515 = $334;
   $$pn = $320 - $334 | 0;
  }
  $339 = $$0522 + 1 + $$3477 + $310 + $$pn | 0;
  _pad_497($0, 32, $2, $339, $4);
  _out_491($0, $$0523, $$0522);
  _pad_497($0, 48, $2, $339, $4 ^ 65536);
  if ($312) {
   $spec$select554 = $$9 >>> 0 > $$0498 >>> 0 ? $$0498 : $$9;
   $342 = $8 + 9 | 0;
   $343 = $342;
   $344 = $8 + 8 | 0;
   $$5493603 = $spec$select554;
   do {
    $346 = _fmt_u(HEAP32[$$5493603 >> 2] | 0, 0, $342) | 0;
    if (($$5493603 | 0) == ($spec$select554 | 0)) if (($346 | 0) == ($342 | 0)) {
     HEAP8[$344 >> 0] = 48;
     $$1465 = $344;
    } else $$1465 = $346; else if ($346 >>> 0 > $8 >>> 0) {
     _memset($8 | 0, 48, $346 - $9 | 0) | 0;
     $$0464599 = $346;
     while (1) {
      $351 = $$0464599 + -1 | 0;
      if ($351 >>> 0 > $8 >>> 0) $$0464599 = $351; else {
       $$1465 = $351;
       break;
      }
     }
    } else $$1465 = $346;
    _out_491($0, $$1465, $343 - $$1465 | 0);
    $$5493603 = $$5493603 + 4 | 0;
   } while ($$5493603 >>> 0 <= $$0498 >>> 0);
   if (!(($4 & 8 | 0) == 0 & ($308 ^ 1))) _out_491($0, 52243, 1);
   if ($$5493603 >>> 0 < $$9507$lcssa >>> 0 & ($$3477 | 0) > 0) {
    $$4478594 = $$3477;
    $$6494593 = $$5493603;
    while (1) {
     $364 = _fmt_u(HEAP32[$$6494593 >> 2] | 0, 0, $342) | 0;
     if ($364 >>> 0 > $8 >>> 0) {
      _memset($8 | 0, 48, $364 - $9 | 0) | 0;
      $$0463588 = $364;
      while (1) {
       $368 = $$0463588 + -1 | 0;
       if ($368 >>> 0 > $8 >>> 0) $$0463588 = $368; else {
        $$0463$lcssa = $368;
        break;
       }
      }
     } else $$0463$lcssa = $364;
     _out_491($0, $$0463$lcssa, ($$4478594 | 0) < 9 ? $$4478594 : 9);
     $$6494593 = $$6494593 + 4 | 0;
     $373 = $$4478594 + -9 | 0;
     if (!($$6494593 >>> 0 < $$9507$lcssa >>> 0 & ($$4478594 | 0) > 9)) {
      $$4478$lcssa = $373;
      break;
     } else $$4478594 = $373;
    }
   } else $$4478$lcssa = $$3477;
   _pad_497($0, 48, $$4478$lcssa + 9 | 0, 9, 0);
  } else {
   $spec$select557 = $$lcssa583 ? $$9507$lcssa : $$9 + 4 | 0;
   if ($$9 >>> 0 < $spec$select557 >>> 0 & ($$3477 | 0) > -1) {
    $382 = $8 + 9 | 0;
    $384 = ($4 & 8 | 0) == 0;
    $385 = $382;
    $386 = 0 - $9 | 0;
    $387 = $8 + 8 | 0;
    $$5609 = $$3477;
    $$7495608 = $$9;
    while (1) {
     $389 = _fmt_u(HEAP32[$$7495608 >> 2] | 0, 0, $382) | 0;
     if (($389 | 0) == ($382 | 0)) {
      HEAP8[$387 >> 0] = 48;
      $$0 = $387;
     } else $$0 = $389;
     do if (($$7495608 | 0) == ($$9 | 0)) {
      $395 = $$0 + 1 | 0;
      _out_491($0, $$0, 1);
      if ($384 & ($$5609 | 0) < 1) {
       $$2 = $395;
       break;
      }
      _out_491($0, 52243, 1);
      $$2 = $395;
     } else {
      if ($$0 >>> 0 <= $8 >>> 0) {
       $$2 = $$0;
       break;
      }
      _memset($8 | 0, 48, $$0 + $386 | 0) | 0;
      $$1604 = $$0;
      while (1) {
       $393 = $$1604 + -1 | 0;
       if ($393 >>> 0 > $8 >>> 0) $$1604 = $393; else {
        $$2 = $393;
        break;
       }
      }
     } while (0);
     $398 = $385 - $$2 | 0;
     _out_491($0, $$2, ($$5609 | 0) > ($398 | 0) ? $398 : $$5609);
     $401 = $$5609 - $398 | 0;
     $$7495608 = $$7495608 + 4 | 0;
     if (!($$7495608 >>> 0 < $spec$select557 >>> 0 & ($401 | 0) > -1)) {
      $$5$lcssa = $401;
      break;
     } else $$5609 = $401;
    }
   } else $$5$lcssa = $$3477;
   _pad_497($0, 48, $$5$lcssa + 18 | 0, 18, 0);
   _out_491($0, $$2515, $11 - $$2515 | 0);
  }
  _pad_497($0, 32, $2, $339, $4 ^ 8192);
  $$sink757 = $339;
 } while (0);
 STACKTOP = sp;
 return (($$sink757 | 0) < ($2 | 0) ? $2 : $$sink757) | 0;
}

function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0, $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0, $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0, $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0, $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$pre = 0, $$sink$off0 = 0, $10 = 0, $105 = 0, $109 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $127 = 0, $129 = 0, $139 = 0, $141 = 0, $153 = 0, $155 = 0, $177 = 0, $18 = 0, $189 = 0, $193 = 0, $196 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $218 = 0, $219 = 0, $220 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $235 = 0, $237 = 0, $239 = 0, $244 = 0, $247 = 0, $25 = 0, $251 = 0, $254 = 0, $257 = 0, $264 = 0, $267 = 0, $269 = 0, $27 = 0, $274 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $283 = 0, $29 = 0, $294 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $31 = 0, $318 = 0.0, $319 = 0.0, $320 = 0, $321 = 0, $322 = 0, $327 = 0.0, $330 = 0.0, $334 = 0, $337 = 0, $361 = 0.0, $366 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $7 = 0, $71 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $85 = 0, $86 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $or$cond417 = 0, $or$cond421 = 0, $spec$select420 = 0, $spec$select441 = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $6 = sp;
 $7 = $3 + $2 | 0;
 $8 = 0 - $7 | 0;
 $9 = $0 + 4 | 0;
 $10 = $0 + 100 | 0;
 $$0324 = $1;
 $$0393 = 0;
 L1 : while (1) {
  switch ($$0324 | 0) {
  case 46:
   {
    label = 7;
    break L1;
    break;
   }
  case 48:
   break;
  default:
   {
    $$0390 = 0;
    $$2 = $$0324;
    $$2395 = $$0393;
    $375 = 0;
    $376 = 0;
    break L1;
   }
  }
  $11 = HEAP32[$9 >> 2] | 0;
  if ($11 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $11 + 1;
   $$0324$be = HEAPU8[$11 >> 0] | 0;
  } else $$0324$be = ___shgetc($0) | 0;
  $$0324 = $$0324$be;
  $$0393 = 1;
 }
 if ((label | 0) == 7) {
  $18 = HEAP32[$9 >> 2] | 0;
  if ($18 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $18 + 1;
   $25 = HEAPU8[$18 >> 0] | 0;
  } else $25 = ___shgetc($0) | 0;
  if (($25 | 0) == 48) {
   $27 = 0;
   $28 = 0;
   while (1) {
    $29 = _i64Add($27 | 0, $28 | 0, -1, -1) | 0;
    $30 = tempRet0;
    $31 = HEAP32[$9 >> 2] | 0;
    if ($31 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
     HEAP32[$9 >> 2] = $31 + 1;
     $38 = HEAPU8[$31 >> 0] | 0;
    } else $38 = ___shgetc($0) | 0;
    if (($38 | 0) == 48) {
     $27 = $29;
     $28 = $30;
    } else {
     $$0390 = 1;
     $$2 = $38;
     $$2395 = 1;
     $375 = $29;
     $376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;
   $$2 = $25;
   $$2395 = $$0393;
   $375 = 0;
   $376 = 0;
  }
 }
 HEAP32[$6 >> 2] = 0;
 $40 = $$2 + -48 | 0;
 $42 = ($$2 | 0) == 46;
 L22 : do if ($42 | $40 >>> 0 < 10) {
  $44 = $6 + 496 | 0;
  $$0336503 = 0;
  $$0340502 = 0;
  $$0398499 = 0;
  $$1391501 = $$0390;
  $$3396500 = $$2395;
  $$3504 = $$2;
  $377 = $42;
  $378 = $40;
  $379 = $375;
  $380 = $376;
  $47 = 0;
  $48 = 0;
  L24 : while (1) {
   do if ($377) if (!$$1391501) {
    $$2338 = $$0336503;
    $$2342 = $$0340502;
    $$2392 = 1;
    $$2400 = $$0398499;
    $$4397 = $$3396500;
    $381 = $47;
    $382 = $48;
    $383 = $47;
    $384 = $48;
   } else break L24; else {
    $49 = _i64Add($47 | 0, $48 | 0, 1, 0) | 0;
    $50 = tempRet0;
    $51 = ($$3504 | 0) != 48;
    if (($$0340502 | 0) >= 125) {
     if (!$51) {
      $$2338 = $$0336503;
      $$2342 = $$0340502;
      $$2392 = $$1391501;
      $$2400 = $$0398499;
      $$4397 = $$3396500;
      $381 = $379;
      $382 = $380;
      $383 = $49;
      $384 = $50;
      break;
     }
     HEAP32[$44 >> 2] = HEAP32[$44 >> 2] | 1;
     $$2338 = $$0336503;
     $$2342 = $$0340502;
     $$2392 = $$1391501;
     $$2400 = $$0398499;
     $$4397 = $$3396500;
     $381 = $379;
     $382 = $380;
     $383 = $49;
     $384 = $50;
     break;
    }
    $53 = $6 + ($$0340502 << 2) | 0;
    if (!$$0336503) $storemerge446 = $378; else $storemerge446 = $$3504 + -48 + ((HEAP32[$53 >> 2] | 0) * 10 | 0) | 0;
    HEAP32[$53 >> 2] = $storemerge446;
    $58 = $$0336503 + 1 | 0;
    $59 = ($58 | 0) == 9;
    $$2338 = $59 ? 0 : $58;
    $$2342 = $$0340502 + ($59 & 1) | 0;
    $$2392 = $$1391501;
    $$2400 = $51 ? $49 : $$0398499;
    $$4397 = 1;
    $381 = $379;
    $382 = $380;
    $383 = $49;
    $384 = $50;
   } while (0);
   $63 = HEAP32[$9 >> 2] | 0;
   if ($63 >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) {
    HEAP32[$9 >> 2] = $63 + 1;
    $71 = HEAPU8[$63 >> 0] | 0;
   } else $71 = ___shgetc($0) | 0;
   $378 = $71 + -48 | 0;
   $377 = ($71 | 0) == 46;
   if (!($377 | $378 >>> 0 < 10)) {
    $$0336$lcssa = $$2338;
    $$0340$lcssa = $$2342;
    $$0398$lcssa = $$2400;
    $$1391$lcssa = $$2392;
    $$3$lcssa = $71;
    $$3396$lcssa = $$4397;
    $76 = $381;
    $77 = $383;
    $79 = $382;
    $80 = $384;
    label = 31;
    break L22;
   } else {
    $$0336503 = $$2338;
    $$0340502 = $$2342;
    $$0398499 = $$2400;
    $$1391501 = $$2392;
    $$3396500 = $$4397;
    $$3504 = $71;
    $379 = $381;
    $380 = $382;
    $47 = $383;
    $48 = $384;
   }
  }
  $$0336455 = $$0336503;
  $$0340459 = $$0340502;
  $$0398465 = $$0398499;
  $385 = $47;
  $386 = $48;
  $387 = $379;
  $388 = $380;
  $389 = ($$3396500 | 0) != 0;
  label = 39;
 } else {
  $$0336$lcssa = 0;
  $$0340$lcssa = 0;
  $$0398$lcssa = 0;
  $$1391$lcssa = $$0390;
  $$3$lcssa = $$2;
  $$3396$lcssa = $$2395;
  $76 = $375;
  $77 = 0;
  $79 = $376;
  $80 = 0;
  label = 31;
 } while (0);
 do if ((label | 0) == 31) {
  $75 = ($$1391$lcssa | 0) == 0;
  $78 = $75 ? $77 : $76;
  $81 = $75 ? $80 : $79;
  $82 = ($$3396$lcssa | 0) != 0;
  if (!($82 & ($$3$lcssa | 32 | 0) == 101)) if (($$3$lcssa | 0) > -1) {
   $$0336455 = $$0336$lcssa;
   $$0340459 = $$0340$lcssa;
   $$0398465 = $$0398$lcssa;
   $385 = $77;
   $386 = $80;
   $387 = $78;
   $388 = $81;
   $389 = $82;
   label = 39;
   break;
  } else {
   $$0336454 = $$0336$lcssa;
   $$0340458 = $$0340$lcssa;
   $$0398464 = $$0398$lcssa;
   $390 = $77;
   $391 = $80;
   $392 = $82;
   $393 = $78;
   $394 = $81;
   label = 41;
   break;
  }
  $85 = _scanexp($0, $5) | 0;
  $86 = tempRet0;
  if (($85 | 0) == 0 & ($86 | 0) == -2147483648) {
   if (!$5) {
    ___shlim($0, 0);
    $$1 = 0.0;
    break;
   }
   if (!(HEAP32[$10 >> 2] | 0)) {
    $95 = 0;
    $96 = 0;
   } else {
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
    $95 = 0;
    $96 = 0;
   }
  } else {
   $95 = $85;
   $96 = $86;
  }
  $97 = _i64Add($95 | 0, $96 | 0, $78 | 0, $81 | 0) | 0;
  $$0336453 = $$0336$lcssa;
  $$0340457 = $$0340$lcssa;
  $$0398463 = $$0398$lcssa;
  $109 = $97;
  $111 = $77;
  $112 = tempRet0;
  $114 = $80;
  label = 43;
 } while (0);
 if ((label | 0) == 39) if (!(HEAP32[$10 >> 2] | 0)) {
  $$0336454 = $$0336455;
  $$0340458 = $$0340459;
  $$0398464 = $$0398465;
  $390 = $385;
  $391 = $386;
  $392 = $389;
  $393 = $387;
  $394 = $388;
  label = 41;
 } else {
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + -1;
  if ($389) {
   $$0336453 = $$0336455;
   $$0340457 = $$0340459;
   $$0398463 = $$0398465;
   $109 = $387;
   $111 = $385;
   $112 = $388;
   $114 = $386;
   label = 43;
  } else label = 42;
 }
 if ((label | 0) == 41) if ($392) {
  $$0336453 = $$0336454;
  $$0340457 = $$0340458;
  $$0398463 = $$0398464;
  $109 = $393;
  $111 = $390;
  $112 = $394;
  $114 = $391;
  label = 43;
 } else label = 42;
 do if ((label | 0) == 42) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($0, 0);
  $$1 = 0.0;
 } else if ((label | 0) == 43) {
  $105 = HEAP32[$6 >> 2] | 0;
  if (!$105) {
   $$1 = +($4 | 0) * 0.0;
   break;
  }
  if ((($114 | 0) < 0 | ($114 | 0) == 0 & $111 >>> 0 < 10) & (($109 | 0) == ($111 | 0) & ($112 | 0) == ($114 | 0))) if (($2 | 0) > 30 | ($105 >>> $2 | 0) == 0) {
   $$1 = +($4 | 0) * +($105 >>> 0);
   break;
  }
  $127 = ($3 | 0) / -2 | 0;
  $129 = (($127 | 0) < 0) << 31 >> 31;
  if (($112 | 0) > ($129 | 0) | ($112 | 0) == ($129 | 0) & $109 >>> 0 > $127 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1 = +($4 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $139 = $3 + -106 | 0;
  $141 = (($139 | 0) < 0) << 31 >> 31;
  if (($112 | 0) < ($141 | 0) | ($112 | 0) == ($141 | 0) & $109 >>> 0 < $139 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (!$$0336453) $$3343 = $$0340457; else {
   if (($$0336453 | 0) < 9) {
    $153 = $6 + ($$0340457 << 2) | 0;
    $$3339493 = $$0336453;
    $155 = HEAP32[$153 >> 2] | 0;
    while (1) {
     $155 = $155 * 10 | 0;
     if (($$3339493 | 0) >= 8) break; else $$3339493 = $$3339493 + 1 | 0;
    }
    HEAP32[$153 >> 2] = $155;
   }
   $$3343 = $$0340457 + 1 | 0;
  }
  if (($$0398463 | 0) < 9) if (($$0398463 | 0) <= ($109 | 0) & ($109 | 0) < 18) {
   if (($109 | 0) == 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0);
    break;
   }
   if (($109 | 0) < 9) {
    $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[35984 + (8 - $109 << 2) >> 2] | 0);
    break;
   }
   $177 = $2 + 27 + (Math_imul($109, -3) | 0) | 0;
   $$pre = HEAP32[$6 >> 2] | 0;
   if (($177 | 0) > 30 | ($$pre >>> $177 | 0) == 0) {
    $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[35984 + ($109 + -10 << 2) >> 2] | 0);
    break;
   }
  }
  $189 = ($109 | 0) % 9 | 0;
  if (!$189) {
   $$2369$ph = $$3343;
   $$3348$ph = 0;
   $$3384$ph = $109;
  } else {
   $193 = ($109 | 0) > -1 ? $189 : $189 + 9 | 0;
   $196 = HEAP32[35984 + (8 - $193 << 2) >> 2] | 0;
   if (!$$3343) {
    $$0345$lcssa540 = 0;
    $$0367 = 0;
    $$0381$lcssa539 = $109;
   } else {
    $198 = 1e9 / ($196 | 0) | 0;
    $$0335486 = 0;
    $$0345484 = 0;
    $$0381483 = $109;
    $$4344485 = 0;
    do {
     $199 = $6 + ($$4344485 << 2) | 0;
     $200 = HEAP32[$199 >> 2] | 0;
     $201 = ($200 >>> 0) / ($196 >>> 0) | 0;
     $203 = $200 - (Math_imul($201, $196) | 0) | 0;
     $204 = $201 + $$0335486 | 0;
     HEAP32[$199 >> 2] = $204;
     $$0335486 = Math_imul($198, $203) | 0;
     $or$cond417 = ($$4344485 | 0) == ($$0345484 | 0) & ($204 | 0) == 0;
     $$0381483 = $or$cond417 ? $$0381483 + -9 | 0 : $$0381483;
     $$0345484 = $or$cond417 ? $$0345484 + 1 & 127 : $$0345484;
     $$4344485 = $$4344485 + 1 | 0;
    } while (($$4344485 | 0) != ($$3343 | 0));
    if (!$$0335486) {
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343;
     $$0381$lcssa539 = $$0381483;
    } else {
     HEAP32[$6 + ($$3343 << 2) >> 2] = $$0335486;
     $$0345$lcssa540 = $$0345484;
     $$0367 = $$3343 + 1 | 0;
     $$0381$lcssa539 = $$0381483;
    }
   }
   $$2369$ph = $$0367;
   $$3348$ph = $$0345$lcssa540;
   $$3384$ph = 9 - $193 + $$0381$lcssa539 | 0;
  }
  $$0376$ph = 0;
  $$2369$ph579 = $$2369$ph;
  $$3348$ph580 = $$3348$ph;
  $$3384$ph578 = $$3384$ph;
  L104 : while (1) {
   $218 = ($$3384$ph578 | 0) < 18;
   $219 = ($$3384$ph578 | 0) == 18;
   $220 = $6 + ($$3348$ph580 << 2) | 0;
   $$0376 = $$0376$ph;
   $$2369 = $$2369$ph579;
   while (1) {
    if (!$218) {
     if (!$219) {
      $$5386$ph = $$3384$ph578;
      break L104;
     }
     if ((HEAP32[$220 >> 2] | 0) >>> 0 >= 9007199) {
      $$5386$ph = 18;
      break L104;
     }
    }
    $$0329 = 0;
    $$3370 = $$2369;
    $$5$in = $$2369 + 127 | 0;
    while (1) {
     $$5 = $$5$in & 127;
     $224 = $6 + ($$5 << 2) | 0;
     $226 = _bitshift64Shl(HEAP32[$224 >> 2] | 0, 0, 29) | 0;
     $228 = _i64Add($226 | 0, tempRet0 | 0, $$0329 | 0, 0) | 0;
     $229 = tempRet0;
     if ($229 >>> 0 > 0 | ($229 | 0) == 0 & $228 >>> 0 > 1e9) {
      $235 = ___udivdi3($228 | 0, $229 | 0, 1e9, 0) | 0;
      $237 = ___muldi3($235 | 0, tempRet0 | 0, 1e9, 0) | 0;
      $239 = _i64Subtract($228 | 0, $229 | 0, $237 | 0, tempRet0 | 0) | 0;
      $$1330 = $235;
      $$sink$off0 = $239;
     } else {
      $$1330 = 0;
      $$sink$off0 = $228;
     }
     HEAP32[$224 >> 2] = $$sink$off0;
     $244 = ($$5 | 0) == ($$3348$ph580 | 0);
     $spec$select441 = ($$5 | 0) != ($$3370 + 127 & 127 | 0) | $244 ? $$3370 : ($$sink$off0 | 0) == 0 ? $$5 : $$3370;
     if ($244) break; else {
      $$0329 = $$1330;
      $$3370 = $spec$select441;
      $$5$in = $$5 + -1 | 0;
     }
    }
    $247 = $$0376 + -29 | 0;
    if (!$$1330) {
     $$0376 = $247;
     $$2369 = $$3370;
    } else break;
   }
   $251 = $$3348$ph580 + 127 & 127;
   $254 = $spec$select441 + 127 & 127;
   $257 = $6 + (($spec$select441 + 126 & 127) << 2) | 0;
   if (($251 | 0) == ($spec$select441 | 0)) {
    HEAP32[$257 >> 2] = HEAP32[$257 >> 2] | HEAP32[$6 + ($254 << 2) >> 2];
    $$5372 = $254;
   } else $$5372 = $$3370;
   HEAP32[$6 + ($251 << 2) >> 2] = $$1330;
   $$0376$ph = $247;
   $$2369$ph579 = $$5372;
   $$3348$ph580 = $251;
   $$3384$ph578 = $$3384$ph578 + 9 | 0;
  }
  $$1377$ph$ph = $$0376;
  $$5350$ph$ph = $$3348$ph580;
  $$5386$ph576$ph = $$5386$ph;
  $$7374$ph$ph = $$2369;
  L123 : while (1) {
   $296 = $$7374$ph$ph + 1 & 127;
   $302 = $6 + (($$7374$ph$ph + 127 & 127) << 2) | 0;
   $$1377$ph = $$1377$ph$ph;
   $$5350$ph = $$5350$ph$ph;
   $$5386$ph576 = $$5386$ph576$ph;
   while (1) {
    $294 = ($$5386$ph576 | 0) == 18;
    $spec$select420 = ($$5386$ph576 | 0) > 27 ? 9 : 1;
    $$1377 = $$1377$ph;
    $$5350 = $$5350$ph;
    while (1) {
     $$0331476 = 0;
     while (1) {
      $264 = $$0331476 + $$5350 & 127;
      if (($264 | 0) == ($$7374$ph$ph | 0)) {
       label = 92;
       break;
      }
      $267 = HEAP32[$6 + ($264 << 2) >> 2] | 0;
      $269 = HEAP32[44380 + ($$0331476 << 2) >> 2] | 0;
      if ($267 >>> 0 < $269 >>> 0) {
       label = 92;
       break;
      }
      if ($267 >>> 0 > $269 >>> 0) break;
      if (($$0331476 + 1 | 0) >>> 0 < 2) $$0331476 = 1; else {
       label = 92;
       break;
      }
     }
     if ((label | 0) == 92) {
      label = 0;
      if ($294) break L123;
     }
     $274 = $spec$select420 + $$1377 | 0;
     if (($$5350 | 0) == ($$7374$ph$ph | 0)) {
      $$1377 = $274;
      $$5350 = $$7374$ph$ph;
     } else break;
    }
    $277 = (1 << $spec$select420) + -1 | 0;
    $278 = 1e9 >>> $spec$select420;
    $$0327480 = 0;
    $$6351478 = $$5350;
    $$6387477 = $$5386$ph576;
    $$6479 = $$5350;
    do {
     $279 = $6 + ($$6479 << 2) | 0;
     $280 = HEAP32[$279 >> 2] | 0;
     $283 = ($280 >>> $spec$select420) + $$0327480 | 0;
     HEAP32[$279 >> 2] = $283;
     $$0327480 = Math_imul($280 & $277, $278) | 0;
     $or$cond421 = ($$6479 | 0) == ($$6351478 | 0) & ($283 | 0) == 0;
     $$6387477 = $or$cond421 ? $$6387477 + -9 | 0 : $$6387477;
     $$6351478 = $or$cond421 ? $$6351478 + 1 & 127 : $$6351478;
     $$6479 = $$6479 + 1 & 127;
    } while (($$6479 | 0) != ($$7374$ph$ph | 0));
    if ($$0327480 | 0) {
     if (($296 | 0) != ($$6351478 | 0)) break;
     HEAP32[$302 >> 2] = HEAP32[$302 >> 2] | 1;
    }
    $$1377$ph = $274;
    $$5350$ph = $$6351478;
    $$5386$ph576 = $$6387477;
   }
   HEAP32[$6 + ($$7374$ph$ph << 2) >> 2] = $$0327480;
   $$1377$ph$ph = $274;
   $$5350$ph$ph = $$6351478;
   $$5386$ph576$ph = $$6387477;
   $$7374$ph$ph = $296;
  }
  $$0360474 = 0.0;
  $$10473 = $$7374$ph$ph;
  $$4475 = 0;
  while (1) {
   $306 = $$4475 + $$5350 & 127;
   $309 = $$10473 + 1 & 127;
   if (($306 | 0) == ($$10473 | 0)) {
    HEAP32[$6 + ($309 + -1 << 2) >> 2] = 0;
    $$11 = $309;
   } else $$11 = $$10473;
   $$0360474 = $$0360474 * 1.0e9 + +((HEAP32[$6 + ($306 << 2) >> 2] | 0) >>> 0);
   $$4475 = $$4475 + 1 | 0;
   if (($$4475 | 0) == 2) break; else $$10473 = $$11;
  }
  $318 = +($4 | 0);
  $319 = $$0360474 * $318;
  $320 = $$1377 + 53 | 0;
  $321 = $320 - $3 | 0;
  $322 = ($321 | 0) < ($2 | 0);
  $$0328 = $322 ? (($321 | 0) > 0 ? $321 : 0) : $2;
  if (($$0328 | 0) < 53) {
   $327 = +_copysignl(+_scalbn(1.0, 105 - $$0328 | 0), $319);
   $330 = +_fmodl($319, +_scalbn(1.0, 53 - $$0328 | 0));
   $$0355 = $327;
   $$0356 = $330;
   $$1361 = $327 + ($319 - $330);
  } else {
   $$0355 = 0.0;
   $$0356 = 0.0;
   $$1361 = $319;
  }
  $334 = $$5350 + 2 & 127;
  if (($334 | 0) == ($$11 | 0)) $$3359 = $$0356; else {
   $337 = HEAP32[$6 + ($334 << 2) >> 2] | 0;
   do if ($337 >>> 0 < 5e8) {
    if (!$337) if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $$0356;
     break;
    }
    $$1357 = $318 * .25 + $$0356;
   } else {
    if (($337 | 0) != 5e8) {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
    if (($$5350 + 3 & 127 | 0) == ($$11 | 0)) {
     $$1357 = $318 * .5 + $$0356;
     break;
    } else {
     $$1357 = $318 * .75 + $$0356;
     break;
    }
   } while (0);
   if ((53 - $$0328 | 0) > 1) if (+_fmodl($$1357, 1.0) != 0.0) $$3359 = $$1357; else $$3359 = $$1357 + 1.0; else $$3359 = $$1357;
  }
  $361 = $$1361 + $$3359 - $$0355;
  do if (($320 & 2147483647 | 0) > (-2 - $7 | 0)) {
   $366 = !(+Math_abs(+$361) >= 9007199254740992.0);
   $$3379 = $$1377 + (($366 ^ 1) & 1) | 0;
   $$2362 = $366 ? $361 : $361 * .5;
   if (($$3379 + 50 | 0) <= ($8 | 0)) if (!($$3359 != 0.0 & ($322 & (($$0328 | 0) != ($321 | 0) | $366)))) {
    $$3363 = $$2362;
    $$4380 = $$3379;
    break;
   }
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$3363 = $$2362;
   $$4380 = $$3379;
  } else {
   $$3363 = $361;
   $$4380 = $$1377;
  } while (0);
  $$1 = +_scalbnl($$3363, $$4380);
 } while (0);
 STACKTOP = sp;
 return +$$1;
}
function __ZN3zim12FileCompoundC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $113 = 0, $117 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $133 = 0, $136 = 0, $138 = 0, $14 = 0, $15 = 0, $150 = 0, $152 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $161 = 0, $166 = 0, $17 = 0, $172 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $186 = 0, $19 = 0, $192 = 0, $194 = 0, $196 = 0, $198 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $206 = 0, $21 = 0, $210 = 0, $216 = 0, $218 = 0, $22 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $229 = 0, $23 = 0, $231 = 0, $24 = 0, $243 = 0, $245 = 0, $25 = 0, $250 = 0, $252 = 0, $254 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $27 = 0, $275 = 0, $277 = 0, $28 = 0, $282 = 0, $283 = 0, $29 = 0, $295 = 0, $296 = 0, $3 = 0, $30 = 0, $304 = 0, $305 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $324 = 0, $325 = 0, $328 = 0, $329 = 0, $33 = 0, $331 = 0, $332 = 0, $335 = 0, $337 = 0, $34 = 0, $340 = 0, $342 = 0, $345 = 0, $347 = 0, $349 = 0, $35 = 0, $352 = 0, $354 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656 | 0;
 $$byval_copy4 = sp + 152 | 0;
 $$byval_copy3 = sp + 144 | 0;
 $2 = sp + 644 | 0;
 $3 = sp + 640 | 0;
 $4 = sp + 636 | 0;
 $5 = sp + 632 | 0;
 $6 = sp + 628 | 0;
 $7 = sp + 624 | 0;
 $8 = sp + 620 | 0;
 $9 = sp + 616 | 0;
 $10 = sp + 612 | 0;
 $11 = sp + 608 | 0;
 $12 = sp + 604 | 0;
 $13 = sp + 600 | 0;
 $14 = sp + 596 | 0;
 $15 = sp + 592 | 0;
 $16 = sp + 588 | 0;
 $17 = sp + 584 | 0;
 $18 = sp + 580 | 0;
 $19 = sp + 576 | 0;
 $20 = sp + 572 | 0;
 $21 = sp + 568 | 0;
 $22 = sp + 564 | 0;
 $23 = sp + 560 | 0;
 $24 = sp + 556 | 0;
 $25 = sp + 552 | 0;
 $26 = sp + 548 | 0;
 $27 = sp + 544 | 0;
 $28 = sp + 540 | 0;
 $29 = sp + 536 | 0;
 $30 = sp + 532 | 0;
 $31 = sp + 528 | 0;
 $32 = sp + 524 | 0;
 $33 = sp + 520 | 0;
 $34 = sp + 516 | 0;
 $35 = sp + 136 | 0;
 $36 = sp + 512 | 0;
 $37 = sp + 508 | 0;
 $38 = sp + 504 | 0;
 $39 = sp + 500 | 0;
 $40 = sp + 496 | 0;
 $41 = sp + 492 | 0;
 $42 = sp + 488 | 0;
 $43 = sp + 484 | 0;
 $44 = sp + 480 | 0;
 $45 = sp + 472 | 0;
 $46 = sp + 468 | 0;
 $47 = sp + 464 | 0;
 $48 = sp + 460 | 0;
 $49 = sp + 456 | 0;
 $50 = sp + 452 | 0;
 $51 = sp + 448 | 0;
 $52 = sp + 444 | 0;
 $53 = sp + 128 | 0;
 $54 = sp + 440 | 0;
 $55 = sp + 436 | 0;
 $56 = sp + 432 | 0;
 $57 = sp + 428 | 0;
 $58 = sp + 424 | 0;
 $59 = sp + 420 | 0;
 $60 = sp + 416 | 0;
 $61 = sp + 412 | 0;
 $62 = sp + 408 | 0;
 $63 = sp + 400 | 0;
 $66 = sp + 388 | 0;
 $67 = sp + 652 | 0;
 $69 = sp + 384 | 0;
 $70 = sp + 380 | 0;
 $71 = sp + 376 | 0;
 $72 = sp + 372 | 0;
 $73 = sp + 368 | 0;
 $74 = sp + 104 | 0;
 $75 = sp + 96 | 0;
 $76 = sp + 88 | 0;
 $77 = sp + 80 | 0;
 $78 = sp + 360 | 0;
 $79 = sp + 72 | 0;
 $80 = sp + 356 | 0;
 $81 = sp + 64 | 0;
 $82 = sp + 650 | 0;
 $83 = sp + 344 | 0;
 $84 = sp + 649 | 0;
 $85 = sp + 332 | 0;
 $86 = sp + 328 | 0;
 $87 = sp + 48 | 0;
 $88 = sp + 40 | 0;
 $89 = sp + 32 | 0;
 $90 = sp + 24 | 0;
 $91 = sp + 16 | 0;
 $92 = sp + 8 | 0;
 $93 = sp + 320 | 0;
 $94 = sp;
 $95 = sp + 312 | 0;
 $96 = sp + 176 | 0;
 $97 = sp + 160 | 0;
 $98 = sp + 648 | 0;
 HEAP32[$69 >> 2] = $0;
 HEAP32[$70 >> 2] = $1;
 $99 = HEAP32[$69 >> 2] | 0;
 HEAP32[$66 >> 2] = $99;
 $100 = HEAP32[$66 >> 2] | 0;
 HEAP8[sp + 120 >> 0] = HEAP8[sp + 651 >> 0] | 0;
 HEAP32[sp + 392 >> 2] = $67;
 __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEEC2ERKSC_($100, $67);
 __ZN3zim7zsize_tC2Ey($99 + 16 | 0, 0, 0);
 __THREW__ = 0;
 $102 = invoke_ii(79, 24) | 0;
 $103 = __THREW__;
 __THREW__ = 0;
 do if ($103 & 1) label = 8; else {
  __THREW__ = 0;
  invoke_vii(84, $102 | 0, HEAP32[$70 >> 2] | 0);
  $106 = __THREW__;
  __THREW__ = 0;
  if ($106 & 1) {
   $161 = ___cxa_find_matching_catch_3(0) | 0;
   HEAP32[$71 >> 2] = $161;
   HEAP32[$72 >> 2] = tempRet0;
   __ZdlPv($102);
   break;
  }
  HEAP32[$73 >> 2] = $102;
  __THREW__ = 0;
  invoke_viii(16, $75 | 0, 0, 0);
  $108 = __THREW__;
  __THREW__ = 0;
  if ($108 & 1) label = 8; else {
   $111 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$73 >> 2] | 0) | 0;
   $113 = $77;
   HEAP32[$113 >> 2] = $111;
   HEAP32[$113 + 4 >> 2] = tempRet0;
   $117 = $77;
   __THREW__ = 0;
   invoke_viii(16, $76 | 0, HEAP32[$117 >> 2] | 0, HEAP32[$117 + 4 >> 2] | 0);
   $123 = __THREW__;
   __THREW__ = 0;
   if ($123 & 1) label = 8; else {
    HEAP32[$$byval_copy3 >> 2] = HEAP32[$75 >> 2];
    HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$75 + 4 >> 2];
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$76 >> 2];
    HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$76 + 4 >> 2];
    __ZN3zim5RangeC2ENS_8offset_tES1_($74, $$byval_copy3, $$byval_copy4);
    HEAP32[$60 >> 2] = $99;
    HEAP32[$61 >> 2] = $74;
    HEAP32[$62 >> 2] = $73;
    $125 = HEAP32[$60 >> 2] | 0;
    HEAP32[$59 >> 2] = HEAP32[$61 >> 2];
    $127 = HEAP32[$59 >> 2] | 0;
    HEAP32[$46 >> 2] = HEAP32[$62 >> 2];
    $129 = HEAP32[$46 >> 2] | 0;
    HEAP32[$49 >> 2] = $125;
    HEAP32[$50 >> 2] = $127;
    HEAP32[$51 >> 2] = $129;
    $130 = HEAP32[$49 >> 2] | 0;
    $131 = HEAP32[$50 >> 2] | 0;
    HEAP32[$48 >> 2] = HEAP32[$50 >> 2];
    $133 = HEAP32[$48 >> 2] | 0;
    HEAP32[$47 >> 2] = HEAP32[$51 >> 2];
    __THREW__ = 0;
    invoke_viiiii(5, $63 | 0, $130 | 0, $131 | 0, $133 | 0, HEAP32[$47 >> 2] | 0);
    $136 = __THREW__;
    __THREW__ = 0;
    if ($136 & 1) label = 8; else {
     HEAP32[$56 >> 2] = $78;
     HEAP32[$57 >> 2] = $63;
     $138 = HEAP32[$56 >> 2] | 0;
     HEAP32[$55 >> 2] = HEAP32[$57 >> 2];
     HEAP32[$58 >> 2] = HEAP32[HEAP32[$55 >> 2] >> 2];
     HEAP8[$53 >> 0] = HEAP8[$58 >> 0] | 0;
     HEAP8[$53 + 1 >> 0] = HEAP8[$58 + 1 >> 0] | 0;
     HEAP8[$53 + 2 >> 0] = HEAP8[$58 + 2 >> 0] | 0;
     HEAP8[$53 + 3 >> 0] = HEAP8[$58 + 3 >> 0] | 0;
     HEAP32[$52 >> 2] = $138;
     HEAP32[HEAP32[$52 >> 2] >> 2] = HEAP32[$53 >> 2];
     HEAP32[$54 >> 2] = (HEAP32[$57 >> 2] | 0) + 4;
     HEAP8[$138 + 4 >> 0] = HEAP8[HEAP32[$54 >> 2] >> 0] & 1;
     $150 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$73 >> 2] | 0) | 0;
     $152 = $79;
     HEAP32[$152 >> 2] = $150;
     HEAP32[$152 + 4 >> 2] = tempRet0;
     $156 = $99 + 16 | 0;
     HEAP32[$156 >> 2] = HEAP32[$79 >> 2];
     HEAP32[$156 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
     STACKTOP = sp;
     return;
    }
   }
  }
 } while (0);
 if ((label | 0) == 8) {
  $159 = ___cxa_find_matching_catch_3(0) | 0;
  HEAP32[$71 >> 2] = $159;
  HEAP32[$72 >> 2] = tempRet0;
 }
 ___cxa_begin_catch(HEAP32[$71 >> 2] | 0) | 0;
 HEAP32[$80 >> 2] = HEAP32[(___errno_location() | 0) >> 2];
 __ZN3zim7zsize_tC2Ey($81, 0, 0);
 $166 = $99 + 16 | 0;
 HEAP32[$166 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$166 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
 HEAP8[$82 >> 0] = 97;
 L13 : while (1) {
  if ((HEAP8[$82 >> 0] | 0) > 122) {
   label = 33;
   break;
  }
  __THREW__ = 0;
  invoke_viii(28, $83 | 0, HEAP32[$70 >> 2] | 0, HEAP8[$82 >> 0] | 0);
  $172 = __THREW__;
  __THREW__ = 0;
  if ($172 & 1) {
   label = 23;
   break;
  }
  HEAP8[$84 >> 0] = 97;
  while (1) {
   if ((HEAP8[$84 >> 0] | 0) > 122) break;
   __THREW__ = 0;
   invoke_viii(28, $85 | 0, $83 | 0, HEAP8[$84 >> 0] | 0);
   $178 = __THREW__;
   __THREW__ = 0;
   if ($178 & 1) {
    label = 24;
    break L13;
   }
   __THREW__ = 0;
   $180 = invoke_ii(79, 24) | 0;
   $181 = __THREW__;
   __THREW__ = 0;
   do if ($181 & 1) label = 25; else {
    __THREW__ = 0;
    invoke_vii(84, $180 | 0, $85 | 0);
    $183 = __THREW__;
    __THREW__ = 0;
    if ($183 & 1) {
     $256 = ___cxa_find_matching_catch_3(0) | 0;
     HEAP32[$71 >> 2] = $256;
     HEAP32[$72 >> 2] = tempRet0;
     __ZdlPv($180);
     label = 27;
     break;
    }
    HEAP32[$86 >> 2] = $180;
    $186 = $99 + 16 | 0;
    __THREW__ = 0;
    invoke_viii(16, $88 | 0, HEAP32[$186 >> 2] | 0, HEAP32[$186 + 4 >> 2] | 0);
    $192 = __THREW__;
    __THREW__ = 0;
    if ($192 & 1) label = 25; else {
     $194 = $99 + 16 | 0;
     HEAP32[$91 >> 2] = HEAP32[$194 >> 2];
     HEAP32[$91 + 4 >> 2] = HEAP32[$194 + 4 >> 2];
     $196 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$86 >> 2] | 0) | 0;
     $198 = $92;
     HEAP32[$198 >> 2] = $196;
     HEAP32[$198 + 4 >> 2] = tempRet0;
     __THREW__ = 0;
     HEAP32[$$byval_copy4 >> 2] = HEAP32[$91 >> 2];
     HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$91 + 4 >> 2];
     $202 = invoke_iii(49, $$byval_copy4 | 0, $92 | 0) | 0;
     $203 = tempRet0;
     $204 = __THREW__;
     __THREW__ = 0;
     if ($204 & 1) label = 25; else {
      $206 = $90;
      HEAP32[$206 >> 2] = $202;
      HEAP32[$206 + 4 >> 2] = $203;
      $210 = $90;
      __THREW__ = 0;
      invoke_viii(16, $89 | 0, HEAP32[$210 >> 2] | 0, HEAP32[$210 + 4 >> 2] | 0);
      $216 = __THREW__;
      __THREW__ = 0;
      if ($216 & 1) label = 25; else {
       HEAP32[$$byval_copy3 >> 2] = HEAP32[$88 >> 2];
       HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$88 + 4 >> 2];
       HEAP32[$$byval_copy4 >> 2] = HEAP32[$89 >> 2];
       HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$89 + 4 >> 2];
       __ZN3zim5RangeC2ENS_8offset_tES1_($87, $$byval_copy3, $$byval_copy4);
       HEAP32[$42 >> 2] = $99;
       HEAP32[$43 >> 2] = $87;
       HEAP32[$44 >> 2] = $86;
       $218 = HEAP32[$42 >> 2] | 0;
       HEAP32[$41 >> 2] = HEAP32[$43 >> 2];
       $220 = HEAP32[$41 >> 2] | 0;
       HEAP32[$28 >> 2] = HEAP32[$44 >> 2];
       $222 = HEAP32[$28 >> 2] | 0;
       HEAP32[$31 >> 2] = $218;
       HEAP32[$32 >> 2] = $220;
       HEAP32[$33 >> 2] = $222;
       $223 = HEAP32[$31 >> 2] | 0;
       $224 = HEAP32[$32 >> 2] | 0;
       HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
       $226 = HEAP32[$30 >> 2] | 0;
       HEAP32[$29 >> 2] = HEAP32[$33 >> 2];
       __THREW__ = 0;
       invoke_viiiii(5, $45 | 0, $223 | 0, $224 | 0, $226 | 0, HEAP32[$29 >> 2] | 0);
       $229 = __THREW__;
       __THREW__ = 0;
       if ($229 & 1) label = 25; else {
        HEAP32[$38 >> 2] = $93;
        HEAP32[$39 >> 2] = $45;
        $231 = HEAP32[$38 >> 2] | 0;
        HEAP32[$37 >> 2] = HEAP32[$39 >> 2];
        HEAP32[$40 >> 2] = HEAP32[HEAP32[$37 >> 2] >> 2];
        HEAP8[$35 >> 0] = HEAP8[$40 >> 0] | 0;
        HEAP8[$35 + 1 >> 0] = HEAP8[$40 + 1 >> 0] | 0;
        HEAP8[$35 + 2 >> 0] = HEAP8[$40 + 2 >> 0] | 0;
        HEAP8[$35 + 3 >> 0] = HEAP8[$40 + 3 >> 0] | 0;
        HEAP32[$34 >> 2] = $231;
        HEAP32[HEAP32[$34 >> 2] >> 2] = HEAP32[$35 >> 2];
        HEAP32[$36 >> 2] = (HEAP32[$39 >> 2] | 0) + 4;
        HEAP8[$231 + 4 >> 0] = HEAP8[HEAP32[$36 >> 2] >> 0] & 1;
        $243 = __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv(HEAP32[$86 >> 2] | 0) | 0;
        $245 = $94;
        HEAP32[$245 >> 2] = $243;
        HEAP32[$245 + 4 >> 2] = tempRet0;
        __ZpLIN3zim7zsize_tEERT_S3_RKS2_($99 + 16 | 0, $94) | 0;
        HEAP32[$95 >> 2] = 0;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 25) {
    label = 0;
    $254 = ___cxa_find_matching_catch_3(0) | 0;
    HEAP32[$71 >> 2] = $254;
    HEAP32[$72 >> 2] = tempRet0;
    label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    ___cxa_begin_catch(HEAP32[$71 >> 2] | 0) | 0;
    HEAP32[$95 >> 2] = 5;
    __THREW__ = 0;
    invoke_v(3);
    $259 = __THREW__;
    __THREW__ = 0;
    if ($259 & 1) {
     label = 28;
     break L13;
    }
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($85);
   if ((HEAP32[$95 >> 2] | 0) >>> 0 >= 1) break;
   HEAP8[$84 >> 0] = (HEAP8[$84 >> 0] | 0) + 1 << 24 >> 24;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($83);
  HEAP8[$82 >> 0] = (HEAP8[$82 >> 0] | 0) + 1 << 24 >> 24;
 }
 if ((label | 0) == 23) {
  $250 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$71 >> 2] = $250;
  HEAP32[$72 >> 2] = tempRet0;
 } else if ((label | 0) == 24) {
  $252 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$71 >> 2] = $252;
  HEAP32[$72 >> 2] = tempRet0;
  label = 32;
 } else if ((label | 0) == 28) {
  $261 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$71 >> 2] = $261;
  HEAP32[$72 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($85);
  label = 32;
 } else if ((label | 0) == 33) {
  HEAP32[$27 >> 2] = $99;
  HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  if (HEAP32[HEAP32[$24 >> 2] >> 2] | 0) {
   __THREW__ = 0;
   invoke_v(3);
   $352 = __THREW__;
   __THREW__ = 0;
   if (!($352 & 1)) {
    STACKTOP = sp;
    return;
   }
   $157 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$71 >> 2] = $157;
   HEAP32[$72 >> 2] = tempRet0;
   __ZNSt3__23mapIN3zim5RangeEPNS1_8FilePartINS1_4unix2FSEEENS1_10less_rangeENS_9allocatorINS_4pairIKS2_S7_EEEEED2Ev($99);
   $356 = HEAP32[$71 >> 2] | 0;
   $357 = HEAP32[$72 >> 2] | 0;
   ___resumeException($356 | 0);
  }
  HEAP32[$22 >> 2] = $96;
  HEAP32[$23 >> 2] = 16;
  $275 = HEAP32[$22 >> 2] | 0;
  HEAP32[$21 >> 2] = $275 + 56;
  $277 = HEAP32[$21 >> 2] | 0;
  HEAP32[$20 >> 2] = $277;
  HEAP32[HEAP32[$20 >> 2] >> 2] = 44548;
  HEAP32[$277 >> 2] = 44532;
  HEAP32[$275 >> 2] = 43256;
  HEAP32[$275 + 56 >> 2] = 43276;
  HEAP32[$5 >> 2] = $275;
  HEAP32[$6 >> 2] = 43288;
  HEAP32[$7 >> 2] = $275 + 4;
  $282 = HEAP32[$5 >> 2] | 0;
  $283 = HEAP32[$6 >> 2] | 0;
  HEAP32[$282 >> 2] = HEAP32[$283 >> 2];
  HEAP32[$282 + (HEAP32[(HEAP32[$282 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$283 + 4 >> 2];
  $295 = HEAP32[$7 >> 2] | 0;
  HEAP32[$3 >> 2] = $282 + (HEAP32[(HEAP32[$282 >> 2] | 0) + -12 >> 2] | 0);
  HEAP32[$4 >> 2] = $295;
  $296 = HEAP32[$3 >> 2] | 0;
  __ZNSt3__28ios_base4initEPv($296, HEAP32[$4 >> 2] | 0);
  HEAP32[$296 + 72 >> 2] = 0;
  HEAP32[$296 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  HEAP32[$275 >> 2] = 43256;
  HEAP32[$275 + 56 >> 2] = 43276;
  $304 = HEAP32[$23 >> 2] | 16;
  HEAP32[$18 >> 2] = $275 + 4;
  HEAP32[$19 >> 2] = $304;
  $305 = HEAP32[$18 >> 2] | 0;
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($305);
  HEAP32[$305 >> 2] = 43308;
  HEAP32[$17 >> 2] = $305 + 32;
  $307 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $307;
  $308 = HEAP32[$16 >> 2] | 0;
  HEAP32[$15 >> 2] = $308;
  $309 = HEAP32[$15 >> 2] | 0;
  HEAP32[$309 >> 2] = 0;
  HEAP32[$309 + 4 >> 2] = 0;
  HEAP32[$309 + 8 >> 2] = 0;
  HEAP32[$14 >> 2] = $308;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$10 >> 2] = $307;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$12 >> 2] = 0;
  while (1) {
   if ((HEAP32[$12 >> 2] | 0) >>> 0 >= 3) break;
   HEAP32[(HEAP32[$11 >> 2] | 0) + (HEAP32[$12 >> 2] << 2) >> 2] = 0;
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 1;
  }
  HEAP32[$305 + 44 >> 2] = 0;
  HEAP32[$305 + 48 >> 2] = HEAP32[$19 >> 2];
  __THREW__ = 0;
  $324 = invoke_iii(35, $96 | 0, 52123) | 0;
  $325 = __THREW__;
  __THREW__ = 0;
  if ($325 & 1) label = 44; else {
   __THREW__ = 0;
   $328 = invoke_iii(50, $324 | 0, HEAP32[$80 >> 2] | 0) | 0;
   $329 = __THREW__;
   __THREW__ = 0;
   if ($329 & 1) label = 44; else {
    __THREW__ = 0;
    $331 = invoke_iii(35, $328 | 0, 52130) | 0;
    $332 = __THREW__;
    __THREW__ = 0;
    if ($332 & 1) label = 44; else {
     __THREW__ = 0;
     invoke_iii(36, $331 | 0, HEAP32[$70 >> 2] | 0) | 0;
     $335 = __THREW__;
     __THREW__ = 0;
     if ($335 & 1) label = 44; else {
      $337 = ___cxa_allocate_exception(8) | 0;
      HEAP8[$98 >> 0] = 1;
      HEAP32[$2 >> 2] = $96;
      __THREW__ = 0;
      invoke_vii(48, $97 | 0, (HEAP32[$2 >> 2] | 0) + 4 | 0);
      $340 = __THREW__;
      __THREW__ = 0;
      if ($340 & 1) {
       $347 = ___cxa_find_matching_catch_2() | 0;
       HEAP32[$71 >> 2] = $347;
       HEAP32[$72 >> 2] = tempRet0;
      } else {
       __THREW__ = 0;
       invoke_vii(85, $337 | 0, $97 | 0);
       $342 = __THREW__;
       __THREW__ = 0;
       if (!($342 & 1)) {
        HEAP8[$98 >> 0] = 0;
        __THREW__ = 0;
        invoke_viii(11, $337 | 0, 42792, 178);
        __THREW__ = 0;
       }
       $349 = ___cxa_find_matching_catch_2() | 0;
       HEAP32[$71 >> 2] = $349;
       HEAP32[$72 >> 2] = tempRet0;
       __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($97);
      }
      if (HEAP8[$98 >> 0] & 1) ___cxa_free_exception($337 | 0);
     }
    }
   }
  }
  if ((label | 0) == 44) {
   $345 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$71 >> 2] = $345;
   HEAP32[$72 >> 2] = tempRet0;
  }
  __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
 }
 if ((label | 0) == 32) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($83);
 __THREW__ = 0;
 invoke_v(3);
 $354 = __THREW__;
 __THREW__ = 0;
 if ($354 & 1) {
  $358 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($358);
 } else {
  __ZNSt3__23mapIN3zim5RangeEPNS1_8FilePartINS1_4unix2FSEEENS1_10less_rangeENS_9allocatorINS_4pairIKS2_S7_EEEEED2Ev($99);
  $356 = HEAP32[$71 >> 2] | 0;
  $357 = HEAP32[$72 >> 2] | 0;
  ___resumeException($356 | 0);
 }
}

function __ZN3zim7Cluster11read_headerIjEENS_8offset_tEv($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $142 = 0, $143 = 0, $15 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $181 = 0, $19 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $209 = 0, $21 = 0, $213 = 0, $215 = 0, $22 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $241 = 0, $242 = 0, $249 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $28 = 0, $283 = 0, $284 = 0, $289 = 0, $29 = 0, $294 = 0, $3 = 0, $30 = 0, $301 = 0, $307 = 0, $31 = 0, $312 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $323 = 0, $328 = 0, $329 = 0, $33 = 0, $334 = 0, $339 = 0, $34 = 0, $346 = 0, $35 = 0, $352 = 0, $357 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $367 = 0, $369 = 0, $37 = 0, $379 = 0, $38 = 0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $392 = 0, $393 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $401 = 0, $403 = 0, $41 = 0, $410 = 0, $413 = 0, $414 = 0, $415 = 0, $417 = 0, $42 = 0, $421 = 0, $426 = 0, $427 = 0, $43 = 0, $432 = 0, $44 = 0, $442 = 0, $448 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608 | 0;
 $$byval_copy3 = sp + 144 | 0;
 $$byval_copy1 = sp + 136 | 0;
 $1 = sp + 592 | 0;
 $2 = sp + 588 | 0;
 $3 = sp + 584 | 0;
 $4 = sp + 580 | 0;
 $5 = sp + 576 | 0;
 $6 = sp + 572 | 0;
 $7 = sp + 568 | 0;
 $8 = sp + 564 | 0;
 $9 = sp + 560 | 0;
 $10 = sp + 556 | 0;
 $11 = sp + 552 | 0;
 $12 = sp + 548 | 0;
 $13 = sp + 544 | 0;
 $14 = sp + 128 | 0;
 $15 = sp + 540 | 0;
 $16 = sp + 536 | 0;
 $17 = sp + 532 | 0;
 $18 = sp + 528 | 0;
 $19 = sp + 600 | 0;
 $20 = sp + 524 | 0;
 $21 = sp + 520 | 0;
 $22 = sp + 516 | 0;
 $23 = sp + 512 | 0;
 $24 = sp + 508 | 0;
 $25 = sp + 504 | 0;
 $26 = sp + 500 | 0;
 $27 = sp + 496 | 0;
 $28 = sp + 492 | 0;
 $29 = sp + 488 | 0;
 $30 = sp + 599 | 0;
 $31 = sp + 484 | 0;
 $32 = sp + 480 | 0;
 $33 = sp + 476 | 0;
 $34 = sp + 472 | 0;
 $35 = sp + 468 | 0;
 $36 = sp + 464 | 0;
 $37 = sp + 460 | 0;
 $38 = sp + 456 | 0;
 $39 = sp + 452 | 0;
 $40 = sp + 448 | 0;
 $41 = sp + 444 | 0;
 $42 = sp + 440 | 0;
 $43 = sp + 436 | 0;
 $44 = sp + 432 | 0;
 $45 = sp + 428 | 0;
 $46 = sp + 424 | 0;
 $47 = sp + 420 | 0;
 $48 = sp + 120 | 0;
 $49 = sp + 416 | 0;
 $50 = sp + 412 | 0;
 $51 = sp + 408 | 0;
 $52 = sp + 404 | 0;
 $53 = sp + 598 | 0;
 $54 = sp + 400 | 0;
 $55 = sp + 396 | 0;
 $56 = sp + 392 | 0;
 $57 = sp + 388 | 0;
 $58 = sp + 384 | 0;
 $59 = sp + 380 | 0;
 $60 = sp + 376 | 0;
 $61 = sp + 372 | 0;
 $62 = sp + 368 | 0;
 $63 = sp + 364 | 0;
 $64 = sp + 597 | 0;
 $65 = sp + 360 | 0;
 $66 = sp + 356 | 0;
 $67 = sp + 352 | 0;
 $68 = sp + 348 | 0;
 $69 = sp + 344 | 0;
 $70 = sp + 340 | 0;
 $71 = sp + 336 | 0;
 $72 = sp + 332 | 0;
 $73 = sp + 328 | 0;
 $74 = sp + 324 | 0;
 $75 = sp + 320 | 0;
 $76 = sp + 316 | 0;
 $77 = sp + 312 | 0;
 $78 = sp + 308 | 0;
 $79 = sp + 304 | 0;
 $80 = sp + 300 | 0;
 $81 = sp + 296 | 0;
 $82 = sp + 292 | 0;
 $83 = sp + 288 | 0;
 $84 = sp + 284 | 0;
 $85 = sp + 280 | 0;
 $86 = sp + 276 | 0;
 $87 = sp + 272 | 0;
 $88 = sp + 268 | 0;
 $89 = sp + 264 | 0;
 $90 = sp + 260 | 0;
 $91 = sp + 112 | 0;
 $92 = sp + 256 | 0;
 $93 = sp + 252 | 0;
 $94 = sp + 596 | 0;
 $95 = sp + 248 | 0;
 $96 = sp + 244 | 0;
 $97 = sp + 240 | 0;
 $98 = sp + 236 | 0;
 $99 = sp + 232 | 0;
 $100 = sp + 228 | 0;
 $101 = sp + 224 | 0;
 $102 = sp + 220 | 0;
 $103 = sp + 216 | 0;
 $104 = sp + 212 | 0;
 $105 = sp + 208 | 0;
 $106 = sp + 204 | 0;
 $107 = sp + 104 | 0;
 $108 = sp + 200 | 0;
 $109 = sp + 196 | 0;
 $110 = sp + 96 | 0;
 $111 = sp + 192 | 0;
 $112 = sp + 88 | 0;
 $113 = sp + 184 | 0;
 $114 = sp + 80 | 0;
 $115 = sp + 72 | 0;
 $116 = sp + 64 | 0;
 $117 = sp + 180 | 0;
 $118 = sp + 176 | 0;
 $119 = sp + 172 | 0;
 $120 = sp + 56 | 0;
 $121 = sp + 168 | 0;
 $122 = sp + 164 | 0;
 $123 = sp + 160 | 0;
 $124 = sp + 48 | 0;
 $125 = sp + 156 | 0;
 $126 = sp + 40 | 0;
 $127 = sp + 32 | 0;
 $128 = sp + 24 | 0;
 $129 = sp + 16 | 0;
 $130 = sp + 152 | 0;
 $131 = sp + 8 | 0;
 $132 = sp;
 HEAP32[$108 >> 2] = $0;
 $133 = HEAP32[$108 >> 2] | 0;
 HEAP32[$106 >> 2] = $133 + 28;
 $136 = HEAP32[HEAP32[$106 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($110, 0, 0);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$110 + 4 >> 2];
 HEAP32[$109 >> 2] = __ZNK3zim6Reader4readIjEET_NS_8offset_tE($136, $$byval_copy3) | 0;
 HEAP32[$111 >> 2] = ((HEAP32[$109 >> 2] | 0) >>> 0) / 4 | 0;
 __ZN3zim8offset_tC2Ey($107, HEAP32[$109 >> 2] | 0, 0);
 HEAP32[$104 >> 2] = $133 + 16;
 $142 = HEAP32[$104 >> 2] | 0;
 HEAP32[$103 >> 2] = $142;
 $143 = HEAP32[$103 >> 2] | 0;
 HEAP32[$105 >> 2] = ((HEAP32[$143 + 4 >> 2] | 0) - (HEAP32[$143 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[$102 >> 2] = $142;
 $151 = HEAP32[$102 >> 2] | 0;
 $152 = HEAP32[$151 >> 2] | 0;
 HEAP32[$99 >> 2] = $151;
 HEAP32[$100 >> 2] = $152;
 $153 = HEAP32[$99 >> 2] | 0;
 HEAP32[$101 >> 2] = HEAP32[$153 + 4 >> 2];
 while (1) {
  if ((HEAP32[$100 >> 2] | 0) == (HEAP32[$101 >> 2] | 0)) break;
  HEAP32[$98 >> 2] = $153;
  HEAP32[$97 >> 2] = (HEAP32[$98 >> 2] | 0) + 8;
  HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
  $162 = HEAP32[$96 >> 2] | 0;
  $164 = (HEAP32[$101 >> 2] | 0) + -8 | 0;
  HEAP32[$101 >> 2] = $164;
  HEAP32[$95 >> 2] = $164;
  $165 = HEAP32[$95 >> 2] | 0;
  HEAP32[$92 >> 2] = $162;
  HEAP32[$93 >> 2] = $165;
  $166 = HEAP32[$92 >> 2] | 0;
  $167 = HEAP32[$93 >> 2] | 0;
  HEAP8[$91 >> 0] = HEAP8[$94 >> 0] | 0;
  HEAP32[$89 >> 2] = $166;
  HEAP32[$90 >> 2] = $167;
  $169 = HEAP32[$90 >> 2] | 0;
  HEAP32[$87 >> 2] = HEAP32[$89 >> 2];
  HEAP32[$88 >> 2] = $169;
 }
 HEAP32[$153 + 4 >> 2] = HEAP32[$100 >> 2];
 $172 = HEAP32[$105 >> 2] | 0;
 HEAP32[$84 >> 2] = $142;
 HEAP32[$85 >> 2] = $172;
 $173 = HEAP32[$84 >> 2] | 0;
 HEAP32[$83 >> 2] = $173;
 HEAP32[$82 >> 2] = HEAP32[HEAP32[$83 >> 2] >> 2];
 $176 = HEAP32[$82 >> 2] | 0;
 HEAP32[$66 >> 2] = $173;
 HEAP32[$65 >> 2] = HEAP32[HEAP32[$66 >> 2] >> 2];
 $179 = HEAP32[$65 >> 2] | 0;
 HEAP32[$71 >> 2] = $173;
 HEAP32[$70 >> 2] = HEAP32[$71 >> 2];
 $181 = HEAP32[$70 >> 2] | 0;
 HEAP32[$69 >> 2] = $181;
 HEAP32[$68 >> 2] = (HEAP32[$69 >> 2] | 0) + 8;
 HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
 $192 = $179 + ((((HEAP32[HEAP32[$67 >> 2] >> 2] | 0) - (HEAP32[$181 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$73 >> 2] = $173;
 HEAP32[$72 >> 2] = HEAP32[HEAP32[$73 >> 2] >> 2];
 $197 = (HEAP32[$72 >> 2] | 0) + (HEAP32[$85 >> 2] << 3) | 0;
 HEAP32[$75 >> 2] = $173;
 HEAP32[$74 >> 2] = HEAP32[HEAP32[$75 >> 2] >> 2];
 $200 = HEAP32[$74 >> 2] | 0;
 HEAP32[$76 >> 2] = $173;
 $201 = HEAP32[$76 >> 2] | 0;
 $209 = $200 + ((((HEAP32[$201 + 4 >> 2] | 0) - (HEAP32[$201 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$77 >> 2] = $173;
 HEAP32[$78 >> 2] = $176;
 HEAP32[$79 >> 2] = $192;
 HEAP32[$80 >> 2] = $197;
 HEAP32[$81 >> 2] = $209;
 HEAP32[$86 >> 2] = $142;
 __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE7reserveEm($133 + 16 | 0, HEAP32[$111 >> 2] | 0);
 __ZN3zim8offset_tC2Ey($112, 0, 0);
 HEAP32[$62 >> 2] = $133 + 16;
 HEAP32[$63 >> 2] = $112;
 $213 = HEAP32[$62 >> 2] | 0;
 $215 = HEAP32[$213 + 4 >> 2] | 0;
 HEAP32[$61 >> 2] = $213;
 HEAP32[$60 >> 2] = (HEAP32[$61 >> 2] | 0) + 8;
 HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
 if ($215 >>> 0 < (HEAP32[HEAP32[$59 >> 2] >> 2] | 0) >>> 0) {
  HEAP32[$56 >> 2] = $64;
  HEAP32[$57 >> 2] = $213;
  HEAP32[$58 >> 2] = 1;
  HEAP32[$37 >> 2] = $213;
  HEAP32[$36 >> 2] = (HEAP32[$37 >> 2] | 0) + 8;
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  $225 = HEAP32[$35 >> 2] | 0;
  HEAP32[$38 >> 2] = HEAP32[$213 + 4 >> 2];
  $228 = HEAP32[$38 >> 2] | 0;
  HEAP32[$39 >> 2] = HEAP32[$63 >> 2];
  $230 = HEAP32[$39 >> 2] | 0;
  HEAP32[$50 >> 2] = $225;
  HEAP32[$51 >> 2] = $228;
  HEAP32[$52 >> 2] = $230;
  $231 = HEAP32[$50 >> 2] | 0;
  $232 = HEAP32[$51 >> 2] | 0;
  HEAP32[$49 >> 2] = HEAP32[$52 >> 2];
  $234 = HEAP32[$49 >> 2] | 0;
  HEAP8[$48 >> 0] = HEAP8[$53 >> 0] | 0;
  HEAP32[$45 >> 2] = $231;
  HEAP32[$46 >> 2] = $232;
  HEAP32[$47 >> 2] = $234;
  $235 = HEAP32[$45 >> 2] | 0;
  $236 = HEAP32[$46 >> 2] | 0;
  HEAP32[$44 >> 2] = HEAP32[$47 >> 2];
  $238 = HEAP32[$44 >> 2] | 0;
  HEAP32[$41 >> 2] = $235;
  HEAP32[$42 >> 2] = $236;
  HEAP32[$43 >> 2] = $238;
  $239 = HEAP32[$42 >> 2] | 0;
  HEAP32[$40 >> 2] = HEAP32[$43 >> 2];
  $241 = HEAP32[$40 >> 2] | 0;
  HEAP32[$239 >> 2] = HEAP32[$241 >> 2];
  HEAP32[$239 + 4 >> 2] = HEAP32[$241 + 4 >> 2];
  HEAP32[$54 >> 2] = $64;
  $242 = $213 + 4 | 0;
  HEAP32[$242 >> 2] = (HEAP32[$242 >> 2] | 0) + 8;
 } else {
  HEAP32[$55 >> 2] = HEAP32[$63 >> 2];
  __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($213, HEAP32[$55 >> 2] | 0);
 }
 HEAP32[$34 >> 2] = $133 + 28;
 $249 = HEAP32[HEAP32[$34 >> 2] >> 2] | 0;
 $252 = HEAP32[(HEAP32[$249 >> 2] | 0) + 20 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($114, 0, 0);
 __ZN3zim7zsize_tC2Ey($115, HEAP32[$109 >> 2] | 0, 0);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$114 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$114 + 4 >> 2];
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$115 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$115 + 4 >> 2];
 FUNCTION_TABLE_viiii[$252 & 31]($113, $249, $$byval_copy1, $$byval_copy3);
 __THREW__ = 0;
 invoke_viii(16, $116 | 0, 4, 0);
 $254 = __THREW__;
 __THREW__ = 0;
 if ($254 & 1) {
  $273 = ___cxa_find_matching_catch_2() | 0;
  $274 = tempRet0;
  HEAP32[$117 >> 2] = $273;
  HEAP32[$118 >> 2] = $274;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
  $275 = HEAP32[$117 >> 2] | 0;
  $276 = HEAP32[$118 >> 2] | 0;
  ___resumeException($275 | 0);
 }
 while (1) {
  $257 = (HEAP32[$111 >> 2] | 0) + -1 | 0;
  HEAP32[$111 >> 2] = $257;
  if (!$257) {
   label = 24;
   break;
  }
  HEAP32[$33 >> 2] = $113;
  $260 = HEAP32[HEAP32[$33 >> 2] >> 2] | 0;
  HEAP32[$120 >> 2] = HEAP32[$116 >> 2];
  HEAP32[$120 + 4 >> 2] = HEAP32[$116 + 4 >> 2];
  __THREW__ = 0;
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$120 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$120 + 4 >> 2];
  $261 = invoke_iii(41, $260 | 0, $$byval_copy3 | 0) | 0;
  $262 = __THREW__;
  __THREW__ = 0;
  if ($262 & 1) {
   label = 13;
   break;
  }
  HEAP32[$119 >> 2] = $261;
  HEAP32[$121 >> 2] = HEAP32[$119 >> 2];
  HEAP32[$122 >> 2] = HEAP32[$109 >> 2];
  if ((HEAP32[$121 >> 2] | 0) >>> 0 < (HEAP32[$122 >> 2] | 0) >>> 0) {
   __THREW__ = 0;
   invoke_viiiiiii(2, 49871, 49882, 49885, HEAP32[$121 >> 2] | 0, HEAP32[$122 >> 2] | 0, 49852, 77);
   $271 = __THREW__;
   __THREW__ = 0;
   if ($271 & 1) {
    label = 13;
    break;
   }
  }
  HEAP32[$123 >> 2] = HEAP32[$109 >> 2];
  $278 = $107;
  $283 = HEAP32[$278 + 4 >> 2] | 0;
  $284 = $124;
  HEAP32[$284 >> 2] = HEAP32[$278 >> 2];
  HEAP32[$284 + 4 >> 2] = $283;
  $289 = $124;
  $294 = HEAP32[$289 + 4 >> 2] | 0;
  if (!(0 > $294 >>> 0 | (0 == ($294 | 0) ? (HEAP32[$123 >> 2] | 0) >>> 0 >= (HEAP32[$289 >> 2] | 0) >>> 0 : 0))) {
   $301 = $124;
   __THREW__ = 0;
   invoke_viiiiiiii(2, 49885, 49882, 49892, HEAP32[$123 >> 2] | 0, HEAP32[$301 >> 2] | 0, HEAP32[$301 + 4 >> 2] | 0, 49852, 78);
   $307 = __THREW__;
   __THREW__ = 0;
   if ($307 & 1) {
    label = 13;
    break;
   }
  }
  HEAP32[$125 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$31 >> 2] = $133 + 28;
  $312 = HEAP32[HEAP32[$31 >> 2] >> 2] | 0;
  __THREW__ = 0;
  $315 = invoke_ii(HEAP32[HEAP32[$312 >> 2] >> 2] | 0, $312 | 0) | 0;
  $316 = tempRet0;
  $317 = __THREW__;
  __THREW__ = 0;
  if ($317 & 1) {
   label = 13;
   break;
  }
  $319 = $127;
  HEAP32[$319 >> 2] = $315;
  HEAP32[$319 + 4 >> 2] = $316;
  $323 = $127;
  $328 = HEAP32[$323 + 4 >> 2] | 0;
  $329 = $126;
  HEAP32[$329 >> 2] = HEAP32[$323 >> 2];
  HEAP32[$329 + 4 >> 2] = $328;
  $334 = $126;
  $339 = HEAP32[$334 + 4 >> 2] | 0;
  if (!(0 < $339 >>> 0 | (0 == ($339 | 0) ? (HEAP32[$125 >> 2] | 0) >>> 0 <= (HEAP32[$334 >> 2] | 0) >>> 0 : 0))) {
   $346 = $126;
   __THREW__ = 0;
   invoke_viiiiiiii(2, 49885, 51100, 49907, HEAP32[$125 >> 2] | 0, HEAP32[$346 >> 2] | 0, HEAP32[$346 + 4 >> 2] | 0, 49852, 79);
   $352 = __THREW__;
   __THREW__ = 0;
   if ($352 & 1) {
    label = 13;
    break;
   }
  }
  HEAP32[$109 >> 2] = HEAP32[$119 >> 2];
  $357 = $107;
  $363 = _i64Subtract(HEAP32[$109 >> 2] | 0, 0, HEAP32[$357 >> 2] | 0, HEAP32[$357 + 4 >> 2] | 0) | 0;
  $364 = tempRet0;
  __THREW__ = 0;
  invoke_viii(16, $128 | 0, $363 | 0, $364 | 0);
  $365 = __THREW__;
  __THREW__ = 0;
  if ($365 & 1) {
   label = 13;
   break;
  }
  HEAP32[$28 >> 2] = $133 + 16;
  HEAP32[$29 >> 2] = $128;
  $367 = HEAP32[$28 >> 2] | 0;
  $369 = HEAP32[$367 + 4 >> 2] | 0;
  HEAP32[$27 >> 2] = $367;
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 8;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  if ($369 >>> 0 < (HEAP32[HEAP32[$25 >> 2] >> 2] | 0) >>> 0) {
   HEAP32[$22 >> 2] = $30;
   HEAP32[$23 >> 2] = $367;
   HEAP32[$24 >> 2] = 1;
   HEAP32[$3 >> 2] = $367;
   HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   $379 = HEAP32[$1 >> 2] | 0;
   HEAP32[$4 >> 2] = HEAP32[$367 + 4 >> 2];
   $382 = HEAP32[$4 >> 2] | 0;
   HEAP32[$5 >> 2] = HEAP32[$29 >> 2];
   $384 = HEAP32[$5 >> 2] | 0;
   HEAP32[$16 >> 2] = $379;
   HEAP32[$17 >> 2] = $382;
   HEAP32[$18 >> 2] = $384;
   $385 = HEAP32[$16 >> 2] | 0;
   $386 = HEAP32[$17 >> 2] | 0;
   HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
   $388 = HEAP32[$15 >> 2] | 0;
   HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
   HEAP32[$11 >> 2] = $385;
   HEAP32[$12 >> 2] = $386;
   HEAP32[$13 >> 2] = $388;
   $389 = HEAP32[$11 >> 2] | 0;
   $390 = HEAP32[$12 >> 2] | 0;
   HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
   $392 = HEAP32[$10 >> 2] | 0;
   HEAP32[$7 >> 2] = $389;
   HEAP32[$8 >> 2] = $390;
   HEAP32[$9 >> 2] = $392;
   $393 = HEAP32[$8 >> 2] | 0;
   HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
   $395 = HEAP32[$6 >> 2] | 0;
   HEAP32[$393 >> 2] = HEAP32[$395 >> 2];
   HEAP32[$393 + 4 >> 2] = HEAP32[$395 + 4 >> 2];
   HEAP32[$20 >> 2] = $30;
   $396 = $367 + 4 | 0;
   HEAP32[$396 >> 2] = (HEAP32[$396 >> 2] | 0) + 8;
  } else {
   HEAP32[$21 >> 2] = HEAP32[$29 >> 2];
   __THREW__ = 0;
   invoke_vii(61, $367 | 0, HEAP32[$21 >> 2] | 0);
   $401 = __THREW__;
   __THREW__ = 0;
   if ($401 & 1) {
    label = 13;
    break;
   }
  }
  $403 = $129;
  HEAP32[$403 >> 2] = 4;
  HEAP32[$403 + 4 >> 2] = 0;
  __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($116, $129) | 0;
 }
 if ((label | 0) == 13) {
  $273 = ___cxa_find_matching_catch_2() | 0;
  $274 = tempRet0;
  HEAP32[$117 >> 2] = $273;
  HEAP32[$118 >> 2] = $274;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
  $275 = HEAP32[$117 >> 2] | 0;
  $276 = HEAP32[$118 >> 2] | 0;
  ___resumeException($275 | 0);
 } else if ((label | 0) == 24) {
  HEAP32[$130 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$32 >> 2] = $133 + 28;
  $410 = HEAP32[HEAP32[$32 >> 2] >> 2] | 0;
  __THREW__ = 0;
  $413 = invoke_ii(HEAP32[HEAP32[$410 >> 2] >> 2] | 0, $410 | 0) | 0;
  $414 = tempRet0;
  $415 = __THREW__;
  __THREW__ = 0;
  if ($415 & 1) {
   $273 = ___cxa_find_matching_catch_2() | 0;
   $274 = tempRet0;
   HEAP32[$117 >> 2] = $273;
   HEAP32[$118 >> 2] = $274;
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $275 = HEAP32[$117 >> 2] | 0;
   $276 = HEAP32[$118 >> 2] | 0;
   ___resumeException($275 | 0);
  }
  $417 = $132;
  HEAP32[$417 >> 2] = $413;
  HEAP32[$417 + 4 >> 2] = $414;
  $421 = $132;
  $426 = HEAP32[$421 + 4 >> 2] | 0;
  $427 = $131;
  HEAP32[$427 >> 2] = HEAP32[$421 >> 2];
  HEAP32[$427 + 4 >> 2] = $426;
  $432 = $131;
  if (0 == (HEAP32[$432 + 4 >> 2] | 0) ? (HEAP32[$130 >> 2] | 0) == (HEAP32[$432 >> 2] | 0) : 0) {
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $450 = $107;
   $451 = $450;
   $452 = HEAP32[$451 >> 2] | 0;
   $453 = $450 + 4 | 0;
   $454 = $453;
   $455 = HEAP32[$454 >> 2] | 0;
   tempRet0 = $455;
   STACKTOP = sp;
   return $452 | 0;
  }
  $442 = $131;
  __THREW__ = 0;
  invoke_viiiiiiii(2, 49885, 50958, 49907, HEAP32[$130 >> 2] | 0, HEAP32[$442 >> 2] | 0, HEAP32[$442 + 4 >> 2] | 0, 49852, 85);
  $448 = __THREW__;
  __THREW__ = 0;
  if ($448 & 1) {
   $273 = ___cxa_find_matching_catch_2() | 0;
   $274 = tempRet0;
   HEAP32[$117 >> 2] = $273;
   HEAP32[$118 >> 2] = $274;
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $275 = HEAP32[$117 >> 2] | 0;
   $276 = HEAP32[$118 >> 2] | 0;
   ___resumeException($275 | 0);
  } else {
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($113);
   $450 = $107;
   $451 = $450;
   $452 = HEAP32[$451 >> 2] | 0;
   $453 = $450 + 4 | 0;
   $454 = $453;
   $455 = HEAP32[$454 >> 2] | 0;
   tempRet0 = $455;
   STACKTOP = sp;
   return $452 | 0;
  }
 }
 return 0;
}

function __ZN3zim8FileImpl10getClusterENS_15cluster_index_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy2 = 0, $$byval_copy5 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $13 = 0, $130 = 0, $136 = 0, $14 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $174 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $20 = 0, $201 = 0, $202 = 0, $203 = 0, $205 = 0, $21 = 0, $211 = 0, $217 = 0, $22 = 0, $221 = 0, $222 = 0, $224 = 0, $227 = 0, $23 = 0, $231 = 0, $238 = 0, $239 = 0, $24 = 0, $244 = 0, $245 = 0, $247 = 0, $25 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $270 = 0, $272 = 0, $274 = 0, $276 = 0, $277 = 0, $28 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $301 = 0, $31 = 0, $313 = 0, $316 = 0, $319 = 0, $32 = 0, $321 = 0, $33 = 0, $331 = 0, $334 = 0, $338 = 0, $34 = 0, $345 = 0, $346 = 0, $35 = 0, $351 = 0, $353 = 0, $356 = 0, $357 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy5 = sp + 80 | 0;
 $$byval_copy2 = sp + 72 | 0;
 $3 = sp + 472 | 0;
 $4 = sp + 468 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 464 | 0;
 $7 = sp + 460 | 0;
 $8 = sp + 456 | 0;
 $9 = sp + 452 | 0;
 $10 = sp + 448 | 0;
 $11 = sp + 444 | 0;
 $12 = sp + 440 | 0;
 $13 = sp + 436 | 0;
 $14 = sp + 432 | 0;
 $15 = sp + 428 | 0;
 $16 = sp + 424 | 0;
 $17 = sp + 420 | 0;
 $18 = sp + 416 | 0;
 $19 = sp + 412 | 0;
 $20 = sp + 408 | 0;
 $21 = sp + 404 | 0;
 $22 = sp + 400 | 0;
 $23 = sp + 396 | 0;
 $24 = sp + 392 | 0;
 $25 = sp + 384 | 0;
 $26 = sp + 376 | 0;
 $27 = sp + 372 | 0;
 $28 = sp + 368 | 0;
 $29 = sp + 364 | 0;
 $30 = sp + 360 | 0;
 $31 = sp + 356 | 0;
 $32 = sp + 352 | 0;
 $33 = sp + 348 | 0;
 $34 = sp + 344 | 0;
 $35 = sp + 340 | 0;
 $36 = sp + 336 | 0;
 $37 = sp + 332 | 0;
 $38 = sp + 328 | 0;
 $39 = sp + 324 | 0;
 $40 = sp + 320 | 0;
 $41 = sp + 316 | 0;
 $42 = sp + 312 | 0;
 $43 = sp + 308 | 0;
 $44 = sp + 304 | 0;
 $45 = sp + 300 | 0;
 $46 = sp + 296 | 0;
 $47 = sp + 292 | 0;
 $48 = sp + 288 | 0;
 $49 = sp + 284 | 0;
 $50 = sp + 280 | 0;
 $51 = sp + 276 | 0;
 $52 = sp + 272 | 0;
 $53 = sp + 268 | 0;
 $54 = sp + 264 | 0;
 $55 = sp + 260 | 0;
 $56 = sp + 256 | 0;
 $57 = sp + 252 | 0;
 $58 = sp + 248 | 0;
 $59 = sp + 244 | 0;
 $60 = sp + 240 | 0;
 $61 = sp + 56 | 0;
 $62 = sp + 236 | 0;
 $63 = sp + 232 | 0;
 $64 = sp + 228 | 0;
 $66 = sp + 220 | 0;
 $67 = sp + 216 | 0;
 $68 = sp + 212 | 0;
 $69 = sp + 208 | 0;
 $70 = sp + 204 | 0;
 $71 = sp + 200 | 0;
 $72 = sp + 196 | 0;
 $73 = sp + 184 | 0;
 $74 = sp + 180 | 0;
 $75 = sp + 176 | 0;
 $76 = sp + 478 | 0;
 $77 = sp + 168 | 0;
 $78 = sp + 160 | 0;
 $79 = sp + 152 | 0;
 $80 = sp + 148 | 0;
 $81 = sp + 48 | 0;
 $82 = sp + 144 | 0;
 $83 = sp + 140 | 0;
 $84 = sp + 40 | 0;
 $85 = sp + 136 | 0;
 $86 = sp + 32 | 0;
 $87 = sp + 132 | 0;
 $88 = sp + 24 | 0;
 $89 = sp + 16 | 0;
 $90 = sp + 128 | 0;
 $91 = sp + 477 | 0;
 $92 = sp + 120 | 0;
 $93 = sp + 116 | 0;
 $94 = sp + 8 | 0;
 $95 = sp;
 $96 = sp + 112 | 0;
 $97 = sp + 104 | 0;
 $98 = sp + 96 | 0;
 $99 = sp + 476 | 0;
 $100 = sp + 92 | 0;
 $101 = sp + 88 | 0;
 HEAP32[$71 >> 2] = $1;
 $102 = HEAP32[$71 >> 2] | 0;
 HEAP32[$72 >> 2] = __ZNK3zim8FileImpl16getCountClustersEv($102) | 0;
 if (__ZgeIN3zim15cluster_index_tEEbRKT_S4_($2, $72) | 0) {
  $105 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$76 >> 0] = 1;
  HEAP32[$69 >> 2] = $73;
  HEAP32[$70 >> 2] = 49675;
  $106 = HEAP32[$69 >> 2] | 0;
  HEAP32[$68 >> 2] = $106;
  $107 = HEAP32[$68 >> 2] | 0;
  HEAP32[$67 >> 2] = $107;
  $108 = HEAP32[$67 >> 2] | 0;
  HEAP32[$108 >> 2] = 0;
  HEAP32[$108 + 4 >> 2] = 0;
  HEAP32[$108 + 8 >> 2] = 0;
  HEAP32[$66 >> 2] = $107;
  HEAP32[sp + 224 >> 2] = HEAP32[$66 >> 2];
  $110 = HEAP32[$70 >> 2] | 0;
  $112 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$70 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $106 | 0, $110 | 0, $112 | 0);
  $113 = __THREW__;
  __THREW__ = 0;
  if ($113 & 1) {
   $118 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$74 >> 2] = $118;
   HEAP32[$75 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $105 | 0, $73 | 0);
   $115 = __THREW__;
   __THREW__ = 0;
   if (!($115 & 1)) {
    HEAP8[$76 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $105 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $120 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$74 >> 2] = $120;
   HEAP32[$75 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($73);
  }
  if (!(HEAP8[$76 >> 0] & 1)) {
   $356 = HEAP32[$74 >> 2] | 0;
   $357 = HEAP32[$75 >> 2] | 0;
   ___resumeException($356 | 0);
  }
  ___cxa_free_exception($105 | 0);
  $356 = HEAP32[$74 >> 2] | 0;
  $357 = HEAP32[$75 >> 2] | 0;
  ___resumeException($356 | 0);
 }
 _pthread_mutex_lock($102 + 244 | 0) | 0;
 HEAP32[$64 >> 2] = $78;
 $125 = HEAP32[$64 >> 2] | 0;
 HEAP32[$125 >> 2] = 0;
 HEAP32[$125 + 4 >> 2] = 0;
 __THREW__ = 0;
 invoke_viiii(21, $77 | 0, $102 + 216 | 0, $2 | 0, $78 | 0);
 $127 = __THREW__;
 __THREW__ = 0;
 if ($127 & 1) {
  $146 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$74 >> 2] = $146;
  HEAP32[$75 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($78);
  $356 = HEAP32[$74 >> 2] | 0;
  $357 = HEAP32[$75 >> 2] | 0;
  ___resumeException($356 | 0);
 }
 __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($78);
 __THREW__ = 0;
 invoke_ii(92, $102 + 244 | 0) | 0;
 $130 = __THREW__;
 __THREW__ = 0;
 L19 : do if ($130 & 1) label = 14; else {
  HEAP32[$63 >> 2] = $77;
  HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
  if (HEAP32[HEAP32[$62 >> 2] >> 2] | 0) {
   HEAP32[$79 >> 2] = 0;
   HEAP8[$61 >> 0] = HEAP8[$79 >> 0] | 0;
   HEAP8[$61 + 1 >> 0] = HEAP8[$79 + 1 >> 0] | 0;
   HEAP8[$61 + 2 >> 0] = HEAP8[$79 + 2 >> 0] | 0;
   HEAP8[$61 + 3 >> 0] = HEAP8[$79 + 3 >> 0] | 0;
   HEAP32[$59 >> 2] = $0;
   HEAP32[$60 >> 2] = $77;
   $136 = HEAP32[$59 >> 2] | 0;
   HEAP32[$136 >> 2] = HEAP32[HEAP32[$60 >> 2] >> 2];
   HEAP32[$136 + 4 >> 2] = HEAP32[(HEAP32[$60 >> 2] | 0) + 4 >> 2];
   HEAP32[HEAP32[$60 >> 2] >> 2] = 0;
   HEAP32[(HEAP32[$60 >> 2] | 0) + 4 >> 2] = 0;
   HEAP32[$80 >> 2] = 1;
   __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($77);
   STACKTOP = sp;
   return;
  };
  HEAP32[$82 >> 2] = HEAP32[$2 >> 2];
  __THREW__ = 0;
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$82 >> 2];
  $150 = invoke_iii(39, $102 | 0, $$byval_copy5 | 0) | 0;
  $151 = tempRet0;
  $152 = __THREW__;
  __THREW__ = 0;
  if ($152 & 1) label = 14; else {
   $154 = $81;
   HEAP32[$154 >> 2] = $150;
   HEAP32[$154 + 4 >> 2] = $151;
   __THREW__ = 0;
   invoke_vii(59, $83 | 0, (HEAP32[$2 >> 2] | 0) + 1 | 0);
   $160 = __THREW__;
   __THREW__ = 0;
   if ($160 & 1) label = 14; else {
    __THREW__ = 0;
    $162 = invoke_ii(93, $102 | 0) | 0;
    $163 = __THREW__;
    __THREW__ = 0;
    if ($163 & 1) label = 14; else {
     HEAP32[$85 >> 2] = $162;
     do if (__ZltIN3zim15cluster_index_tEEbRKT_S4_($83, $85) | 0) {
      HEAP32[$87 >> 2] = HEAP32[$83 >> 2];
      __THREW__ = 0;
      HEAP32[$$byval_copy5 >> 2] = HEAP32[$87 >> 2];
      $166 = invoke_iii(39, $102 | 0, $$byval_copy5 | 0) | 0;
      $167 = tempRet0;
      $168 = __THREW__;
      __THREW__ = 0;
      if ($168 & 1) {
       label = 14;
       break L19;
      }
      $170 = $86;
      HEAP32[$170 >> 2] = $166;
      HEAP32[$170 + 4 >> 2] = $167;
      $174 = $86;
      $201 = HEAP32[$174 >> 2] | 0;
      $202 = HEAP32[$174 + 4 >> 2] | 0;
     } else if (__ZNK3zim10Fileheader11hasChecksumEv($102 + 56 | 0) | 0) {
      __THREW__ = 0;
      $183 = invoke_ii(94, $102 + 56 | 0) | 0;
      $184 = tempRet0;
      $185 = __THREW__;
      __THREW__ = 0;
      if ($185 & 1) {
       label = 14;
       break L19;
      } else {
       $201 = $183;
       $202 = $184;
       break;
      }
     } else {
      HEAP32[$58 >> 2] = $102;
      $189 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$58 >> 2] >> 2] | 0) | 0;
      $191 = $88;
      HEAP32[$191 >> 2] = $189;
      HEAP32[$191 + 4 >> 2] = tempRet0;
      $195 = $88;
      $201 = HEAP32[$195 >> 2] | 0;
      $202 = HEAP32[$195 + 4 >> 2] | 0;
      break;
     } while (0);
     __THREW__ = 0;
     invoke_viii(16, $84 | 0, $201 | 0, $202 | 0);
     $203 = __THREW__;
     __THREW__ = 0;
     if ($203 & 1) label = 14; else {
      $205 = $84;
      $211 = $81;
      $217 = _i64Subtract(HEAP32[$205 >> 2] | 0, HEAP32[$205 + 4 >> 2] | 0, HEAP32[$211 >> 2] | 0, HEAP32[$211 + 4 >> 2] | 0) | 0;
      __ZN3zim7zsize_tC2Ey($89, $217, tempRet0);
      HEAP32[$57 >> 2] = $102 + 8;
      $221 = HEAP32[HEAP32[$57 >> 2] >> 2] | 0;
      HEAP32[$94 >> 2] = HEAP32[$81 >> 2];
      HEAP32[$94 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
      HEAP32[$95 >> 2] = HEAP32[$89 >> 2];
      HEAP32[$95 + 4 >> 2] = HEAP32[$89 + 4 >> 2];
      __THREW__ = 0;
      HEAP32[$$byval_copy2 >> 2] = HEAP32[$94 >> 2];
      HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$94 + 4 >> 2];
      HEAP32[$$byval_copy5 >> 2] = HEAP32[$95 >> 2];
      HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$95 + 4 >> 2];
      invoke_viiiiii(10, $93 | 0, $221 | 0, $$byval_copy2 | 0, $$byval_copy5 | 0, $90 | 0, $91 | 0);
      $222 = __THREW__;
      __THREW__ = 0;
      if ($222 & 1) label = 14; else {
       HEAP32[$96 >> 2] = 0;
       __THREW__ = 0;
       HEAP32[$$byval_copy5 >> 2] = HEAP32[$96 >> 2];
       invoke_viii(17, $92 | 0, $93 | 0, $$byval_copy5 | 0);
       $224 = __THREW__;
       __THREW__ = 0;
       if ($224 & 1) {
        $331 = ___cxa_find_matching_catch_2() | 0;
        HEAP32[$74 >> 2] = $331;
        HEAP32[$75 >> 2] = tempRet0;
        HEAP32[$37 >> 2] = $93;
        HEAP32[$34 >> 2] = HEAP32[$37 >> 2];
        HEAP32[$35 >> 2] = 0;
        $334 = HEAP32[$34 >> 2] | 0;
        HEAP32[$33 >> 2] = $334;
        HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
        HEAP32[$36 >> 2] = HEAP32[HEAP32[$32 >> 2] >> 2];
        $338 = HEAP32[$35 >> 2] | 0;
        HEAP32[$29 >> 2] = $334;
        HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
        HEAP32[HEAP32[$28 >> 2] >> 2] = $338;
        if (!(HEAP32[$36 >> 2] | 0)) break;
        HEAP32[$27 >> 2] = $334;
        HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
        $345 = HEAP32[$36 >> 2] | 0;
        HEAP32[$30 >> 2] = HEAP32[$26 >> 2];
        HEAP32[$31 >> 2] = $345;
        $346 = HEAP32[$31 >> 2] | 0;
        if (!$346) break;
        FUNCTION_TABLE_vi[HEAP32[(HEAP32[$346 >> 2] | 0) + 8 >> 2] & 255]($346);
        break;
       }
       HEAP32[$56 >> 2] = $93;
       HEAP32[$53 >> 2] = HEAP32[$56 >> 2];
       HEAP32[$54 >> 2] = 0;
       $227 = HEAP32[$53 >> 2] | 0;
       HEAP32[$52 >> 2] = $227;
       HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
       HEAP32[$55 >> 2] = HEAP32[HEAP32[$51 >> 2] >> 2];
       $231 = HEAP32[$54 >> 2] | 0;
       HEAP32[$48 >> 2] = $227;
       HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
       HEAP32[HEAP32[$47 >> 2] >> 2] = $231;
       if (HEAP32[$55 >> 2] | 0) {
        HEAP32[$46 >> 2] = $227;
        HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
        $238 = HEAP32[$55 >> 2] | 0;
        HEAP32[$49 >> 2] = HEAP32[$45 >> 2];
        HEAP32[$50 >> 2] = $238;
        $239 = HEAP32[$50 >> 2] | 0;
        if ($239 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$239 >> 2] | 0) + 8 >> 2] & 255]($239);
       }
       __THREW__ = 0;
       $244 = invoke_ii(79, 48) | 0;
       $245 = __THREW__;
       __THREW__ = 0;
       do if ($245 & 1) label = 42; else {
        HEAP8[$99 >> 0] = 1;
        HEAP32[$43 >> 2] = $98;
        HEAP32[$44 >> 2] = $92;
        $247 = HEAP32[$43 >> 2] | 0;
        HEAP32[$247 >> 2] = HEAP32[HEAP32[$44 >> 2] >> 2];
        HEAP32[$247 + 4 >> 2] = HEAP32[(HEAP32[$44 >> 2] | 0) + 4 >> 2];
        if (HEAP32[$247 + 4 >> 2] | 0) {
         HEAP32[$42 >> 2] = HEAP32[$247 + 4 >> 2];
         HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
         HEAP32[$38 >> 2] = (HEAP32[$41 >> 2] | 0) + 4;
         $262 = HEAP32[$38 >> 2] | 0;
         HEAP32[$39 >> 2] = 1;
         $263 = HEAP32[$39 >> 2] | 0;
         $264 = HEAP32[$262 >> 2] | 0;
         HEAP32[$262 >> 2] = $264 + $263;
         HEAP32[$40 >> 2] = $264 + $263;
        }
        __THREW__ = 0;
        invoke_viiii(22, $244 | 0, $98 | 0, HEAP32[$90 >> 2] | 0, HEAP8[$91 >> 0] & 1 | 0);
        $270 = __THREW__;
        __THREW__ = 0;
        if (!($270 & 1)) {
         HEAP8[$99 >> 0] = 0;
         HEAP32[$100 >> 2] = 0;
         __THREW__ = 0;
         HEAP32[$$byval_copy5 >> 2] = HEAP32[$100 >> 2];
         invoke_viii(18, $97 | 0, $244 | 0, $$byval_copy5 | 0);
         $272 = __THREW__;
         __THREW__ = 0;
         if (!($272 & 1)) {
          HEAP32[$23 >> 2] = $77;
          HEAP32[$24 >> 2] = $97;
          $274 = HEAP32[$23 >> 2] | 0;
          HEAP32[$22 >> 2] = HEAP32[$24 >> 2];
          $276 = HEAP32[$22 >> 2] | 0;
          HEAP32[$20 >> 2] = $25;
          HEAP32[$21 >> 2] = $276;
          $277 = HEAP32[$20 >> 2] | 0;
          HEAP32[$277 >> 2] = HEAP32[HEAP32[$21 >> 2] >> 2];
          HEAP32[$277 + 4 >> 2] = HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2];
          HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
          HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] = 0;
          HEAP32[$18 >> 2] = $25;
          HEAP32[$19 >> 2] = $274;
          $287 = HEAP32[$18 >> 2] | 0;
          $288 = HEAP32[$19 >> 2] | 0;
          HEAP32[$15 >> 2] = $287;
          HEAP32[$16 >> 2] = $288;
          HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
          HEAP32[$17 >> 2] = HEAP32[HEAP32[$14 >> 2] >> 2];
          HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
          HEAP32[HEAP32[$15 >> 2] >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
          HEAP32[$13 >> 2] = $17;
          HEAP32[HEAP32[$16 >> 2] >> 2] = HEAP32[HEAP32[$13 >> 2] >> 2];
          $301 = (HEAP32[$19 >> 2] | 0) + 4 | 0;
          HEAP32[$9 >> 2] = $287 + 4;
          HEAP32[$10 >> 2] = $301;
          HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
          HEAP32[$11 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
          HEAP32[$6 >> 2] = HEAP32[$10 >> 2];
          HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
          HEAP32[$7 >> 2] = $11;
          HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
          __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($25);
          __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($97);
          __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($98);
          __THREW__ = 0;
          invoke_ii(95, $102 + 244 | 0) | 0;
          $313 = __THREW__;
          __THREW__ = 0;
          if ($313 & 1) {
           label = 42;
           break;
          }
          __THREW__ = 0;
          invoke_viii(19, $102 + 216 | 0, $2 | 0, $77 | 0);
          $316 = __THREW__;
          __THREW__ = 0;
          if ($316 & 1) {
           label = 42;
           break;
          }
          __THREW__ = 0;
          invoke_ii(92, $102 + 244 | 0) | 0;
          $319 = __THREW__;
          __THREW__ = 0;
          if ($319 & 1) {
           label = 42;
           break;
          };
          HEAP32[$101 >> 2] = 0;
          HEAP8[$5 >> 0] = HEAP8[$101 >> 0] | 0;
          HEAP8[$5 + 1 >> 0] = HEAP8[$101 + 1 >> 0] | 0;
          HEAP8[$5 + 2 >> 0] = HEAP8[$101 + 2 >> 0] | 0;
          HEAP8[$5 + 3 >> 0] = HEAP8[$101 + 3 >> 0] | 0;
          HEAP32[$3 >> 2] = $0;
          HEAP32[$4 >> 2] = $77;
          $321 = HEAP32[$3 >> 2] | 0;
          HEAP32[$321 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
          HEAP32[$321 + 4 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2];
          HEAP32[HEAP32[$4 >> 2] >> 2] = 0;
          HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 0;
          HEAP32[$80 >> 2] = 1;
          __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($92);
          __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($77);
          STACKTOP = sp;
          return;
         }
        }
        $353 = ___cxa_find_matching_catch_2() | 0;
        HEAP32[$74 >> 2] = $353;
        HEAP32[$75 >> 2] = tempRet0;
        __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($98);
        if (HEAP8[$99 >> 0] & 1) __ZdlPv($244);
       } while (0);
       if ((label | 0) == 42) {
        $351 = ___cxa_find_matching_catch_2() | 0;
        HEAP32[$74 >> 2] = $351;
        HEAP32[$75 >> 2] = tempRet0;
       }
       __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($92);
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 14) {
  $148 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$74 >> 2] = $148;
  HEAP32[$75 >> 2] = tempRet0;
 }
 __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($77);
 $356 = HEAP32[$74 >> 2] | 0;
 $357 = HEAP32[$75 >> 2] | 0;
 ___resumeException($356 | 0);
}

function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre363 = 0, $$sink = 0, $10 = 0, $102 = 0, $103 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $12 = 0, $122 = 0, $126 = 0, $13 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $163 = 0, $164 = 0, $169 = 0, $172 = 0, $177 = 0, $178 = 0, $183 = 0, $185 = 0, $192 = 0, $193 = 0, $20 = 0, $204 = 0, $21 = 0, $216 = 0, $223 = 0, $225 = 0, $228 = 0, $23 = 0, $230 = 0, $238 = 0, $24 = 0, $240 = 0, $243 = 0, $244 = 0, $248 = 0, $25 = 0, $252 = 0, $254 = 0, $257 = 0, $259 = 0, $260 = 0, $261 = 0, $27 = 0, $271 = 0, $272 = 0, $276 = 0, $278 = 0, $280 = 0, $286 = 0, $298 = 0, $30 = 0, $301 = 0, $302 = 0, $315 = 0, $317 = 0, $318 = 0, $322 = 0, $326 = 0, $328 = 0, $339 = 0, $341 = 0, $348 = 0, $351 = 0, $358 = 0, $359 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $spec$select = 0, $spec$select284 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, label = 0, sp = 0, $154$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 40 | 0;
 $7 = sp;
 $8 = sp + 48 | 0;
 $9 = sp + 60 | 0;
 HEAP32[$5 >> 2] = $1;
 $10 = ($0 | 0) != 0;
 $11 = $7 + 40 | 0;
 $12 = $11;
 $13 = $7 + 39 | 0;
 $14 = $8 + 4 | 0;
 $$0243$ph = 0;
 $$0247$ph = 0;
 $$0269$ph = 0;
 L1 : while (1) {
  $$0243 = $$0243$ph;
  $$0247 = $$0247$ph;
  while (1) {
   do if (($$0247 | 0) > -1) if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 75;
    $$1248 = -1;
    break;
   } else {
    $$1248 = $$0243 + $$0247 | 0;
    break;
   } else $$1248 = $$0247; while (0);
   $20 = HEAP32[$5 >> 2] | 0;
   $21 = HEAP8[$20 >> 0] | 0;
   if (!($21 << 24 >> 24)) {
    label = 94;
    break L1;
   }
   $23 = $21;
   $25 = $20;
   L12 : while (1) {
    switch ($23 << 24 >> 24) {
    case 37:
     {
      label = 10;
      break L12;
      break;
     }
    case 0:
     {
      $$0249$lcssa = $25;
      break L12;
      break;
     }
    default:
     {}
    }
    $24 = $25 + 1 | 0;
    HEAP32[$5 >> 2] = $24;
    $23 = HEAP8[$24 >> 0] | 0;
    $25 = $24;
   }
   L15 : do if ((label | 0) == 10) {
    label = 0;
    $$0249321 = $25;
    $27 = $25;
    while (1) {
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249321;
      break L15;
     }
     $30 = $$0249321 + 1 | 0;
     $27 = $27 + 2 | 0;
     HEAP32[$5 >> 2] = $27;
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30;
      break;
     } else $$0249321 = $30;
    }
   } while (0);
   $$0243 = $$0249$lcssa - $20 | 0;
   if ($10) _out_491($0, $20, $$0243);
   if (!$$0243) break; else $$0247 = $$1248;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0;
  $$pre360 = HEAP32[$5 >> 2] | 0;
  if ($43) {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  } else if ((HEAP8[$$pre360 + 2 >> 0] | 0) == 36) {
   $$0253 = (HEAP8[$$pre360 + 1 >> 0] | 0) + -48 | 0;
   $$1270 = 1;
   $$sink = 3;
  } else {
   $$0253 = -1;
   $$1270 = $$0269$ph;
   $$sink = 1;
  }
  $51 = $$pre360 + $$sink | 0;
  HEAP32[$5 >> 2] = $51;
  $52 = HEAP8[$51 >> 0] | 0;
  $54 = ($52 << 24 >> 24) + -32 | 0;
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0;
   $$lcssa308 = $52;
   $storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;
   $60 = $54;
   $storemerge273327 = $51;
   while (1) {
    $61 = 1 << $60 | $$0262328;
    $62 = $storemerge273327 + 1 | 0;
    HEAP32[$5 >> 2] = $62;
    $63 = HEAP8[$62 >> 0] | 0;
    $60 = ($63 << 24 >> 24) + -32 | 0;
    if ($60 >>> 0 > 31 | (1 << $60 & 75913 | 0) == 0) {
     $$0262$lcssa = $61;
     $$lcssa308 = $63;
     $storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;
     $storemerge273327 = $62;
    }
   }
  }
  if ($$lcssa308 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$storemerge273$lcssa + 1 >> 0] | 0) | 0)) label = 27; else {
    $76 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$76 + 2 >> 0] | 0) == 36) {
     $80 = $76 + 1 | 0;
     HEAP32[$4 + ((HEAP8[$80 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $$0259 = HEAP32[$3 + ((HEAP8[$80 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $$2271 = 1;
     $storemerge274 = $76 + 3 | 0;
    } else label = 27;
   }
   if ((label | 0) == 27) {
    label = 0;
    if ($$1270 | 0) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $102 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $103 = HEAP32[$102 >> 2] | 0;
     HEAP32[$2 >> 2] = $102 + 4;
     $358 = $103;
    } else $358 = 0;
    $$0259 = $358;
    $$2271 = 0;
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0;
   }
   HEAP32[$5 >> 2] = $storemerge274;
   $106 = ($$0259 | 0) < 0;
   $$1260 = $106 ? 0 - $$0259 | 0 : $$0259;
   $$1263 = $106 ? $$0262$lcssa | 8192 : $$0262$lcssa;
   $$3272 = $$2271;
   $112 = $storemerge274;
  } else {
   $109 = _getint_492($5) | 0;
   if (($109 | 0) < 0) {
    $$0 = -1;
    break;
   }
   $$1260 = $109;
   $$1263 = $$0262$lcssa;
   $$3272 = $$1270;
   $112 = HEAP32[$5 >> 2] | 0;
  }
  do if ((HEAP8[$112 >> 0] | 0) == 46) {
   $114 = $112 + 1 | 0;
   if ((HEAP8[$114 >> 0] | 0) != 42) {
    HEAP32[$5 >> 2] = $114;
    $152 = _getint_492($5) | 0;
    $$0254 = $152;
    $$pre363 = HEAP32[$5 >> 2] | 0;
    break;
   }
   if (_isdigit(HEAP8[$112 + 2 >> 0] | 0) | 0) {
    $122 = HEAP32[$5 >> 2] | 0;
    if ((HEAP8[$122 + 3 >> 0] | 0) == 36) {
     $126 = $122 + 2 | 0;
     HEAP32[$4 + ((HEAP8[$126 >> 0] | 0) + -48 << 2) >> 2] = 10;
     $137 = HEAP32[$3 + ((HEAP8[$126 >> 0] | 0) + -48 << 3) >> 2] | 0;
     $141 = $122 + 4 | 0;
     HEAP32[$5 >> 2] = $141;
     $$0254 = $137;
     $$pre363 = $141;
     break;
    }
   }
   if ($$3272 | 0) {
    $$0 = -1;
    break L1;
   }
   if ($10) {
    $148 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $149 = HEAP32[$148 >> 2] | 0;
    HEAP32[$2 >> 2] = $148 + 4;
    $359 = $149;
   } else $359 = 0;
   $151 = (HEAP32[$5 >> 2] | 0) + 2 | 0;
   HEAP32[$5 >> 2] = $151;
   $$0254 = $359;
   $$pre363 = $151;
  } else {
   $$0254 = -1;
   $$pre363 = $112;
  } while (0);
  $$0252 = 0;
  $154 = $$pre363;
  while (1) {
   if (((HEAP8[$154 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1;
    break L1;
   }
   $154$looptemp = $154;
   $154 = $154 + 1 | 0;
   HEAP32[$5 >> 2] = $154;
   $163 = HEAP8[(HEAP8[$154$looptemp >> 0] | 0) + -65 + (36016 + ($$0252 * 58 | 0)) >> 0] | 0;
   $164 = $163 & 255;
   if (($164 + -1 | 0) >>> 0 >= 8) break; else $$0252 = $164;
  }
  if (!($163 << 24 >> 24)) {
   $$0 = -1;
   break;
  }
  $169 = ($$0253 | 0) > -1;
  do if ($163 << 24 >> 24 == 19) if ($169) {
   $$0 = -1;
   break L1;
  } else label = 54; else {
   if ($169) {
    HEAP32[$4 + ($$0253 << 2) >> 2] = $164;
    $172 = $3 + ($$0253 << 3) | 0;
    $177 = HEAP32[$172 + 4 >> 2] | 0;
    $178 = $6;
    HEAP32[$178 >> 2] = HEAP32[$172 >> 2];
    HEAP32[$178 + 4 >> 2] = $177;
    label = 54;
    break;
   }
   if (!$10) {
    $$0 = 0;
    break L1;
   }
   _pop_arg_494($6, $164, $2);
   $183 = HEAP32[$5 >> 2] | 0;
   label = 55;
  } while (0);
  if ((label | 0) == 54) {
   label = 0;
   if ($10) {
    $183 = $154;
    label = 55;
   } else $$0243$ph$be = 0;
  }
  L77 : do if ((label | 0) == 55) {
   label = 0;
   $185 = HEAP8[$183 + -1 >> 0] | 0;
   $$0235 = ($$0252 | 0) != 0 & ($185 & 15 | 0) == 3 ? $185 & -33 : $185;
   $192 = $$1263 & -65537;
   $spec$select = ($$1263 & 8192 | 0) == 0 ? $$1263 : $192;
   L79 : do switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 2:
      {
       $204 = HEAP32[$6 >> 2] | 0;
       HEAP32[$204 >> 2] = $$1248;
       HEAP32[$204 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     case 7:
      {
       $216 = HEAP32[$6 >> 2] | 0;
       HEAP32[$216 >> 2] = $$1248;
       HEAP32[$216 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
     default:
      {
       $$0243$ph$be = 0;
       break L77;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120;
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8;
     $$3265 = $spec$select | 8;
     label = 67;
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235;
     $$1255 = $$0254;
     $$3265 = $spec$select;
     label = 67;
     break;
    }
   case 111:
    {
     $238 = $6;
     $240 = HEAP32[$238 >> 2] | 0;
     $243 = HEAP32[$238 + 4 >> 2] | 0;
     $244 = _fmt_o($240, $243, $11) | 0;
     $248 = $12 - $244 | 0;
     $$0228 = $244;
     $$1233 = 0;
     $$1238 = 52191;
     $$2256 = ($spec$select & 8 | 0) == 0 | ($$0254 | 0) > ($248 | 0) ? $$0254 : $248 + 1 | 0;
     $$4266 = $spec$select;
     $276 = $240;
     $278 = $243;
     label = 73;
     break;
    }
   case 105:
   case 100:
    {
     $252 = $6;
     $254 = HEAP32[$252 >> 2] | 0;
     $257 = HEAP32[$252 + 4 >> 2] | 0;
     if (($257 | 0) < 0) {
      $259 = _i64Subtract(0, 0, $254 | 0, $257 | 0) | 0;
      $260 = tempRet0;
      $261 = $6;
      HEAP32[$261 >> 2] = $259;
      HEAP32[$261 + 4 >> 2] = $260;
      $$0232 = 1;
      $$0237 = 52191;
      $271 = $259;
      $272 = $260;
      label = 72;
      break L79;
     } else {
      $$0232 = ($spec$select & 2049 | 0) != 0 & 1;
      $$0237 = ($spec$select & 2048 | 0) == 0 ? (($spec$select & 1 | 0) == 0 ? 52191 : 52193) : 52192;
      $271 = $254;
      $272 = $257;
      label = 72;
      break L79;
     }
     break;
    }
   case 117:
    {
     $193 = $6;
     $$0232 = 0;
     $$0237 = 52191;
     $271 = HEAP32[$193 >> 2] | 0;
     $272 = HEAP32[$193 + 4 >> 2] | 0;
     label = 72;
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2];
     $$2 = $13;
     $$2234 = 0;
     $$2239 = 52191;
     $$5 = 1;
     $$6268 = $192;
     $$pre$phiZ2D = $12;
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
     label = 77;
     break;
    }
   case 115:
    {
     $298 = HEAP32[$6 >> 2] | 0;
     $$1 = ($298 | 0) == 0 ? 52201 : $298;
     label = 77;
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$14 >> 2] = 0;
     HEAP32[$6 >> 2] = $8;
     $$4258370 = -1;
     label = 81;
     break;
    }
   case 83:
    {
     if (!$$0254) {
      _pad_497($0, 32, $$1260, 0, $spec$select);
      $$0240313371 = 0;
      label = 91;
     } else {
      $$4258370 = $$0254;
      label = 81;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243$ph$be = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $spec$select, $$0235) | 0;
     break L77;
     break;
    }
   default:
    {
     $$2 = $20;
     $$2234 = 0;
     $$2239 = 52191;
     $$5 = $$0254;
     $$6268 = $spec$select;
     $$pre$phiZ2D = $12;
    }
   } while (0);
   L103 : do if ((label | 0) == 67) {
    label = 0;
    $223 = $6;
    $225 = HEAP32[$223 >> 2] | 0;
    $228 = HEAP32[$223 + 4 >> 2] | 0;
    $230 = _fmt_x($225, $228, $11, $$1236 & 32) | 0;
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($225 | 0) == 0 & ($228 | 0) == 0;
    $$0228 = $230;
    $$1233 = $or$cond278 ? 0 : 2;
    $$1238 = $or$cond278 ? 52191 : 52191 + ($$1236 >>> 4) | 0;
    $$2256 = $$1255;
    $$4266 = $$3265;
    $276 = $225;
    $278 = $228;
    label = 73;
   } else if ((label | 0) == 72) {
    label = 0;
    $$0228 = _fmt_u($271, $272, $11) | 0;
    $$1233 = $$0232;
    $$1238 = $$0237;
    $$2256 = $$0254;
    $$4266 = $spec$select;
    $276 = $271;
    $278 = $272;
    label = 73;
   } else if ((label | 0) == 77) {
    label = 0;
    $301 = _memchr($$1, 0, $$0254) | 0;
    $302 = ($301 | 0) == 0;
    $$2 = $$1;
    $$2234 = 0;
    $$2239 = 52191;
    $$5 = $302 ? $$0254 : $301 - $$1 | 0;
    $$6268 = $192;
    $$pre$phiZ2D = $302 ? $$1 + $$0254 | 0 : $301;
   } else if ((label | 0) == 81) {
    label = 0;
    $$0229334 = HEAP32[$6 >> 2] | 0;
    $$0240333 = 0;
    while (1) {
     $315 = HEAP32[$$0229334 >> 2] | 0;
     if (!$315) {
      $$0240313 = $$0240333;
      break;
     }
     $317 = _wctomb($9, $315) | 0;
     $318 = ($317 | 0) < 0;
     if ($318 | $317 >>> 0 > ($$4258370 - $$0240333 | 0) >>> 0) {
      label = 85;
      break;
     }
     $322 = $317 + $$0240333 | 0;
     if ($$4258370 >>> 0 > $322 >>> 0) {
      $$0229334 = $$0229334 + 4 | 0;
      $$0240333 = $322;
     } else {
      $$0240313 = $322;
      break;
     }
    }
    if ((label | 0) == 85) {
     label = 0;
     if ($318) {
      $$0 = -1;
      break L1;
     } else $$0240313 = $$0240333;
    }
    _pad_497($0, 32, $$1260, $$0240313, $spec$select);
    if (!$$0240313) {
     $$0240313371 = 0;
     label = 91;
    } else {
     $$1230340 = HEAP32[$6 >> 2] | 0;
     $$1241339 = 0;
     while (1) {
      $326 = HEAP32[$$1230340 >> 2] | 0;
      if (!$326) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      $328 = _wctomb($9, $326) | 0;
      $$1241339 = $328 + $$1241339 | 0;
      if (($$1241339 | 0) > ($$0240313 | 0)) {
       $$0240313371 = $$0240313;
       label = 91;
       break L103;
      }
      _out_491($0, $9, $328);
      if ($$1241339 >>> 0 >= $$0240313 >>> 0) {
       $$0240313371 = $$0240313;
       label = 91;
       break;
      } else $$1230340 = $$1230340 + 4 | 0;
     }
    }
   } while (0);
   if ((label | 0) == 73) {
    label = 0;
    $280 = ($276 | 0) != 0 | ($278 | 0) != 0;
    $or$cond = ($$2256 | 0) != 0 | $280;
    $286 = $12 - $$0228 + (($280 ^ 1) & 1) | 0;
    $$2 = $or$cond ? $$0228 : $11;
    $$2234 = $$1233;
    $$2239 = $$1238;
    $$5 = $or$cond ? (($$2256 | 0) > ($286 | 0) ? $$2256 : $286) : 0;
    $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266;
    $$pre$phiZ2D = $12;
   } else if ((label | 0) == 91) {
    label = 0;
    _pad_497($0, 32, $$1260, $$0240313371, $spec$select ^ 8192);
    $$0243$ph$be = ($$1260 | 0) > ($$0240313371 | 0) ? $$1260 : $$0240313371;
    break;
   }
   $339 = $$pre$phiZ2D - $$2 | 0;
   $spec$select284 = ($$5 | 0) < ($339 | 0) ? $339 : $$5;
   $341 = $spec$select284 + $$2234 | 0;
   $$2261 = ($$1260 | 0) < ($341 | 0) ? $341 : $$1260;
   _pad_497($0, 32, $$2261, $341, $$6268);
   _out_491($0, $$2239, $$2234);
   _pad_497($0, 48, $$2261, $341, $$6268 ^ 65536);
   _pad_497($0, 48, $spec$select284, $339, 0);
   _out_491($0, $$2, $339);
   _pad_497($0, 32, $$2261, $341, $$6268 ^ 8192);
   $$0243$ph$be = $$2261;
  } while (0);
  $$0243$ph = $$0243$ph$be;
  $$0247$ph = $$1248;
  $$0269$ph = $$3272;
 }
 L125 : do if ((label | 0) == 94) if (!$0) if (!$$0269$ph) $$0 = 0; else {
  $$2242320 = 1;
  while (1) {
   $348 = HEAP32[$4 + ($$2242320 << 2) >> 2] | 0;
   if (!$348) break;
   _pop_arg_494($3 + ($$2242320 << 3) | 0, $348, $2);
   $351 = $$2242320 + 1 | 0;
   if ($351 >>> 0 < 10) $$2242320 = $351; else {
    $$0 = 1;
    break L125;
   }
  }
  $$3317 = $$2242320;
  while (1) {
   if (HEAP32[$4 + ($$3317 << 2) >> 2] | 0) {
    $$0 = -1;
    break L125;
   }
   $$3317 = $$3317 + 1 | 0;
   if ($$3317 >>> 0 >= 10) {
    $$0 = 1;
    break;
   }
  }
 } else $$0 = $$1248; while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN3zim8FileImpl9getDirentENS_15article_index_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $125 = 0, $127 = 0, $13 = 0, $131 = 0, $132 = 0, $135 = 0, $14 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $155 = 0, $157 = 0, $159 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $176 = 0, $178 = 0, $18 = 0, $181 = 0, $183 = 0, $187 = 0, $19 = 0, $190 = 0, $194 = 0, $195 = 0, $197 = 0, $198 = 0, $20 = 0, $203 = 0, $204 = 0, $207 = 0, $209 = 0, $21 = 0, $210 = 0, $217 = 0, $219 = 0, $22 = 0, $221 = 0, $222 = 0, $23 = 0, $232 = 0, $233 = 0, $24 = 0, $246 = 0, $25 = 0, $257 = 0, $259 = 0, $26 = 0, $261 = 0, $263 = 0, $268 = 0, $27 = 0, $272 = 0, $274 = 0, $277 = 0, $28 = 0, $281 = 0, $288 = 0, $289 = 0, $29 = 0, $296 = 0, $3 = 0, $30 = 0, $300 = 0, $307 = 0, $308 = 0, $31 = 0, $314 = 0, $317 = 0, $32 = 0, $320 = 0, $323 = 0, $325 = 0, $33 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy2 = sp + 56 | 0;
 $$byval_copy = sp + 48 | 0;
 $3 = sp + 472 | 0;
 $4 = sp + 468 | 0;
 $5 = sp + 464 | 0;
 $6 = sp + 460 | 0;
 $7 = sp + 456 | 0;
 $8 = sp + 452 | 0;
 $9 = sp + 448 | 0;
 $10 = sp + 444 | 0;
 $11 = sp + 440 | 0;
 $12 = sp + 436 | 0;
 $13 = sp + 432 | 0;
 $14 = sp + 428 | 0;
 $15 = sp + 424 | 0;
 $16 = sp + 420 | 0;
 $17 = sp + 416 | 0;
 $18 = sp + 412 | 0;
 $19 = sp + 408 | 0;
 $20 = sp + 404 | 0;
 $21 = sp + 400 | 0;
 $22 = sp + 392 | 0;
 $23 = sp + 388 | 0;
 $24 = sp + 384 | 0;
 $25 = sp + 380 | 0;
 $26 = sp + 376 | 0;
 $27 = sp + 372 | 0;
 $28 = sp + 368 | 0;
 $29 = sp + 364 | 0;
 $30 = sp + 360 | 0;
 $31 = sp + 356 | 0;
 $32 = sp + 352 | 0;
 $33 = sp + 348 | 0;
 $34 = sp + 344 | 0;
 $35 = sp + 340 | 0;
 $36 = sp + 336 | 0;
 $37 = sp + 332 | 0;
 $38 = sp + 328 | 0;
 $39 = sp + 324 | 0;
 $40 = sp + 320 | 0;
 $41 = sp + 316 | 0;
 $42 = sp + 312 | 0;
 $43 = sp + 308 | 0;
 $44 = sp + 304 | 0;
 $45 = sp + 300 | 0;
 $46 = sp + 296 | 0;
 $47 = sp + 292 | 0;
 $48 = sp + 288 | 0;
 $49 = sp + 284 | 0;
 $50 = sp + 280 | 0;
 $51 = sp + 276 | 0;
 $52 = sp + 272 | 0;
 $53 = sp + 268 | 0;
 $54 = sp + 264 | 0;
 $55 = sp + 260 | 0;
 $56 = sp + 256 | 0;
 $57 = sp + 252 | 0;
 $58 = sp + 248 | 0;
 $59 = sp + 244 | 0;
 $60 = sp + 240 | 0;
 $61 = sp + 236 | 0;
 $62 = sp + 232 | 0;
 $63 = sp + 228 | 0;
 $64 = sp + 224 | 0;
 $65 = sp + 220 | 0;
 $66 = sp + 216 | 0;
 $67 = sp + 212 | 0;
 $68 = sp + 208 | 0;
 $69 = sp + 204 | 0;
 $70 = sp + 200 | 0;
 $71 = sp + 196 | 0;
 $72 = sp + 192 | 0;
 $73 = sp + 188 | 0;
 $74 = sp + 184 | 0;
 $75 = sp + 180 | 0;
 $76 = sp + 176 | 0;
 $78 = sp + 168 | 0;
 $79 = sp + 164 | 0;
 $80 = sp + 160 | 0;
 $81 = sp + 156 | 0;
 $82 = sp + 152 | 0;
 $83 = sp + 148 | 0;
 $84 = sp + 144 | 0;
 $85 = sp + 132 | 0;
 $86 = sp + 128 | 0;
 $87 = sp + 124 | 0;
 $88 = sp + 476 | 0;
 $89 = sp + 112 | 0;
 $90 = sp + 104 | 0;
 $91 = sp + 96 | 0;
 $92 = sp + 40 | 0;
 $93 = sp + 32 | 0;
 $94 = sp + 88 | 0;
 $95 = sp + 24 | 0;
 $96 = sp + 16 | 0;
 $97 = sp + 80 | 0;
 $98 = sp + 8 | 0;
 $99 = sp + 72 | 0;
 $100 = sp + 64 | 0;
 $101 = sp;
 HEAP32[$83 >> 2] = $1;
 $102 = HEAP32[$83 >> 2] | 0;
 HEAP32[$84 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv($102) | 0;
 if (__ZgeIN3zim15article_index_tEEbRKT_S4_($2, $84) | 0) {
  $105 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$88 >> 0] = 1;
  HEAP32[$81 >> 2] = $85;
  HEAP32[$82 >> 2] = 52146;
  $106 = HEAP32[$81 >> 2] | 0;
  HEAP32[$80 >> 2] = $106;
  $107 = HEAP32[$80 >> 2] | 0;
  HEAP32[$79 >> 2] = $107;
  $108 = HEAP32[$79 >> 2] | 0;
  HEAP32[$108 >> 2] = 0;
  HEAP32[$108 + 4 >> 2] = 0;
  HEAP32[$108 + 8 >> 2] = 0;
  HEAP32[$78 >> 2] = $107;
  HEAP32[sp + 172 >> 2] = HEAP32[$78 >> 2];
  $110 = HEAP32[$82 >> 2] | 0;
  $112 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$82 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $106 | 0, $110 | 0, $112 | 0);
  $113 = __THREW__;
  __THREW__ = 0;
  if ($113 & 1) {
   $118 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$86 >> 2] = $118;
   HEAP32[$87 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $105 | 0, $85 | 0);
   $115 = __THREW__;
   __THREW__ = 0;
   if (!($115 & 1)) {
    HEAP8[$88 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $105 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $120 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$86 >> 2] = $120;
   HEAP32[$87 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($85);
  }
  if (!(HEAP8[$88 >> 0] & 1)) {
   $335 = HEAP32[$86 >> 2] | 0;
   $336 = HEAP32[$87 >> 2] | 0;
   ___resumeException($335 | 0);
  }
  ___cxa_free_exception($105 | 0);
  $335 = HEAP32[$86 >> 2] | 0;
  $336 = HEAP32[$87 >> 2] | 0;
  ___resumeException($335 | 0);
 }
 _pthread_mutex_lock($102 + 188 | 0) | 0;
 HEAP32[$76 >> 2] = $90;
 $125 = HEAP32[$76 >> 2] | 0;
 HEAP32[$125 >> 2] = 0;
 HEAP32[$125 + 4 >> 2] = 0;
 __THREW__ = 0;
 invoke_viiii(24, $89 | 0, $102 + 160 | 0, $2 | 0, $90 | 0);
 $127 = __THREW__;
 __THREW__ = 0;
 if ($127 & 1) {
  $155 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$86 >> 2] = $155;
  HEAP32[$87 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($90);
  $335 = HEAP32[$86 >> 2] | 0;
  $336 = HEAP32[$87 >> 2] | 0;
  ___resumeException($335 | 0);
 }
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($90);
 $131 = $102 + 188 | 0;
 if (HEAP8[$89 >> 0] & 1) {
  __THREW__ = 0;
  invoke_ii(92, $131 | 0) | 0;
  $132 = __THREW__;
  __THREW__ = 0;
  if ($132 & 1) label = 16; else {
   HEAP32[$74 >> 2] = $0;
   HEAP32[$75 >> 2] = $89 + 4;
   $135 = HEAP32[$74 >> 2] | 0;
   HEAP32[$135 >> 2] = HEAP32[HEAP32[$75 >> 2] >> 2];
   HEAP32[$135 + 4 >> 2] = HEAP32[(HEAP32[$75 >> 2] | 0) + 4 >> 2];
   if (HEAP32[$135 + 4 >> 2] | 0) {
    HEAP32[$73 >> 2] = HEAP32[$135 + 4 >> 2];
    HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
    HEAP32[$69 >> 2] = (HEAP32[$72 >> 2] | 0) + 4;
    $150 = HEAP32[$69 >> 2] | 0;
    HEAP32[$70 >> 2] = 1;
    $151 = HEAP32[$70 >> 2] | 0;
    $152 = HEAP32[$150 >> 2] | 0;
    HEAP32[$150 >> 2] = $152 + $151;
    HEAP32[$71 >> 2] = $152 + $151;
   }
   HEAP32[$91 >> 2] = 1;
   __ZNSt3__24pairIbNS_10shared_ptrIKN3zim6DirentEEEED2Ev($89);
   STACKTOP = sp;
   return;
  }
 } else {
  __THREW__ = 0;
  invoke_ii(92, $131 | 0) | 0;
  $159 = __THREW__;
  __THREW__ = 0;
  if ($159 & 1) label = 16; else {
   HEAP32[$68 >> 2] = $102 + 152;
   HEAP32[$67 >> 2] = HEAP32[$68 >> 2];
   HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
   __THREW__ = 0;
   $167 = invoke_iiii(46, $102 | 0, HEAP32[HEAP32[$66 >> 2] >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
   $168 = tempRet0;
   $169 = __THREW__;
   __THREW__ = 0;
   if ($169 & 1) label = 16; else {
    $171 = $92;
    HEAP32[$171 >> 2] = $167;
    HEAP32[$171 + 4 >> 2] = $168;
    __THREW__ = 0;
    invoke_ii(95, $102 + 28 | 0) | 0;
    $176 = __THREW__;
    __THREW__ = 0;
    if ($176 & 1) label = 16; else {
     __ZN3zim7zsize_tC2Ey($93, 256, 0);
     HEAP32[$65 >> 2] = $94;
     $178 = HEAP32[$65 >> 2] | 0;
     HEAP32[$178 >> 2] = 0;
     HEAP32[$178 + 4 >> 2] = 0;
     while (1) {
      $181 = __ZNK12REAL_TYPEDEFIyEcvyEv($93) | 0;
      __THREW__ = 0;
      invoke_vii(69, $102 + 16 | 0, $181 | 0);
      $183 = __THREW__;
      __THREW__ = 0;
      if ($183 & 1) {
       label = 27;
       break;
      }
      HEAP32[$64 >> 2] = $102 + 8;
      $187 = HEAP32[HEAP32[$64 >> 2] >> 2] | 0;
      $190 = HEAP32[(HEAP32[$187 >> 2] | 0) + 12 >> 2] | 0;
      HEAP32[$63 >> 2] = $102 + 16;
      HEAP32[$62 >> 2] = HEAP32[HEAP32[$63 >> 2] >> 2];
      $194 = HEAP32[$62 >> 2] | 0;
      HEAP32[$95 >> 2] = HEAP32[$92 >> 2];
      HEAP32[$95 + 4 >> 2] = HEAP32[$92 + 4 >> 2];
      HEAP32[$96 >> 2] = HEAP32[$93 >> 2];
      HEAP32[$96 + 4 >> 2] = HEAP32[$93 + 4 >> 2];
      __THREW__ = 0;
      HEAP32[$$byval_copy >> 2] = HEAP32[$95 >> 2];
      HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$95 + 4 >> 2];
      HEAP32[$$byval_copy2 >> 2] = HEAP32[$96 >> 2];
      HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$96 + 4 >> 2];
      invoke_viiii($190 | 0, $187 | 0, $194 | 0, $$byval_copy | 0, $$byval_copy2 | 0);
      $195 = __THREW__;
      __THREW__ = 0;
      if ($195 & 1) {
       label = 27;
       break;
      }
      __THREW__ = 0;
      $197 = invoke_ii(79, 32) | 0;
      $198 = __THREW__;
      __THREW__ = 0;
      if ($198 & 1) {
       label = 27;
       break;
      }
      HEAP32[$61 >> 2] = $102 + 16;
      HEAP32[$60 >> 2] = HEAP32[HEAP32[$61 >> 2] >> 2];
      $203 = HEAP32[$60 >> 2] | 0;
      HEAP32[$98 >> 2] = HEAP32[$93 >> 2];
      HEAP32[$98 + 4 >> 2] = HEAP32[$93 + 4 >> 2];
      __THREW__ = 0;
      HEAP32[$$byval_copy2 >> 2] = HEAP32[$98 >> 2];
      HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$98 + 4 >> 2];
      invoke_viii(23, $197 | 0, $203 | 0, $$byval_copy2 | 0);
      $204 = __THREW__;
      __THREW__ = 0;
      if ($204 & 1) {
       label = 28;
       break;
      }
      HEAP32[$56 >> 2] = $97;
      HEAP32[$57 >> 2] = $197;
      HEAP32[$54 >> 2] = HEAP32[$56 >> 2];
      HEAP32[$55 >> 2] = $57;
      $207 = HEAP32[$54 >> 2] | 0;
      HEAP32[$53 >> 2] = HEAP32[$55 >> 2];
      $209 = HEAP32[$53 >> 2] | 0;
      HEAP32[$51 >> 2] = $207;
      HEAP32[$52 >> 2] = $209;
      $210 = HEAP32[$51 >> 2] | 0;
      HEAP32[$50 >> 2] = HEAP32[$52 >> 2];
      HEAP32[$210 >> 2] = HEAP32[HEAP32[$50 >> 2] >> 2];
      HEAP32[$37 >> 2] = $97;
      HEAP32[$24 >> 2] = HEAP32[$37 >> 2];
      HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
      __THREW__ = 0;
      invoke_vii(70, $99 | 0, HEAP32[$23 >> 2] | 0);
      $217 = __THREW__;
      __THREW__ = 0;
      if ($217 & 1) {
       $261 = ___cxa_find_matching_catch_3(41088) | 0;
       HEAP32[$86 >> 2] = $261;
       HEAP32[$87 >> 2] = tempRet0;
       $263 = HEAP32[$87 >> 2] | 0;
       if (($263 | 0) != (_llvm_eh_typeid_for(41088) | 0)) {
        label = 36;
        break;
       }
       HEAP32[$100 >> 2] = ___cxa_begin_catch(HEAP32[$86 >> 2] | 0) | 0;
       $268 = $101;
       HEAP32[$268 >> 2] = 256;
       HEAP32[$268 + 4 >> 2] = 0;
       __ZpLIN3zim7zsize_tEERT_S3_RKNS2_9base_typeE($93, $101) | 0;
       HEAP32[$91 >> 2] = 2;
       __THREW__ = 0;
       invoke_v(3);
       $272 = __THREW__;
       __THREW__ = 0;
       if ($272 & 1) {
        label = 31;
        break;
       }
      } else {
       HEAP32[$20 >> 2] = $94;
       HEAP32[$21 >> 2] = $99;
       $219 = HEAP32[$20 >> 2] | 0;
       HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
       $221 = HEAP32[$19 >> 2] | 0;
       HEAP32[$17 >> 2] = $22;
       HEAP32[$18 >> 2] = $221;
       $222 = HEAP32[$17 >> 2] | 0;
       HEAP32[$222 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
       HEAP32[$222 + 4 >> 2] = HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2];
       HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
       HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] = 0;
       HEAP32[$15 >> 2] = $22;
       HEAP32[$16 >> 2] = $219;
       $232 = HEAP32[$15 >> 2] | 0;
       $233 = HEAP32[$16 >> 2] | 0;
       HEAP32[$12 >> 2] = $232;
       HEAP32[$13 >> 2] = $233;
       HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
       HEAP32[$14 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
       HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
       HEAP32[HEAP32[$12 >> 2] >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
       HEAP32[$10 >> 2] = $14;
       HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
       $246 = (HEAP32[$16 >> 2] | 0) + 4 | 0;
       HEAP32[$6 >> 2] = $232 + 4;
       HEAP32[$7 >> 2] = $246;
       HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
       HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
       HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
       HEAP32[$4 >> 2] = $8;
       HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
       __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($22);
       __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($99);
       HEAP32[$91 >> 2] = 3;
      }
      HEAP32[$36 >> 2] = $97;
      HEAP32[$33 >> 2] = HEAP32[$36 >> 2];
      HEAP32[$34 >> 2] = 0;
      $277 = HEAP32[$33 >> 2] | 0;
      HEAP32[$32 >> 2] = $277;
      HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
      HEAP32[$35 >> 2] = HEAP32[HEAP32[$31 >> 2] >> 2];
      $281 = HEAP32[$34 >> 2] | 0;
      HEAP32[$28 >> 2] = $277;
      HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
      HEAP32[HEAP32[$27 >> 2] >> 2] = $281;
      if (HEAP32[$35 >> 2] | 0) {
       HEAP32[$26 >> 2] = $277;
       HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
       $288 = HEAP32[$35 >> 2] | 0;
       HEAP32[$29 >> 2] = HEAP32[$25 >> 2];
       HEAP32[$30 >> 2] = $288;
       $289 = HEAP32[$30 >> 2] | 0;
       if ($289 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$289 >> 2] | 0) + 4 >> 2] & 255]($289);
      }
      if (((HEAP32[$91 >> 2] | 0) + -2 | 0) >>> 0 >= 1) {
       label = 39;
       break;
      }
     }
     if ((label | 0) == 28) {
      $259 = ___cxa_find_matching_catch_2() | 0;
      HEAP32[$86 >> 2] = $259;
      HEAP32[$87 >> 2] = tempRet0;
      __ZdlPv($197);
     } else if ((label | 0) == 31) {
      $274 = ___cxa_find_matching_catch_2() | 0;
      HEAP32[$86 >> 2] = $274;
      HEAP32[$87 >> 2] = tempRet0;
      label = 36;
     } else if ((label | 0) == 39) {
      __THREW__ = 0;
      invoke_ii(92, $102 + 28 | 0) | 0;
      $314 = __THREW__;
      __THREW__ = 0;
      if ($314 & 1) label = 27; else {
       __THREW__ = 0;
       invoke_ii(95, $102 + 188 | 0) | 0;
       $317 = __THREW__;
       __THREW__ = 0;
       if ($317 & 1) label = 27; else {
        __THREW__ = 0;
        invoke_viii(24, $102 + 160 | 0, $2 | 0, $94 | 0);
        $320 = __THREW__;
        __THREW__ = 0;
        if ($320 & 1) label = 27; else {
         __THREW__ = 0;
         invoke_ii(92, $102 + 188 | 0) | 0;
         $323 = __THREW__;
         __THREW__ = 0;
         if ($323 & 1) label = 27; else {
          HEAP32[$58 >> 2] = $0;
          HEAP32[$59 >> 2] = $94;
          $325 = HEAP32[$58 >> 2] | 0;
          HEAP32[$325 >> 2] = HEAP32[HEAP32[$59 >> 2] >> 2];
          HEAP32[$325 + 4 >> 2] = HEAP32[(HEAP32[$59 >> 2] | 0) + 4 >> 2];
          HEAP32[HEAP32[$59 >> 2] >> 2] = 0;
          HEAP32[(HEAP32[$59 >> 2] | 0) + 4 >> 2] = 0;
          HEAP32[$91 >> 2] = 1;
          __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($94);
          __ZNSt3__24pairIbNS_10shared_ptrIKN3zim6DirentEEEED2Ev($89);
          STACKTOP = sp;
          return;
         }
        }
       }
      }
     }
     if ((label | 0) == 27) {
      $257 = ___cxa_find_matching_catch_2() | 0;
      HEAP32[$86 >> 2] = $257;
      HEAP32[$87 >> 2] = tempRet0;
     } else if ((label | 0) == 36) {
      HEAP32[$49 >> 2] = $97;
      HEAP32[$46 >> 2] = HEAP32[$49 >> 2];
      HEAP32[$47 >> 2] = 0;
      $296 = HEAP32[$46 >> 2] | 0;
      HEAP32[$45 >> 2] = $296;
      HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
      HEAP32[$48 >> 2] = HEAP32[HEAP32[$44 >> 2] >> 2];
      $300 = HEAP32[$47 >> 2] | 0;
      HEAP32[$41 >> 2] = $296;
      HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
      HEAP32[HEAP32[$40 >> 2] >> 2] = $300;
      if (HEAP32[$48 >> 2] | 0) {
       HEAP32[$39 >> 2] = $296;
       HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
       $307 = HEAP32[$48 >> 2] | 0;
       HEAP32[$42 >> 2] = HEAP32[$38 >> 2];
       HEAP32[$43 >> 2] = $307;
       $308 = HEAP32[$43 >> 2] | 0;
       if ($308 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$308 >> 2] | 0) + 4 >> 2] & 255]($308);
      }
     }
     __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($94);
    }
   }
  }
 }
 if ((label | 0) == 16) {
  $157 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$86 >> 2] = $157;
  HEAP32[$87 >> 2] = tempRet0;
 }
 __ZNSt3__24pairIbNS_10shared_ptrIKN3zim6DirentEEEED2Ev($89);
 $335 = HEAP32[$86 >> 2] | 0;
 $336 = HEAP32[$87 >> 2] | 0;
 ___resumeException($335 | 0);
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE3putERKS1_RKS5_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $162 = 0, $168 = 0, $17 = 0, $171 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $204 = 0, $206 = 0, $21 = 0, $219 = 0, $22 = 0, $226 = 0, $23 = 0, $235 = 0, $24 = 0, $241 = 0, $244 = 0, $245 = 0, $247 = 0, $25 = 0, $253 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $267 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704 | 0;
 $$byval_copy1 = sp + 688 | 0;
 $3 = sp + 684 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 680 | 0;
 $6 = sp + 676 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 672 | 0;
 $9 = sp + 668 | 0;
 $10 = sp + 664 | 0;
 $11 = sp + 660 | 0;
 $12 = sp + 656 | 0;
 $13 = sp + 652 | 0;
 $14 = sp + 88 | 0;
 $15 = sp + 648 | 0;
 $16 = sp + 644 | 0;
 $17 = sp + 640 | 0;
 $18 = sp + 636 | 0;
 $19 = sp + 632 | 0;
 $20 = sp + 628 | 0;
 $21 = sp + 624 | 0;
 $22 = sp + 620 | 0;
 $23 = sp + 616 | 0;
 $24 = sp + 612 | 0;
 $25 = sp + 608 | 0;
 $26 = sp + 604 | 0;
 $27 = sp + 600 | 0;
 $28 = sp + 596 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 592 | 0;
 $31 = sp + 72 | 0;
 $32 = sp + 588 | 0;
 $33 = sp + 584 | 0;
 $34 = sp + 580 | 0;
 $35 = sp + 576 | 0;
 $36 = sp + 572 | 0;
 $37 = sp + 568 | 0;
 $38 = sp + 64 | 0;
 $39 = sp + 564 | 0;
 $40 = sp + 560 | 0;
 $41 = sp + 556 | 0;
 $42 = sp + 552 | 0;
 $43 = sp + 548 | 0;
 $44 = sp + 56 | 0;
 $45 = sp + 544 | 0;
 $46 = sp + 540 | 0;
 $47 = sp + 536 | 0;
 $48 = sp + 532 | 0;
 $49 = sp + 528 | 0;
 $50 = sp + 524 | 0;
 $51 = sp + 520 | 0;
 $52 = sp + 516 | 0;
 $53 = sp + 512 | 0;
 $54 = sp + 508 | 0;
 $55 = sp + 504 | 0;
 $56 = sp + 500 | 0;
 $57 = sp + 496 | 0;
 $58 = sp + 48 | 0;
 $59 = sp + 492 | 0;
 $60 = sp + 488 | 0;
 $61 = sp + 484 | 0;
 $62 = sp + 480 | 0;
 $63 = sp + 476 | 0;
 $64 = sp + 472 | 0;
 $65 = sp + 468 | 0;
 $66 = sp + 464 | 0;
 $67 = sp + 460 | 0;
 $68 = sp + 456 | 0;
 $69 = sp + 40 | 0;
 $70 = sp + 452 | 0;
 $71 = sp + 32 | 0;
 $72 = sp + 448 | 0;
 $73 = sp + 444 | 0;
 $74 = sp + 440 | 0;
 $75 = sp + 436 | 0;
 $76 = sp + 432 | 0;
 $77 = sp + 428 | 0;
 $78 = sp + 24 | 0;
 $79 = sp + 424 | 0;
 $80 = sp + 420 | 0;
 $81 = sp + 416 | 0;
 $82 = sp + 412 | 0;
 $83 = sp + 408 | 0;
 $84 = sp + 404 | 0;
 $85 = sp + 400 | 0;
 $86 = sp + 396 | 0;
 $87 = sp + 392 | 0;
 $88 = sp + 388 | 0;
 $89 = sp + 16 | 0;
 $90 = sp + 384 | 0;
 $91 = sp + 380 | 0;
 $92 = sp + 8 | 0;
 $93 = sp + 376 | 0;
 $94 = sp;
 $95 = sp + 372 | 0;
 $96 = sp + 368 | 0;
 $97 = sp + 364 | 0;
 $98 = sp + 360 | 0;
 $99 = sp + 356 | 0;
 $100 = sp + 352 | 0;
 $101 = sp + 348 | 0;
 $102 = sp + 344 | 0;
 $103 = sp + 340 | 0;
 $104 = sp + 336 | 0;
 $105 = sp + 332 | 0;
 $106 = sp + 328 | 0;
 $107 = sp + 324 | 0;
 $108 = sp + 320 | 0;
 $109 = sp + 316 | 0;
 $110 = sp + 312 | 0;
 $111 = sp + 308 | 0;
 $112 = sp + 304 | 0;
 $113 = sp + 300 | 0;
 $114 = sp + 296 | 0;
 $115 = sp + 292 | 0;
 $116 = sp + 288 | 0;
 $117 = sp + 284 | 0;
 $118 = sp + 280 | 0;
 $119 = sp + 276 | 0;
 $120 = sp + 272 | 0;
 $121 = sp + 268 | 0;
 $122 = sp + 264 | 0;
 $123 = sp + 260 | 0;
 $124 = sp + 256 | 0;
 $125 = sp + 252 | 0;
 $126 = sp + 248 | 0;
 $127 = sp + 244 | 0;
 $129 = sp + 236 | 0;
 $130 = sp + 232 | 0;
 $131 = sp + 228 | 0;
 $132 = sp + 224 | 0;
 $133 = sp + 220 | 0;
 $134 = sp + 216 | 0;
 $135 = sp + 212 | 0;
 $136 = sp + 192 | 0;
 $137 = sp + 176 | 0;
 $138 = sp + 172 | 0;
 $139 = sp + 168 | 0;
 $140 = sp + 164 | 0;
 $141 = sp + 160 | 0;
 $142 = sp + 156 | 0;
 $143 = sp + 152 | 0;
 $144 = sp + 148 | 0;
 $145 = sp + 128 | 0;
 $146 = sp + 112 | 0;
 $147 = sp + 108 | 0;
 HEAP32[$130 >> 2] = $0;
 HEAP32[$131 >> 2] = $1;
 HEAP32[$132 >> 2] = $2;
 $148 = HEAP32[$130 >> 2] | 0;
 HEAP32[$129 >> 2] = $133;
 HEAP32[sp + 240 >> 2] = HEAP32[$129 >> 2];
 HEAP32[$127 >> 2] = $148;
 HEAP32[$126 >> 2] = HEAP32[$127 >> 2];
 HEAP32[$125 >> 2] = (HEAP32[$126 >> 2] | 0) + 8;
 HEAP32[$124 >> 2] = HEAP32[$125 >> 2];
 if ((HEAP32[HEAP32[$124 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$148 + 12 >> 2] | 0) >>> 0) {
  HEAP32[$101 >> 2] = $148;
  HEAP32[$99 >> 2] = HEAP32[$101 >> 2];
  HEAP32[$97 >> 2] = HEAP32[$99 >> 2];
  $162 = HEAP32[HEAP32[$97 >> 2] >> 2] | 0;
  HEAP32[$95 >> 2] = $98;
  HEAP32[$96 >> 2] = $162;
  HEAP32[HEAP32[$95 >> 2] >> 2] = HEAP32[$96 >> 2];
  HEAP32[$102 >> 2] = HEAP32[$98 >> 2];
  HEAP8[$94 >> 0] = HEAP8[$102 >> 0] | 0;
  HEAP8[$94 + 1 >> 0] = HEAP8[$102 + 1 >> 0] | 0;
  HEAP8[$94 + 2 >> 0] = HEAP8[$102 + 2 >> 0] | 0;
  HEAP8[$94 + 3 >> 0] = HEAP8[$102 + 3 >> 0] | 0;
  HEAP32[$93 >> 2] = $100;
  HEAP32[HEAP32[$93 >> 2] >> 2] = HEAP32[$94 >> 2];
  HEAP32[$135 >> 2] = HEAP32[$100 >> 2];
  HEAP8[$92 >> 0] = HEAP8[$135 >> 0] | 0;
  HEAP8[$92 + 1 >> 0] = HEAP8[$135 + 1 >> 0] | 0;
  HEAP8[$92 + 2 >> 0] = HEAP8[$135 + 2 >> 0] | 0;
  HEAP8[$92 + 3 >> 0] = HEAP8[$135 + 3 >> 0] | 0;
  HEAP32[$90 >> 2] = $134;
  $168 = HEAP32[$90 >> 2] | 0;
  HEAP32[$91 >> 2] = HEAP32[$92 >> 2];
  HEAP8[$89 >> 0] = HEAP8[$91 >> 0] | 0;
  HEAP8[$89 + 1 >> 0] = HEAP8[$91 + 1 >> 0] | 0;
  HEAP8[$89 + 2 >> 0] = HEAP8[$91 + 2 >> 0] | 0;
  HEAP8[$89 + 3 >> 0] = HEAP8[$91 + 3 >> 0] | 0;
  HEAP32[$88 >> 2] = $168;
  HEAP32[HEAP32[$88 >> 2] >> 2] = HEAP32[$89 >> 2];
  $171 = HEAP32[$131 >> 2] | 0;
  HEAP32[$87 >> 2] = $148;
  HEAP32[$86 >> 2] = HEAP32[$87 >> 2];
  HEAP32[$85 >> 2] = (HEAP32[$86 >> 2] | 0) + 8;
  HEAP32[$84 >> 2] = HEAP32[$85 >> 2];
  $181 = (HEAP32[HEAP32[$84 >> 2] >> 2] | 0) >>> 0 < (((HEAP32[$148 + 12 >> 2] | 0) >>> 0) / 2 | 0) >>> 0;
  $182 = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($148) | 0;
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EbjRKS5_($137, $181, $182, HEAP32[$132 >> 2] | 0);
  HEAP32[$81 >> 2] = $136;
  HEAP32[$82 >> 2] = $171;
  HEAP32[$83 >> 2] = $137;
  $184 = HEAP32[$81 >> 2] | 0;
  HEAP32[$80 >> 2] = HEAP32[$82 >> 2];
  HEAP32[$184 >> 2] = HEAP32[HEAP32[$80 >> 2] >> 2];
  HEAP32[$79 >> 2] = HEAP32[$83 >> 2];
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EOS7_($184 + 4 | 0, HEAP32[$79 >> 2] | 0);
  HEAP8[$78 >> 0] = HEAP8[$134 >> 0] | 0;
  HEAP8[$78 + 1 >> 0] = HEAP8[$134 + 1 >> 0] | 0;
  HEAP8[$78 + 2 >> 0] = HEAP8[$134 + 2 >> 0] | 0;
  HEAP8[$78 + 3 >> 0] = HEAP8[$134 + 3 >> 0] | 0;
  HEAP32[$74 >> 2] = $148;
  HEAP32[$75 >> 2] = $136;
  $190 = HEAP32[$74 >> 2] | 0;
  HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
  HEAP32[$72 >> 2] = HEAP32[$75 >> 2];
  $192 = HEAP32[$72 >> 2] | 0;
  HEAP8[$69 >> 0] = HEAP8[$77 >> 0] | 0;
  HEAP8[$69 + 1 >> 0] = HEAP8[$77 + 1 >> 0] | 0;
  HEAP8[$69 + 2 >> 0] = HEAP8[$77 + 2 >> 0] | 0;
  HEAP8[$69 + 3 >> 0] = HEAP8[$77 + 3 >> 0] | 0;
  HEAP32[$66 >> 2] = $190;
  HEAP32[$67 >> 2] = $192;
  $193 = HEAP32[$66 >> 2] | 0;
  HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
  HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
  $195 = HEAP32[$64 >> 2] | 0;
  HEAP32[$63 >> 2] = HEAP32[$67 >> 2];
  $197 = HEAP32[$63 >> 2] | 0;
  __THREW__ = 0;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$68 >> 2];
  $198 = invoke_iiiii(12, $193 | 0, $$byval_copy1 | 0, $195 | 0, $197 | 0) | 0;
  $199 = __THREW__;
  __THREW__ = 0;
  if ($199 & 1) {
   $204 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$138 >> 2] = $204;
   HEAP32[$139 >> 2] = tempRet0;
   __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev($136);
   __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev($137);
   $303 = HEAP32[$138 >> 2] | 0;
   $304 = HEAP32[$139 >> 2] | 0;
   ___resumeException($303 | 0);
  } else {
   HEAP32[$65 >> 2] = $198;
   HEAP32[$76 >> 2] = HEAP32[$65 >> 2];
   HEAP8[$71 >> 0] = HEAP8[$76 >> 0] | 0;
   HEAP8[$71 + 1 >> 0] = HEAP8[$76 + 1 >> 0] | 0;
   HEAP8[$71 + 2 >> 0] = HEAP8[$76 + 2 >> 0] | 0;
   HEAP8[$71 + 3 >> 0] = HEAP8[$76 + 3 >> 0] | 0;
   HEAP32[$70 >> 2] = $73;
   HEAP32[HEAP32[$70 >> 2] >> 2] = HEAP32[$71 >> 2];
   HEAP32[$140 >> 2] = HEAP32[$73 >> 2];
   __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev($136);
   __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev($137);
   STACKTOP = sp;
   return;
  }
 }
 $206 = HEAP32[$131 >> 2] | 0;
 HEAP32[$60 >> 2] = $148;
 HEAP32[$61 >> 2] = $206;
 HEAP32[$62 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE4findIS3_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_(HEAP32[$60 >> 2] | 0, HEAP32[$61 >> 2] | 0) | 0;
 HEAP8[$58 >> 0] = HEAP8[$62 >> 0] | 0;
 HEAP8[$58 + 1 >> 0] = HEAP8[$62 + 1 >> 0] | 0;
 HEAP8[$58 + 2 >> 0] = HEAP8[$62 + 2 >> 0] | 0;
 HEAP8[$58 + 3 >> 0] = HEAP8[$62 + 3 >> 0] | 0;
 HEAP32[$57 >> 2] = $59;
 HEAP32[HEAP32[$57 >> 2] >> 2] = HEAP32[$58 >> 2];
 HEAP32[$141 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$133 >> 2] = HEAP32[$141 >> 2];
 HEAP32[$55 >> 2] = $148;
 HEAP32[$53 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$51 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$50 >> 2] = (HEAP32[$51 >> 2] | 0) + 4;
 HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
 $219 = HEAP32[$47 >> 2] | 0;
 HEAP32[$45 >> 2] = $52;
 HEAP32[$46 >> 2] = $219;
 HEAP32[HEAP32[$45 >> 2] >> 2] = HEAP32[$46 >> 2];
 HEAP32[$56 >> 2] = HEAP32[$52 >> 2];
 HEAP8[$44 >> 0] = HEAP8[$56 >> 0] | 0;
 HEAP8[$44 + 1 >> 0] = HEAP8[$56 + 1 >> 0] | 0;
 HEAP8[$44 + 2 >> 0] = HEAP8[$56 + 2 >> 0] | 0;
 HEAP8[$44 + 3 >> 0] = HEAP8[$56 + 3 >> 0] | 0;
 HEAP32[$43 >> 2] = $54;
 HEAP32[HEAP32[$43 >> 2] >> 2] = HEAP32[$44 >> 2];
 HEAP32[$142 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$41 >> 2] = $133;
 HEAP32[$42 >> 2] = $142;
 $226 = HEAP32[$42 >> 2] | 0;
 HEAP32[$39 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$40 >> 2] = $226;
 if ((HEAP32[HEAP32[$39 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$40 >> 2] >> 2] | 0)) {
  $269 = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($148) | 0;
  HEAP32[$109 >> 2] = $133;
  HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$107 >> 2] = HEAP32[$108 >> 2];
  HEAP32[$106 >> 2] = (HEAP32[HEAP32[$107 >> 2] >> 2] | 0) + 16;
  HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$104 >> 2] = HEAP32[$105 >> 2];
  HEAP32[$103 >> 2] = HEAP32[$104 >> 2];
  HEAP32[(HEAP32[$103 >> 2] | 0) + 4 + 4 >> 2] = $269;
  HEAP32[$116 >> 2] = $133;
  HEAP32[$115 >> 2] = HEAP32[$116 >> 2];
  HEAP32[$114 >> 2] = HEAP32[$115 >> 2];
  HEAP32[$113 >> 2] = (HEAP32[HEAP32[$114 >> 2] >> 2] | 0) + 16;
  HEAP32[$112 >> 2] = HEAP32[$113 >> 2];
  HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
  HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
  if (HEAP8[(HEAP32[$110 >> 2] | 0) + 4 >> 0] & 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$123 >> 2] = $133;
  HEAP32[$122 >> 2] = HEAP32[$123 >> 2];
  HEAP32[$121 >> 2] = HEAP32[$122 >> 2];
  HEAP32[$120 >> 2] = (HEAP32[HEAP32[$121 >> 2] >> 2] | 0) + 16;
  HEAP32[$119 >> 2] = HEAP32[$120 >> 2];
  HEAP32[$118 >> 2] = HEAP32[$119 >> 2];
  HEAP32[$117 >> 2] = HEAP32[$118 >> 2];
  HEAP8[(HEAP32[$117 >> 2] | 0) + 4 >> 0] = 1;
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_makeLooserEv($148);
  STACKTOP = sp;
  return;
 }
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_dropLooserEv($148);
 HEAP32[$21 >> 2] = $148;
 HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$17 >> 2] = HEAP32[$19 >> 2];
 $235 = HEAP32[HEAP32[$17 >> 2] >> 2] | 0;
 HEAP32[$15 >> 2] = $18;
 HEAP32[$16 >> 2] = $235;
 HEAP32[HEAP32[$15 >> 2] >> 2] = HEAP32[$16 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$18 >> 2];
 HEAP8[$14 >> 0] = HEAP8[$22 >> 0] | 0;
 HEAP8[$14 + 1 >> 0] = HEAP8[$22 + 1 >> 0] | 0;
 HEAP8[$14 + 2 >> 0] = HEAP8[$22 + 2 >> 0] | 0;
 HEAP8[$14 + 3 >> 0] = HEAP8[$22 + 3 >> 0] | 0;
 HEAP32[$13 >> 2] = $20;
 HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[$14 >> 2];
 HEAP32[$144 >> 2] = HEAP32[$20 >> 2];
 HEAP8[$7 >> 0] = HEAP8[$144 >> 0] | 0;
 HEAP8[$7 + 1 >> 0] = HEAP8[$144 + 1 >> 0] | 0;
 HEAP8[$7 + 2 >> 0] = HEAP8[$144 + 2 >> 0] | 0;
 HEAP8[$7 + 3 >> 0] = HEAP8[$144 + 3 >> 0] | 0;
 HEAP32[$5 >> 2] = $143;
 $241 = HEAP32[$5 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP8[$4 >> 0] = HEAP8[$6 >> 0] | 0;
 HEAP8[$4 + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
 HEAP8[$4 + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
 HEAP8[$4 + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
 HEAP32[$3 >> 2] = $241;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 $244 = HEAP32[$131 >> 2] | 0;
 $245 = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($148) | 0;
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EbjRKS5_($146, 0, $245, HEAP32[$132 >> 2] | 0);
 HEAP32[$10 >> 2] = $145;
 HEAP32[$11 >> 2] = $244;
 HEAP32[$12 >> 2] = $146;
 $247 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$247 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$8 >> 2] = HEAP32[$12 >> 2];
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EOS7_($247 + 4 | 0, HEAP32[$8 >> 2] | 0);
 HEAP8[$38 >> 0] = HEAP8[$143 >> 0] | 0;
 HEAP8[$38 + 1 >> 0] = HEAP8[$143 + 1 >> 0] | 0;
 HEAP8[$38 + 2 >> 0] = HEAP8[$143 + 2 >> 0] | 0;
 HEAP8[$38 + 3 >> 0] = HEAP8[$143 + 3 >> 0] | 0;
 HEAP32[$34 >> 2] = $148;
 HEAP32[$35 >> 2] = $145;
 $253 = HEAP32[$34 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$32 >> 2] = HEAP32[$35 >> 2];
 $255 = HEAP32[$32 >> 2] | 0;
 HEAP8[$29 >> 0] = HEAP8[$37 >> 0] | 0;
 HEAP8[$29 + 1 >> 0] = HEAP8[$37 + 1 >> 0] | 0;
 HEAP8[$29 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
 HEAP8[$29 + 3 >> 0] = HEAP8[$37 + 3 >> 0] | 0;
 HEAP32[$26 >> 2] = $253;
 HEAP32[$27 >> 2] = $255;
 $256 = HEAP32[$26 >> 2] | 0;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$27 >> 2];
 $258 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$27 >> 2];
 $260 = HEAP32[$23 >> 2] | 0;
 __THREW__ = 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$28 >> 2];
 $261 = invoke_iiiii(12, $256 | 0, $$byval_copy1 | 0, $258 | 0, $260 | 0) | 0;
 $262 = __THREW__;
 __THREW__ = 0;
 if ($262 & 1) {
  $267 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$138 >> 2] = $267;
  HEAP32[$139 >> 2] = tempRet0;
  __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev($145);
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev($146);
  $303 = HEAP32[$138 >> 2] | 0;
  $304 = HEAP32[$139 >> 2] | 0;
  ___resumeException($303 | 0);
 } else {
  HEAP32[$25 >> 2] = $261;
  HEAP32[$36 >> 2] = HEAP32[$25 >> 2];
  HEAP8[$31 >> 0] = HEAP8[$36 >> 0] | 0;
  HEAP8[$31 + 1 >> 0] = HEAP8[$36 + 1 >> 0] | 0;
  HEAP8[$31 + 2 >> 0] = HEAP8[$36 + 2 >> 0] | 0;
  HEAP8[$31 + 3 >> 0] = HEAP8[$36 + 3 >> 0] | 0;
  HEAP32[$30 >> 2] = $33;
  HEAP32[HEAP32[$30 >> 2] >> 2] = HEAP32[$31 >> 2];
  HEAP32[$147 >> 2] = HEAP32[$33 >> 2];
  __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev($145);
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev($146);
  STACKTOP = sp;
  return;
 }
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE3putERKS1_RKS6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $162 = 0, $168 = 0, $17 = 0, $171 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $204 = 0, $206 = 0, $21 = 0, $219 = 0, $22 = 0, $226 = 0, $23 = 0, $235 = 0, $24 = 0, $241 = 0, $244 = 0, $245 = 0, $247 = 0, $25 = 0, $253 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $267 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704 | 0;
 $$byval_copy1 = sp + 688 | 0;
 $3 = sp + 684 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 680 | 0;
 $6 = sp + 676 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 672 | 0;
 $9 = sp + 668 | 0;
 $10 = sp + 664 | 0;
 $11 = sp + 660 | 0;
 $12 = sp + 656 | 0;
 $13 = sp + 652 | 0;
 $14 = sp + 88 | 0;
 $15 = sp + 648 | 0;
 $16 = sp + 644 | 0;
 $17 = sp + 640 | 0;
 $18 = sp + 636 | 0;
 $19 = sp + 632 | 0;
 $20 = sp + 628 | 0;
 $21 = sp + 624 | 0;
 $22 = sp + 620 | 0;
 $23 = sp + 616 | 0;
 $24 = sp + 612 | 0;
 $25 = sp + 608 | 0;
 $26 = sp + 604 | 0;
 $27 = sp + 600 | 0;
 $28 = sp + 596 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 592 | 0;
 $31 = sp + 72 | 0;
 $32 = sp + 588 | 0;
 $33 = sp + 584 | 0;
 $34 = sp + 580 | 0;
 $35 = sp + 576 | 0;
 $36 = sp + 572 | 0;
 $37 = sp + 568 | 0;
 $38 = sp + 64 | 0;
 $39 = sp + 564 | 0;
 $40 = sp + 560 | 0;
 $41 = sp + 556 | 0;
 $42 = sp + 552 | 0;
 $43 = sp + 548 | 0;
 $44 = sp + 56 | 0;
 $45 = sp + 544 | 0;
 $46 = sp + 540 | 0;
 $47 = sp + 536 | 0;
 $48 = sp + 532 | 0;
 $49 = sp + 528 | 0;
 $50 = sp + 524 | 0;
 $51 = sp + 520 | 0;
 $52 = sp + 516 | 0;
 $53 = sp + 512 | 0;
 $54 = sp + 508 | 0;
 $55 = sp + 504 | 0;
 $56 = sp + 500 | 0;
 $57 = sp + 496 | 0;
 $58 = sp + 48 | 0;
 $59 = sp + 492 | 0;
 $60 = sp + 488 | 0;
 $61 = sp + 484 | 0;
 $62 = sp + 480 | 0;
 $63 = sp + 476 | 0;
 $64 = sp + 472 | 0;
 $65 = sp + 468 | 0;
 $66 = sp + 464 | 0;
 $67 = sp + 460 | 0;
 $68 = sp + 456 | 0;
 $69 = sp + 40 | 0;
 $70 = sp + 452 | 0;
 $71 = sp + 32 | 0;
 $72 = sp + 448 | 0;
 $73 = sp + 444 | 0;
 $74 = sp + 440 | 0;
 $75 = sp + 436 | 0;
 $76 = sp + 432 | 0;
 $77 = sp + 428 | 0;
 $78 = sp + 24 | 0;
 $79 = sp + 424 | 0;
 $80 = sp + 420 | 0;
 $81 = sp + 416 | 0;
 $82 = sp + 412 | 0;
 $83 = sp + 408 | 0;
 $84 = sp + 404 | 0;
 $85 = sp + 400 | 0;
 $86 = sp + 396 | 0;
 $87 = sp + 392 | 0;
 $88 = sp + 388 | 0;
 $89 = sp + 16 | 0;
 $90 = sp + 384 | 0;
 $91 = sp + 380 | 0;
 $92 = sp + 8 | 0;
 $93 = sp + 376 | 0;
 $94 = sp;
 $95 = sp + 372 | 0;
 $96 = sp + 368 | 0;
 $97 = sp + 364 | 0;
 $98 = sp + 360 | 0;
 $99 = sp + 356 | 0;
 $100 = sp + 352 | 0;
 $101 = sp + 348 | 0;
 $102 = sp + 344 | 0;
 $103 = sp + 340 | 0;
 $104 = sp + 336 | 0;
 $105 = sp + 332 | 0;
 $106 = sp + 328 | 0;
 $107 = sp + 324 | 0;
 $108 = sp + 320 | 0;
 $109 = sp + 316 | 0;
 $110 = sp + 312 | 0;
 $111 = sp + 308 | 0;
 $112 = sp + 304 | 0;
 $113 = sp + 300 | 0;
 $114 = sp + 296 | 0;
 $115 = sp + 292 | 0;
 $116 = sp + 288 | 0;
 $117 = sp + 284 | 0;
 $118 = sp + 280 | 0;
 $119 = sp + 276 | 0;
 $120 = sp + 272 | 0;
 $121 = sp + 268 | 0;
 $122 = sp + 264 | 0;
 $123 = sp + 260 | 0;
 $124 = sp + 256 | 0;
 $125 = sp + 252 | 0;
 $126 = sp + 248 | 0;
 $127 = sp + 244 | 0;
 $129 = sp + 236 | 0;
 $130 = sp + 232 | 0;
 $131 = sp + 228 | 0;
 $132 = sp + 224 | 0;
 $133 = sp + 220 | 0;
 $134 = sp + 216 | 0;
 $135 = sp + 212 | 0;
 $136 = sp + 192 | 0;
 $137 = sp + 176 | 0;
 $138 = sp + 172 | 0;
 $139 = sp + 168 | 0;
 $140 = sp + 164 | 0;
 $141 = sp + 160 | 0;
 $142 = sp + 156 | 0;
 $143 = sp + 152 | 0;
 $144 = sp + 148 | 0;
 $145 = sp + 128 | 0;
 $146 = sp + 112 | 0;
 $147 = sp + 108 | 0;
 HEAP32[$130 >> 2] = $0;
 HEAP32[$131 >> 2] = $1;
 HEAP32[$132 >> 2] = $2;
 $148 = HEAP32[$130 >> 2] | 0;
 HEAP32[$129 >> 2] = $133;
 HEAP32[sp + 240 >> 2] = HEAP32[$129 >> 2];
 HEAP32[$127 >> 2] = $148;
 HEAP32[$126 >> 2] = HEAP32[$127 >> 2];
 HEAP32[$125 >> 2] = (HEAP32[$126 >> 2] | 0) + 8;
 HEAP32[$124 >> 2] = HEAP32[$125 >> 2];
 if ((HEAP32[HEAP32[$124 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$148 + 12 >> 2] | 0) >>> 0) {
  HEAP32[$101 >> 2] = $148;
  HEAP32[$99 >> 2] = HEAP32[$101 >> 2];
  HEAP32[$97 >> 2] = HEAP32[$99 >> 2];
  $162 = HEAP32[HEAP32[$97 >> 2] >> 2] | 0;
  HEAP32[$95 >> 2] = $98;
  HEAP32[$96 >> 2] = $162;
  HEAP32[HEAP32[$95 >> 2] >> 2] = HEAP32[$96 >> 2];
  HEAP32[$102 >> 2] = HEAP32[$98 >> 2];
  HEAP8[$94 >> 0] = HEAP8[$102 >> 0] | 0;
  HEAP8[$94 + 1 >> 0] = HEAP8[$102 + 1 >> 0] | 0;
  HEAP8[$94 + 2 >> 0] = HEAP8[$102 + 2 >> 0] | 0;
  HEAP8[$94 + 3 >> 0] = HEAP8[$102 + 3 >> 0] | 0;
  HEAP32[$93 >> 2] = $100;
  HEAP32[HEAP32[$93 >> 2] >> 2] = HEAP32[$94 >> 2];
  HEAP32[$135 >> 2] = HEAP32[$100 >> 2];
  HEAP8[$92 >> 0] = HEAP8[$135 >> 0] | 0;
  HEAP8[$92 + 1 >> 0] = HEAP8[$135 + 1 >> 0] | 0;
  HEAP8[$92 + 2 >> 0] = HEAP8[$135 + 2 >> 0] | 0;
  HEAP8[$92 + 3 >> 0] = HEAP8[$135 + 3 >> 0] | 0;
  HEAP32[$90 >> 2] = $134;
  $168 = HEAP32[$90 >> 2] | 0;
  HEAP32[$91 >> 2] = HEAP32[$92 >> 2];
  HEAP8[$89 >> 0] = HEAP8[$91 >> 0] | 0;
  HEAP8[$89 + 1 >> 0] = HEAP8[$91 + 1 >> 0] | 0;
  HEAP8[$89 + 2 >> 0] = HEAP8[$91 + 2 >> 0] | 0;
  HEAP8[$89 + 3 >> 0] = HEAP8[$91 + 3 >> 0] | 0;
  HEAP32[$88 >> 2] = $168;
  HEAP32[HEAP32[$88 >> 2] >> 2] = HEAP32[$89 >> 2];
  $171 = HEAP32[$131 >> 2] | 0;
  HEAP32[$87 >> 2] = $148;
  HEAP32[$86 >> 2] = HEAP32[$87 >> 2];
  HEAP32[$85 >> 2] = (HEAP32[$86 >> 2] | 0) + 8;
  HEAP32[$84 >> 2] = HEAP32[$85 >> 2];
  $181 = (HEAP32[HEAP32[$84 >> 2] >> 2] | 0) >>> 0 < (((HEAP32[$148 + 12 >> 2] | 0) >>> 0) / 2 | 0) >>> 0;
  $182 = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($148) | 0;
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EbjRKS6_($137, $181, $182, HEAP32[$132 >> 2] | 0);
  HEAP32[$81 >> 2] = $136;
  HEAP32[$82 >> 2] = $171;
  HEAP32[$83 >> 2] = $137;
  $184 = HEAP32[$81 >> 2] | 0;
  HEAP32[$80 >> 2] = HEAP32[$82 >> 2];
  HEAP32[$184 >> 2] = HEAP32[HEAP32[$80 >> 2] >> 2];
  HEAP32[$79 >> 2] = HEAP32[$83 >> 2];
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EOS8_($184 + 4 | 0, HEAP32[$79 >> 2] | 0);
  HEAP8[$78 >> 0] = HEAP8[$134 >> 0] | 0;
  HEAP8[$78 + 1 >> 0] = HEAP8[$134 + 1 >> 0] | 0;
  HEAP8[$78 + 2 >> 0] = HEAP8[$134 + 2 >> 0] | 0;
  HEAP8[$78 + 3 >> 0] = HEAP8[$134 + 3 >> 0] | 0;
  HEAP32[$74 >> 2] = $148;
  HEAP32[$75 >> 2] = $136;
  $190 = HEAP32[$74 >> 2] | 0;
  HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
  HEAP32[$72 >> 2] = HEAP32[$75 >> 2];
  $192 = HEAP32[$72 >> 2] | 0;
  HEAP8[$69 >> 0] = HEAP8[$77 >> 0] | 0;
  HEAP8[$69 + 1 >> 0] = HEAP8[$77 + 1 >> 0] | 0;
  HEAP8[$69 + 2 >> 0] = HEAP8[$77 + 2 >> 0] | 0;
  HEAP8[$69 + 3 >> 0] = HEAP8[$77 + 3 >> 0] | 0;
  HEAP32[$66 >> 2] = $190;
  HEAP32[$67 >> 2] = $192;
  $193 = HEAP32[$66 >> 2] | 0;
  HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
  HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
  $195 = HEAP32[$64 >> 2] | 0;
  HEAP32[$63 >> 2] = HEAP32[$67 >> 2];
  $197 = HEAP32[$63 >> 2] | 0;
  __THREW__ = 0;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$68 >> 2];
  $198 = invoke_iiiii(15, $193 | 0, $$byval_copy1 | 0, $195 | 0, $197 | 0) | 0;
  $199 = __THREW__;
  __THREW__ = 0;
  if ($199 & 1) {
   $204 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$138 >> 2] = $204;
   HEAP32[$139 >> 2] = tempRet0;
   __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev($136);
   __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev($137);
   $303 = HEAP32[$138 >> 2] | 0;
   $304 = HEAP32[$139 >> 2] | 0;
   ___resumeException($303 | 0);
  } else {
   HEAP32[$65 >> 2] = $198;
   HEAP32[$76 >> 2] = HEAP32[$65 >> 2];
   HEAP8[$71 >> 0] = HEAP8[$76 >> 0] | 0;
   HEAP8[$71 + 1 >> 0] = HEAP8[$76 + 1 >> 0] | 0;
   HEAP8[$71 + 2 >> 0] = HEAP8[$76 + 2 >> 0] | 0;
   HEAP8[$71 + 3 >> 0] = HEAP8[$76 + 3 >> 0] | 0;
   HEAP32[$70 >> 2] = $73;
   HEAP32[HEAP32[$70 >> 2] >> 2] = HEAP32[$71 >> 2];
   HEAP32[$140 >> 2] = HEAP32[$73 >> 2];
   __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev($136);
   __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev($137);
   STACKTOP = sp;
   return;
  }
 }
 $206 = HEAP32[$131 >> 2] | 0;
 HEAP32[$60 >> 2] = $148;
 HEAP32[$61 >> 2] = $206;
 HEAP32[$62 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE4findIS3_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_(HEAP32[$60 >> 2] | 0, HEAP32[$61 >> 2] | 0) | 0;
 HEAP8[$58 >> 0] = HEAP8[$62 >> 0] | 0;
 HEAP8[$58 + 1 >> 0] = HEAP8[$62 + 1 >> 0] | 0;
 HEAP8[$58 + 2 >> 0] = HEAP8[$62 + 2 >> 0] | 0;
 HEAP8[$58 + 3 >> 0] = HEAP8[$62 + 3 >> 0] | 0;
 HEAP32[$57 >> 2] = $59;
 HEAP32[HEAP32[$57 >> 2] >> 2] = HEAP32[$58 >> 2];
 HEAP32[$141 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$133 >> 2] = HEAP32[$141 >> 2];
 HEAP32[$55 >> 2] = $148;
 HEAP32[$53 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$51 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$50 >> 2] = (HEAP32[$51 >> 2] | 0) + 4;
 HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
 $219 = HEAP32[$47 >> 2] | 0;
 HEAP32[$45 >> 2] = $52;
 HEAP32[$46 >> 2] = $219;
 HEAP32[HEAP32[$45 >> 2] >> 2] = HEAP32[$46 >> 2];
 HEAP32[$56 >> 2] = HEAP32[$52 >> 2];
 HEAP8[$44 >> 0] = HEAP8[$56 >> 0] | 0;
 HEAP8[$44 + 1 >> 0] = HEAP8[$56 + 1 >> 0] | 0;
 HEAP8[$44 + 2 >> 0] = HEAP8[$56 + 2 >> 0] | 0;
 HEAP8[$44 + 3 >> 0] = HEAP8[$56 + 3 >> 0] | 0;
 HEAP32[$43 >> 2] = $54;
 HEAP32[HEAP32[$43 >> 2] >> 2] = HEAP32[$44 >> 2];
 HEAP32[$142 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$41 >> 2] = $133;
 HEAP32[$42 >> 2] = $142;
 $226 = HEAP32[$42 >> 2] | 0;
 HEAP32[$39 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$40 >> 2] = $226;
 if ((HEAP32[HEAP32[$39 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$40 >> 2] >> 2] | 0)) {
  $269 = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($148) | 0;
  HEAP32[$109 >> 2] = $133;
  HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$107 >> 2] = HEAP32[$108 >> 2];
  HEAP32[$106 >> 2] = (HEAP32[HEAP32[$107 >> 2] >> 2] | 0) + 16;
  HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$104 >> 2] = HEAP32[$105 >> 2];
  HEAP32[$103 >> 2] = HEAP32[$104 >> 2];
  HEAP32[(HEAP32[$103 >> 2] | 0) + 4 + 4 >> 2] = $269;
  HEAP32[$116 >> 2] = $133;
  HEAP32[$115 >> 2] = HEAP32[$116 >> 2];
  HEAP32[$114 >> 2] = HEAP32[$115 >> 2];
  HEAP32[$113 >> 2] = (HEAP32[HEAP32[$114 >> 2] >> 2] | 0) + 16;
  HEAP32[$112 >> 2] = HEAP32[$113 >> 2];
  HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
  HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
  if (HEAP8[(HEAP32[$110 >> 2] | 0) + 4 >> 0] & 1) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$123 >> 2] = $133;
  HEAP32[$122 >> 2] = HEAP32[$123 >> 2];
  HEAP32[$121 >> 2] = HEAP32[$122 >> 2];
  HEAP32[$120 >> 2] = (HEAP32[HEAP32[$121 >> 2] >> 2] | 0) + 16;
  HEAP32[$119 >> 2] = HEAP32[$120 >> 2];
  HEAP32[$118 >> 2] = HEAP32[$119 >> 2];
  HEAP32[$117 >> 2] = HEAP32[$118 >> 2];
  HEAP8[(HEAP32[$117 >> 2] | 0) + 4 >> 0] = 1;
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_makeLooserEv($148);
  STACKTOP = sp;
  return;
 }
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_dropLooserEv($148);
 HEAP32[$21 >> 2] = $148;
 HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$17 >> 2] = HEAP32[$19 >> 2];
 $235 = HEAP32[HEAP32[$17 >> 2] >> 2] | 0;
 HEAP32[$15 >> 2] = $18;
 HEAP32[$16 >> 2] = $235;
 HEAP32[HEAP32[$15 >> 2] >> 2] = HEAP32[$16 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$18 >> 2];
 HEAP8[$14 >> 0] = HEAP8[$22 >> 0] | 0;
 HEAP8[$14 + 1 >> 0] = HEAP8[$22 + 1 >> 0] | 0;
 HEAP8[$14 + 2 >> 0] = HEAP8[$22 + 2 >> 0] | 0;
 HEAP8[$14 + 3 >> 0] = HEAP8[$22 + 3 >> 0] | 0;
 HEAP32[$13 >> 2] = $20;
 HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[$14 >> 2];
 HEAP32[$144 >> 2] = HEAP32[$20 >> 2];
 HEAP8[$7 >> 0] = HEAP8[$144 >> 0] | 0;
 HEAP8[$7 + 1 >> 0] = HEAP8[$144 + 1 >> 0] | 0;
 HEAP8[$7 + 2 >> 0] = HEAP8[$144 + 2 >> 0] | 0;
 HEAP8[$7 + 3 >> 0] = HEAP8[$144 + 3 >> 0] | 0;
 HEAP32[$5 >> 2] = $143;
 $241 = HEAP32[$5 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP8[$4 >> 0] = HEAP8[$6 >> 0] | 0;
 HEAP8[$4 + 1 >> 0] = HEAP8[$6 + 1 >> 0] | 0;
 HEAP8[$4 + 2 >> 0] = HEAP8[$6 + 2 >> 0] | 0;
 HEAP8[$4 + 3 >> 0] = HEAP8[$6 + 3 >> 0] | 0;
 HEAP32[$3 >> 2] = $241;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 $244 = HEAP32[$131 >> 2] | 0;
 $245 = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($148) | 0;
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EbjRKS6_($146, 0, $245, HEAP32[$132 >> 2] | 0);
 HEAP32[$10 >> 2] = $145;
 HEAP32[$11 >> 2] = $244;
 HEAP32[$12 >> 2] = $146;
 $247 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$247 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$8 >> 2] = HEAP32[$12 >> 2];
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EOS8_($247 + 4 | 0, HEAP32[$8 >> 2] | 0);
 HEAP8[$38 >> 0] = HEAP8[$143 >> 0] | 0;
 HEAP8[$38 + 1 >> 0] = HEAP8[$143 + 1 >> 0] | 0;
 HEAP8[$38 + 2 >> 0] = HEAP8[$143 + 2 >> 0] | 0;
 HEAP8[$38 + 3 >> 0] = HEAP8[$143 + 3 >> 0] | 0;
 HEAP32[$34 >> 2] = $148;
 HEAP32[$35 >> 2] = $145;
 $253 = HEAP32[$34 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$32 >> 2] = HEAP32[$35 >> 2];
 $255 = HEAP32[$32 >> 2] | 0;
 HEAP8[$29 >> 0] = HEAP8[$37 >> 0] | 0;
 HEAP8[$29 + 1 >> 0] = HEAP8[$37 + 1 >> 0] | 0;
 HEAP8[$29 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
 HEAP8[$29 + 3 >> 0] = HEAP8[$37 + 3 >> 0] | 0;
 HEAP32[$26 >> 2] = $253;
 HEAP32[$27 >> 2] = $255;
 $256 = HEAP32[$26 >> 2] | 0;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$27 >> 2];
 $258 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$27 >> 2];
 $260 = HEAP32[$23 >> 2] | 0;
 __THREW__ = 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$28 >> 2];
 $261 = invoke_iiiii(15, $256 | 0, $$byval_copy1 | 0, $258 | 0, $260 | 0) | 0;
 $262 = __THREW__;
 __THREW__ = 0;
 if ($262 & 1) {
  $267 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$138 >> 2] = $267;
  HEAP32[$139 >> 2] = tempRet0;
  __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev($145);
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev($146);
  $303 = HEAP32[$138 >> 2] | 0;
  $304 = HEAP32[$139 >> 2] | 0;
  ___resumeException($303 | 0);
 } else {
  HEAP32[$25 >> 2] = $261;
  HEAP32[$36 >> 2] = HEAP32[$25 >> 2];
  HEAP8[$31 >> 0] = HEAP8[$36 >> 0] | 0;
  HEAP8[$31 + 1 >> 0] = HEAP8[$36 + 1 >> 0] | 0;
  HEAP8[$31 + 2 >> 0] = HEAP8[$36 + 2 >> 0] | 0;
  HEAP8[$31 + 3 >> 0] = HEAP8[$36 + 3 >> 0] | 0;
  HEAP32[$30 >> 2] = $33;
  HEAP32[HEAP32[$30 >> 2] >> 2] = HEAP32[$31 >> 2];
  HEAP32[$147 >> 2] = HEAP32[$33 >> 2];
  __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev($145);
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev($146);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SK_EElEERPNS_15__tree_end_nodeISM_EESN_RKT_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $137 = 0, $14 = 0, $15 = 0, $151 = 0, $152 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $165 = 0, $17 = 0, $179 = 0, $18 = 0, $180 = 0, $185 = 0, $19 = 0, $191 = 0, $20 = 0, $201 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $244 = 0, $245 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $257 = 0, $26 = 0, $269 = 0, $279 = 0, $28 = 0, $29 = 0, $291 = 0, $296 = 0, $30 = 0, $302 = 0, $31 = 0, $312 = 0, $32 = 0, $329 = 0, $33 = 0, $34 = 0, $343 = 0, $344 = 0, $348 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $376 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $5 = sp + 508 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 504 | 0;
 $8 = sp + 500 | 0;
 $9 = sp + 496 | 0;
 $10 = sp + 492 | 0;
 $11 = sp + 488 | 0;
 $12 = sp + 484 | 0;
 $13 = sp + 480 | 0;
 $14 = sp + 476 | 0;
 $15 = sp + 472 | 0;
 $16 = sp + 468 | 0;
 $17 = sp + 464 | 0;
 $18 = sp + 460 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 452 | 0;
 $21 = sp + 448 | 0;
 $22 = sp + 444 | 0;
 $23 = sp + 440 | 0;
 $24 = sp + 436 | 0;
 $25 = sp + 432 | 0;
 $26 = sp + 428 | 0;
 $28 = sp + 420 | 0;
 $29 = sp + 416 | 0;
 $30 = sp + 412 | 0;
 $31 = sp + 408 | 0;
 $32 = sp + 404 | 0;
 $33 = sp + 400 | 0;
 $34 = sp + 396 | 0;
 $35 = sp + 392 | 0;
 $36 = sp + 388 | 0;
 $37 = sp + 384 | 0;
 $38 = sp + 380 | 0;
 $39 = sp + 376 | 0;
 $40 = sp + 372 | 0;
 $41 = sp + 368 | 0;
 $42 = sp + 364 | 0;
 $43 = sp + 360 | 0;
 $44 = sp + 356 | 0;
 $45 = sp + 352 | 0;
 $46 = sp + 348 | 0;
 $47 = sp + 344 | 0;
 $48 = sp + 340 | 0;
 $49 = sp + 336 | 0;
 $50 = sp + 332 | 0;
 $51 = sp + 328 | 0;
 $52 = sp + 324 | 0;
 $53 = sp + 320 | 0;
 $54 = sp + 316 | 0;
 $55 = sp + 312 | 0;
 $56 = sp + 308 | 0;
 $57 = sp + 304 | 0;
 $58 = sp + 300 | 0;
 $59 = sp + 296 | 0;
 $60 = sp + 292 | 0;
 $61 = sp + 288 | 0;
 $62 = sp + 284 | 0;
 $63 = sp + 280 | 0;
 $64 = sp + 276 | 0;
 $65 = sp + 272 | 0;
 $66 = sp + 268 | 0;
 $67 = sp + 264 | 0;
 $68 = sp + 260 | 0;
 $69 = sp + 256 | 0;
 $70 = sp + 252 | 0;
 $71 = sp + 24 | 0;
 $72 = sp + 248 | 0;
 $73 = sp + 244 | 0;
 $74 = sp + 512 | 0;
 $75 = sp + 240 | 0;
 $76 = sp + 236 | 0;
 $77 = sp + 16 | 0;
 $78 = sp + 232 | 0;
 $79 = sp + 228 | 0;
 $80 = sp + 224 | 0;
 $81 = sp + 220 | 0;
 $82 = sp + 216 | 0;
 $83 = sp + 212 | 0;
 $84 = sp + 208 | 0;
 $85 = sp + 204 | 0;
 $86 = sp + 200 | 0;
 $87 = sp + 196 | 0;
 $88 = sp + 8 | 0;
 $89 = sp + 192 | 0;
 $90 = sp + 188 | 0;
 $91 = sp + 184 | 0;
 $92 = sp + 180 | 0;
 $93 = sp + 176 | 0;
 $94 = sp + 172 | 0;
 $95 = sp + 168 | 0;
 $96 = sp + 164 | 0;
 $97 = sp + 160 | 0;
 $98 = sp + 156 | 0;
 $99 = sp + 152 | 0;
 $100 = sp + 148 | 0;
 $101 = sp + 144 | 0;
 $102 = sp + 140 | 0;
 $103 = sp + 136 | 0;
 $104 = sp + 132 | 0;
 $105 = sp + 128 | 0;
 $106 = sp;
 $107 = sp + 124 | 0;
 $108 = sp + 120 | 0;
 $109 = sp + 116 | 0;
 $110 = sp + 112 | 0;
 $111 = sp + 108 | 0;
 $112 = sp + 104 | 0;
 $113 = sp + 100 | 0;
 $114 = sp + 96 | 0;
 $115 = sp + 92 | 0;
 $116 = sp + 88 | 0;
 $117 = sp + 84 | 0;
 $118 = sp + 80 | 0;
 $119 = sp + 76 | 0;
 $120 = sp + 72 | 0;
 $121 = sp + 68 | 0;
 $122 = sp + 64 | 0;
 $123 = sp + 60 | 0;
 $124 = sp + 56 | 0;
 $125 = sp + 52 | 0;
 $126 = sp + 48 | 0;
 $127 = sp + 44 | 0;
 $128 = sp + 40 | 0;
 $129 = sp + 36 | 0;
 HEAP32[$117 >> 2] = $0;
 HEAP32[$118 >> 2] = $2;
 HEAP32[$119 >> 2] = $3;
 HEAP32[$120 >> 2] = $4;
 $130 = HEAP32[$117 >> 2] | 0;
 HEAP32[$115 >> 2] = $130;
 HEAP32[$113 >> 2] = HEAP32[$115 >> 2];
 HEAP32[$112 >> 2] = (HEAP32[$113 >> 2] | 0) + 4;
 HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
 HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
 HEAP32[$109 >> 2] = HEAP32[$110 >> 2];
 $137 = HEAP32[$109 >> 2] | 0;
 HEAP32[$107 >> 2] = $114;
 HEAP32[$108 >> 2] = $137;
 HEAP32[HEAP32[$107 >> 2] >> 2] = HEAP32[$108 >> 2];
 HEAP32[$122 >> 2] = HEAP32[$114 >> 2];
 HEAP8[$106 >> 0] = HEAP8[$122 >> 0] | 0;
 HEAP8[$106 + 1 >> 0] = HEAP8[$122 + 1 >> 0] | 0;
 HEAP8[$106 + 2 >> 0] = HEAP8[$122 + 2 >> 0] | 0;
 HEAP8[$106 + 3 >> 0] = HEAP8[$122 + 3 >> 0] | 0;
 HEAP32[$105 >> 2] = $121;
 HEAP32[HEAP32[$105 >> 2] >> 2] = HEAP32[$106 >> 2];
 HEAP32[$96 >> 2] = $1;
 HEAP32[$97 >> 2] = $121;
 if ((HEAP32[HEAP32[$96 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$97 >> 2] >> 2] | 0)) {
  HEAP32[$48 >> 2] = $130;
  HEAP32[$47 >> 2] = (HEAP32[$48 >> 2] | 0) + 8;
  HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
  $151 = HEAP32[$46 >> 2] | 0;
  $152 = HEAP32[$120 >> 2] | 0;
  HEAP32[$40 >> 2] = $1;
  HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
  $156 = (HEAP32[HEAP32[$39 >> 2] >> 2] | 0) + 16 | 0;
  HEAP32[$30 >> 2] = $151;
  HEAP32[$31 >> 2] = $152;
  HEAP32[$32 >> 2] = $156;
  $158 = HEAP32[$31 >> 2] | 0;
  $159 = HEAP32[$32 >> 2] | 0;
  HEAP32[sp + 424 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$28 >> 2] = $158;
  HEAP32[$29 >> 2] = $159;
  if (!(__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0) | 0)) {
   HEAP32[$43 >> 2] = $130;
   HEAP32[$42 >> 2] = (HEAP32[$43 >> 2] | 0) + 8;
   HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
   $237 = HEAP32[$41 >> 2] | 0;
   HEAP32[$45 >> 2] = $1;
   HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
   $241 = (HEAP32[HEAP32[$44 >> 2] >> 2] | 0) + 16 | 0;
   $242 = HEAP32[$120 >> 2] | 0;
   HEAP32[$52 >> 2] = $237;
   HEAP32[$53 >> 2] = $241;
   HEAP32[$54 >> 2] = $242;
   $244 = HEAP32[$53 >> 2] | 0;
   $245 = HEAP32[$54 >> 2] | 0;
   HEAP32[$49 >> 2] = HEAP32[$52 >> 2];
   HEAP32[$50 >> 2] = $244;
   HEAP32[$51 >> 2] = $245;
   if (!(__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$50 >> 2] | 0, HEAP32[$51 >> 2] | 0) | 0)) {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[HEAP32[$119 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[$116 >> 2] = HEAP32[$119 >> 2];
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   };
   HEAP32[$127 >> 2] = HEAP32[$1 >> 2];
   HEAP8[$77 >> 0] = HEAP8[$127 >> 0] | 0;
   HEAP8[$77 + 1 >> 0] = HEAP8[$127 + 1 >> 0] | 0;
   HEAP8[$77 + 2 >> 0] = HEAP8[$127 + 2 >> 0] | 0;
   HEAP8[$77 + 3 >> 0] = HEAP8[$127 + 3 >> 0] | 0;
   HEAP32[$76 >> 2] = 1;
   $249 = HEAP32[$76 >> 2] | 0;
   HEAP32[$72 >> 2] = $77;
   HEAP32[$73 >> 2] = $249;
   $250 = HEAP32[$72 >> 2] | 0;
   $251 = HEAP32[$73 >> 2] | 0;
   HEAP8[$71 >> 0] = HEAP8[$74 >> 0] | 0;
   HEAP32[$69 >> 2] = $250;
   HEAP32[$70 >> 2] = $251;
   L8 : do if ((HEAP32[$70 >> 2] | 0) >= 0) while (1) {
    if ((HEAP32[$70 >> 2] | 0) <= 0) break L8;
    HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
    $257 = HEAP32[$68 >> 2] | 0;
    HEAP32[$67 >> 2] = HEAP32[$257 >> 2];
    if (HEAP32[(HEAP32[$67 >> 2] | 0) + 4 >> 2] | 0) {
     HEAP32[$65 >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + 4 >> 2];
     while (1) {
      $269 = HEAP32[$65 >> 2] | 0;
      if (!(HEAP32[HEAP32[$65 >> 2] >> 2] | 0)) break;
      HEAP32[$65 >> 2] = HEAP32[$269 >> 2];
     }
     HEAP32[$66 >> 2] = $269;
    } else {
     while (1) {
      HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
      $279 = HEAP32[$67 >> 2] | 0;
      if (!((HEAP32[$64 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$64 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
      HEAP32[$63 >> 2] = $279;
      HEAP32[$67 >> 2] = HEAP32[(HEAP32[$63 >> 2] | 0) + 8 >> 2];
     }
     HEAP32[$66 >> 2] = HEAP32[$279 + 8 >> 2];
    }
    HEAP32[$257 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + -1;
   } else while (1) {
    if ((HEAP32[$70 >> 2] | 0) >= 0) break L8;
    HEAP32[$62 >> 2] = HEAP32[$69 >> 2];
    $291 = HEAP32[$62 >> 2] | 0;
    HEAP32[$60 >> 2] = HEAP32[$291 >> 2];
    $296 = HEAP32[$60 >> 2] | 0;
    if (HEAP32[HEAP32[$60 >> 2] >> 2] | 0) {
     HEAP32[$58 >> 2] = HEAP32[$296 >> 2];
     while (1) {
      $302 = HEAP32[$58 >> 2] | 0;
      if (!(HEAP32[(HEAP32[$58 >> 2] | 0) + 4 >> 2] | 0)) break;
      HEAP32[$58 >> 2] = HEAP32[$302 + 4 >> 2];
     }
     HEAP32[$59 >> 2] = $302;
    } else {
     HEAP32[$61 >> 2] = $296;
     while (1) {
      HEAP32[$57 >> 2] = HEAP32[$61 >> 2];
      $312 = HEAP32[$61 >> 2] | 0;
      if ((HEAP32[$57 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$57 >> 2] | 0) + 8 >> 2] >> 2] | 0)) break;
      HEAP32[$55 >> 2] = $312;
      HEAP32[$61 >> 2] = HEAP32[(HEAP32[$55 >> 2] | 0) + 8 >> 2];
     }
     HEAP32[$56 >> 2] = $312;
     HEAP32[$59 >> 2] = HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2];
    }
    HEAP32[$291 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + 1;
   } while (0);
   HEAP32[$75 >> 2] = HEAP32[$77 >> 2];
   HEAP32[$126 >> 2] = HEAP32[$75 >> 2];
   HEAP32[$86 >> 2] = $130;
   HEAP32[$84 >> 2] = HEAP32[$86 >> 2];
   HEAP32[$83 >> 2] = (HEAP32[$84 >> 2] | 0) + 4;
   HEAP32[$82 >> 2] = HEAP32[$83 >> 2];
   HEAP32[$81 >> 2] = HEAP32[$82 >> 2];
   HEAP32[$80 >> 2] = HEAP32[$81 >> 2];
   $329 = HEAP32[$80 >> 2] | 0;
   HEAP32[$78 >> 2] = $85;
   HEAP32[$79 >> 2] = $329;
   HEAP32[HEAP32[$78 >> 2] >> 2] = HEAP32[$79 >> 2];
   HEAP32[$129 >> 2] = HEAP32[$85 >> 2];
   HEAP8[$88 >> 0] = HEAP8[$129 >> 0] | 0;
   HEAP8[$88 + 1 >> 0] = HEAP8[$129 + 1 >> 0] | 0;
   HEAP8[$88 + 2 >> 0] = HEAP8[$129 + 2 >> 0] | 0;
   HEAP8[$88 + 3 >> 0] = HEAP8[$129 + 3 >> 0] | 0;
   HEAP32[$87 >> 2] = $128;
   HEAP32[HEAP32[$87 >> 2] >> 2] = HEAP32[$88 >> 2];
   HEAP32[$89 >> 2] = $126;
   HEAP32[$90 >> 2] = $128;
   if ((HEAP32[HEAP32[$89 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$90 >> 2] >> 2] | 0)) {
    HEAP32[$93 >> 2] = $130;
    HEAP32[$92 >> 2] = (HEAP32[$93 >> 2] | 0) + 8;
    HEAP32[$91 >> 2] = HEAP32[$92 >> 2];
    $343 = HEAP32[$91 >> 2] | 0;
    $344 = HEAP32[$120 >> 2] | 0;
    HEAP32[$95 >> 2] = $126;
    HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
    $348 = (HEAP32[HEAP32[$94 >> 2] >> 2] | 0) + 16 | 0;
    HEAP32[$101 >> 2] = $343;
    HEAP32[$102 >> 2] = $344;
    HEAP32[$103 >> 2] = $348;
    $350 = HEAP32[$102 >> 2] | 0;
    $351 = HEAP32[$103 >> 2] | 0;
    HEAP32[$98 >> 2] = HEAP32[$101 >> 2];
    HEAP32[$99 >> 2] = $350;
    HEAP32[$100 >> 2] = $351;
    if (!(__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$99 >> 2] | 0, HEAP32[$100 >> 2] | 0) | 0)) {
     HEAP32[$116 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_($130, HEAP32[$118 >> 2] | 0, HEAP32[$120 >> 2] | 0) | 0;
     $376 = HEAP32[$116 >> 2] | 0;
     STACKTOP = sp;
     return $376 | 0;
    }
   }
   HEAP32[$104 >> 2] = $1;
   if (!(HEAP32[(HEAP32[HEAP32[$104 >> 2] >> 2] | 0) + 4 >> 2] | 0)) {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[$116 >> 2] = (HEAP32[$1 >> 2] | 0) + 4;
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   } else {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$126 >> 2];
    HEAP32[$116 >> 2] = HEAP32[HEAP32[$118 >> 2] >> 2];
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   }
  }
 };
 HEAP32[$123 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$26 >> 2] = $130;
 HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
 $165 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
 HEAP32[$22 >> 2] = $25;
 HEAP32[$23 >> 2] = $165;
 HEAP32[HEAP32[$22 >> 2] >> 2] = HEAP32[$23 >> 2];
 HEAP32[$125 >> 2] = HEAP32[$25 >> 2];
 HEAP8[$6 >> 0] = HEAP8[$125 >> 0] | 0;
 HEAP8[$6 + 1 >> 0] = HEAP8[$125 + 1 >> 0] | 0;
 HEAP8[$6 + 2 >> 0] = HEAP8[$125 + 2 >> 0] | 0;
 HEAP8[$6 + 3 >> 0] = HEAP8[$125 + 3 >> 0] | 0;
 HEAP32[$5 >> 2] = $124;
 HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$6 >> 2];
 HEAP32[$7 >> 2] = $123;
 HEAP32[$8 >> 2] = $124;
 if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$8 >> 2] >> 2] | 0)) {
  HEAP32[$11 >> 2] = $130;
  HEAP32[$10 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  $179 = HEAP32[$9 >> 2] | 0;
  HEAP32[$19 >> 2] = $123;
  $180 = HEAP32[$19 >> 2] | 0;
  HEAP32[$17 >> 2] = HEAP32[$180 >> 2];
  $185 = HEAP32[$17 >> 2] | 0;
  if (HEAP32[HEAP32[$17 >> 2] >> 2] | 0) {
   HEAP32[$15 >> 2] = HEAP32[$185 >> 2];
   while (1) {
    $191 = HEAP32[$15 >> 2] | 0;
    if (!(HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] | 0)) break;
    HEAP32[$15 >> 2] = HEAP32[$191 + 4 >> 2];
   }
   HEAP32[$16 >> 2] = $191;
  } else {
   HEAP32[$18 >> 2] = $185;
   while (1) {
    HEAP32[$14 >> 2] = HEAP32[$18 >> 2];
    $201 = HEAP32[$18 >> 2] | 0;
    if ((HEAP32[$14 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] >> 2] | 0)) break;
    HEAP32[$12 >> 2] = $201;
    HEAP32[$18 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$13 >> 2] = $201;
   HEAP32[$16 >> 2] = HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$180 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$21 >> 2] = $180;
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  $212 = (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) + 16 | 0;
  $213 = HEAP32[$120 >> 2] | 0;
  HEAP32[$36 >> 2] = $179;
  HEAP32[$37 >> 2] = $212;
  HEAP32[$38 >> 2] = $213;
  $215 = HEAP32[$37 >> 2] | 0;
  $216 = HEAP32[$38 >> 2] | 0;
  HEAP32[$33 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = $215;
  HEAP32[$35 >> 2] = $216;
  if (!(__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$34 >> 2] | 0, HEAP32[$35 >> 2] | 0) | 0)) {
   HEAP32[$116 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_($130, HEAP32[$118 >> 2] | 0, HEAP32[$120 >> 2] | 0) | 0;
   $376 = HEAP32[$116 >> 2] | 0;
   STACKTOP = sp;
   return $376 | 0;
  }
 }
 if (!(HEAP32[HEAP32[$1 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
  HEAP32[$116 >> 2] = HEAP32[HEAP32[$118 >> 2] >> 2];
  $376 = HEAP32[$116 >> 2] | 0;
  STACKTOP = sp;
  return $376 | 0;
 } else {
  HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$123 >> 2];
  HEAP32[$116 >> 2] = (HEAP32[$123 >> 2] | 0) + 4;
  $376 = HEAP32[$116 >> 2] | 0;
  STACKTOP = sp;
  return $376 | 0;
 }
 return 0;
}
function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_SL_EElEERPNS_15__tree_end_nodeISN_EESO_RKT_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $137 = 0, $14 = 0, $15 = 0, $151 = 0, $152 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $165 = 0, $17 = 0, $179 = 0, $18 = 0, $180 = 0, $185 = 0, $19 = 0, $191 = 0, $20 = 0, $201 = 0, $21 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $237 = 0, $24 = 0, $241 = 0, $242 = 0, $244 = 0, $245 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $257 = 0, $26 = 0, $269 = 0, $279 = 0, $28 = 0, $29 = 0, $291 = 0, $296 = 0, $30 = 0, $302 = 0, $31 = 0, $312 = 0, $32 = 0, $329 = 0, $33 = 0, $34 = 0, $343 = 0, $344 = 0, $348 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $376 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528 | 0;
 $5 = sp + 508 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 504 | 0;
 $8 = sp + 500 | 0;
 $9 = sp + 496 | 0;
 $10 = sp + 492 | 0;
 $11 = sp + 488 | 0;
 $12 = sp + 484 | 0;
 $13 = sp + 480 | 0;
 $14 = sp + 476 | 0;
 $15 = sp + 472 | 0;
 $16 = sp + 468 | 0;
 $17 = sp + 464 | 0;
 $18 = sp + 460 | 0;
 $19 = sp + 456 | 0;
 $20 = sp + 452 | 0;
 $21 = sp + 448 | 0;
 $22 = sp + 444 | 0;
 $23 = sp + 440 | 0;
 $24 = sp + 436 | 0;
 $25 = sp + 432 | 0;
 $26 = sp + 428 | 0;
 $28 = sp + 420 | 0;
 $29 = sp + 416 | 0;
 $30 = sp + 412 | 0;
 $31 = sp + 408 | 0;
 $32 = sp + 404 | 0;
 $33 = sp + 400 | 0;
 $34 = sp + 396 | 0;
 $35 = sp + 392 | 0;
 $36 = sp + 388 | 0;
 $37 = sp + 384 | 0;
 $38 = sp + 380 | 0;
 $39 = sp + 376 | 0;
 $40 = sp + 372 | 0;
 $41 = sp + 368 | 0;
 $42 = sp + 364 | 0;
 $43 = sp + 360 | 0;
 $44 = sp + 356 | 0;
 $45 = sp + 352 | 0;
 $46 = sp + 348 | 0;
 $47 = sp + 344 | 0;
 $48 = sp + 340 | 0;
 $49 = sp + 336 | 0;
 $50 = sp + 332 | 0;
 $51 = sp + 328 | 0;
 $52 = sp + 324 | 0;
 $53 = sp + 320 | 0;
 $54 = sp + 316 | 0;
 $55 = sp + 312 | 0;
 $56 = sp + 308 | 0;
 $57 = sp + 304 | 0;
 $58 = sp + 300 | 0;
 $59 = sp + 296 | 0;
 $60 = sp + 292 | 0;
 $61 = sp + 288 | 0;
 $62 = sp + 284 | 0;
 $63 = sp + 280 | 0;
 $64 = sp + 276 | 0;
 $65 = sp + 272 | 0;
 $66 = sp + 268 | 0;
 $67 = sp + 264 | 0;
 $68 = sp + 260 | 0;
 $69 = sp + 256 | 0;
 $70 = sp + 252 | 0;
 $71 = sp + 24 | 0;
 $72 = sp + 248 | 0;
 $73 = sp + 244 | 0;
 $74 = sp + 512 | 0;
 $75 = sp + 240 | 0;
 $76 = sp + 236 | 0;
 $77 = sp + 16 | 0;
 $78 = sp + 232 | 0;
 $79 = sp + 228 | 0;
 $80 = sp + 224 | 0;
 $81 = sp + 220 | 0;
 $82 = sp + 216 | 0;
 $83 = sp + 212 | 0;
 $84 = sp + 208 | 0;
 $85 = sp + 204 | 0;
 $86 = sp + 200 | 0;
 $87 = sp + 196 | 0;
 $88 = sp + 8 | 0;
 $89 = sp + 192 | 0;
 $90 = sp + 188 | 0;
 $91 = sp + 184 | 0;
 $92 = sp + 180 | 0;
 $93 = sp + 176 | 0;
 $94 = sp + 172 | 0;
 $95 = sp + 168 | 0;
 $96 = sp + 164 | 0;
 $97 = sp + 160 | 0;
 $98 = sp + 156 | 0;
 $99 = sp + 152 | 0;
 $100 = sp + 148 | 0;
 $101 = sp + 144 | 0;
 $102 = sp + 140 | 0;
 $103 = sp + 136 | 0;
 $104 = sp + 132 | 0;
 $105 = sp + 128 | 0;
 $106 = sp;
 $107 = sp + 124 | 0;
 $108 = sp + 120 | 0;
 $109 = sp + 116 | 0;
 $110 = sp + 112 | 0;
 $111 = sp + 108 | 0;
 $112 = sp + 104 | 0;
 $113 = sp + 100 | 0;
 $114 = sp + 96 | 0;
 $115 = sp + 92 | 0;
 $116 = sp + 88 | 0;
 $117 = sp + 84 | 0;
 $118 = sp + 80 | 0;
 $119 = sp + 76 | 0;
 $120 = sp + 72 | 0;
 $121 = sp + 68 | 0;
 $122 = sp + 64 | 0;
 $123 = sp + 60 | 0;
 $124 = sp + 56 | 0;
 $125 = sp + 52 | 0;
 $126 = sp + 48 | 0;
 $127 = sp + 44 | 0;
 $128 = sp + 40 | 0;
 $129 = sp + 36 | 0;
 HEAP32[$117 >> 2] = $0;
 HEAP32[$118 >> 2] = $2;
 HEAP32[$119 >> 2] = $3;
 HEAP32[$120 >> 2] = $4;
 $130 = HEAP32[$117 >> 2] | 0;
 HEAP32[$115 >> 2] = $130;
 HEAP32[$113 >> 2] = HEAP32[$115 >> 2];
 HEAP32[$112 >> 2] = (HEAP32[$113 >> 2] | 0) + 4;
 HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
 HEAP32[$110 >> 2] = HEAP32[$111 >> 2];
 HEAP32[$109 >> 2] = HEAP32[$110 >> 2];
 $137 = HEAP32[$109 >> 2] | 0;
 HEAP32[$107 >> 2] = $114;
 HEAP32[$108 >> 2] = $137;
 HEAP32[HEAP32[$107 >> 2] >> 2] = HEAP32[$108 >> 2];
 HEAP32[$122 >> 2] = HEAP32[$114 >> 2];
 HEAP8[$106 >> 0] = HEAP8[$122 >> 0] | 0;
 HEAP8[$106 + 1 >> 0] = HEAP8[$122 + 1 >> 0] | 0;
 HEAP8[$106 + 2 >> 0] = HEAP8[$122 + 2 >> 0] | 0;
 HEAP8[$106 + 3 >> 0] = HEAP8[$122 + 3 >> 0] | 0;
 HEAP32[$105 >> 2] = $121;
 HEAP32[HEAP32[$105 >> 2] >> 2] = HEAP32[$106 >> 2];
 HEAP32[$96 >> 2] = $1;
 HEAP32[$97 >> 2] = $121;
 if ((HEAP32[HEAP32[$96 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$97 >> 2] >> 2] | 0)) {
  HEAP32[$48 >> 2] = $130;
  HEAP32[$47 >> 2] = (HEAP32[$48 >> 2] | 0) + 8;
  HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
  $151 = HEAP32[$46 >> 2] | 0;
  $152 = HEAP32[$120 >> 2] | 0;
  HEAP32[$40 >> 2] = $1;
  HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
  $156 = (HEAP32[HEAP32[$39 >> 2] >> 2] | 0) + 16 | 0;
  HEAP32[$30 >> 2] = $151;
  HEAP32[$31 >> 2] = $152;
  HEAP32[$32 >> 2] = $156;
  $158 = HEAP32[$31 >> 2] | 0;
  $159 = HEAP32[$32 >> 2] | 0;
  HEAP32[sp + 424 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$28 >> 2] = $158;
  HEAP32[$29 >> 2] = $159;
  if (!(__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0) | 0)) {
   HEAP32[$43 >> 2] = $130;
   HEAP32[$42 >> 2] = (HEAP32[$43 >> 2] | 0) + 8;
   HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
   $237 = HEAP32[$41 >> 2] | 0;
   HEAP32[$45 >> 2] = $1;
   HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
   $241 = (HEAP32[HEAP32[$44 >> 2] >> 2] | 0) + 16 | 0;
   $242 = HEAP32[$120 >> 2] | 0;
   HEAP32[$52 >> 2] = $237;
   HEAP32[$53 >> 2] = $241;
   HEAP32[$54 >> 2] = $242;
   $244 = HEAP32[$53 >> 2] | 0;
   $245 = HEAP32[$54 >> 2] | 0;
   HEAP32[$49 >> 2] = HEAP32[$52 >> 2];
   HEAP32[$50 >> 2] = $244;
   HEAP32[$51 >> 2] = $245;
   if (!(__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$50 >> 2] | 0, HEAP32[$51 >> 2] | 0) | 0)) {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[HEAP32[$119 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[$116 >> 2] = HEAP32[$119 >> 2];
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   };
   HEAP32[$127 >> 2] = HEAP32[$1 >> 2];
   HEAP8[$77 >> 0] = HEAP8[$127 >> 0] | 0;
   HEAP8[$77 + 1 >> 0] = HEAP8[$127 + 1 >> 0] | 0;
   HEAP8[$77 + 2 >> 0] = HEAP8[$127 + 2 >> 0] | 0;
   HEAP8[$77 + 3 >> 0] = HEAP8[$127 + 3 >> 0] | 0;
   HEAP32[$76 >> 2] = 1;
   $249 = HEAP32[$76 >> 2] | 0;
   HEAP32[$72 >> 2] = $77;
   HEAP32[$73 >> 2] = $249;
   $250 = HEAP32[$72 >> 2] | 0;
   $251 = HEAP32[$73 >> 2] | 0;
   HEAP8[$71 >> 0] = HEAP8[$74 >> 0] | 0;
   HEAP32[$69 >> 2] = $250;
   HEAP32[$70 >> 2] = $251;
   L8 : do if ((HEAP32[$70 >> 2] | 0) >= 0) while (1) {
    if ((HEAP32[$70 >> 2] | 0) <= 0) break L8;
    HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
    $257 = HEAP32[$68 >> 2] | 0;
    HEAP32[$67 >> 2] = HEAP32[$257 >> 2];
    if (HEAP32[(HEAP32[$67 >> 2] | 0) + 4 >> 2] | 0) {
     HEAP32[$65 >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + 4 >> 2];
     while (1) {
      $269 = HEAP32[$65 >> 2] | 0;
      if (!(HEAP32[HEAP32[$65 >> 2] >> 2] | 0)) break;
      HEAP32[$65 >> 2] = HEAP32[$269 >> 2];
     }
     HEAP32[$66 >> 2] = $269;
    } else {
     while (1) {
      HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
      $279 = HEAP32[$67 >> 2] | 0;
      if (!((HEAP32[$64 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$64 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
      HEAP32[$63 >> 2] = $279;
      HEAP32[$67 >> 2] = HEAP32[(HEAP32[$63 >> 2] | 0) + 8 >> 2];
     }
     HEAP32[$66 >> 2] = HEAP32[$279 + 8 >> 2];
    }
    HEAP32[$257 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + -1;
   } else while (1) {
    if ((HEAP32[$70 >> 2] | 0) >= 0) break L8;
    HEAP32[$62 >> 2] = HEAP32[$69 >> 2];
    $291 = HEAP32[$62 >> 2] | 0;
    HEAP32[$60 >> 2] = HEAP32[$291 >> 2];
    $296 = HEAP32[$60 >> 2] | 0;
    if (HEAP32[HEAP32[$60 >> 2] >> 2] | 0) {
     HEAP32[$58 >> 2] = HEAP32[$296 >> 2];
     while (1) {
      $302 = HEAP32[$58 >> 2] | 0;
      if (!(HEAP32[(HEAP32[$58 >> 2] | 0) + 4 >> 2] | 0)) break;
      HEAP32[$58 >> 2] = HEAP32[$302 + 4 >> 2];
     }
     HEAP32[$59 >> 2] = $302;
    } else {
     HEAP32[$61 >> 2] = $296;
     while (1) {
      HEAP32[$57 >> 2] = HEAP32[$61 >> 2];
      $312 = HEAP32[$61 >> 2] | 0;
      if ((HEAP32[$57 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$57 >> 2] | 0) + 8 >> 2] >> 2] | 0)) break;
      HEAP32[$55 >> 2] = $312;
      HEAP32[$61 >> 2] = HEAP32[(HEAP32[$55 >> 2] | 0) + 8 >> 2];
     }
     HEAP32[$56 >> 2] = $312;
     HEAP32[$59 >> 2] = HEAP32[(HEAP32[$56 >> 2] | 0) + 8 >> 2];
    }
    HEAP32[$291 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + 1;
   } while (0);
   HEAP32[$75 >> 2] = HEAP32[$77 >> 2];
   HEAP32[$126 >> 2] = HEAP32[$75 >> 2];
   HEAP32[$86 >> 2] = $130;
   HEAP32[$84 >> 2] = HEAP32[$86 >> 2];
   HEAP32[$83 >> 2] = (HEAP32[$84 >> 2] | 0) + 4;
   HEAP32[$82 >> 2] = HEAP32[$83 >> 2];
   HEAP32[$81 >> 2] = HEAP32[$82 >> 2];
   HEAP32[$80 >> 2] = HEAP32[$81 >> 2];
   $329 = HEAP32[$80 >> 2] | 0;
   HEAP32[$78 >> 2] = $85;
   HEAP32[$79 >> 2] = $329;
   HEAP32[HEAP32[$78 >> 2] >> 2] = HEAP32[$79 >> 2];
   HEAP32[$129 >> 2] = HEAP32[$85 >> 2];
   HEAP8[$88 >> 0] = HEAP8[$129 >> 0] | 0;
   HEAP8[$88 + 1 >> 0] = HEAP8[$129 + 1 >> 0] | 0;
   HEAP8[$88 + 2 >> 0] = HEAP8[$129 + 2 >> 0] | 0;
   HEAP8[$88 + 3 >> 0] = HEAP8[$129 + 3 >> 0] | 0;
   HEAP32[$87 >> 2] = $128;
   HEAP32[HEAP32[$87 >> 2] >> 2] = HEAP32[$88 >> 2];
   HEAP32[$89 >> 2] = $126;
   HEAP32[$90 >> 2] = $128;
   if ((HEAP32[HEAP32[$89 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$90 >> 2] >> 2] | 0)) {
    HEAP32[$93 >> 2] = $130;
    HEAP32[$92 >> 2] = (HEAP32[$93 >> 2] | 0) + 8;
    HEAP32[$91 >> 2] = HEAP32[$92 >> 2];
    $343 = HEAP32[$91 >> 2] | 0;
    $344 = HEAP32[$120 >> 2] | 0;
    HEAP32[$95 >> 2] = $126;
    HEAP32[$94 >> 2] = HEAP32[$95 >> 2];
    $348 = (HEAP32[HEAP32[$94 >> 2] >> 2] | 0) + 16 | 0;
    HEAP32[$101 >> 2] = $343;
    HEAP32[$102 >> 2] = $344;
    HEAP32[$103 >> 2] = $348;
    $350 = HEAP32[$102 >> 2] | 0;
    $351 = HEAP32[$103 >> 2] | 0;
    HEAP32[$98 >> 2] = HEAP32[$101 >> 2];
    HEAP32[$99 >> 2] = $350;
    HEAP32[$100 >> 2] = $351;
    if (!(__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$99 >> 2] | 0, HEAP32[$100 >> 2] | 0) | 0)) {
     HEAP32[$116 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISN_EERKT_($130, HEAP32[$118 >> 2] | 0, HEAP32[$120 >> 2] | 0) | 0;
     $376 = HEAP32[$116 >> 2] | 0;
     STACKTOP = sp;
     return $376 | 0;
    }
   }
   HEAP32[$104 >> 2] = $1;
   if (!(HEAP32[(HEAP32[HEAP32[$104 >> 2] >> 2] | 0) + 4 >> 2] | 0)) {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
    HEAP32[$116 >> 2] = (HEAP32[$1 >> 2] | 0) + 4;
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   } else {
    HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$126 >> 2];
    HEAP32[$116 >> 2] = HEAP32[HEAP32[$118 >> 2] >> 2];
    $376 = HEAP32[$116 >> 2] | 0;
    STACKTOP = sp;
    return $376 | 0;
   }
  }
 };
 HEAP32[$123 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$26 >> 2] = $130;
 HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
 $165 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
 HEAP32[$22 >> 2] = $25;
 HEAP32[$23 >> 2] = $165;
 HEAP32[HEAP32[$22 >> 2] >> 2] = HEAP32[$23 >> 2];
 HEAP32[$125 >> 2] = HEAP32[$25 >> 2];
 HEAP8[$6 >> 0] = HEAP8[$125 >> 0] | 0;
 HEAP8[$6 + 1 >> 0] = HEAP8[$125 + 1 >> 0] | 0;
 HEAP8[$6 + 2 >> 0] = HEAP8[$125 + 2 >> 0] | 0;
 HEAP8[$6 + 3 >> 0] = HEAP8[$125 + 3 >> 0] | 0;
 HEAP32[$5 >> 2] = $124;
 HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$6 >> 2];
 HEAP32[$7 >> 2] = $123;
 HEAP32[$8 >> 2] = $124;
 if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) != (HEAP32[HEAP32[$8 >> 2] >> 2] | 0)) {
  HEAP32[$11 >> 2] = $130;
  HEAP32[$10 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  $179 = HEAP32[$9 >> 2] | 0;
  HEAP32[$19 >> 2] = $123;
  $180 = HEAP32[$19 >> 2] | 0;
  HEAP32[$17 >> 2] = HEAP32[$180 >> 2];
  $185 = HEAP32[$17 >> 2] | 0;
  if (HEAP32[HEAP32[$17 >> 2] >> 2] | 0) {
   HEAP32[$15 >> 2] = HEAP32[$185 >> 2];
   while (1) {
    $191 = HEAP32[$15 >> 2] | 0;
    if (!(HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] | 0)) break;
    HEAP32[$15 >> 2] = HEAP32[$191 + 4 >> 2];
   }
   HEAP32[$16 >> 2] = $191;
  } else {
   HEAP32[$18 >> 2] = $185;
   while (1) {
    HEAP32[$14 >> 2] = HEAP32[$18 >> 2];
    $201 = HEAP32[$18 >> 2] | 0;
    if ((HEAP32[$14 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] >> 2] | 0)) break;
    HEAP32[$12 >> 2] = $201;
    HEAP32[$18 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$13 >> 2] = $201;
   HEAP32[$16 >> 2] = HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$180 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$21 >> 2] = $180;
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  $212 = (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) + 16 | 0;
  $213 = HEAP32[$120 >> 2] | 0;
  HEAP32[$36 >> 2] = $179;
  HEAP32[$37 >> 2] = $212;
  HEAP32[$38 >> 2] = $213;
  $215 = HEAP32[$37 >> 2] | 0;
  $216 = HEAP32[$38 >> 2] | 0;
  HEAP32[$33 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = $215;
  HEAP32[$35 >> 2] = $216;
  if (!(__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$34 >> 2] | 0, HEAP32[$35 >> 2] | 0) | 0)) {
   HEAP32[$116 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISN_EERKT_($130, HEAP32[$118 >> 2] | 0, HEAP32[$120 >> 2] | 0) | 0;
   $376 = HEAP32[$116 >> 2] | 0;
   STACKTOP = sp;
   return $376 | 0;
  }
 }
 if (!(HEAP32[HEAP32[$1 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$1 >> 2];
  HEAP32[$116 >> 2] = HEAP32[HEAP32[$118 >> 2] >> 2];
  $376 = HEAP32[$116 >> 2] | 0;
  STACKTOP = sp;
  return $376 | 0;
 } else {
  HEAP32[HEAP32[$118 >> 2] >> 2] = HEAP32[$123 >> 2];
  HEAP32[$116 >> 2] = (HEAP32[$123 >> 2] | 0) + 4;
  $376 = HEAP32[$116 >> 2] | 0;
  STACKTOP = sp;
  return $376 | 0;
 }
 return 0;
}

function _inflate_fast($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $113 = 0, $12 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $170 = 0, $18 = 0, $180 = 0, $19 = 0, $194 = 0, $2 = 0, $20 = 0, $21 = 0, $217 = 0, $22 = 0, $23 = 0, $230 = 0, $24 = 0, $289 = 0, $291 = 0, $292 = 0, $295 = 0, $3 = 0, $320 = 0, $322 = 0, $323 = 0, $326 = 0, $336 = 0, $338 = 0, $339 = 0, $342 = 0, $359 = 0, $361 = 0, $362 = 0, $365 = 0, $373 = 0, $375 = 0, $376 = 0, $378 = 0, $380 = 0, $381 = 0, $383 = 0, $385 = 0, $386 = 0, $392 = 0, $394 = 0, $395 = 0, $399 = 0, $4 = 0, $401 = 0, $402 = 0, $408 = 0, $410 = 0, $411 = 0, $413 = 0, $415 = 0, $416 = 0, $418 = 0, $420 = 0, $421 = 0, $429 = 0, $431 = 0, $432 = 0, $436 = 0, $438 = 0, $439 = 0, $454 = 0, $472 = 0, $5 = 0, $525 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $6 = 0, $7 = 0, $8 = 0, $89 = 0, $9 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp + 84 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 88 | 0;
 $21 = sp + 12 | 0;
 $22 = sp + 8 | 0;
 $23 = sp + 4 | 0;
 $24 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2];
 HEAP32[$5 >> 2] = HEAP32[HEAP32[$2 >> 2] >> 2];
 HEAP32[$6 >> 2] = (HEAP32[$5 >> 2] | 0) + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) - 5);
 HEAP32[$7 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2];
 HEAP32[$8 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - ((HEAP32[$3 >> 2] | 0) - (HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)));
 HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) + ((HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0) - 257);
 HEAP32[$10 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 44 >> 2];
 HEAP32[$11 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2];
 HEAP32[$12 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2];
 HEAP32[$13 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 56 >> 2];
 HEAP32[$14 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 60 >> 2];
 HEAP32[$15 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2];
 HEAP32[$16 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 80 >> 2];
 HEAP32[$17 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2];
 HEAP32[$18 >> 2] = (1 << HEAP32[(HEAP32[$4 >> 2] | 0) + 88 >> 2]) - 1;
 HEAP32[$19 >> 2] = (1 << HEAP32[(HEAP32[$4 >> 2] | 0) + 92 >> 2]) - 1;
 L1 : do {
  if ((HEAP32[$15 >> 2] | 0) >>> 0 < 15) {
   $89 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $89 + 1;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$89 >> 0] | 0) << HEAP32[$15 >> 2]);
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
   $99 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $99 + 1;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$99 >> 0] | 0) << HEAP32[$15 >> 2]);
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
  }
  $113 = (HEAP32[$16 >> 2] | 0) + ((HEAP32[$14 >> 2] & HEAP32[$18 >> 2]) << 2) | 0;
  HEAP16[$20 >> 1] = HEAP16[$113 >> 1] | 0;
  HEAP16[$20 + 2 >> 1] = HEAP16[$113 + 2 >> 1] | 0;
  while (1) {
   HEAP32[$21 >> 2] = HEAPU8[$20 + 1 >> 0];
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >>> (HEAP32[$21 >> 2] | 0);
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
   HEAP32[$21 >> 2] = HEAPU8[$20 >> 0];
   if (!(HEAP32[$21 >> 2] | 0)) {
    label = 6;
    break;
   }
   if (HEAP32[$21 >> 2] & 16 | 0) {
    label = 8;
    break;
   }
   if (HEAP32[$21 >> 2] & 64 | 0) {
    label = 56;
    break L1;
   }
   $472 = (HEAP32[$16 >> 2] | 0) + ((HEAPU16[$20 + 2 >> 1] | 0) + (HEAP32[$14 >> 2] & (1 << HEAP32[$21 >> 2]) - 1) << 2) | 0;
   HEAP16[$20 >> 1] = HEAP16[$472 >> 1] | 0;
   HEAP16[$20 + 2 >> 1] = HEAP16[$472 + 2 >> 1] | 0;
  }
  do if ((label | 0) == 6) {
   label = 0;
   $129 = HEAP16[$20 + 2 >> 1] & 255;
   $130 = HEAP32[$7 >> 2] | 0;
   HEAP32[$7 >> 2] = $130 + 1;
   HEAP8[$130 >> 0] = $129;
  } else if ((label | 0) == 8) {
   label = 0;
   HEAP32[$22 >> 2] = HEAPU16[$20 + 2 >> 1];
   HEAP32[$21 >> 2] = HEAP32[$21 >> 2] & 15;
   if (HEAP32[$21 >> 2] | 0) {
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) {
     $145 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $145 + 1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$145 >> 0] | 0) << HEAP32[$15 >> 2]);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    }
    HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + (HEAP32[$14 >> 2] & (1 << HEAP32[$21 >> 2]) - 1);
    HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >>> (HEAP32[$21 >> 2] | 0);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
   }
   if ((HEAP32[$15 >> 2] | 0) >>> 0 < 15) {
    $170 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $170 + 1;
    HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$170 >> 0] | 0) << HEAP32[$15 >> 2]);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    $180 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $180 + 1;
    HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$180 >> 0] | 0) << HEAP32[$15 >> 2]);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
   }
   $194 = (HEAP32[$17 >> 2] | 0) + ((HEAP32[$14 >> 2] & HEAP32[$19 >> 2]) << 2) | 0;
   HEAP16[$20 >> 1] = HEAP16[$194 >> 1] | 0;
   HEAP16[$20 + 2 >> 1] = HEAP16[$194 + 2 >> 1] | 0;
   while (1) {
    HEAP32[$21 >> 2] = HEAPU8[$20 + 1 >> 0];
    HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >>> (HEAP32[$21 >> 2] | 0);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
    HEAP32[$21 >> 2] = HEAPU8[$20 >> 0];
    if (HEAP32[$21 >> 2] & 16 | 0) break;
    if (HEAP32[$21 >> 2] & 64 | 0) {
     label = 53;
     break L1;
    }
    $454 = (HEAP32[$17 >> 2] | 0) + ((HEAPU16[$20 + 2 >> 1] | 0) + (HEAP32[$14 >> 2] & (1 << HEAP32[$21 >> 2]) - 1) << 2) | 0;
    HEAP16[$20 >> 1] = HEAP16[$454 >> 1] | 0;
    HEAP16[$20 + 2 >> 1] = HEAP16[$454 + 2 >> 1] | 0;
   }
   HEAP32[$23 >> 2] = HEAPU16[$20 + 2 >> 1];
   HEAP32[$21 >> 2] = HEAP32[$21 >> 2] & 15;
   if ((HEAP32[$15 >> 2] | 0) >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) {
    $217 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $217 + 1;
    HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$217 >> 0] | 0) << HEAP32[$15 >> 2]);
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    if ((HEAP32[$15 >> 2] | 0) >>> 0 < (HEAP32[$21 >> 2] | 0) >>> 0) {
     $230 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $230 + 1;
     HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + ((HEAPU8[$230 >> 0] | 0) << HEAP32[$15 >> 2]);
     HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
    }
   }
   HEAP32[$23 >> 2] = (HEAP32[$23 >> 2] | 0) + (HEAP32[$14 >> 2] & (1 << HEAP32[$21 >> 2]) - 1);
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) >>> (HEAP32[$21 >> 2] | 0);
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
   HEAP32[$21 >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
   if ((HEAP32[$23 >> 2] | 0) >>> 0 <= (HEAP32[$21 >> 2] | 0) >>> 0) {
    HEAP32[$24 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[$23 >> 2] | 0));
    do {
     $408 = HEAP32[$24 >> 2] | 0;
     HEAP32[$24 >> 2] = $408 + 1;
     $410 = HEAP8[$408 >> 0] | 0;
     $411 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $411 + 1;
     HEAP8[$411 >> 0] = $410;
     $413 = HEAP32[$24 >> 2] | 0;
     HEAP32[$24 >> 2] = $413 + 1;
     $415 = HEAP8[$413 >> 0] | 0;
     $416 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $416 + 1;
     HEAP8[$416 >> 0] = $415;
     $418 = HEAP32[$24 >> 2] | 0;
     HEAP32[$24 >> 2] = $418 + 1;
     $420 = HEAP8[$418 >> 0] | 0;
     $421 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $421 + 1;
     HEAP8[$421 >> 0] = $420;
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - 3;
    } while ((HEAP32[$22 >> 2] | 0) >>> 0 > 2);
    if (!(HEAP32[$22 >> 2] | 0)) break;
    $429 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $429 + 1;
    $431 = HEAP8[$429 >> 0] | 0;
    $432 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $432 + 1;
    HEAP8[$432 >> 0] = $431;
    if ((HEAP32[$22 >> 2] | 0) >>> 0 <= 1) break;
    $436 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $436 + 1;
    $438 = HEAP8[$436 >> 0] | 0;
    $439 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $439 + 1;
    HEAP8[$439 >> 0] = $438;
    break;
   }
   HEAP32[$21 >> 2] = (HEAP32[$23 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
   if ((HEAP32[$21 >> 2] | 0) >>> 0 > (HEAP32[$11 >> 2] | 0) >>> 0) if (HEAP32[(HEAP32[$4 >> 2] | 0) + 7108 >> 2] | 0) {
    label = 22;
    break L1;
   }
   HEAP32[$24 >> 2] = HEAP32[$13 >> 2];
   do if (!(HEAP32[$12 >> 2] | 0)) {
    HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) - (HEAP32[$21 >> 2] | 0));
    if ((HEAP32[$21 >> 2] | 0) >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) {
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
     do {
      $289 = HEAP32[$24 >> 2] | 0;
      HEAP32[$24 >> 2] = $289 + 1;
      $291 = HEAP8[$289 >> 0] | 0;
      $292 = HEAP32[$7 >> 2] | 0;
      HEAP32[$7 >> 2] = $292 + 1;
      HEAP8[$292 >> 0] = $291;
      $295 = (HEAP32[$21 >> 2] | 0) + -1 | 0;
      HEAP32[$21 >> 2] = $295;
     } while (($295 | 0) != 0);
     HEAP32[$24 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[$23 >> 2] | 0));
    }
   } else {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= (HEAP32[$21 >> 2] | 0) >>> 0) {
     HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + ((HEAP32[$12 >> 2] | 0) - (HEAP32[$21 >> 2] | 0));
     if ((HEAP32[$21 >> 2] | 0) >>> 0 >= (HEAP32[$22 >> 2] | 0) >>> 0) break;
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
     do {
      $359 = HEAP32[$24 >> 2] | 0;
      HEAP32[$24 >> 2] = $359 + 1;
      $361 = HEAP8[$359 >> 0] | 0;
      $362 = HEAP32[$7 >> 2] | 0;
      HEAP32[$7 >> 2] = $362 + 1;
      HEAP8[$362 >> 0] = $361;
      $365 = (HEAP32[$21 >> 2] | 0) + -1 | 0;
      HEAP32[$21 >> 2] = $365;
     } while (($365 | 0) != 0);
     HEAP32[$24 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[$23 >> 2] | 0));
     break;
    }
    HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + (HEAP32[$12 >> 2] | 0) - (HEAP32[$21 >> 2] | 0));
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) - (HEAP32[$12 >> 2] | 0);
    if ((HEAP32[$21 >> 2] | 0) >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) {
     HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
     do {
      $320 = HEAP32[$24 >> 2] | 0;
      HEAP32[$24 >> 2] = $320 + 1;
      $322 = HEAP8[$320 >> 0] | 0;
      $323 = HEAP32[$7 >> 2] | 0;
      HEAP32[$7 >> 2] = $323 + 1;
      HEAP8[$323 >> 0] = $322;
      $326 = (HEAP32[$21 >> 2] | 0) + -1 | 0;
      HEAP32[$21 >> 2] = $326;
     } while (($326 | 0) != 0);
     HEAP32[$24 >> 2] = HEAP32[$13 >> 2];
     if ((HEAP32[$12 >> 2] | 0) >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) {
      HEAP32[$21 >> 2] = HEAP32[$12 >> 2];
      HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
      do {
       $336 = HEAP32[$24 >> 2] | 0;
       HEAP32[$24 >> 2] = $336 + 1;
       $338 = HEAP8[$336 >> 0] | 0;
       $339 = HEAP32[$7 >> 2] | 0;
       HEAP32[$7 >> 2] = $339 + 1;
       HEAP8[$339 >> 0] = $338;
       $342 = (HEAP32[$21 >> 2] | 0) + -1 | 0;
       HEAP32[$21 >> 2] = $342;
      } while (($342 | 0) != 0);
      HEAP32[$24 >> 2] = (HEAP32[$7 >> 2] | 0) + (0 - (HEAP32[$23 >> 2] | 0));
     }
    }
   } while (0);
   while (1) {
    if ((HEAP32[$22 >> 2] | 0) >>> 0 <= 2) break;
    $373 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $373 + 1;
    $375 = HEAP8[$373 >> 0] | 0;
    $376 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $376 + 1;
    HEAP8[$376 >> 0] = $375;
    $378 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $378 + 1;
    $380 = HEAP8[$378 >> 0] | 0;
    $381 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $381 + 1;
    HEAP8[$381 >> 0] = $380;
    $383 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $383 + 1;
    $385 = HEAP8[$383 >> 0] | 0;
    $386 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $386 + 1;
    HEAP8[$386 >> 0] = $385;
    HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) - 3;
   }
   if (HEAP32[$22 >> 2] | 0) {
    $392 = HEAP32[$24 >> 2] | 0;
    HEAP32[$24 >> 2] = $392 + 1;
    $394 = HEAP8[$392 >> 0] | 0;
    $395 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $395 + 1;
    HEAP8[$395 >> 0] = $394;
    if ((HEAP32[$22 >> 2] | 0) >>> 0 > 1) {
     $399 = HEAP32[$24 >> 2] | 0;
     HEAP32[$24 >> 2] = $399 + 1;
     $401 = HEAP8[$399 >> 0] | 0;
     $402 = HEAP32[$7 >> 2] | 0;
     HEAP32[$7 >> 2] = $402 + 1;
     HEAP8[$402 >> 0] = $401;
    }
   }
  } while (0);
  if ((HEAP32[$5 >> 2] | 0) >>> 0 >= (HEAP32[$6 >> 2] | 0) >>> 0) break;
 } while ((HEAP32[$7 >> 2] | 0) >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0);
 do if ((label | 0) == 22) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = 50697;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 16209;
 } else if ((label | 0) == 53) {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = 50727;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 16209;
 } else if ((label | 0) == 56) if (HEAP32[$21 >> 2] & 32 | 0) {
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 16191;
  break;
 } else {
  HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = 50749;
  HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] = 16209;
  break;
 } while (0);
 HEAP32[$22 >> 2] = (HEAP32[$15 >> 2] | 0) >>> 3;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (0 - (HEAP32[$22 >> 2] | 0));
 HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) - (HEAP32[$22 >> 2] << 3);
 HEAP32[$14 >> 2] = HEAP32[$14 >> 2] & (1 << HEAP32[$15 >> 2]) - 1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$5 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] = HEAP32[$7 >> 2];
 if ((HEAP32[$5 >> 2] | 0) >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $525 = 5 + ((HEAP32[$6 >> 2] | 0) - (HEAP32[$5 >> 2] | 0)) | 0; else $525 = 5 - ((HEAP32[$5 >> 2] | 0) - (HEAP32[$6 >> 2] | 0)) | 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = $525;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
  $543 = 257 + ((HEAP32[$9 >> 2] | 0) - (HEAP32[$7 >> 2] | 0)) | 0;
  $541 = HEAP32[$2 >> 2] | 0;
  $542 = $541 + 16 | 0;
  HEAP32[$542 >> 2] = $543;
  $544 = HEAP32[$14 >> 2] | 0;
  $545 = HEAP32[$4 >> 2] | 0;
  $546 = $545 + 60 | 0;
  HEAP32[$546 >> 2] = $544;
  $547 = HEAP32[$15 >> 2] | 0;
  $548 = HEAP32[$4 >> 2] | 0;
  $549 = $548 + 64 | 0;
  HEAP32[$549 >> 2] = $547;
  STACKTOP = sp;
  return;
 } else {
  $543 = 257 - ((HEAP32[$7 >> 2] | 0) - (HEAP32[$9 >> 2] | 0)) | 0;
  $541 = HEAP32[$2 >> 2] | 0;
  $542 = $541 + 16 | 0;
  HEAP32[$542 >> 2] = $543;
  $544 = HEAP32[$14 >> 2] | 0;
  $545 = HEAP32[$4 >> 2] | 0;
  $546 = $545 + 60 | 0;
  HEAP32[$546 >> 2] = $544;
  $547 = HEAP32[$15 >> 2] | 0;
  $548 = HEAP32[$4 >> 2] | 0;
  $549 = $548 + 64 | 0;
  HEAP32[$549 >> 2] = $547;
  STACKTOP = sp;
  return;
 }
}

function __ZNK3zim10Fileheader12sanity_checkEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $103 = 0, $11 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $122 = 0, $125 = 0, $127 = 0, $13 = 0, $131 = 0, $136 = 0, $138 = 0, $14 = 0, $143 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $168 = 0, $17 = 0, $173 = 0, $175 = 0, $18 = 0, $180 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $205 = 0, $21 = 0, $210 = 0, $212 = 0, $217 = 0, $22 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $23 = 0, $230 = 0, $231 = 0, $233 = 0, $236 = 0, $238 = 0, $24 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $251 = 0, $253 = 0, $254 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $265 = 0, $27 = 0, $275 = 0, $28 = 0, $280 = 0, $282 = 0, $287 = 0, $29 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $298 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $303 = 0, $306 = 0, $308 = 0, $31 = 0, $311 = 0, $312 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $84 = 0, $87 = 0, $89 = 0, $9 = 0, $93 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $1 = sp + 260 | 0;
 $2 = sp + 256 | 0;
 $3 = sp + 252 | 0;
 $4 = sp + 248 | 0;
 $5 = sp + 244 | 0;
 $6 = sp + 240 | 0;
 $7 = sp + 236 | 0;
 $8 = sp + 232 | 0;
 $9 = sp + 228 | 0;
 $10 = sp + 224 | 0;
 $11 = sp + 220 | 0;
 $12 = sp + 216 | 0;
 $13 = sp + 212 | 0;
 $14 = sp + 208 | 0;
 $15 = sp + 204 | 0;
 $16 = sp + 200 | 0;
 $17 = sp + 196 | 0;
 $18 = sp + 192 | 0;
 $19 = sp + 188 | 0;
 $20 = sp + 184 | 0;
 $21 = sp + 180 | 0;
 $22 = sp + 176 | 0;
 $23 = sp + 172 | 0;
 $24 = sp + 168 | 0;
 $25 = sp + 164 | 0;
 $26 = sp + 160 | 0;
 $27 = sp + 156 | 0;
 $28 = sp + 152 | 0;
 $29 = sp + 148 | 0;
 $30 = sp + 144 | 0;
 $31 = sp + 140 | 0;
 $32 = sp + 136 | 0;
 $33 = sp + 132 | 0;
 $34 = sp + 128 | 0;
 $35 = sp + 124 | 0;
 $36 = sp + 120 | 0;
 $38 = sp + 112 | 0;
 $39 = sp + 108 | 0;
 $40 = sp + 104 | 0;
 $41 = sp + 100 | 0;
 $42 = sp + 96 | 0;
 $43 = sp + 92 | 0;
 $44 = sp + 80 | 0;
 $45 = sp + 76 | 0;
 $46 = sp + 72 | 0;
 $47 = sp + 270 | 0;
 $48 = sp + 60 | 0;
 $49 = sp + 269 | 0;
 $50 = sp + 48 | 0;
 $51 = sp + 268 | 0;
 $52 = sp + 36 | 0;
 $53 = sp + 267 | 0;
 $54 = sp + 24 | 0;
 $55 = sp + 266 | 0;
 $56 = sp + 12 | 0;
 $57 = sp + 265 | 0;
 $58 = sp;
 $59 = sp + 264 | 0;
 HEAP32[$43 >> 2] = $0;
 $60 = HEAP32[$43 >> 2] | 0;
 if ((((HEAP32[$60 + 20 >> 2] | 0) != 0 ^ 1 ^ 1) & 1 | 0) != (((HEAP32[$60 + 48 >> 2] | 0) != 0 ^ 1 ^ 1) & 1 | 0)) {
  $74 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$47 >> 0] = 1;
  HEAP32[$41 >> 2] = $44;
  HEAP32[$42 >> 2] = 51596;
  $75 = HEAP32[$41 >> 2] | 0;
  HEAP32[$40 >> 2] = $75;
  $76 = HEAP32[$40 >> 2] | 0;
  HEAP32[$39 >> 2] = $76;
  $77 = HEAP32[$39 >> 2] | 0;
  HEAP32[$77 >> 2] = 0;
  HEAP32[$77 + 4 >> 2] = 0;
  HEAP32[$77 + 8 >> 2] = 0;
  HEAP32[$38 >> 2] = $76;
  HEAP32[sp + 116 >> 2] = HEAP32[$38 >> 2];
  $79 = HEAP32[$42 >> 2] | 0;
  $81 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$42 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $75 | 0, $79 | 0, $81 | 0);
  $82 = __THREW__;
  __THREW__ = 0;
  if ($82 & 1) {
   $87 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $87;
   HEAP32[$46 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $74 | 0, $44 | 0);
   $84 = __THREW__;
   __THREW__ = 0;
   if (!($84 & 1)) {
    HEAP8[$47 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $74 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $89 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $89;
   HEAP32[$46 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($44);
  }
  if (!(HEAP8[$47 >> 0] & 1)) {
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
  ___cxa_free_exception($74 | 0);
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 $93 = $60 + 40 | 0;
 if ((HEAP32[$93 >> 2] | 0) != 80 | (HEAP32[$93 + 4 >> 2] | 0) != 0) {
  $103 = $60 + 40 | 0;
  if ((HEAP32[$103 >> 2] | 0) != 72 | (HEAP32[$103 + 4 >> 2] | 0) != 0) {
   $112 = ___cxa_allocate_exception(8) | 0;
   HEAP8[$49 >> 0] = 1;
   HEAP32[$35 >> 2] = $48;
   HEAP32[$36 >> 2] = 51622;
   $113 = HEAP32[$35 >> 2] | 0;
   HEAP32[$34 >> 2] = $113;
   $114 = HEAP32[$34 >> 2] | 0;
   HEAP32[$33 >> 2] = $114;
   $115 = HEAP32[$33 >> 2] | 0;
   HEAP32[$115 >> 2] = 0;
   HEAP32[$115 + 4 >> 2] = 0;
   HEAP32[$115 + 8 >> 2] = 0;
   HEAP32[$32 >> 2] = $114;
   HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
   $117 = HEAP32[$36 >> 2] | 0;
   $119 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$36 >> 2] | 0) | 0;
   __THREW__ = 0;
   invoke_viii(8, $113 | 0, $117 | 0, $119 | 0);
   $120 = __THREW__;
   __THREW__ = 0;
   if ($120 & 1) {
    $125 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$45 >> 2] = $125;
    HEAP32[$46 >> 2] = tempRet0;
   } else {
    __THREW__ = 0;
    invoke_vii(58, $112 | 0, $48 | 0);
    $122 = __THREW__;
    __THREW__ = 0;
    if (!($122 & 1)) {
     HEAP8[$49 >> 0] = 0;
     __THREW__ = 0;
     invoke_viii(11, $112 | 0, 41024, 53);
     __THREW__ = 0;
    }
    $127 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$45 >> 2] = $127;
    HEAP32[$46 >> 2] = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($48);
   }
   if (!(HEAP8[$49 >> 0] & 1)) {
    $311 = HEAP32[$45 >> 2] | 0;
    $312 = HEAP32[$46 >> 2] | 0;
    ___resumeException($311 | 0);
   }
   ___cxa_free_exception($112 | 0);
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
 }
 $131 = $60 + 32 | 0;
 $136 = HEAP32[$131 + 4 >> 2] | 0;
 $138 = $60 + 40 | 0;
 $143 = HEAP32[$138 + 4 >> 2] | 0;
 if ($136 >>> 0 < $143 >>> 0 | (($136 | 0) == ($143 | 0) ? (HEAP32[$131 >> 2] | 0) >>> 0 < (HEAP32[$138 >> 2] | 0) >>> 0 : 0)) {
  $149 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$51 >> 0] = 1;
  HEAP32[$29 >> 2] = $50;
  HEAP32[$30 >> 2] = 51646;
  $150 = HEAP32[$29 >> 2] | 0;
  HEAP32[$28 >> 2] = $150;
  $151 = HEAP32[$28 >> 2] | 0;
  HEAP32[$27 >> 2] = $151;
  $152 = HEAP32[$27 >> 2] | 0;
  HEAP32[$152 >> 2] = 0;
  HEAP32[$152 + 4 >> 2] = 0;
  HEAP32[$152 + 8 >> 2] = 0;
  HEAP32[$26 >> 2] = $151;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  $154 = HEAP32[$30 >> 2] | 0;
  $156 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$30 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $150 | 0, $154 | 0, $156 | 0);
  $157 = __THREW__;
  __THREW__ = 0;
  if ($157 & 1) {
   $162 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $162;
   HEAP32[$46 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $149 | 0, $50 | 0);
   $159 = __THREW__;
   __THREW__ = 0;
   if (!($159 & 1)) {
    HEAP8[$51 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $149 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $164 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $164;
   HEAP32[$46 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($50);
  }
  if (!(HEAP8[$51 >> 0] & 1)) {
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
  ___cxa_free_exception($149 | 0);
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 $168 = $60 + 24 | 0;
 $173 = HEAP32[$168 + 4 >> 2] | 0;
 $175 = $60 + 40 | 0;
 $180 = HEAP32[$175 + 4 >> 2] | 0;
 if ($173 >>> 0 < $180 >>> 0 | (($173 | 0) == ($180 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < (HEAP32[$175 >> 2] | 0) >>> 0 : 0)) {
  $186 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$53 >> 0] = 1;
  HEAP32[$23 >> 2] = $52;
  HEAP32[$24 >> 2] = 51679;
  $187 = HEAP32[$23 >> 2] | 0;
  HEAP32[$22 >> 2] = $187;
  $188 = HEAP32[$22 >> 2] | 0;
  HEAP32[$21 >> 2] = $188;
  $189 = HEAP32[$21 >> 2] | 0;
  HEAP32[$189 >> 2] = 0;
  HEAP32[$189 + 4 >> 2] = 0;
  HEAP32[$189 + 8 >> 2] = 0;
  HEAP32[$20 >> 2] = $188;
  HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
  $191 = HEAP32[$24 >> 2] | 0;
  $193 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$24 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $187 | 0, $191 | 0, $193 | 0);
  $194 = __THREW__;
  __THREW__ = 0;
  if ($194 & 1) {
   $199 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $199;
   HEAP32[$46 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $186 | 0, $52 | 0);
   $196 = __THREW__;
   __THREW__ = 0;
   if (!($196 & 1)) {
    HEAP8[$53 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $186 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $201 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $201;
   HEAP32[$46 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($52);
  }
  if (!(HEAP8[$53 >> 0] & 1)) {
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
  ___cxa_free_exception($186 | 0);
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 $205 = $60 + 56 | 0;
 $210 = HEAP32[$205 + 4 >> 2] | 0;
 $212 = $60 + 40 | 0;
 $217 = HEAP32[$212 + 4 >> 2] | 0;
 if ($210 >>> 0 < $217 >>> 0 | (($210 | 0) == ($217 | 0) ? (HEAP32[$205 >> 2] | 0) >>> 0 < (HEAP32[$212 >> 2] | 0) >>> 0 : 0)) {
  $223 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$55 >> 0] = 1;
  HEAP32[$17 >> 2] = $54;
  HEAP32[$18 >> 2] = 51714;
  $224 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $224;
  $225 = HEAP32[$16 >> 2] | 0;
  HEAP32[$15 >> 2] = $225;
  $226 = HEAP32[$15 >> 2] | 0;
  HEAP32[$226 >> 2] = 0;
  HEAP32[$226 + 4 >> 2] = 0;
  HEAP32[$226 + 8 >> 2] = 0;
  HEAP32[$14 >> 2] = $225;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $228 = HEAP32[$18 >> 2] | 0;
  $230 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$18 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $224 | 0, $228 | 0, $230 | 0);
  $231 = __THREW__;
  __THREW__ = 0;
  if ($231 & 1) {
   $236 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $236;
   HEAP32[$46 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $223 | 0, $54 | 0);
   $233 = __THREW__;
   __THREW__ = 0;
   if (!($233 & 1)) {
    HEAP8[$55 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $223 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $238 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $238;
   HEAP32[$46 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($54);
  }
  if (!(HEAP8[$55 >> 0] & 1)) {
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
  ___cxa_free_exception($223 | 0);
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 if ((HEAP32[$60 + 48 >> 2] | 0) >>> 0 > (HEAP32[$60 + 20 >> 2] | 0) >>> 0) {
  $246 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$57 >> 0] = 1;
  HEAP32[$11 >> 2] = $56;
  HEAP32[$12 >> 2] = 51751;
  $247 = HEAP32[$11 >> 2] | 0;
  HEAP32[$10 >> 2] = $247;
  $248 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $248;
  $249 = HEAP32[$9 >> 2] | 0;
  HEAP32[$249 >> 2] = 0;
  HEAP32[$249 + 4 >> 2] = 0;
  HEAP32[$249 + 8 >> 2] = 0;
  HEAP32[$8 >> 2] = $248;
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  $251 = HEAP32[$12 >> 2] | 0;
  $253 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$12 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $247 | 0, $251 | 0, $253 | 0);
  $254 = __THREW__;
  __THREW__ = 0;
  if ($254 & 1) {
   $259 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $259;
   HEAP32[$46 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $246 | 0, $56 | 0);
   $256 = __THREW__;
   __THREW__ = 0;
   if (!($256 & 1)) {
    HEAP8[$57 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $246 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $261 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$45 >> 2] = $261;
   HEAP32[$46 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
  }
  if (!(HEAP8[$57 >> 0] & 1)) {
   $311 = HEAP32[$45 >> 2] | 0;
   $312 = HEAP32[$46 >> 2] | 0;
   ___resumeException($311 | 0);
  }
  ___cxa_free_exception($246 | 0);
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 $265 = $60 + 72 | 0;
 if (!((HEAP32[$265 >> 2] | 0) != 0 | (HEAP32[$265 + 4 >> 2] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 $275 = $60 + 72 | 0;
 $280 = HEAP32[$275 + 4 >> 2] | 0;
 $282 = $60 + 40 | 0;
 $287 = HEAP32[$282 + 4 >> 2] | 0;
 if (!($280 >>> 0 < $287 >>> 0 | (($280 | 0) == ($287 | 0) ? (HEAP32[$275 >> 2] | 0) >>> 0 < (HEAP32[$282 >> 2] | 0) >>> 0 : 0))) {
  STACKTOP = sp;
  return;
 }
 $293 = ___cxa_allocate_exception(8) | 0;
 HEAP8[$59 >> 0] = 1;
 HEAP32[$5 >> 2] = $58;
 HEAP32[$6 >> 2] = 51802;
 $294 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $294;
 $295 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $295;
 $296 = HEAP32[$3 >> 2] | 0;
 HEAP32[$296 >> 2] = 0;
 HEAP32[$296 + 4 >> 2] = 0;
 HEAP32[$296 + 8 >> 2] = 0;
 HEAP32[$2 >> 2] = $295;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $298 = HEAP32[$6 >> 2] | 0;
 $300 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$6 >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_viii(8, $294 | 0, $298 | 0, $300 | 0);
 $301 = __THREW__;
 __THREW__ = 0;
 if ($301 & 1) {
  $306 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$45 >> 2] = $306;
  HEAP32[$46 >> 2] = tempRet0;
 } else {
  __THREW__ = 0;
  invoke_vii(58, $293 | 0, $58 | 0);
  $303 = __THREW__;
  __THREW__ = 0;
  if (!($303 & 1)) {
   HEAP8[$59 >> 0] = 0;
   __THREW__ = 0;
   invoke_viii(11, $293 | 0, 41024, 53);
   __THREW__ = 0;
  }
  $308 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$45 >> 2] = $308;
  HEAP32[$46 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($58);
 }
 if (!(HEAP8[$59 >> 0] & 1)) {
  $311 = HEAP32[$45 >> 2] | 0;
  $312 = HEAP32[$46 >> 2] | 0;
  ___resumeException($311 | 0);
 }
 ___cxa_free_exception($293 | 0);
 $311 = HEAP32[$45 >> 2] | 0;
 $312 = HEAP32[$46 >> 2] | 0;
 ___resumeException($311 | 0);
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $149 = 0, $15 = 0, $16 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $191 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $213 = 0, $214 = 0, $217 = 0, $22 = 0, $23 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $251 = 0, $26 = 0, $27 = 0, $271 = 0, $274 = 0, $28 = 0, $29 = 0, $292 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $315 = 0, $32 = 0, $320 = 0, $33 = 0, $338 = 0, $339 = 0, $34 = 0, $342 = 0, $35 = 0, $36 = 0, $360 = 0, $361 = 0, $363 = 0, $37 = 0, $38 = 0, $384 = 0, $385 = 0, $386 = 0, $39 = 0, $399 = 0, $4 = 0, $40 = 0, $406 = 0, $409 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560 | 0;
 $2 = sp + 544 | 0;
 $3 = sp + 540 | 0;
 $4 = sp + 536 | 0;
 $5 = sp + 532 | 0;
 $6 = sp + 528 | 0;
 $7 = sp + 524 | 0;
 $8 = sp + 520 | 0;
 $9 = sp + 516 | 0;
 $10 = sp + 512 | 0;
 $11 = sp + 508 | 0;
 $12 = sp + 504 | 0;
 $13 = sp + 500 | 0;
 $14 = sp + 496 | 0;
 $15 = sp + 492 | 0;
 $16 = sp + 488 | 0;
 $17 = sp + 484 | 0;
 $18 = sp + 480 | 0;
 $19 = sp + 476 | 0;
 $20 = sp + 472 | 0;
 $21 = sp + 468 | 0;
 $22 = sp + 464 | 0;
 $23 = sp + 460 | 0;
 $24 = sp + 456 | 0;
 $25 = sp + 452 | 0;
 $26 = sp + 448 | 0;
 $27 = sp + 444 | 0;
 $28 = sp + 440 | 0;
 $29 = sp + 436 | 0;
 $30 = sp + 432 | 0;
 $31 = sp + 428 | 0;
 $32 = sp + 424 | 0;
 $33 = sp + 420 | 0;
 $34 = sp + 416 | 0;
 $35 = sp + 412 | 0;
 $36 = sp + 408 | 0;
 $37 = sp + 404 | 0;
 $38 = sp + 400 | 0;
 $39 = sp + 396 | 0;
 $40 = sp + 392 | 0;
 $41 = sp + 388 | 0;
 $42 = sp + 384 | 0;
 $43 = sp + 380 | 0;
 $44 = sp + 376 | 0;
 $45 = sp + 372 | 0;
 $46 = sp + 368 | 0;
 $47 = sp + 364 | 0;
 $48 = sp + 360 | 0;
 $49 = sp + 356 | 0;
 $50 = sp + 352 | 0;
 $51 = sp + 348 | 0;
 $52 = sp + 344 | 0;
 $53 = sp + 340 | 0;
 $54 = sp + 336 | 0;
 $55 = sp + 332 | 0;
 $56 = sp + 328 | 0;
 $57 = sp + 324 | 0;
 $58 = sp + 320 | 0;
 $59 = sp + 316 | 0;
 $60 = sp + 312 | 0;
 $61 = sp + 308 | 0;
 $62 = sp + 304 | 0;
 $63 = sp + 300 | 0;
 $64 = sp + 296 | 0;
 $65 = sp + 292 | 0;
 $66 = sp + 288 | 0;
 $67 = sp + 284 | 0;
 $68 = sp + 280 | 0;
 $69 = sp + 276 | 0;
 $70 = sp + 272 | 0;
 $71 = sp + 268 | 0;
 $72 = sp + 264 | 0;
 $73 = sp + 260 | 0;
 $74 = sp + 256 | 0;
 $75 = sp + 252 | 0;
 $76 = sp + 248 | 0;
 $77 = sp + 244 | 0;
 $78 = sp + 240 | 0;
 $79 = sp + 236 | 0;
 $80 = sp + 232 | 0;
 $81 = sp + 228 | 0;
 $82 = sp + 224 | 0;
 $83 = sp + 220 | 0;
 $84 = sp + 216 | 0;
 $85 = sp + 212 | 0;
 $86 = sp + 208 | 0;
 $87 = sp + 204 | 0;
 $88 = sp + 200 | 0;
 $89 = sp + 196 | 0;
 $90 = sp + 192 | 0;
 $91 = sp + 188 | 0;
 $92 = sp + 184 | 0;
 $93 = sp + 180 | 0;
 $94 = sp + 176 | 0;
 $95 = sp + 172 | 0;
 $96 = sp + 168 | 0;
 $97 = sp + 164 | 0;
 $98 = sp + 160 | 0;
 $99 = sp + 156 | 0;
 $100 = sp + 152 | 0;
 $101 = sp + 148 | 0;
 $102 = sp + 144 | 0;
 $103 = sp + 140 | 0;
 $104 = sp + 136 | 0;
 $105 = sp + 132 | 0;
 $106 = sp + 128 | 0;
 $107 = sp + 124 | 0;
 $108 = sp + 120 | 0;
 $109 = sp + 116 | 0;
 $110 = sp + 112 | 0;
 $111 = sp + 108 | 0;
 $112 = sp + 104 | 0;
 $113 = sp + 100 | 0;
 $114 = sp + 96 | 0;
 $115 = sp + 92 | 0;
 $116 = sp + 88 | 0;
 $117 = sp + 84 | 0;
 $118 = sp + 80 | 0;
 $119 = sp + 76 | 0;
 $120 = sp + 72 | 0;
 $121 = sp + 68 | 0;
 $122 = sp + 64 | 0;
 $123 = sp + 60 | 0;
 $124 = sp + 56 | 0;
 $125 = sp + 52 | 0;
 $126 = sp + 48 | 0;
 $127 = sp + 44 | 0;
 $128 = sp + 40 | 0;
 $129 = sp + 36 | 0;
 $130 = sp + 32 | 0;
 $131 = sp + 28 | 0;
 $132 = sp + 24 | 0;
 $133 = sp + 20 | 0;
 $134 = sp + 16 | 0;
 $135 = sp + 12 | 0;
 $136 = sp + 8 | 0;
 $137 = sp + 4 | 0;
 $138 = sp;
 HEAP32[$136 >> 2] = $0;
 HEAP32[$137 >> 2] = $1;
 $139 = HEAP32[$136 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($139 + 32 | 0, HEAP32[$137 >> 2] | 0) | 0;
 HEAP32[$139 + 44 >> 2] = 0;
 if (HEAP32[$139 + 48 >> 2] & 8 | 0) {
  HEAP32[$135 >> 2] = $139 + 32;
  HEAP32[$134 >> 2] = HEAP32[$135 >> 2];
  $149 = HEAP32[$134 >> 2] | 0;
  HEAP32[$133 >> 2] = $149;
  HEAP32[$132 >> 2] = HEAP32[$133 >> 2];
  HEAP32[$131 >> 2] = HEAP32[$132 >> 2];
  if ((HEAPU8[(HEAP32[$131 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$125 >> 2] = $149;
   HEAP32[$124 >> 2] = HEAP32[$125 >> 2];
   HEAP32[$123 >> 2] = HEAP32[$124 >> 2];
   $167 = HEAP32[HEAP32[$123 >> 2] >> 2] | 0;
  } else {
   HEAP32[$130 >> 2] = $149;
   HEAP32[$129 >> 2] = HEAP32[$130 >> 2];
   HEAP32[$128 >> 2] = HEAP32[$129 >> 2];
   HEAP32[$127 >> 2] = HEAP32[$128 >> 2];
   HEAP32[$126 >> 2] = HEAP32[$127 >> 2];
   $167 = HEAP32[$126 >> 2] | 0;
  }
  HEAP32[$122 >> 2] = $167;
  $168 = HEAP32[$122 >> 2] | 0;
  HEAP32[$74 >> 2] = $139 + 32;
  $170 = HEAP32[$74 >> 2] | 0;
  HEAP32[$73 >> 2] = $170;
  HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
  HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
  if ((HEAPU8[(HEAP32[$71 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$67 >> 2] = $170;
   HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
   HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
   $191 = HEAP32[(HEAP32[$65 >> 2] | 0) + 4 >> 2] | 0;
  } else {
   HEAP32[$70 >> 2] = $170;
   HEAP32[$69 >> 2] = HEAP32[$70 >> 2];
   HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
   $191 = HEAPU8[(HEAP32[$68 >> 2] | 0) + 11 >> 0] | 0;
  }
  HEAP32[$139 + 44 >> 2] = $168 + $191;
  HEAP32[$15 >> 2] = $139 + 32;
  HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
  $195 = HEAP32[$14 >> 2] | 0;
  HEAP32[$13 >> 2] = $195;
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  if ((HEAPU8[(HEAP32[$11 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$5 >> 2] = $195;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
   $213 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
  } else {
   HEAP32[$10 >> 2] = $195;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   $213 = HEAP32[$6 >> 2] | 0;
  }
  HEAP32[$2 >> 2] = $213;
  $214 = HEAP32[$2 >> 2] | 0;
  HEAP32[$29 >> 2] = $139 + 32;
  HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
  $217 = HEAP32[$28 >> 2] | 0;
  HEAP32[$27 >> 2] = $217;
  HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  if ((HEAPU8[(HEAP32[$25 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$19 >> 2] = $217;
   HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
   $235 = HEAP32[HEAP32[$17 >> 2] >> 2] | 0;
  } else {
   HEAP32[$24 >> 2] = $217;
   HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
   HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
   $235 = HEAP32[$20 >> 2] | 0;
  }
  HEAP32[$16 >> 2] = $235;
  $236 = HEAP32[$16 >> 2] | 0;
  $238 = HEAP32[$139 + 44 >> 2] | 0;
  HEAP32[$30 >> 2] = $139;
  HEAP32[$31 >> 2] = $214;
  HEAP32[$32 >> 2] = $236;
  HEAP32[$33 >> 2] = $238;
  $239 = HEAP32[$30 >> 2] | 0;
  HEAP32[$239 + 8 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$239 + 12 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$239 + 16 >> 2] = HEAP32[$33 >> 2];
 }
 if (!(HEAP32[$139 + 48 >> 2] & 16)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$43 >> 2] = $139 + 32;
 $251 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $251;
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 if ((HEAPU8[(HEAP32[$40 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$36 >> 2] = $251;
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
  $271 = HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$39 >> 2] = $251;
  HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
  HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
  $271 = HEAPU8[(HEAP32[$37 >> 2] | 0) + 11 >> 0] | 0;
 }
 HEAP32[$138 >> 2] = $271;
 HEAP32[$57 >> 2] = $139 + 32;
 HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
 $274 = HEAP32[$56 >> 2] | 0;
 HEAP32[$55 >> 2] = $274;
 HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
 if ((HEAPU8[(HEAP32[$53 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$47 >> 2] = $274;
  HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
  HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
  $292 = HEAP32[HEAP32[$45 >> 2] >> 2] | 0;
 } else {
  HEAP32[$52 >> 2] = $274;
  HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
  HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
  HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
  $292 = HEAP32[$48 >> 2] | 0;
 }
 HEAP32[$44 >> 2] = $292;
 HEAP32[$139 + 44 >> 2] = (HEAP32[$44 >> 2] | 0) + (HEAP32[$138 >> 2] | 0);
 HEAP32[$64 >> 2] = $139 + 32;
 $299 = HEAP32[$64 >> 2] | 0;
 HEAP32[$63 >> 2] = $299;
 HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
 HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
 if ((HEAPU8[(HEAP32[$61 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$60 >> 2] = $299;
  HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
  HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
  $315 = HEAP32[(HEAP32[$58 >> 2] | 0) + 8 >> 2] & 2147483647;
 } else $315 = 11;
 HEAP32[$75 >> 2] = $139 + 32;
 HEAP32[$76 >> 2] = $315 - 1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc(HEAP32[$75 >> 2] | 0, HEAP32[$76 >> 2] | 0, 0);
 HEAP32[$90 >> 2] = $139 + 32;
 HEAP32[$89 >> 2] = HEAP32[$90 >> 2];
 $320 = HEAP32[$89 >> 2] | 0;
 HEAP32[$88 >> 2] = $320;
 HEAP32[$87 >> 2] = HEAP32[$88 >> 2];
 HEAP32[$86 >> 2] = HEAP32[$87 >> 2];
 if ((HEAPU8[(HEAP32[$86 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$80 >> 2] = $320;
  HEAP32[$79 >> 2] = HEAP32[$80 >> 2];
  HEAP32[$78 >> 2] = HEAP32[$79 >> 2];
  $338 = HEAP32[HEAP32[$78 >> 2] >> 2] | 0;
 } else {
  HEAP32[$85 >> 2] = $320;
  HEAP32[$84 >> 2] = HEAP32[$85 >> 2];
  HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
  HEAP32[$82 >> 2] = HEAP32[$83 >> 2];
  HEAP32[$81 >> 2] = HEAP32[$82 >> 2];
  $338 = HEAP32[$81 >> 2] | 0;
 }
 HEAP32[$77 >> 2] = $338;
 $339 = HEAP32[$77 >> 2] | 0;
 HEAP32[$104 >> 2] = $139 + 32;
 HEAP32[$103 >> 2] = HEAP32[$104 >> 2];
 $342 = HEAP32[$103 >> 2] | 0;
 HEAP32[$102 >> 2] = $342;
 HEAP32[$101 >> 2] = HEAP32[$102 >> 2];
 HEAP32[$100 >> 2] = HEAP32[$101 >> 2];
 if ((HEAPU8[(HEAP32[$100 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$94 >> 2] = $342;
  HEAP32[$93 >> 2] = HEAP32[$94 >> 2];
  HEAP32[$92 >> 2] = HEAP32[$93 >> 2];
  $360 = HEAP32[HEAP32[$92 >> 2] >> 2] | 0;
 } else {
  HEAP32[$99 >> 2] = $342;
  HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
  HEAP32[$97 >> 2] = HEAP32[$98 >> 2];
  HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
  HEAP32[$95 >> 2] = HEAP32[$96 >> 2];
  $360 = HEAP32[$95 >> 2] | 0;
 }
 HEAP32[$91 >> 2] = $360;
 $361 = HEAP32[$91 >> 2] | 0;
 HEAP32[$114 >> 2] = $139 + 32;
 $363 = HEAP32[$114 >> 2] | 0;
 HEAP32[$113 >> 2] = $363;
 HEAP32[$112 >> 2] = HEAP32[$113 >> 2];
 HEAP32[$111 >> 2] = HEAP32[$112 >> 2];
 if ((HEAPU8[(HEAP32[$111 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$107 >> 2] = $363;
  HEAP32[$106 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$105 >> 2] = HEAP32[$106 >> 2];
  $384 = HEAP32[(HEAP32[$105 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$110 >> 2] = $363;
  HEAP32[$109 >> 2] = HEAP32[$110 >> 2];
  HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
  $384 = HEAPU8[(HEAP32[$108 >> 2] | 0) + 11 >> 0] | 0;
 }
 HEAP32[$115 >> 2] = $139;
 HEAP32[$116 >> 2] = $339;
 HEAP32[$117 >> 2] = $361 + $384;
 $385 = HEAP32[$115 >> 2] | 0;
 $386 = HEAP32[$116 >> 2] | 0;
 HEAP32[$385 + 24 >> 2] = $386;
 HEAP32[$385 + 20 >> 2] = $386;
 HEAP32[$385 + 28 >> 2] = HEAP32[$117 >> 2];
 if (!(HEAP32[$139 + 48 >> 2] & 3)) {
  STACKTOP = sp;
  return;
 }
 while (1) {
  if ((HEAP32[$138 >> 2] | 0) >>> 0 <= 2147483647) break;
  HEAP32[$118 >> 2] = $139;
  HEAP32[$119 >> 2] = 2147483647;
  $399 = (HEAP32[$118 >> 2] | 0) + 24 | 0;
  HEAP32[$399 >> 2] = (HEAP32[$399 >> 2] | 0) + (HEAP32[$119 >> 2] | 0);
  HEAP32[$138 >> 2] = (HEAP32[$138 >> 2] | 0) - 2147483647;
 }
 if ((HEAP32[$138 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 $406 = HEAP32[$138 >> 2] | 0;
 HEAP32[$120 >> 2] = $139;
 HEAP32[$121 >> 2] = $406;
 $409 = (HEAP32[$120 >> 2] | 0) + 24 | 0;
 HEAP32[$409 >> 2] = (HEAP32[$409 >> 2] | 0) + (HEAP32[$121 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim7ClusterC2ENSt3__210shared_ptrIKNS_6ReaderEEENS_15CompressionTypeEb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $136 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $169 = 0, $17 = 0, $172 = 0, $173 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $19 = 0, $196 = 0, $20 = 0, $208 = 0, $21 = 0, $212 = 0, $219 = 0, $22 = 0, $220 = 0, $227 = 0, $23 = 0, $231 = 0, $232 = 0, $233 = 0, $235 = 0, $24 = 0, $240 = 0, $242 = 0, $247 = 0, $249 = 0, $25 = 0, $252 = 0, $256 = 0, $26 = 0, $263 = 0, $264 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400 | 0;
 $$byval_copy4 = sp + 88 | 0;
 $$byval_copy3 = sp + 80 | 0;
 $4 = sp + 388 | 0;
 $5 = sp + 384 | 0;
 $6 = sp + 380 | 0;
 $7 = sp + 376 | 0;
 $8 = sp + 372 | 0;
 $9 = sp + 368 | 0;
 $10 = sp + 364 | 0;
 $11 = sp + 360 | 0;
 $12 = sp + 356 | 0;
 $13 = sp + 352 | 0;
 $14 = sp + 348 | 0;
 $15 = sp + 344 | 0;
 $16 = sp + 340 | 0;
 $17 = sp + 336 | 0;
 $18 = sp + 332 | 0;
 $19 = sp + 328 | 0;
 $20 = sp + 324 | 0;
 $21 = sp + 320 | 0;
 $22 = sp + 316 | 0;
 $23 = sp + 312 | 0;
 $24 = sp + 308 | 0;
 $25 = sp + 304 | 0;
 $26 = sp + 300 | 0;
 $27 = sp + 296 | 0;
 $28 = sp + 292 | 0;
 $29 = sp + 288 | 0;
 $30 = sp + 284 | 0;
 $31 = sp + 280 | 0;
 $32 = sp + 276 | 0;
 $33 = sp + 272 | 0;
 $34 = sp + 264 | 0;
 $35 = sp + 260 | 0;
 $36 = sp + 256 | 0;
 $37 = sp + 252 | 0;
 $38 = sp + 248 | 0;
 $39 = sp + 244 | 0;
 $40 = sp + 240 | 0;
 $41 = sp + 236 | 0;
 $42 = sp + 232 | 0;
 $43 = sp + 228 | 0;
 $44 = sp + 224 | 0;
 $45 = sp + 220 | 0;
 $46 = sp + 216 | 0;
 $47 = sp + 212 | 0;
 $48 = sp + 208 | 0;
 $49 = sp + 204 | 0;
 $50 = sp + 200 | 0;
 $51 = sp + 196 | 0;
 $53 = sp + 188 | 0;
 $54 = sp + 184 | 0;
 $55 = sp + 180 | 0;
 $56 = sp + 176 | 0;
 $58 = sp + 168 | 0;
 $59 = sp + 164 | 0;
 $61 = sp + 156 | 0;
 $62 = sp + 152 | 0;
 $63 = sp + 148 | 0;
 $64 = sp + 144 | 0;
 $66 = sp + 136 | 0;
 $67 = sp + 132 | 0;
 $68 = sp + 128 | 0;
 $69 = sp + 124 | 0;
 $70 = sp + 120 | 0;
 $71 = sp + 116 | 0;
 $72 = sp + 112 | 0;
 $73 = sp + 108 | 0;
 $74 = sp + 392 | 0;
 $75 = sp + 104 | 0;
 $76 = sp + 100 | 0;
 $77 = sp + 72 | 0;
 $78 = sp + 64 | 0;
 $79 = sp + 56 | 0;
 $80 = sp + 96 | 0;
 $81 = sp + 48 | 0;
 $82 = sp + 40 | 0;
 $83 = sp + 32 | 0;
 $84 = sp + 24 | 0;
 $85 = sp + 16 | 0;
 $86 = sp + 8 | 0;
 $87 = sp;
 HEAP32[$72 >> 2] = $0;
 HEAP32[$73 >> 2] = $2;
 HEAP8[$74 >> 0] = $3 & 1;
 $89 = HEAP32[$72 >> 2] | 0;
 HEAP32[$71 >> 2] = $89;
 HEAP32[$70 >> 2] = HEAP32[$71 >> 2];
 $91 = HEAP32[$70 >> 2] | 0;
 HEAP32[$91 >> 2] = 0;
 HEAP32[$91 + 4 >> 2] = 0;
 HEAP32[$89 + 8 >> 2] = HEAP32[$73 >> 2];
 HEAP8[$89 + 12 >> 0] = HEAP8[$74 >> 0] & 1;
 $99 = $89 + 16 | 0;
 HEAP32[$68 >> 2] = $99;
 HEAP32[$66 >> 2] = HEAP32[$68 >> 2];
 $101 = HEAP32[$66 >> 2] | 0;
 HEAP32[sp + 140 >> 2] = $101;
 HEAP32[$101 >> 2] = 0;
 HEAP32[$101 + 4 >> 2] = 0;
 HEAP32[$67 >> 2] = 0;
 HEAP32[$63 >> 2] = $101 + 8;
 HEAP32[$64 >> 2] = $67;
 $104 = HEAP32[$63 >> 2] | 0;
 HEAP32[$62 >> 2] = HEAP32[$64 >> 2];
 $106 = HEAP32[$62 >> 2] | 0;
 HEAP32[$58 >> 2] = $104;
 HEAP32[$59 >> 2] = $106;
 $107 = HEAP32[$58 >> 2] | 0;
 HEAP32[sp + 172 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$107 >> 2] = 0;
 HEAP32[$61 >> 2] = $104;
 HEAP32[sp + 160 >> 2] = HEAP32[$61 >> 2];
 $110 = $89 + 28 | 0;
 HEAP32[$55 >> 2] = $110;
 HEAP32[$56 >> 2] = $1;
 $111 = HEAP32[$55 >> 2] | 0;
 HEAP32[$111 >> 2] = HEAP32[HEAP32[$56 >> 2] >> 2];
 HEAP32[$111 + 4 >> 2] = HEAP32[(HEAP32[$56 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$111 + 4 >> 2] | 0) {
  HEAP32[$54 >> 2] = HEAP32[$111 + 4 >> 2];
  HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
  HEAP32[$50 >> 2] = (HEAP32[$53 >> 2] | 0) + 4;
  $126 = HEAP32[$50 >> 2] | 0;
  HEAP32[$51 >> 2] = 1;
  $127 = HEAP32[$51 >> 2] | 0;
  $128 = HEAP32[$126 >> 2] | 0;
  HEAP32[$126 >> 2] = $128 + $127;
  HEAP32[sp + 192 >> 2] = $128 + $127;
 }
 __THREW__ = 0;
 invoke_viii(16, $89 + 40 | 0, 0, 0);
 $132 = __THREW__;
 __THREW__ = 0;
 do if (!($132 & 1)) {
  HEAP32[$49 >> 2] = $89 + 28;
  $136 = HEAP32[HEAP32[$49 >> 2] >> 2] | 0;
  __THREW__ = 0;
  $140 = invoke_ii(HEAP32[(HEAP32[$136 >> 2] | 0) + 28 >> 2] | 0, $136 | 0) | 0;
  $141 = tempRet0;
  $142 = __THREW__;
  __THREW__ = 0;
  if (!($142 & 1)) {
   $144 = $77;
   HEAP32[$144 >> 2] = $140;
   HEAP32[$144 + 4 >> 2] = $141;
   if (HEAP8[$74 >> 0] & 1) {
    __THREW__ = 0;
    $150 = invoke_ii(96, $89 | 0) | 0;
    $151 = tempRet0;
    $152 = __THREW__;
    __THREW__ = 0;
    if ($152 & 1) break;
    $154 = $78;
    HEAP32[$154 >> 2] = $150;
    HEAP32[$154 + 4 >> 2] = $151;
    $158 = $89 + 40 | 0;
    HEAP32[$158 >> 2] = HEAP32[$78 >> 2];
    HEAP32[$158 + 4 >> 2] = HEAP32[$78 + 4 >> 2];
   } else {
    __THREW__ = 0;
    $161 = invoke_ii(97, $89 | 0) | 0;
    $162 = tempRet0;
    $163 = __THREW__;
    __THREW__ = 0;
    if ($163 & 1) break;
    $165 = $79;
    HEAP32[$165 >> 2] = $161;
    HEAP32[$165 + 4 >> 2] = $162;
    $169 = $89 + 40 | 0;
    HEAP32[$169 >> 2] = HEAP32[$79 >> 2];
    HEAP32[$169 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
   }
   HEAP32[$36 >> 2] = $89 + 28;
   $172 = HEAP32[HEAP32[$36 >> 2] >> 2] | 0;
   $173 = $89 + 40 | 0;
   HEAP32[$81 >> 2] = HEAP32[$173 >> 2];
   HEAP32[$81 + 4 >> 2] = HEAP32[$173 + 4 >> 2];
   __THREW__ = 0;
   HEAP32[$$byval_copy4 >> 2] = HEAP32[$81 >> 2];
   HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
   invoke_viii(20, $80 | 0, $172 | 0, $$byval_copy4 | 0);
   $174 = __THREW__;
   __THREW__ = 0;
   if (!($174 & 1)) {
    HEAP32[$32 >> 2] = $89 + 28;
    HEAP32[$33 >> 2] = $80;
    $177 = HEAP32[$32 >> 2] | 0;
    HEAP32[$31 >> 2] = HEAP32[$33 >> 2];
    $179 = HEAP32[$31 >> 2] | 0;
    HEAP32[$35 >> 2] = 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy4 >> 2] = HEAP32[$35 >> 2];
    invoke_viii(17, $34 | 0, $179 | 0, $$byval_copy4 | 0);
    $180 = __THREW__;
    __THREW__ = 0;
    if ($180 & 1) {
     $249 = ___cxa_find_matching_catch_2() | 0;
     HEAP32[$75 >> 2] = $249;
     HEAP32[$76 >> 2] = tempRet0;
     HEAP32[$48 >> 2] = $80;
     HEAP32[$45 >> 2] = HEAP32[$48 >> 2];
     HEAP32[$46 >> 2] = 0;
     $252 = HEAP32[$45 >> 2] | 0;
     HEAP32[$44 >> 2] = $252;
     HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
     HEAP32[$47 >> 2] = HEAP32[HEAP32[$43 >> 2] >> 2];
     $256 = HEAP32[$46 >> 2] | 0;
     HEAP32[$40 >> 2] = $252;
     HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
     HEAP32[HEAP32[$39 >> 2] >> 2] = $256;
     if (!(HEAP32[$47 >> 2] | 0)) {
      __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($110);
      __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($99);
      HEAP32[$69 >> 2] = $89;
      $269 = HEAP32[$69 >> 2] | 0;
      __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($269);
      $270 = HEAP32[$75 >> 2] | 0;
      $271 = HEAP32[$76 >> 2] | 0;
      ___resumeException($270 | 0);
     }
     HEAP32[$38 >> 2] = $252;
     HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
     $263 = HEAP32[$47 >> 2] | 0;
     HEAP32[$41 >> 2] = HEAP32[$37 >> 2];
     HEAP32[$42 >> 2] = $263;
     $264 = HEAP32[$42 >> 2] | 0;
     if (!$264) {
      __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($110);
      __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($99);
      HEAP32[$69 >> 2] = $89;
      $269 = HEAP32[$69 >> 2] | 0;
      __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($269);
      $270 = HEAP32[$75 >> 2] | 0;
      $271 = HEAP32[$76 >> 2] | 0;
      ___resumeException($270 | 0);
     }
     FUNCTION_TABLE_vi[HEAP32[(HEAP32[$264 >> 2] | 0) + 8 >> 2] & 255]($264);
     __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($110);
     __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($99);
     HEAP32[$69 >> 2] = $89;
     $269 = HEAP32[$69 >> 2] | 0;
     __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($269);
     $270 = HEAP32[$75 >> 2] | 0;
     $271 = HEAP32[$76 >> 2] | 0;
     ___resumeException($270 | 0);
    }
    HEAP32[$29 >> 2] = $34;
    HEAP32[$30 >> 2] = $177;
    $182 = HEAP32[$29 >> 2] | 0;
    $183 = HEAP32[$30 >> 2] | 0;
    HEAP32[$26 >> 2] = $182;
    HEAP32[$27 >> 2] = $183;
    HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
    HEAP32[$28 >> 2] = HEAP32[HEAP32[$25 >> 2] >> 2];
    HEAP32[$23 >> 2] = HEAP32[$27 >> 2];
    HEAP32[HEAP32[$26 >> 2] >> 2] = HEAP32[HEAP32[$23 >> 2] >> 2];
    HEAP32[$24 >> 2] = $28;
    HEAP32[HEAP32[$27 >> 2] >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
    $196 = (HEAP32[$30 >> 2] | 0) + 4 | 0;
    HEAP32[$20 >> 2] = $182 + 4;
    HEAP32[$21 >> 2] = $196;
    HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
    HEAP32[$22 >> 2] = HEAP32[HEAP32[$19 >> 2] >> 2];
    HEAP32[$17 >> 2] = HEAP32[$21 >> 2];
    HEAP32[HEAP32[$20 >> 2] >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
    HEAP32[$18 >> 2] = $22;
    HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
    __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($34);
    HEAP32[$16 >> 2] = $80;
    HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$14 >> 2] = 0;
    $208 = HEAP32[$13 >> 2] | 0;
    HEAP32[$12 >> 2] = $208;
    HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$15 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
    $212 = HEAP32[$14 >> 2] | 0;
    HEAP32[$8 >> 2] = $208;
    HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
    HEAP32[HEAP32[$7 >> 2] >> 2] = $212;
    if (HEAP32[$15 >> 2] | 0) {
     HEAP32[$6 >> 2] = $208;
     HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
     $219 = HEAP32[$15 >> 2] | 0;
     HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$10 >> 2] = $219;
     $220 = HEAP32[$10 >> 2] | 0;
     if ($220 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$220 >> 2] | 0) + 8 >> 2] & 255]($220);
    }
    HEAP32[$4 >> 2] = $89 + 28;
    $227 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
    __THREW__ = 0;
    $231 = invoke_ii(HEAP32[(HEAP32[$227 >> 2] | 0) + 28 >> 2] | 0, $227 | 0) | 0;
    $232 = tempRet0;
    $233 = __THREW__;
    __THREW__ = 0;
    if (!($233 & 1)) {
     $235 = $82;
     HEAP32[$235 >> 2] = $231;
     HEAP32[$235 + 4 >> 2] = $232;
     HEAP32[$84 >> 2] = HEAP32[$77 >> 2];
     HEAP32[$84 + 4 >> 2] = HEAP32[$77 + 4 >> 2];
     HEAP32[$$byval_copy4 >> 2] = HEAP32[$84 >> 2];
     HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$84 + 4 >> 2];
     $240 = __ZplIN3zim8offset_tEET_S2_RKS2_($$byval_copy4, $89 + 40 | 0) | 0;
     $242 = $83;
     HEAP32[$242 >> 2] = $240;
     HEAP32[$242 + 4 >> 2] = tempRet0;
     HEAP32[$85 >> 2] = HEAP32[$82 >> 2];
     HEAP32[$85 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
     if (__ZN12REAL_TYPEDEFIyEeqERKS0_($83, $85) | 0) {
      STACKTOP = sp;
      return;
     };
     HEAP32[$86 >> 2] = HEAP32[$83 >> 2];
     HEAP32[$86 + 4 >> 2] = HEAP32[$83 + 4 >> 2];
     HEAP32[$87 >> 2] = HEAP32[$85 >> 2];
     HEAP32[$87 + 4 >> 2] = HEAP32[$85 + 4 >> 2];
     __THREW__ = 0;
     HEAP32[$$byval_copy3 >> 2] = HEAP32[$86 >> 2];
     HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$86 + 4 >> 2];
     HEAP32[$$byval_copy4 >> 2] = HEAP32[$87 >> 2];
     HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$87 + 4 >> 2];
     invoke_viiiiiii(1, 49835, 50958, 49849, $$byval_copy3 | 0, $$byval_copy4 | 0, 49852, 53);
     $247 = __THREW__;
     __THREW__ = 0;
     if (!($247 & 1)) {
      STACKTOP = sp;
      return;
     }
    }
   }
  }
 } while (0);
 $159 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$75 >> 2] = $159;
 HEAP32[$76 >> 2] = tempRet0;
 __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($110);
 __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($99);
 HEAP32[$69 >> 2] = $89;
 $269 = HEAP32[$69 >> 2] | 0;
 __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($269);
 $270 = HEAP32[$75 >> 2] | 0;
 $271 = HEAP32[$76 >> 2] | 0;
 ___resumeException($270 | 0);
}

function _free($0) {
 $0 = $0 | 0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381438 = 0, $$0382$lcssa = 0, $$0382437 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1385$be = 0, $$1385$ph = 0, $$1388 = 0, $$1388$be = 0, $$1388$ph = 0, $$1396 = 0, $$1396$be = 0, $$1396$ph = 0, $$1400 = 0, $$1400$be = 0, $$1400$ph = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre$phi444Z2D = 0, $$pre$phi446Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $113 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $205 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $288 = 0, $3 = 0, $300 = 0, $305 = 0, $312 = 0, $313 = 0, $314 = 0, $323 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $84 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0;
 if (!$0) return;
 $2 = $0 + -8 | 0;
 $3 = HEAP32[15178] | 0;
 if ($2 >>> 0 < $3 >>> 0) _abort();
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 $7 = $6 & 3;
 if (($7 | 0) == 1) _abort();
 $9 = $6 & -8;
 $10 = $2 + $9 | 0;
 L10 : do if (!($6 & 1)) {
  $13 = HEAP32[$2 >> 2] | 0;
  if (!$7) return;
  $16 = $2 + (0 - $13) | 0;
  $17 = $13 + $9 | 0;
  if ($16 >>> 0 < $3 >>> 0) _abort();
  if ((HEAP32[15179] | 0) == ($16 | 0)) {
   $105 = $10 + 4 | 0;
   $106 = HEAP32[$105 >> 2] | 0;
   if (($106 & 3 | 0) != 3) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   HEAP32[15176] = $17;
   HEAP32[$105 >> 2] = $106 & -2;
   HEAP32[$16 + 4 >> 2] = $17 | 1;
   HEAP32[$16 + $17 >> 2] = $17;
   return;
  }
  $21 = $13 >>> 3;
  if ($13 >>> 0 < 256) {
   $24 = HEAP32[$16 + 8 >> 2] | 0;
   $26 = HEAP32[$16 + 12 >> 2] | 0;
   $28 = 60736 + ($21 << 1 << 2) | 0;
   if (($24 | 0) != ($28 | 0)) {
    if ($3 >>> 0 > $24 >>> 0) _abort();
    if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) _abort();
   }
   if (($26 | 0) == ($24 | 0)) {
    HEAP32[15174] = HEAP32[15174] & ~(1 << $21);
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
   if (($26 | 0) == ($28 | 0)) $$pre$phi446Z2D = $26 + 8 | 0; else {
    if ($3 >>> 0 > $26 >>> 0) _abort();
    $41 = $26 + 8 | 0;
    if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) $$pre$phi446Z2D = $41; else _abort();
   }
   HEAP32[$24 + 12 >> 2] = $26;
   HEAP32[$$pre$phi446Z2D >> 2] = $24;
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
   break;
  }
  $46 = HEAP32[$16 + 24 >> 2] | 0;
  $48 = HEAP32[$16 + 12 >> 2] | 0;
  do if (($48 | 0) == ($16 | 0)) {
   $59 = $16 + 16 | 0;
   $60 = $59 + 4 | 0;
   $61 = HEAP32[$60 >> 2] | 0;
   if (!$61) {
    $63 = HEAP32[$59 >> 2] | 0;
    if (!$63) {
     $$3 = 0;
     break;
    } else {
     $$1385$ph = $63;
     $$1388$ph = $59;
    }
   } else {
    $$1385$ph = $61;
    $$1388$ph = $60;
   }
   $$1385 = $$1385$ph;
   $$1388 = $$1388$ph;
   while (1) {
    $65 = $$1385 + 20 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    if (!$66) {
     $68 = $$1385 + 16 | 0;
     $69 = HEAP32[$68 >> 2] | 0;
     if (!$69) break; else {
      $$1385$be = $69;
      $$1388$be = $68;
     }
    } else {
     $$1385$be = $66;
     $$1388$be = $65;
    }
    $$1385 = $$1385$be;
    $$1388 = $$1388$be;
   }
   if ($3 >>> 0 > $$1388 >>> 0) _abort(); else {
    HEAP32[$$1388 >> 2] = 0;
    $$3 = $$1385;
    break;
   }
  } else {
   $51 = HEAP32[$16 + 8 >> 2] | 0;
   if ($3 >>> 0 > $51 >>> 0) _abort();
   $53 = $51 + 12 | 0;
   if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) _abort();
   $56 = $48 + 8 | 0;
   if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$53 >> 2] = $48;
    HEAP32[$56 >> 2] = $51;
    $$3 = $48;
    break;
   } else _abort();
  } while (0);
  if (!$46) {
   $$1 = $16;
   $$1380 = $17;
   $113 = $16;
  } else {
   $74 = HEAP32[$16 + 28 >> 2] | 0;
   $75 = 61e3 + ($74 << 2) | 0;
   do if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$75 >> 2] = $$3;
    if (!$$3) {
     HEAP32[15175] = HEAP32[15175] & ~(1 << $74);
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    }
   } else if ((HEAP32[15178] | 0) >>> 0 > $46 >>> 0) _abort(); else {
    $84 = $46 + 16 | 0;
    HEAP32[((HEAP32[$84 >> 2] | 0) == ($16 | 0) ? $84 : $46 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $16;
     $$1380 = $17;
     $113 = $16;
     break L10;
    } else break;
   } while (0);
   $89 = HEAP32[15178] | 0;
   if ($89 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $46;
   $92 = $16 + 16 | 0;
   $93 = HEAP32[$92 >> 2] | 0;
   do if ($93 | 0) if ($89 >>> 0 > $93 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $$3;
    break;
   } while (0);
   $99 = HEAP32[$92 + 4 >> 2] | 0;
   if (!$99) {
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
   } else if ((HEAP32[15178] | 0) >>> 0 > $99 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $99;
    HEAP32[$99 + 24 >> 2] = $$3;
    $$1 = $16;
    $$1380 = $17;
    $113 = $16;
    break;
   }
  }
 } else {
  $$1 = $2;
  $$1380 = $9;
  $113 = $2;
 } while (0);
 if ($113 >>> 0 >= $10 >>> 0) _abort();
 $115 = $10 + 4 | 0;
 $116 = HEAP32[$115 >> 2] | 0;
 if (!($116 & 1)) _abort();
 if (!($116 & 2)) {
  if ((HEAP32[15180] | 0) == ($10 | 0)) {
   $124 = (HEAP32[15177] | 0) + $$1380 | 0;
   HEAP32[15177] = $124;
   HEAP32[15180] = $$1;
   HEAP32[$$1 + 4 >> 2] = $124 | 1;
   if (($$1 | 0) != (HEAP32[15179] | 0)) return;
   HEAP32[15179] = 0;
   HEAP32[15176] = 0;
   return;
  }
  if ((HEAP32[15179] | 0) == ($10 | 0)) {
   $132 = (HEAP32[15176] | 0) + $$1380 | 0;
   HEAP32[15176] = $132;
   HEAP32[15179] = $113;
   HEAP32[$$1 + 4 >> 2] = $132 | 1;
   HEAP32[$113 + $132 >> 2] = $132;
   return;
  }
  $137 = ($116 & -8) + $$1380 | 0;
  $138 = $116 >>> 3;
  L111 : do if ($116 >>> 0 < 256) {
   $141 = HEAP32[$10 + 8 >> 2] | 0;
   $143 = HEAP32[$10 + 12 >> 2] | 0;
   $145 = 60736 + ($138 << 1 << 2) | 0;
   if (($141 | 0) != ($145 | 0)) {
    if ((HEAP32[15178] | 0) >>> 0 > $141 >>> 0) _abort();
    if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) _abort();
   }
   if (($143 | 0) == ($141 | 0)) {
    HEAP32[15174] = HEAP32[15174] & ~(1 << $138);
    break;
   }
   if (($143 | 0) == ($145 | 0)) $$pre$phi444Z2D = $143 + 8 | 0; else {
    if ((HEAP32[15178] | 0) >>> 0 > $143 >>> 0) _abort();
    $160 = $143 + 8 | 0;
    if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) $$pre$phi444Z2D = $160; else _abort();
   }
   HEAP32[$141 + 12 >> 2] = $143;
   HEAP32[$$pre$phi444Z2D >> 2] = $141;
  } else {
   $165 = HEAP32[$10 + 24 >> 2] | 0;
   $167 = HEAP32[$10 + 12 >> 2] | 0;
   do if (($167 | 0) == ($10 | 0)) {
    $179 = $10 + 16 | 0;
    $180 = $179 + 4 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    if (!$181) {
     $183 = HEAP32[$179 >> 2] | 0;
     if (!$183) {
      $$3398 = 0;
      break;
     } else {
      $$1396$ph = $183;
      $$1400$ph = $179;
     }
    } else {
     $$1396$ph = $181;
     $$1400$ph = $180;
    }
    $$1396 = $$1396$ph;
    $$1400 = $$1400$ph;
    while (1) {
     $185 = $$1396 + 20 | 0;
     $186 = HEAP32[$185 >> 2] | 0;
     if (!$186) {
      $188 = $$1396 + 16 | 0;
      $189 = HEAP32[$188 >> 2] | 0;
      if (!$189) break; else {
       $$1396$be = $189;
       $$1400$be = $188;
      }
     } else {
      $$1396$be = $186;
      $$1400$be = $185;
     }
     $$1396 = $$1396$be;
     $$1400 = $$1400$be;
    }
    if ((HEAP32[15178] | 0) >>> 0 > $$1400 >>> 0) _abort(); else {
     HEAP32[$$1400 >> 2] = 0;
     $$3398 = $$1396;
     break;
    }
   } else {
    $170 = HEAP32[$10 + 8 >> 2] | 0;
    if ((HEAP32[15178] | 0) >>> 0 > $170 >>> 0) _abort();
    $173 = $170 + 12 | 0;
    if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) _abort();
    $176 = $167 + 8 | 0;
    if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$173 >> 2] = $167;
     HEAP32[$176 >> 2] = $170;
     $$3398 = $167;
     break;
    } else _abort();
   } while (0);
   if ($165 | 0) {
    $195 = HEAP32[$10 + 28 >> 2] | 0;
    $196 = 61e3 + ($195 << 2) | 0;
    do if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
     HEAP32[$196 >> 2] = $$3398;
     if (!$$3398) {
      HEAP32[15175] = HEAP32[15175] & ~(1 << $195);
      break L111;
     }
    } else if ((HEAP32[15178] | 0) >>> 0 > $165 >>> 0) _abort(); else {
     $205 = $165 + 16 | 0;
     HEAP32[((HEAP32[$205 >> 2] | 0) == ($10 | 0) ? $205 : $165 + 20 | 0) >> 2] = $$3398;
     if (!$$3398) break L111; else break;
    } while (0);
    $210 = HEAP32[15178] | 0;
    if ($210 >>> 0 > $$3398 >>> 0) _abort();
    HEAP32[$$3398 + 24 >> 2] = $165;
    $213 = $10 + 16 | 0;
    $214 = HEAP32[$213 >> 2] | 0;
    do if ($214 | 0) if ($210 >>> 0 > $214 >>> 0) _abort(); else {
     HEAP32[$$3398 + 16 >> 2] = $214;
     HEAP32[$214 + 24 >> 2] = $$3398;
     break;
    } while (0);
    $220 = HEAP32[$213 + 4 >> 2] | 0;
    if ($220 | 0) if ((HEAP32[15178] | 0) >>> 0 > $220 >>> 0) _abort(); else {
     HEAP32[$$3398 + 20 >> 2] = $220;
     HEAP32[$220 + 24 >> 2] = $$3398;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1;
  HEAP32[$113 + $137 >> 2] = $137;
  if (($$1 | 0) == (HEAP32[15179] | 0)) {
   HEAP32[15176] = $137;
   return;
  } else $$2 = $137;
 } else {
  HEAP32[$115 >> 2] = $116 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1380 | 1;
  HEAP32[$113 + $$1380 >> 2] = $$1380;
  $$2 = $$1380;
 }
 $235 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $238 = 60736 + ($235 << 1 << 2) | 0;
  $239 = HEAP32[15174] | 0;
  $240 = 1 << $235;
  if (!($239 & $240)) {
   HEAP32[15174] = $239 | $240;
   $$0401 = $238;
   $$pre$phiZ2D = $238 + 8 | 0;
  } else {
   $244 = $238 + 8 | 0;
   $245 = HEAP32[$244 >> 2] | 0;
   if ((HEAP32[15178] | 0) >>> 0 > $245 >>> 0) _abort(); else {
    $$0401 = $245;
    $$pre$phiZ2D = $244;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0401 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0401;
  HEAP32[$$1 + 12 >> 2] = $238;
  return;
 }
 $251 = $$2 >>> 8;
 if (!$251) $$0394 = 0; else if ($$2 >>> 0 > 16777215) $$0394 = 31; else {
  $256 = ($251 + 1048320 | 0) >>> 16 & 8;
  $257 = $251 << $256;
  $260 = ($257 + 520192 | 0) >>> 16 & 4;
  $262 = $257 << $260;
  $265 = ($262 + 245760 | 0) >>> 16 & 2;
  $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0;
  $$0394 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1;
 }
 $276 = 61e3 + ($$0394 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0394;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $280 = HEAP32[15175] | 0;
 $281 = 1 << $$0394;
 L197 : do if (!($280 & $281)) {
  HEAP32[15175] = $280 | $281;
  HEAP32[$276 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $276;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
 } else {
  $288 = HEAP32[$276 >> 2] | 0;
  L200 : do if ((HEAP32[$288 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0382$lcssa = $288; else {
   $$0381438 = $$2 << (($$0394 | 0) == 31 ? 0 : 25 - ($$0394 >>> 1) | 0);
   $$0382437 = $288;
   while (1) {
    $305 = $$0382437 + 16 + ($$0381438 >>> 31 << 2) | 0;
    $300 = HEAP32[$305 >> 2] | 0;
    if (!$300) break;
    if ((HEAP32[$300 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     $$0382$lcssa = $300;
     break L200;
    } else {
     $$0381438 = $$0381438 << 1;
     $$0382437 = $300;
    }
   }
   if ((HEAP32[15178] | 0) >>> 0 > $305 >>> 0) _abort(); else {
    HEAP32[$305 >> 2] = $$1;
    HEAP32[$$1 + 24 >> 2] = $$0382437;
    HEAP32[$$1 + 12 >> 2] = $$1;
    HEAP32[$$1 + 8 >> 2] = $$1;
    break L197;
   }
  } while (0);
  $312 = $$0382$lcssa + 8 | 0;
  $313 = HEAP32[$312 >> 2] | 0;
  $314 = HEAP32[15178] | 0;
  if ($314 >>> 0 <= $313 >>> 0 & $314 >>> 0 <= $$0382$lcssa >>> 0) {
   HEAP32[$313 + 12 >> 2] = $$1;
   HEAP32[$312 >> 2] = $$1;
   HEAP32[$$1 + 8 >> 2] = $313;
   HEAP32[$$1 + 12 >> 2] = $$0382$lcssa;
   HEAP32[$$1 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $323 = (HEAP32[15182] | 0) + -1 | 0;
 HEAP32[15182] = $323;
 if ($323 | 0) return;
 $$0211$in$i = 61152;
 while (1) {
  $$0211$i = HEAP32[$$0211$in$i >> 2] | 0;
  if (!$$0211$i) break; else $$0211$in$i = $$0211$i + 8 | 0;
 }
 HEAP32[15182] = -1;
 return;
}

function __ZNK3zim6Reader17sub_clusterReaderENS_8offset_tENS_7zsize_tEPNS_15CompressionTypeEPb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy7 = 0, $$byval_copy8 = 0, $10 = 0, $11 = 0, $110 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $13 = 0, $131 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $140 = 0, $15 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $17 = 0, $170 = 0, $172 = 0, $18 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $19 = 0, $192 = 0, $193 = 0, $195 = 0, $197 = 0, $20 = 0, $201 = 0, $208 = 0, $209 = 0, $21 = 0, $214 = 0, $216 = 0, $219 = 0, $22 = 0, $220 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $23 = 0, $231 = 0, $232 = 0, $234 = 0, $237 = 0, $239 = 0, $24 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy8 = sp + 112 | 0;
 $$byval_copy7 = sp + 104 | 0;
 $6 = sp + 416 | 0;
 $7 = sp + 412 | 0;
 $8 = sp + 408 | 0;
 $9 = sp + 404 | 0;
 $10 = sp + 400 | 0;
 $11 = sp + 396 | 0;
 $12 = sp + 392 | 0;
 $13 = sp + 388 | 0;
 $14 = sp + 384 | 0;
 $15 = sp + 380 | 0;
 $16 = sp + 376 | 0;
 $17 = sp + 372 | 0;
 $18 = sp + 368 | 0;
 $19 = sp + 364 | 0;
 $20 = sp + 360 | 0;
 $21 = sp + 356 | 0;
 $22 = sp + 352 | 0;
 $23 = sp + 348 | 0;
 $24 = sp + 344 | 0;
 $25 = sp + 340 | 0;
 $26 = sp + 336 | 0;
 $27 = sp + 332 | 0;
 $28 = sp + 328 | 0;
 $29 = sp + 324 | 0;
 $30 = sp + 320 | 0;
 $31 = sp + 316 | 0;
 $32 = sp + 312 | 0;
 $33 = sp + 308 | 0;
 $34 = sp + 304 | 0;
 $35 = sp + 300 | 0;
 $36 = sp + 296 | 0;
 $37 = sp + 292 | 0;
 $38 = sp + 288 | 0;
 $39 = sp + 284 | 0;
 $40 = sp + 280 | 0;
 $41 = sp + 276 | 0;
 $42 = sp + 272 | 0;
 $43 = sp + 268 | 0;
 $44 = sp + 264 | 0;
 $45 = sp + 260 | 0;
 $46 = sp + 256 | 0;
 $47 = sp + 252 | 0;
 $48 = sp + 248 | 0;
 $49 = sp + 244 | 0;
 $50 = sp + 240 | 0;
 $51 = sp + 236 | 0;
 $52 = sp + 232 | 0;
 $53 = sp + 228 | 0;
 $54 = sp + 224 | 0;
 $55 = sp + 220 | 0;
 $56 = sp + 216 | 0;
 $57 = sp + 212 | 0;
 $58 = sp + 208 | 0;
 $59 = sp + 204 | 0;
 $60 = sp + 200 | 0;
 $61 = sp + 196 | 0;
 $62 = sp + 192 | 0;
 $63 = sp + 188 | 0;
 $64 = sp + 184 | 0;
 $65 = sp + 180 | 0;
 $66 = sp + 176 | 0;
 $67 = sp + 172 | 0;
 $68 = sp + 168 | 0;
 $69 = sp + 422 | 0;
 $70 = sp + 96 | 0;
 $71 = sp + 88 | 0;
 $72 = sp + 80 | 0;
 $73 = sp + 72 | 0;
 $74 = sp + 64 | 0;
 $75 = sp + 56 | 0;
 $76 = sp + 48 | 0;
 $77 = sp + 160 | 0;
 $78 = sp + 40 | 0;
 $79 = sp + 32 | 0;
 $80 = sp + 24 | 0;
 $81 = sp + 16 | 0;
 $82 = sp + 8 | 0;
 $83 = sp;
 $84 = sp + 152 | 0;
 $85 = sp + 148 | 0;
 $86 = sp + 144 | 0;
 $87 = sp + 136 | 0;
 $88 = sp + 421 | 0;
 $89 = sp + 120 | 0;
 $90 = sp + 420 | 0;
 HEAP32[$66 >> 2] = $1;
 HEAP32[$67 >> 2] = $4;
 HEAP32[$68 >> 2] = $5;
 $91 = HEAP32[$66 >> 2] | 0;
 $94 = HEAP32[(HEAP32[$91 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$70 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$70 >> 2];
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$70 + 4 >> 2];
 HEAP8[$69 >> 0] = FUNCTION_TABLE_iii[$94 & 63]($91, $$byval_copy8) | 0;
 HEAP32[HEAP32[$67 >> 2] >> 2] = (HEAPU8[$69 >> 0] | 0) & 15;
 HEAP8[HEAP32[$68 >> 2] >> 0] = ((HEAPU8[$69 >> 0] | 0) & 16 | 0) != 0 & 1;
 switch (HEAP32[HEAP32[$67 >> 2] >> 2] | 0) {
 case 1:
 case 0:
  {
   $110 = HEAP32[(HEAP32[$91 >> 2] | 0) + 24 >> 2] | 0;
   HEAP32[$72 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$72 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   __ZN3zim8offset_tC2Ey($73, 1, 0);
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$72 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
   $113 = $71;
   HEAP32[$113 >> 2] = __ZplIN3zim8offset_tEET_S2_RKS2_($$byval_copy8, $73) | 0;
   HEAP32[$113 + 4 >> 2] = tempRet0;
   HEAP32[$75 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$75 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3zim7zsize_tC2Ey($76, 1, 0);
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$75 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$75 + 4 >> 2];
   $119 = $74;
   HEAP32[$119 >> 2] = __ZmiIN3zim7zsize_tEET_S2_RKS2_($$byval_copy8, $76) | 0;
   HEAP32[$119 + 4 >> 2] = tempRet0;
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$71 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$71 + 4 >> 2];
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$74 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$74 + 4 >> 2];
   FUNCTION_TABLE_viiii[$110 & 31]($0, $91, $$byval_copy7, $$byval_copy8);
   STACKTOP = sp;
   return;
  }
 case 2:
 case 4:
  {
   HEAP32[$79 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$79 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   __ZN3zim8offset_tC2Ey($80, 1, 0);
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$79 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$79 + 4 >> 2];
   $125 = $78;
   HEAP32[$125 >> 2] = __ZplIN3zim8offset_tEET_S2_RKS2_($$byval_copy8, $80) | 0;
   HEAP32[$125 + 4 >> 2] = tempRet0;
   HEAP32[$82 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$82 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   __ZN3zim7zsize_tC2Ey($83, 1, 0);
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$82 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$82 + 4 >> 2];
   $131 = $81;
   HEAP32[$131 >> 2] = __ZmiIN3zim7zsize_tEET_S2_RKS2_($$byval_copy8, $83) | 0;
   HEAP32[$131 + 4 >> 2] = tempRet0;
   $136 = HEAP32[HEAP32[$67 >> 2] >> 2] | 0;
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$78 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$78 + 4 >> 2];
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$81 >> 2];
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$81 + 4 >> 2];
   __ZNK3zim6Reader17get_clusterBufferENS_8offset_tENS_7zsize_tENS_15CompressionTypeE($77, $91, $$byval_copy7, $$byval_copy8, $136);
   __THREW__ = 0;
   $137 = invoke_ii(79, 12) | 0;
   $138 = __THREW__;
   __THREW__ = 0;
   do if ($138 & 1) {
    $214 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$85 >> 2] = $214;
    HEAP32[$86 >> 2] = tempRet0;
   } else {
    HEAP8[$88 >> 0] = 1;
    HEAP32[$64 >> 2] = $87;
    HEAP32[$65 >> 2] = $77;
    $140 = HEAP32[$64 >> 2] | 0;
    HEAP32[$140 >> 2] = HEAP32[HEAP32[$65 >> 2] >> 2];
    HEAP32[$140 + 4 >> 2] = HEAP32[(HEAP32[$65 >> 2] | 0) + 4 >> 2];
    if (HEAP32[$140 + 4 >> 2] | 0) {
     HEAP32[$63 >> 2] = HEAP32[$140 + 4 >> 2];
     HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
     HEAP32[$59 >> 2] = (HEAP32[$62 >> 2] | 0) + 4;
     $155 = HEAP32[$59 >> 2] | 0;
     HEAP32[$60 >> 2] = 1;
     $156 = HEAP32[$60 >> 2] | 0;
     $157 = HEAP32[$155 >> 2] | 0;
     HEAP32[$155 >> 2] = $157 + $156;
     HEAP32[$61 >> 2] = $157 + $156;
    }
    __THREW__ = 0;
    invoke_vii(50, $137 | 0, $87 | 0);
    $160 = __THREW__;
    __THREW__ = 0;
    if ($160 & 1) {
     $216 = ___cxa_find_matching_catch_2() | 0;
     HEAP32[$85 >> 2] = $216;
     HEAP32[$86 >> 2] = tempRet0;
     __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($87);
     if (!(HEAP8[$88 >> 0] & 1)) break;
     __ZdlPv($137);
     break;
    }
    HEAP8[$88 >> 0] = 0;
    HEAP32[$57 >> 2] = $84;
    HEAP32[$58 >> 2] = $137;
    HEAP32[$55 >> 2] = HEAP32[$57 >> 2];
    HEAP32[$56 >> 2] = $58;
    $163 = HEAP32[$55 >> 2] | 0;
    HEAP32[$54 >> 2] = HEAP32[$56 >> 2];
    $165 = HEAP32[$54 >> 2] | 0;
    HEAP32[$52 >> 2] = $163;
    HEAP32[$53 >> 2] = $165;
    $166 = HEAP32[$52 >> 2] | 0;
    HEAP32[$51 >> 2] = HEAP32[$53 >> 2];
    HEAP32[$166 >> 2] = HEAP32[HEAP32[$51 >> 2] >> 2];
    HEAP32[$42 >> 2] = $0;
    HEAP32[$43 >> 2] = $84;
    $170 = HEAP32[$42 >> 2] | 0;
    HEAP32[$40 >> 2] = HEAP32[$43 >> 2];
    $172 = HEAP32[$40 >> 2] | 0;
    HEAP32[$39 >> 2] = $172;
    HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$41 >> 2] = HEAP32[HEAP32[$38 >> 2] >> 2];
    HEAP32[$37 >> 2] = $172;
    HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
    HEAP32[HEAP32[$36 >> 2] >> 2] = 0;
    HEAP32[$44 >> 2] = HEAP32[$41 >> 2];
    HEAP32[$35 >> 2] = HEAP32[$43 >> 2];
    HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
    HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
    HEAP32[$18 >> 2] = HEAP32[$33 >> 2];
    $183 = HEAP32[$18 >> 2] | 0;
    HEAP32[$30 >> 2] = $170;
    HEAP32[$31 >> 2] = $44;
    HEAP32[$32 >> 2] = $183;
    $184 = HEAP32[$30 >> 2] | 0;
    HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
    $186 = HEAP32[$29 >> 2] | 0;
    HEAP32[$20 >> 2] = $184;
    HEAP32[$21 >> 2] = $186;
    $187 = HEAP32[$20 >> 2] | 0;
    HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
    HEAP32[$187 >> 2] = HEAP32[HEAP32[$19 >> 2] >> 2];
    HEAP32[$22 >> 2] = HEAP32[$32 >> 2];
    $192 = HEAP32[$22 >> 2] | 0;
    HEAP32[$27 >> 2] = $184;
    HEAP32[$28 >> 2] = $192;
    $193 = HEAP32[$27 >> 2] | 0;
    HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
    $195 = HEAP32[$26 >> 2] | 0;
    HEAP32[$23 >> 2] = $193;
    HEAP32[$24 >> 2] = $195;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$17 >> 2] = $84;
    HEAP32[$14 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$15 >> 2] = 0;
    $197 = HEAP32[$14 >> 2] | 0;
    HEAP32[$13 >> 2] = $197;
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$16 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
    $201 = HEAP32[$15 >> 2] | 0;
    HEAP32[$9 >> 2] = $197;
    HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
    HEAP32[HEAP32[$8 >> 2] >> 2] = $201;
    if (HEAP32[$16 >> 2] | 0) {
     HEAP32[$7 >> 2] = $197;
     HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
     $208 = HEAP32[$16 >> 2] | 0;
     HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
     HEAP32[$11 >> 2] = $208;
     $209 = HEAP32[$11 >> 2] | 0;
     if ($209 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$209 >> 2] | 0) + 8 >> 2] & 255]($209);
    }
    __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($87);
    __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($77);
    STACKTOP = sp;
    return;
   } while (0);
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($77);
   $242 = HEAP32[$85 >> 2] | 0;
   $243 = HEAP32[$86 >> 2] | 0;
   ___resumeException($242 | 0);
   break;
  }
 case 3:
  {
   $219 = ___cxa_allocate_exception(8) | 0;
   __THREW__ = 0;
   invoke_vii(60, $219 | 0, 50087);
   $220 = __THREW__;
   __THREW__ = 0;
   if (!($220 & 1)) ___cxa_throw($219 | 0, 42792, 178);
   HEAP32[$85 >> 2] = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$86 >> 2] = tempRet0;
   ___cxa_free_exception($219 | 0);
   $242 = HEAP32[$85 >> 2] | 0;
   $243 = HEAP32[$86 >> 2] | 0;
   ___resumeException($242 | 0);
   break;
  }
 default:
  {
   $224 = ___cxa_allocate_exception(8) | 0;
   HEAP8[$90 >> 0] = 1;
   HEAP32[$49 >> 2] = $89;
   HEAP32[$50 >> 2] = 50121;
   $225 = HEAP32[$49 >> 2] | 0;
   HEAP32[$48 >> 2] = $225;
   $226 = HEAP32[$48 >> 2] | 0;
   HEAP32[$47 >> 2] = $226;
   $227 = HEAP32[$47 >> 2] | 0;
   HEAP32[$227 >> 2] = 0;
   HEAP32[$227 + 4 >> 2] = 0;
   HEAP32[$227 + 8 >> 2] = 0;
   HEAP32[$46 >> 2] = $226;
   HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
   $229 = HEAP32[$50 >> 2] | 0;
   $231 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$50 >> 2] | 0) | 0;
   __THREW__ = 0;
   invoke_viii(8, $225 | 0, $229 | 0, $231 | 0);
   $232 = __THREW__;
   __THREW__ = 0;
   if ($232 & 1) {
    $237 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$85 >> 2] = $237;
    HEAP32[$86 >> 2] = tempRet0;
   } else {
    __THREW__ = 0;
    invoke_vii(58, $224 | 0, $89 | 0);
    $234 = __THREW__;
    __THREW__ = 0;
    if (!($234 & 1)) {
     HEAP8[$90 >> 0] = 0;
     __THREW__ = 0;
     invoke_viii(11, $224 | 0, 41024, 53);
     __THREW__ = 0;
    }
    $239 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$85 >> 2] = $239;
    HEAP32[$86 >> 2] = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($89);
   }
   if (!(HEAP8[$90 >> 0] & 1)) {
    $242 = HEAP32[$85 >> 2] | 0;
    $243 = HEAP32[$86 >> 2] | 0;
    ___resumeException($242 | 0);
   }
   ___cxa_free_exception($224 | 0);
   $242 = HEAP32[$85 >> 2] | 0;
   $243 = HEAP32[$86 >> 2] | 0;
   ___resumeException($242 | 0);
  }
 }
}

function _stream_decode($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $167 = 0, $169 = 0, $17 = 0, $173 = 0, $18 = 0, $182 = 0, $187 = 0, $19 = 0, $190 = 0, $194 = 0, $199 = 0, $20 = 0, $202 = 0, $207 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $315 = 0, $318 = 0, $32 = 0, $356 = 0, $370 = 0, $379 = 0, $63 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $9 = sp + 224 | 0;
 $10 = sp + 220 | 0;
 $11 = sp + 216 | 0;
 $12 = sp + 212 | 0;
 $13 = sp + 208 | 0;
 $14 = sp + 204 | 0;
 $15 = sp + 200 | 0;
 $16 = sp + 196 | 0;
 $17 = sp + 192 | 0;
 $18 = sp + 188 | 0;
 $19 = sp + 184 | 0;
 $20 = sp + 180 | 0;
 $21 = sp;
 $22 = sp + 176 | 0;
 $23 = sp + 136 | 0;
 $24 = sp + 172 | 0;
 $25 = sp + 168 | 0;
 $26 = sp + 164 | 0;
 $27 = sp + 160 | 0;
 $28 = sp + 156 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 152 | 0;
 $31 = sp + 148 | 0;
 $32 = sp + 144 | 0;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
 L1 : while (1) {
  switch (HEAP32[HEAP32[$19 >> 2] >> 2] | 0) {
  case 0:
   {
    _lzma_bufcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 340 | 0, (HEAP32[$19 >> 2] | 0) + 336 | 0, 12) | 0;
    if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) >>> 0 < 12) {
     label = 4;
     break L1;
    }
    HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] = 0;
    HEAP32[$20 >> 2] = _lzma_stream_header_decode((HEAP32[$19 >> 2] | 0) + 248 | 0, (HEAP32[$19 >> 2] | 0) + 340 | 0) | 0;
    if (HEAP32[$20 >> 2] | 0) {
     label = 6;
     break L1;
    }
    HEAP8[(HEAP32[$19 >> 2] | 0) + 333 >> 0] = 0;
    HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 8 >> 2] = HEAP32[(HEAP32[$19 >> 2] | 0) + 248 + 16 >> 2];
    HEAP32[HEAP32[$19 >> 2] >> 2] = 1;
    if (HEAP8[(HEAP32[$19 >> 2] | 0) + 328 >> 0] & 1) if (!(HEAP32[(HEAP32[$19 >> 2] | 0) + 248 + 16 >> 2] | 0)) {
     label = 12;
     break L1;
    }
    if (HEAP8[(HEAP32[$19 >> 2] | 0) + 329 >> 0] & 1) if (!((_lzma_check_is_supported(HEAP32[(HEAP32[$19 >> 2] | 0) + 248 + 16 >> 2] | 0) | 0) << 24 >> 24)) {
     label = 15;
     break L1;
    }
    if (HEAP8[(HEAP32[$19 >> 2] | 0) + 330 >> 0] & 1) {
     label = 17;
     break L1;
    } else label = 18;
    break;
   }
  case 1:
   {
    label = 18;
    break;
   }
  case 2:
   {
    label = 39;
    break;
   }
  case 3:
   {
    if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) {
     label = 45;
     break L1;
    }
    HEAP32[$28 >> 2] = _lzma_index_hash_decode(HEAP32[(HEAP32[$19 >> 2] | 0) + 304 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0) | 0;
    if ((HEAP32[$28 >> 2] | 0) != 1) {
     label = 47;
     break L1;
    }
    HEAP32[HEAP32[$19 >> 2] >> 2] = 4;
    label = 49;
    break;
   }
  case 4:
   {
    label = 49;
    break;
   }
  case 5:
   {
    label = 60;
    break;
   }
  default:
   {
    label = 71;
    break L1;
   }
  }
  L16 : do if ((label | 0) == 18) {
   label = 0;
   if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) {
    label = 19;
    break L1;
   }
   do if (!(HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0)) if (!(HEAPU8[(HEAP32[$12 >> 2] | 0) + (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >> 0] | 0)) {
    HEAP32[HEAP32[$19 >> 2] >> 2] = 3;
    break L16;
   } else {
    HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 4 >> 2] = (HEAPU8[(HEAP32[$12 >> 2] | 0) + (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >> 0] | 0) + 1 << 2;
    break;
   } while (0);
   _lzma_bufcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 340 | 0, (HEAP32[$19 >> 2] | 0) + 336 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 4 >> 2] | 0) | 0;
   if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 4 >> 2] | 0) >>> 0) {
    label = 25;
    break L1;
   }
   HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] = 0;
   HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] = 1;
   HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 32 >> 2] = $21;
   HEAP32[$22 >> 2] = _lzma_block_header_decode((HEAP32[$19 >> 2] | 0) + 56 | 0, HEAP32[$11 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 340 | 0) | 0;
   if (HEAP32[$22 >> 2] | 0) {
    label = 27;
    break L1;
   }
   HEAP8[(HEAP32[$19 >> 2] | 0) + 56 + 184 >> 0] = HEAP8[(HEAP32[$19 >> 2] | 0) + 331 >> 0] & 1;
   $167 = _lzma_raw_decoder_memusage($21) | 0;
   $169 = $23;
   HEAP32[$169 >> 2] = $167;
   HEAP32[$169 + 4 >> 2] = tempRet0;
   $173 = $23;
   do if ((HEAP32[$173 >> 2] | 0) == -1 ? (HEAP32[$173 + 4 >> 2] | 0) == -1 : 0) HEAP32[$24 >> 2] = 8; else {
    $182 = $23;
    $187 = HEAP32[$182 + 4 >> 2] | 0;
    $190 = (HEAP32[$19 >> 2] | 0) + 320 | 0;
    HEAP32[$190 >> 2] = HEAP32[$182 >> 2];
    HEAP32[$190 + 4 >> 2] = $187;
    $194 = $23;
    $199 = HEAP32[$194 + 4 >> 2] | 0;
    $202 = (HEAP32[$19 >> 2] | 0) + 312 | 0;
    $207 = HEAP32[$202 + 4 >> 2] | 0;
    if ($199 >>> 0 > $207 >>> 0 | (($199 | 0) == ($207 | 0) ? (HEAP32[$194 >> 2] | 0) >>> 0 > (HEAP32[$202 >> 2] | 0) >>> 0 : 0)) {
     HEAP32[$24 >> 2] = 6;
     break;
    } else {
     HEAP32[$24 >> 2] = _lzma_block_decoder_init((HEAP32[$19 >> 2] | 0) + 8 | 0, HEAP32[$11 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 56 | 0) | 0;
     break;
    }
   } while (0);
   HEAP32[$25 >> 2] = 0;
   while (1) {
    if ((HEAP32[$25 >> 2] | 0) >>> 0 >= 4) break;
    _lzma_free(HEAP32[$21 + (HEAP32[$25 >> 2] << 4) + 8 >> 2] | 0, HEAP32[$11 >> 2] | 0);
    HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   }
   HEAP32[(HEAP32[$19 >> 2] | 0) + 56 + 32 >> 2] = 0;
   if (HEAP32[$24 >> 2] | 0) {
    label = 37;
    break L1;
   }
   HEAP32[HEAP32[$19 >> 2] >> 2] = 2;
   label = 39;
  } else if ((label | 0) == 49) {
   label = 0;
   _lzma_bufcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 340 | 0, (HEAP32[$19 >> 2] | 0) + 336 | 0, 12) | 0;
   if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) >>> 0 < 12) {
    label = 50;
    break L1;
   }
   HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] = 0;
   HEAP32[$30 >> 2] = _lzma_stream_footer_decode($29, (HEAP32[$19 >> 2] | 0) + 340 | 0) | 0;
   if (HEAP32[$30 >> 2] | 0) {
    label = 52;
    break L1;
   }
   $315 = _lzma_index_hash_size(HEAP32[(HEAP32[$19 >> 2] | 0) + 304 >> 2] | 0) | 0;
   $318 = $29 + 8 | 0;
   if (($315 | 0) != (HEAP32[$318 >> 2] | 0) ? 1 : (tempRet0 | 0) != (HEAP32[$318 + 4 >> 2] | 0)) {
    label = 54;
    break L1;
   }
   HEAP32[$31 >> 2] = _lzma_stream_flags_compare((HEAP32[$19 >> 2] | 0) + 248 | 0, $29) | 0;
   if (HEAP32[$31 >> 2] | 0) {
    label = 56;
    break L1;
   }
   if (!(HEAP8[(HEAP32[$19 >> 2] | 0) + 332 >> 0] & 1)) {
    label = 58;
    break L1;
   }
   HEAP32[HEAP32[$19 >> 2] >> 2] = 5;
   label = 60;
  } while (0);
  if ((label | 0) == 39) {
   label = 0;
   HEAP32[$26 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[$19 >> 2] | 0) + 8 + 20 >> 2] & 7](HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
   if ((HEAP32[$26 >> 2] | 0) != 1) {
    label = 40;
    break;
   }
   $256 = HEAP32[(HEAP32[$19 >> 2] | 0) + 304 >> 2] | 0;
   $259 = _lzma_block_unpadded_size((HEAP32[$19 >> 2] | 0) + 56 | 0) | 0;
   $264 = (HEAP32[$19 >> 2] | 0) + 56 + 24 | 0;
   HEAP32[$27 >> 2] = _lzma_index_hash_append($256, $259, tempRet0, HEAP32[$264 >> 2] | 0, HEAP32[$264 + 4 >> 2] | 0) | 0;
   if (HEAP32[$27 >> 2] | 0) {
    label = 42;
    break;
   }
   HEAP32[HEAP32[$19 >> 2] >> 2] = 1;
  } else if ((label | 0) == 60) {
   label = 0;
   while (1) {
    if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) {
     label = 62;
     break L1;
    }
    if (HEAPU8[(HEAP32[$12 >> 2] | 0) + (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >> 0] | 0 | 0) break;
    $356 = HEAP32[$13 >> 2] | 0;
    HEAP32[$356 >> 2] = (HEAP32[$356 >> 2] | 0) + 1;
    HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] = (HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) + 1 & 3;
   }
   if (HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) {
    label = 68;
    break;
   }
   HEAP32[$32 >> 2] = _stream_decoder_reset(HEAP32[$19 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0;
   if (HEAP32[$32 >> 2] | 0) {
    label = 70;
    break;
   }
  }
 }
 switch (label | 0) {
 case 4:
  {
   HEAP32[$9 >> 2] = 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 6:
  {
   if ((HEAP32[$20 >> 2] | 0) == 7) if (HEAP8[(HEAP32[$19 >> 2] | 0) + 333 >> 0] & 1) label = 8; else $63 = 9; else label = 8;
   if ((label | 0) == 8) $63 = HEAP32[$20 >> 2] | 0;
   HEAP32[$9 >> 2] = $63;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 12:
  {
   HEAP32[$9 >> 2] = 2;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 15:
  {
   HEAP32[$9 >> 2] = 3;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 17:
  {
   HEAP32[$9 >> 2] = 4;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 19:
  {
   HEAP32[$9 >> 2] = 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 25:
  {
   HEAP32[$9 >> 2] = 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 27:
  {
   HEAP32[$9 >> 2] = HEAP32[$22 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 37:
  {
   HEAP32[$9 >> 2] = HEAP32[$24 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 40:
  {
   HEAP32[$9 >> 2] = HEAP32[$26 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 42:
  {
   HEAP32[$9 >> 2] = HEAP32[$27 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 45:
  {
   HEAP32[$9 >> 2] = 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 47:
  {
   HEAP32[$9 >> 2] = HEAP32[$28 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 50:
  {
   HEAP32[$9 >> 2] = 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 52:
  {
   HEAP32[$9 >> 2] = (HEAP32[$30 >> 2] | 0) == 7 ? 9 : HEAP32[$30 >> 2] | 0;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 54:
  {
   HEAP32[$9 >> 2] = 9;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 56:
  {
   HEAP32[$9 >> 2] = HEAP32[$31 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 58:
  {
   HEAP32[$9 >> 2] = 1;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 62:
  {
   if ((HEAP32[$18 >> 2] | 0) != 3) {
    HEAP32[$9 >> 2] = 0;
    $379 = HEAP32[$9 >> 2] | 0;
    STACKTOP = sp;
    return $379 | 0;
   } else {
    HEAP32[$9 >> 2] = (HEAP32[(HEAP32[$19 >> 2] | 0) + 336 >> 2] | 0) == 0 ? 1 : 9;
    $379 = HEAP32[$9 >> 2] | 0;
    STACKTOP = sp;
    return $379 | 0;
   }
   break;
  }
 case 68:
  {
   $370 = HEAP32[$13 >> 2] | 0;
   HEAP32[$370 >> 2] = (HEAP32[$370 >> 2] | 0) + 1;
   HEAP32[$9 >> 2] = 9;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 70:
  {
   HEAP32[$9 >> 2] = HEAP32[$32 >> 2];
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 case 71:
  {
   HEAP32[$9 >> 2] = 11;
   $379 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $379 | 0;
  }
 }
 return 0;
}

function __ZNSt3__210shared_ptrIKN3zim6BufferEEC2INS1_12MemoryBufferILb1EEEEEPT_NS_9enable_ifIXsr14is_convertibleIS9_PS3_EE5valueENS4_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $169 = 0, $17 = 0, $175 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $19 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $213 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $254 = 0, $26 = 0, $266 = 0, $27 = 0, $270 = 0, $277 = 0, $278 = 0, $28 = 0, $283 = 0, $286 = 0, $29 = 0, $290 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $303 = 0, $304 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 $3 = sp + 480 | 0;
 $4 = sp + 476 | 0;
 $5 = sp + 472 | 0;
 $6 = sp + 468 | 0;
 $7 = sp + 464 | 0;
 $8 = sp + 460 | 0;
 $9 = sp + 456 | 0;
 $10 = sp + 452 | 0;
 $11 = sp + 448 | 0;
 $12 = sp + 444 | 0;
 $13 = sp + 440 | 0;
 $14 = sp + 436 | 0;
 $15 = sp + 432 | 0;
 $16 = sp + 428 | 0;
 $17 = sp + 424 | 0;
 $18 = sp + 420 | 0;
 $19 = sp + 416 | 0;
 $20 = sp + 412 | 0;
 $21 = sp + 408 | 0;
 $22 = sp + 404 | 0;
 $23 = sp + 400 | 0;
 $24 = sp + 396 | 0;
 $25 = sp + 392 | 0;
 $26 = sp + 388 | 0;
 $27 = sp + 384 | 0;
 $28 = sp + 380 | 0;
 $29 = sp + 376 | 0;
 $30 = sp + 372 | 0;
 $31 = sp + 368 | 0;
 $32 = sp + 360 | 0;
 $33 = sp + 356 | 0;
 $34 = sp + 352 | 0;
 $35 = sp + 348 | 0;
 $36 = sp + 344 | 0;
 $37 = sp + 340 | 0;
 $38 = sp + 336 | 0;
 $39 = sp + 332 | 0;
 $40 = sp + 328 | 0;
 $41 = sp + 324 | 0;
 $42 = sp + 320 | 0;
 $43 = sp + 316 | 0;
 $44 = sp + 312 | 0;
 $45 = sp + 308 | 0;
 $46 = sp + 304 | 0;
 $47 = sp + 300 | 0;
 $48 = sp + 296 | 0;
 $49 = sp + 288 | 0;
 $50 = sp + 284 | 0;
 $51 = sp + 280 | 0;
 $52 = sp + 276 | 0;
 $53 = sp + 272 | 0;
 $54 = sp + 268 | 0;
 $55 = sp + 264 | 0;
 $56 = sp + 260 | 0;
 $57 = sp + 256 | 0;
 $58 = sp + 252 | 0;
 $59 = sp + 248 | 0;
 $60 = sp + 244 | 0;
 $61 = sp + 240 | 0;
 $62 = sp + 236 | 0;
 $63 = sp + 232 | 0;
 $64 = sp + 228 | 0;
 $65 = sp + 224 | 0;
 $66 = sp + 220 | 0;
 $67 = sp + 216 | 0;
 $68 = sp + 212 | 0;
 $69 = sp + 208 | 0;
 $70 = sp + 204 | 0;
 $71 = sp + 200 | 0;
 $72 = sp + 196 | 0;
 $73 = sp + 192 | 0;
 $74 = sp + 188 | 0;
 $75 = sp + 184 | 0;
 $76 = sp + 180 | 0;
 $77 = sp + 176 | 0;
 $78 = sp + 172 | 0;
 $79 = sp + 168 | 0;
 $80 = sp + 164 | 0;
 $81 = sp + 8 | 0;
 $82 = sp;
 $83 = sp + 160 | 0;
 $84 = sp + 156 | 0;
 $85 = sp + 152 | 0;
 $86 = sp + 148 | 0;
 $87 = sp + 144 | 0;
 $88 = sp + 140 | 0;
 $89 = sp + 136 | 0;
 $90 = sp + 132 | 0;
 $91 = sp + 128 | 0;
 $92 = sp + 124 | 0;
 $93 = sp + 120 | 0;
 $94 = sp + 116 | 0;
 $95 = sp + 112 | 0;
 $96 = sp + 108 | 0;
 $97 = sp + 104 | 0;
 $98 = sp + 100 | 0;
 $99 = sp + 96 | 0;
 $100 = sp + 92 | 0;
 $101 = sp + 88 | 0;
 $102 = sp + 84 | 0;
 $103 = sp + 80 | 0;
 $104 = sp + 76 | 0;
 $105 = sp + 72 | 0;
 $106 = sp + 68 | 0;
 $107 = sp + 64 | 0;
 $108 = sp + 60 | 0;
 $109 = sp + 56 | 0;
 $110 = sp + 52 | 0;
 $111 = sp + 48 | 0;
 $112 = sp + 44 | 0;
 $113 = sp + 40 | 0;
 $114 = sp + 36 | 0;
 $115 = sp + 32 | 0;
 $116 = sp + 28 | 0;
 $117 = sp + 24 | 0;
 $118 = sp + 20 | 0;
 $119 = sp + 16 | 0;
 $120 = sp + 12 | 0;
 $121 = sp + 485 | 0;
 $122 = sp + 484 | 0;
 HEAP32[$116 >> 2] = $0;
 HEAP32[$117 >> 2] = $1;
 $123 = HEAP32[$116 >> 2] | 0;
 HEAP32[$123 >> 2] = HEAP32[$117 >> 2];
 $125 = HEAP32[$117 >> 2] | 0;
 HEAP32[$114 >> 2] = $118;
 HEAP32[$115 >> 2] = $125;
 HEAP32[$112 >> 2] = HEAP32[$114 >> 2];
 HEAP32[$113 >> 2] = $115;
 $127 = HEAP32[$112 >> 2] | 0;
 HEAP32[$111 >> 2] = HEAP32[$113 >> 2];
 $129 = HEAP32[$111 >> 2] | 0;
 HEAP32[$109 >> 2] = $127;
 HEAP32[$110 >> 2] = $129;
 $130 = HEAP32[$109 >> 2] | 0;
 HEAP32[$108 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$130 >> 2] = HEAP32[HEAP32[$108 >> 2] >> 2];
 __THREW__ = 0;
 $134 = invoke_ii(79, 16) | 0;
 $135 = __THREW__;
 __THREW__ = 0;
 if ($135 & 1) {
  $283 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$119 >> 2] = $283;
  HEAP32[$120 >> 2] = tempRet0;
  HEAP32[$107 >> 2] = $118;
  HEAP32[$104 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$105 >> 2] = 0;
  $286 = HEAP32[$104 >> 2] | 0;
  HEAP32[$103 >> 2] = $286;
  HEAP32[$102 >> 2] = HEAP32[$103 >> 2];
  HEAP32[$106 >> 2] = HEAP32[HEAP32[$102 >> 2] >> 2];
  $290 = HEAP32[$105 >> 2] | 0;
  HEAP32[$99 >> 2] = $286;
  HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
  HEAP32[HEAP32[$98 >> 2] >> 2] = $290;
  if (!(HEAP32[$106 >> 2] | 0)) {
   $303 = HEAP32[$119 >> 2] | 0;
   $304 = HEAP32[$120 >> 2] | 0;
   ___resumeException($303 | 0);
  }
  HEAP32[$97 >> 2] = $286;
  HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
  $297 = HEAP32[$106 >> 2] | 0;
  HEAP32[$100 >> 2] = HEAP32[$96 >> 2];
  HEAP32[$101 >> 2] = $297;
  $298 = HEAP32[$101 >> 2] | 0;
  if (!$298) {
   $303 = HEAP32[$119 >> 2] | 0;
   $304 = HEAP32[$120 >> 2] | 0;
   ___resumeException($303 | 0);
  }
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$298 >> 2] | 0) + 4 >> 2] & 255]($298);
  $303 = HEAP32[$119 >> 2] | 0;
  $304 = HEAP32[$120 >> 2] | 0;
  ___resumeException($303 | 0);
 }
 $137 = HEAP32[$117 >> 2] | 0;
 HEAP32[$95 >> 2] = $122;
 HEAP8[$81 >> 0] = HEAP8[$122 >> 0] | 0;
 HEAP8[$82 >> 0] = HEAP8[$121 >> 0] | 0;
 HEAP32[$78 >> 2] = $134;
 HEAP32[$79 >> 2] = $137;
 $138 = HEAP32[$78 >> 2] | 0;
 HEAP32[$76 >> 2] = $138;
 HEAP32[$77 >> 2] = 0;
 $139 = HEAP32[$76 >> 2] | 0;
 $140 = HEAP32[$77 >> 2] | 0;
 HEAP32[$74 >> 2] = $139;
 HEAP32[$75 >> 2] = $140;
 $141 = HEAP32[$74 >> 2] | 0;
 HEAP32[$141 >> 2] = 47864;
 HEAP32[$141 + 4 >> 2] = HEAP32[$75 >> 2];
 HEAP32[$139 >> 2] = 47884;
 HEAP32[$139 + 8 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$138 >> 2] = 43112;
 HEAP32[$50 >> 2] = $82;
 $147 = HEAP32[$50 >> 2] | 0;
 HEAP32[$59 >> 2] = $80;
 HEAP32[$60 >> 2] = $79;
 HEAP32[$61 >> 2] = $147;
 $148 = HEAP32[$59 >> 2] | 0;
 HEAP32[$58 >> 2] = HEAP32[$60 >> 2];
 $150 = HEAP32[$58 >> 2] | 0;
 HEAP32[$52 >> 2] = $148;
 HEAP32[$53 >> 2] = $150;
 $151 = HEAP32[$52 >> 2] | 0;
 HEAP32[$51 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$151 >> 2] = HEAP32[HEAP32[$51 >> 2] >> 2];
 HEAP32[$54 >> 2] = HEAP32[$61 >> 2];
 $156 = HEAP32[$54 >> 2] | 0;
 HEAP32[$56 >> 2] = $148;
 HEAP32[$57 >> 2] = $156;
 HEAP32[$55 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$62 >> 2] = $81;
 $158 = HEAP32[$62 >> 2] | 0;
 HEAP32[$71 >> 2] = $138 + 12;
 HEAP32[$72 >> 2] = $80;
 HEAP32[$73 >> 2] = $158;
 $159 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$72 >> 2];
 $161 = HEAP32[$70 >> 2] | 0;
 HEAP32[$64 >> 2] = $159;
 HEAP32[$65 >> 2] = $161;
 $162 = HEAP32[$64 >> 2] | 0;
 HEAP32[$63 >> 2] = HEAP32[$65 >> 2];
 HEAP32[$162 >> 2] = HEAP32[HEAP32[$63 >> 2] >> 2];
 HEAP32[$66 >> 2] = HEAP32[$73 >> 2];
 $166 = HEAP32[$66 >> 2] | 0;
 HEAP32[$68 >> 2] = $159;
 HEAP32[$69 >> 2] = $166;
 HEAP32[$67 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$123 + 4 >> 2] = $134;
 HEAP32[$7 >> 2] = $118;
 $169 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $169;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
 HEAP32[$4 >> 2] = $169;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
 $175 = HEAP32[$117 >> 2] | 0;
 $179 = HEAP32[$117 >> 2] | 0;
 HEAP32[$46 >> 2] = $123;
 HEAP32[$47 >> 2] = ($175 | 0) == 0 ? 0 : $175 + 4 | 0;
 HEAP32[$48 >> 2] = $179;
 $180 = HEAP32[$46 >> 2] | 0;
 do if (HEAP32[$47 >> 2] | 0) {
  HEAP32[$45 >> 2] = HEAP32[$47 >> 2];
  $184 = HEAP32[$45 >> 2] | 0;
  if (HEAP32[$184 + 4 >> 2] | 0) {
   HEAP32[$44 >> 2] = HEAP32[$184 + 4 >> 2];
   HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
   HEAP32[$41 >> 2] = (HEAP32[$43 >> 2] | 0) + 4;
   HEAP32[$42 >> 2] = HEAP32[HEAP32[$41 >> 2] >> 2];
   if ((HEAP32[$42 >> 2] | 0) + 1 | 0) break;
  }
  $198 = HEAP32[$48 >> 2] | 0;
  HEAP32[$38 >> 2] = $49;
  HEAP32[$39 >> 2] = $180;
  HEAP32[$40 >> 2] = $198;
  $199 = HEAP32[$38 >> 2] | 0;
  HEAP32[$199 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$199 + 4 >> 2] = HEAP32[(HEAP32[$39 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$199 + 4 >> 2] | 0) {
   HEAP32[$37 >> 2] = HEAP32[$199 + 4 >> 2];
   HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
   HEAP32[$33 >> 2] = (HEAP32[$36 >> 2] | 0) + 4;
   $213 = HEAP32[$33 >> 2] | 0;
   HEAP32[$34 >> 2] = 1;
   $214 = HEAP32[$34 >> 2] | 0;
   $215 = HEAP32[$213 >> 2] | 0;
   HEAP32[$213 >> 2] = $215 + $214;
   HEAP32[$35 >> 2] = $215 + $214;
  }
  HEAP32[$30 >> 2] = HEAP32[$47 >> 2];
  HEAP32[$31 >> 2] = $49;
  $219 = HEAP32[$30 >> 2] | 0;
  $220 = HEAP32[$31 >> 2] | 0;
  HEAP32[$27 >> 2] = $32;
  HEAP32[$28 >> 2] = $220;
  HEAP32[$29 >> 2] = 0;
  $221 = HEAP32[$27 >> 2] | 0;
  HEAP32[$221 >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
  HEAP32[$221 + 4 >> 2] = HEAP32[(HEAP32[$28 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$221 + 4 >> 2] | 0) {
   HEAP32[$26 >> 2] = HEAP32[$221 + 4 >> 2];
   HEAP32[$23 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
   $235 = HEAP32[$23 >> 2] | 0;
   HEAP32[$24 >> 2] = 1;
   $236 = HEAP32[$24 >> 2] | 0;
   $237 = HEAP32[$235 >> 2] | 0;
   HEAP32[$235 >> 2] = $237 + $236;
   HEAP32[$25 >> 2] = $237 + $236;
  }
  HEAP32[$21 >> 2] = $32;
  HEAP32[$22 >> 2] = $219;
  $240 = HEAP32[$21 >> 2] | 0;
  $241 = HEAP32[$22 >> 2] | 0;
  HEAP32[$18 >> 2] = $240;
  HEAP32[$19 >> 2] = $241;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$20 >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
  HEAP32[$15 >> 2] = HEAP32[$19 >> 2];
  HEAP32[HEAP32[$18 >> 2] >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
  HEAP32[$16 >> 2] = $20;
  HEAP32[HEAP32[$19 >> 2] >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
  $254 = (HEAP32[$22 >> 2] | 0) + 4 | 0;
  HEAP32[$12 >> 2] = $240 + 4;
  HEAP32[$13 >> 2] = $254;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$14 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
  HEAP32[HEAP32[$12 >> 2] >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
  HEAP32[$10 >> 2] = $14;
  HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
  __ZNSt3__28weak_ptrIN3zim6BufferEED2Ev($32);
  __ZNSt3__210shared_ptrIN3zim6BufferEED2Ev($49);
 } while (0);
 HEAP32[$94 >> 2] = $118;
 HEAP32[$91 >> 2] = HEAP32[$94 >> 2];
 HEAP32[$92 >> 2] = 0;
 $266 = HEAP32[$91 >> 2] | 0;
 HEAP32[$90 >> 2] = $266;
 HEAP32[$89 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$93 >> 2] = HEAP32[HEAP32[$89 >> 2] >> 2];
 $270 = HEAP32[$92 >> 2] | 0;
 HEAP32[$86 >> 2] = $266;
 HEAP32[$85 >> 2] = HEAP32[$86 >> 2];
 HEAP32[HEAP32[$85 >> 2] >> 2] = $270;
 if (!(HEAP32[$93 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$84 >> 2] = $266;
 HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
 $277 = HEAP32[$93 >> 2] | 0;
 HEAP32[$87 >> 2] = HEAP32[$83 >> 2];
 HEAP32[$88 >> 2] = $277;
 $278 = HEAP32[$88 >> 2] | 0;
 if (!$278) {
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$278 >> 2] | 0) + 4 >> 2] & 255]($278);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim7ClusterEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $162 = 0, $166 = 0, $169 = 0, $17 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $181 = 0, $19 = 0, $195 = 0, $196 = 0, $20 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $232 = 0, $233 = 0, $234 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $251 = 0, $26 = 0, $263 = 0, $267 = 0, $27 = 0, $274 = 0, $275 = 0, $277 = 0, $28 = 0, $280 = 0, $284 = 0, $29 = 0, $291 = 0, $292 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 $3 = sp + 480 | 0;
 $4 = sp + 476 | 0;
 $5 = sp + 472 | 0;
 $6 = sp + 468 | 0;
 $7 = sp + 464 | 0;
 $8 = sp + 460 | 0;
 $9 = sp + 456 | 0;
 $10 = sp + 452 | 0;
 $11 = sp + 448 | 0;
 $12 = sp + 444 | 0;
 $13 = sp + 440 | 0;
 $14 = sp + 436 | 0;
 $15 = sp + 432 | 0;
 $16 = sp + 428 | 0;
 $17 = sp + 424 | 0;
 $18 = sp + 420 | 0;
 $19 = sp + 416 | 0;
 $20 = sp + 412 | 0;
 $21 = sp + 408 | 0;
 $22 = sp + 404 | 0;
 $23 = sp + 400 | 0;
 $24 = sp + 396 | 0;
 $25 = sp + 392 | 0;
 $26 = sp + 384 | 0;
 $27 = sp + 380 | 0;
 $28 = sp + 376 | 0;
 $29 = sp + 372 | 0;
 $30 = sp + 368 | 0;
 $31 = sp + 364 | 0;
 $32 = sp + 360 | 0;
 $33 = sp + 356 | 0;
 $34 = sp + 352 | 0;
 $35 = sp + 348 | 0;
 $36 = sp + 344 | 0;
 $37 = sp + 340 | 0;
 $38 = sp + 336 | 0;
 $39 = sp + 332 | 0;
 $40 = sp + 328 | 0;
 $41 = sp + 324 | 0;
 $42 = sp + 320 | 0;
 $43 = sp + 312 | 0;
 $44 = sp + 308 | 0;
 $45 = sp + 304 | 0;
 $46 = sp + 300 | 0;
 $47 = sp + 296 | 0;
 $48 = sp + 292 | 0;
 $49 = sp + 288 | 0;
 $50 = sp + 284 | 0;
 $51 = sp + 280 | 0;
 $52 = sp + 276 | 0;
 $53 = sp + 272 | 0;
 $54 = sp + 268 | 0;
 $55 = sp + 264 | 0;
 $56 = sp + 260 | 0;
 $57 = sp + 256 | 0;
 $58 = sp + 252 | 0;
 $59 = sp + 248 | 0;
 $60 = sp + 244 | 0;
 $61 = sp + 240 | 0;
 $62 = sp + 236 | 0;
 $63 = sp + 232 | 0;
 $64 = sp + 228 | 0;
 $65 = sp + 224 | 0;
 $66 = sp + 220 | 0;
 $67 = sp + 216 | 0;
 $68 = sp + 212 | 0;
 $69 = sp + 208 | 0;
 $70 = sp + 204 | 0;
 $71 = sp + 200 | 0;
 $72 = sp + 196 | 0;
 $73 = sp + 192 | 0;
 $74 = sp + 188 | 0;
 $75 = sp + 184 | 0;
 $76 = sp + 180 | 0;
 $77 = sp + 176 | 0;
 $78 = sp + 172 | 0;
 $79 = sp + 168 | 0;
 $80 = sp + 164 | 0;
 $81 = sp + 160 | 0;
 $82 = sp + 156 | 0;
 $83 = sp + 152 | 0;
 $84 = sp + 148 | 0;
 $85 = sp + 144 | 0;
 $86 = sp + 140 | 0;
 $87 = sp + 136 | 0;
 $88 = sp + 132 | 0;
 $89 = sp + 128 | 0;
 $90 = sp + 124 | 0;
 $91 = sp + 120 | 0;
 $92 = sp + 116 | 0;
 $93 = sp + 8 | 0;
 $94 = sp;
 $95 = sp + 112 | 0;
 $96 = sp + 108 | 0;
 $97 = sp + 104 | 0;
 $98 = sp + 100 | 0;
 $99 = sp + 96 | 0;
 $100 = sp + 92 | 0;
 $101 = sp + 88 | 0;
 $102 = sp + 84 | 0;
 $103 = sp + 80 | 0;
 $104 = sp + 76 | 0;
 $105 = sp + 72 | 0;
 $106 = sp + 68 | 0;
 $107 = sp + 64 | 0;
 $108 = sp + 60 | 0;
 $109 = sp + 56 | 0;
 $110 = sp + 52 | 0;
 $111 = sp + 48 | 0;
 $112 = sp + 44 | 0;
 $113 = sp + 40 | 0;
 $114 = sp + 36 | 0;
 $115 = sp + 32 | 0;
 $116 = sp + 28 | 0;
 $117 = sp + 24 | 0;
 $118 = sp + 20 | 0;
 $119 = sp + 16 | 0;
 $120 = sp + 12 | 0;
 $121 = sp + 485 | 0;
 $122 = sp + 484 | 0;
 HEAP32[$116 >> 2] = $0;
 HEAP32[$117 >> 2] = $1;
 $123 = HEAP32[$116 >> 2] | 0;
 HEAP32[$123 >> 2] = HEAP32[$117 >> 2];
 $125 = HEAP32[$117 >> 2] | 0;
 HEAP32[$114 >> 2] = $118;
 HEAP32[$115 >> 2] = $125;
 HEAP32[$112 >> 2] = HEAP32[$114 >> 2];
 HEAP32[$113 >> 2] = $115;
 $127 = HEAP32[$112 >> 2] | 0;
 HEAP32[$111 >> 2] = HEAP32[$113 >> 2];
 $129 = HEAP32[$111 >> 2] | 0;
 HEAP32[$109 >> 2] = $127;
 HEAP32[$110 >> 2] = $129;
 $130 = HEAP32[$109 >> 2] | 0;
 HEAP32[$108 >> 2] = HEAP32[$110 >> 2];
 HEAP32[$130 >> 2] = HEAP32[HEAP32[$108 >> 2] >> 2];
 __THREW__ = 0;
 $134 = invoke_ii(79, 16) | 0;
 $135 = __THREW__;
 __THREW__ = 0;
 if ($135 & 1) {
  $277 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$119 >> 2] = $277;
  HEAP32[$120 >> 2] = tempRet0;
  HEAP32[$107 >> 2] = $118;
  HEAP32[$104 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$105 >> 2] = 0;
  $280 = HEAP32[$104 >> 2] | 0;
  HEAP32[$103 >> 2] = $280;
  HEAP32[$102 >> 2] = HEAP32[$103 >> 2];
  HEAP32[$106 >> 2] = HEAP32[HEAP32[$102 >> 2] >> 2];
  $284 = HEAP32[$105 >> 2] | 0;
  HEAP32[$99 >> 2] = $280;
  HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
  HEAP32[HEAP32[$98 >> 2] >> 2] = $284;
  if (!(HEAP32[$106 >> 2] | 0)) {
   $294 = HEAP32[$119 >> 2] | 0;
   $295 = HEAP32[$120 >> 2] | 0;
   ___resumeException($294 | 0);
  }
  HEAP32[$97 >> 2] = $280;
  HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
  $291 = HEAP32[$106 >> 2] | 0;
  HEAP32[$100 >> 2] = HEAP32[$96 >> 2];
  HEAP32[$101 >> 2] = $291;
  $292 = HEAP32[$101 >> 2] | 0;
  if (!$292) {
   $294 = HEAP32[$119 >> 2] | 0;
   $295 = HEAP32[$120 >> 2] | 0;
   ___resumeException($294 | 0);
  }
  __ZN3zim7ClusterD2Ev($292);
  __ZdlPv($292);
  $294 = HEAP32[$119 >> 2] | 0;
  $295 = HEAP32[$120 >> 2] | 0;
  ___resumeException($294 | 0);
 }
 $137 = HEAP32[$117 >> 2] | 0;
 HEAP32[$95 >> 2] = $122;
 HEAP8[$93 >> 0] = HEAP8[$122 >> 0] | 0;
 HEAP8[$94 >> 0] = HEAP8[$121 >> 0] | 0;
 HEAP32[$90 >> 2] = $134;
 HEAP32[$91 >> 2] = $137;
 $138 = HEAP32[$90 >> 2] | 0;
 HEAP32[$88 >> 2] = $138;
 HEAP32[$89 >> 2] = 0;
 $139 = HEAP32[$88 >> 2] | 0;
 $140 = HEAP32[$89 >> 2] | 0;
 HEAP32[$86 >> 2] = $139;
 HEAP32[$87 >> 2] = $140;
 $141 = HEAP32[$86 >> 2] | 0;
 HEAP32[$141 >> 2] = 47864;
 HEAP32[$141 + 4 >> 2] = HEAP32[$87 >> 2];
 HEAP32[$139 >> 2] = 47884;
 HEAP32[$139 + 8 >> 2] = HEAP32[$89 >> 2];
 HEAP32[$138 >> 2] = 43468;
 HEAP32[$62 >> 2] = $94;
 $147 = HEAP32[$62 >> 2] | 0;
 HEAP32[$71 >> 2] = $92;
 HEAP32[$72 >> 2] = $91;
 HEAP32[$73 >> 2] = $147;
 $148 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$72 >> 2];
 $150 = HEAP32[$70 >> 2] | 0;
 HEAP32[$64 >> 2] = $148;
 HEAP32[$65 >> 2] = $150;
 $151 = HEAP32[$64 >> 2] | 0;
 HEAP32[$63 >> 2] = HEAP32[$65 >> 2];
 HEAP32[$151 >> 2] = HEAP32[HEAP32[$63 >> 2] >> 2];
 HEAP32[$66 >> 2] = HEAP32[$73 >> 2];
 $156 = HEAP32[$66 >> 2] | 0;
 HEAP32[$68 >> 2] = $148;
 HEAP32[$69 >> 2] = $156;
 HEAP32[$67 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$74 >> 2] = $93;
 $158 = HEAP32[$74 >> 2] | 0;
 HEAP32[$83 >> 2] = $138 + 12;
 HEAP32[$84 >> 2] = $92;
 HEAP32[$85 >> 2] = $158;
 $159 = HEAP32[$83 >> 2] | 0;
 HEAP32[$82 >> 2] = HEAP32[$84 >> 2];
 $161 = HEAP32[$82 >> 2] | 0;
 HEAP32[$76 >> 2] = $159;
 HEAP32[$77 >> 2] = $161;
 $162 = HEAP32[$76 >> 2] | 0;
 HEAP32[$75 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$162 >> 2] = HEAP32[HEAP32[$75 >> 2] >> 2];
 HEAP32[$78 >> 2] = HEAP32[$85 >> 2];
 $166 = HEAP32[$78 >> 2] | 0;
 HEAP32[$80 >> 2] = $159;
 HEAP32[$81 >> 2] = $166;
 HEAP32[$79 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$123 + 4 >> 2] = $134;
 HEAP32[$48 >> 2] = $118;
 $169 = HEAP32[$48 >> 2] | 0;
 HEAP32[$47 >> 2] = $169;
 HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
 HEAP32[$49 >> 2] = HEAP32[HEAP32[$46 >> 2] >> 2];
 HEAP32[$45 >> 2] = $169;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[HEAP32[$44 >> 2] >> 2] = 0;
 $175 = HEAP32[$117 >> 2] | 0;
 $176 = HEAP32[$117 >> 2] | 0;
 HEAP32[$40 >> 2] = $123;
 HEAP32[$41 >> 2] = $175;
 HEAP32[$42 >> 2] = $176;
 $177 = HEAP32[$40 >> 2] | 0;
 do if (HEAP32[$41 >> 2] | 0) {
  HEAP32[$39 >> 2] = HEAP32[$41 >> 2];
  $181 = HEAP32[$39 >> 2] | 0;
  if (HEAP32[$181 + 4 >> 2] | 0) {
   HEAP32[$38 >> 2] = HEAP32[$181 + 4 >> 2];
   HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
   HEAP32[$35 >> 2] = (HEAP32[$37 >> 2] | 0) + 4;
   HEAP32[$36 >> 2] = HEAP32[HEAP32[$35 >> 2] >> 2];
   if ((HEAP32[$36 >> 2] | 0) + 1 | 0) break;
  }
  $195 = HEAP32[$42 >> 2] | 0;
  HEAP32[$32 >> 2] = $43;
  HEAP32[$33 >> 2] = $177;
  HEAP32[$34 >> 2] = $195;
  $196 = HEAP32[$32 >> 2] | 0;
  HEAP32[$196 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$196 + 4 >> 2] = HEAP32[(HEAP32[$33 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$196 + 4 >> 2] | 0) {
   HEAP32[$31 >> 2] = HEAP32[$196 + 4 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$27 >> 2] = (HEAP32[$30 >> 2] | 0) + 4;
   $210 = HEAP32[$27 >> 2] | 0;
   HEAP32[$28 >> 2] = 1;
   $211 = HEAP32[$28 >> 2] | 0;
   $212 = HEAP32[$210 >> 2] | 0;
   HEAP32[$210 >> 2] = $212 + $211;
   HEAP32[$29 >> 2] = $212 + $211;
  }
  HEAP32[$24 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$25 >> 2] = $43;
  $216 = HEAP32[$24 >> 2] | 0;
  $217 = HEAP32[$25 >> 2] | 0;
  HEAP32[$21 >> 2] = $26;
  HEAP32[$22 >> 2] = $217;
  HEAP32[$23 >> 2] = 0;
  $218 = HEAP32[$21 >> 2] | 0;
  HEAP32[$218 >> 2] = HEAP32[HEAP32[$22 >> 2] >> 2];
  HEAP32[$218 + 4 >> 2] = HEAP32[(HEAP32[$22 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$218 + 4 >> 2] | 0) {
   HEAP32[$20 >> 2] = HEAP32[$218 + 4 >> 2];
   HEAP32[$17 >> 2] = (HEAP32[$20 >> 2] | 0) + 8;
   $232 = HEAP32[$17 >> 2] | 0;
   HEAP32[$18 >> 2] = 1;
   $233 = HEAP32[$18 >> 2] | 0;
   $234 = HEAP32[$232 >> 2] | 0;
   HEAP32[$232 >> 2] = $234 + $233;
   HEAP32[$19 >> 2] = $234 + $233;
  }
  HEAP32[$15 >> 2] = $26;
  HEAP32[$16 >> 2] = $216;
  $237 = HEAP32[$15 >> 2] | 0;
  $238 = HEAP32[$16 >> 2] | 0;
  HEAP32[$12 >> 2] = $237;
  HEAP32[$13 >> 2] = $238;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$14 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  HEAP32[$9 >> 2] = HEAP32[$13 >> 2];
  HEAP32[HEAP32[$12 >> 2] >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
  HEAP32[$10 >> 2] = $14;
  HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
  $251 = (HEAP32[$16 >> 2] | 0) + 4 | 0;
  HEAP32[$6 >> 2] = $237 + 4;
  HEAP32[$7 >> 2] = $251;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
  HEAP32[$4 >> 2] = $8;
  HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
  __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($26);
  __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($43);
 } while (0);
 HEAP32[$61 >> 2] = $118;
 HEAP32[$58 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$59 >> 2] = 0;
 $263 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = $263;
 HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$60 >> 2] = HEAP32[HEAP32[$56 >> 2] >> 2];
 $267 = HEAP32[$59 >> 2] | 0;
 HEAP32[$53 >> 2] = $263;
 HEAP32[$52 >> 2] = HEAP32[$53 >> 2];
 HEAP32[HEAP32[$52 >> 2] >> 2] = $267;
 if (!(HEAP32[$60 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$51 >> 2] = $263;
 HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
 $274 = HEAP32[$60 >> 2] | 0;
 HEAP32[$54 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$55 >> 2] = $274;
 $275 = HEAP32[$55 >> 2] | 0;
 if (!$275) {
  STACKTOP = sp;
  return;
 }
 __ZN3zim7ClusterD2Ev($275);
 __ZdlPv($275);
 STACKTOP = sp;
 return;
}

function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$041722 = 0, $$0418$lcssa = 0, $$041821 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1424$be = 0, $$1424$ph = 0, $$1427 = 0, $$1427$be = 0, $$1427$ph = 0, $$1431 = 0, $$1431$be = 0, $$1431$ph = 0, $$1435 = 0, $$1435$be = 0, $$1435$ph = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre$phi28Z2D = 0, $$pre$phi30Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $194 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $277 = 0, $289 = 0, $294 = 0, $301 = 0, $302 = 0, $303 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $80 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0;
 $2 = $0 + $1 | 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0;
 L1 : do if (!($4 & 1)) {
  $7 = HEAP32[$0 >> 2] | 0;
  if (!($4 & 3)) return;
  $11 = $0 + (0 - $7) | 0;
  $12 = $7 + $1 | 0;
  $13 = HEAP32[15178] | 0;
  if ($11 >>> 0 < $13 >>> 0) _abort();
  if ((HEAP32[15179] | 0) == ($11 | 0)) {
   $101 = $2 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   if (($102 & 3 | 0) != 3) {
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   HEAP32[15176] = $12;
   HEAP32[$101 >> 2] = $102 & -2;
   HEAP32[$11 + 4 >> 2] = $12 | 1;
   HEAP32[$2 >> 2] = $12;
   return;
  }
  $17 = $7 >>> 3;
  if ($7 >>> 0 < 256) {
   $20 = HEAP32[$11 + 8 >> 2] | 0;
   $22 = HEAP32[$11 + 12 >> 2] | 0;
   $24 = 60736 + ($17 << 1 << 2) | 0;
   if (($20 | 0) != ($24 | 0)) {
    if ($13 >>> 0 > $20 >>> 0) _abort();
    if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) _abort();
   }
   if (($22 | 0) == ($20 | 0)) {
    HEAP32[15174] = HEAP32[15174] & ~(1 << $17);
    $$1 = $11;
    $$1416 = $12;
    break;
   }
   if (($22 | 0) == ($24 | 0)) $$pre$phi30Z2D = $22 + 8 | 0; else {
    if ($13 >>> 0 > $22 >>> 0) _abort();
    $37 = $22 + 8 | 0;
    if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) $$pre$phi30Z2D = $37; else _abort();
   }
   HEAP32[$20 + 12 >> 2] = $22;
   HEAP32[$$pre$phi30Z2D >> 2] = $20;
   $$1 = $11;
   $$1416 = $12;
   break;
  }
  $42 = HEAP32[$11 + 24 >> 2] | 0;
  $44 = HEAP32[$11 + 12 >> 2] | 0;
  do if (($44 | 0) == ($11 | 0)) {
   $55 = $11 + 16 | 0;
   $56 = $55 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   if (!$57) {
    $59 = HEAP32[$55 >> 2] | 0;
    if (!$59) {
     $$3 = 0;
     break;
    } else {
     $$1424$ph = $59;
     $$1427$ph = $55;
    }
   } else {
    $$1424$ph = $57;
    $$1427$ph = $56;
   }
   $$1424 = $$1424$ph;
   $$1427 = $$1427$ph;
   while (1) {
    $61 = $$1424 + 20 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    if (!$62) {
     $64 = $$1424 + 16 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if (!$65) break; else {
      $$1424$be = $65;
      $$1427$be = $64;
     }
    } else {
     $$1424$be = $62;
     $$1427$be = $61;
    }
    $$1424 = $$1424$be;
    $$1427 = $$1427$be;
   }
   if ($13 >>> 0 > $$1427 >>> 0) _abort(); else {
    HEAP32[$$1427 >> 2] = 0;
    $$3 = $$1424;
    break;
   }
  } else {
   $47 = HEAP32[$11 + 8 >> 2] | 0;
   if ($13 >>> 0 > $47 >>> 0) _abort();
   $49 = $47 + 12 | 0;
   if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) _abort();
   $52 = $44 + 8 | 0;
   if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$49 >> 2] = $44;
    HEAP32[$52 >> 2] = $47;
    $$3 = $44;
    break;
   } else _abort();
  } while (0);
  if (!$42) {
   $$1 = $11;
   $$1416 = $12;
  } else {
   $70 = HEAP32[$11 + 28 >> 2] | 0;
   $71 = 61e3 + ($70 << 2) | 0;
   do if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
    HEAP32[$71 >> 2] = $$3;
    if (!$$3) {
     HEAP32[15175] = HEAP32[15175] & ~(1 << $70);
     $$1 = $11;
     $$1416 = $12;
     break L1;
    }
   } else if ((HEAP32[15178] | 0) >>> 0 > $42 >>> 0) _abort(); else {
    $80 = $42 + 16 | 0;
    HEAP32[((HEAP32[$80 >> 2] | 0) == ($11 | 0) ? $80 : $42 + 20 | 0) >> 2] = $$3;
    if (!$$3) {
     $$1 = $11;
     $$1416 = $12;
     break L1;
    } else break;
   } while (0);
   $85 = HEAP32[15178] | 0;
   if ($85 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $42;
   $88 = $11 + 16 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   do if ($89 | 0) if ($85 >>> 0 > $89 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $89;
    HEAP32[$89 + 24 >> 2] = $$3;
    break;
   } while (0);
   $95 = HEAP32[$88 + 4 >> 2] | 0;
   if (!$95) {
    $$1 = $11;
    $$1416 = $12;
   } else if ((HEAP32[15178] | 0) >>> 0 > $95 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $95;
    HEAP32[$95 + 24 >> 2] = $$3;
    $$1 = $11;
    $$1416 = $12;
    break;
   }
  }
 } else {
  $$1 = $0;
  $$1416 = $1;
 } while (0);
 $108 = HEAP32[15178] | 0;
 if ($2 >>> 0 < $108 >>> 0) _abort();
 $110 = $2 + 4 | 0;
 $111 = HEAP32[$110 >> 2] | 0;
 if (!($111 & 2)) {
  if ((HEAP32[15180] | 0) == ($2 | 0)) {
   $117 = (HEAP32[15177] | 0) + $$1416 | 0;
   HEAP32[15177] = $117;
   HEAP32[15180] = $$1;
   HEAP32[$$1 + 4 >> 2] = $117 | 1;
   if (($$1 | 0) != (HEAP32[15179] | 0)) return;
   HEAP32[15179] = 0;
   HEAP32[15176] = 0;
   return;
  }
  if ((HEAP32[15179] | 0) == ($2 | 0)) {
   $125 = (HEAP32[15176] | 0) + $$1416 | 0;
   HEAP32[15176] = $125;
   HEAP32[15179] = $$1;
   HEAP32[$$1 + 4 >> 2] = $125 | 1;
   HEAP32[$$1 + $125 >> 2] = $125;
   return;
  }
  $130 = ($111 & -8) + $$1416 | 0;
  $131 = $111 >>> 3;
  L99 : do if ($111 >>> 0 < 256) {
   $134 = HEAP32[$2 + 8 >> 2] | 0;
   $136 = HEAP32[$2 + 12 >> 2] | 0;
   $138 = 60736 + ($131 << 1 << 2) | 0;
   if (($134 | 0) != ($138 | 0)) {
    if ($108 >>> 0 > $134 >>> 0) _abort();
    if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) _abort();
   }
   if (($136 | 0) == ($134 | 0)) {
    HEAP32[15174] = HEAP32[15174] & ~(1 << $131);
    break;
   }
   if (($136 | 0) == ($138 | 0)) $$pre$phi28Z2D = $136 + 8 | 0; else {
    if ($108 >>> 0 > $136 >>> 0) _abort();
    $151 = $136 + 8 | 0;
    if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) $$pre$phi28Z2D = $151; else _abort();
   }
   HEAP32[$134 + 12 >> 2] = $136;
   HEAP32[$$pre$phi28Z2D >> 2] = $134;
  } else {
   $156 = HEAP32[$2 + 24 >> 2] | 0;
   $158 = HEAP32[$2 + 12 >> 2] | 0;
   do if (($158 | 0) == ($2 | 0)) {
    $169 = $2 + 16 | 0;
    $170 = $169 + 4 | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    if (!$171) {
     $173 = HEAP32[$169 >> 2] | 0;
     if (!$173) {
      $$3433 = 0;
      break;
     } else {
      $$1431$ph = $173;
      $$1435$ph = $169;
     }
    } else {
     $$1431$ph = $171;
     $$1435$ph = $170;
    }
    $$1431 = $$1431$ph;
    $$1435 = $$1435$ph;
    while (1) {
     $175 = $$1431 + 20 | 0;
     $176 = HEAP32[$175 >> 2] | 0;
     if (!$176) {
      $178 = $$1431 + 16 | 0;
      $179 = HEAP32[$178 >> 2] | 0;
      if (!$179) break; else {
       $$1431$be = $179;
       $$1435$be = $178;
      }
     } else {
      $$1431$be = $176;
      $$1435$be = $175;
     }
     $$1431 = $$1431$be;
     $$1435 = $$1435$be;
    }
    if ($108 >>> 0 > $$1435 >>> 0) _abort(); else {
     HEAP32[$$1435 >> 2] = 0;
     $$3433 = $$1431;
     break;
    }
   } else {
    $161 = HEAP32[$2 + 8 >> 2] | 0;
    if ($108 >>> 0 > $161 >>> 0) _abort();
    $163 = $161 + 12 | 0;
    if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) _abort();
    $166 = $158 + 8 | 0;
    if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$163 >> 2] = $158;
     HEAP32[$166 >> 2] = $161;
     $$3433 = $158;
     break;
    } else _abort();
   } while (0);
   if ($156 | 0) {
    $184 = HEAP32[$2 + 28 >> 2] | 0;
    $185 = 61e3 + ($184 << 2) | 0;
    do if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$185 >> 2] = $$3433;
     if (!$$3433) {
      HEAP32[15175] = HEAP32[15175] & ~(1 << $184);
      break L99;
     }
    } else if ((HEAP32[15178] | 0) >>> 0 > $156 >>> 0) _abort(); else {
     $194 = $156 + 16 | 0;
     HEAP32[((HEAP32[$194 >> 2] | 0) == ($2 | 0) ? $194 : $156 + 20 | 0) >> 2] = $$3433;
     if (!$$3433) break L99; else break;
    } while (0);
    $199 = HEAP32[15178] | 0;
    if ($199 >>> 0 > $$3433 >>> 0) _abort();
    HEAP32[$$3433 + 24 >> 2] = $156;
    $202 = $2 + 16 | 0;
    $203 = HEAP32[$202 >> 2] | 0;
    do if ($203 | 0) if ($199 >>> 0 > $203 >>> 0) _abort(); else {
     HEAP32[$$3433 + 16 >> 2] = $203;
     HEAP32[$203 + 24 >> 2] = $$3433;
     break;
    } while (0);
    $209 = HEAP32[$202 + 4 >> 2] | 0;
    if ($209 | 0) if ((HEAP32[15178] | 0) >>> 0 > $209 >>> 0) _abort(); else {
     HEAP32[$$3433 + 20 >> 2] = $209;
     HEAP32[$209 + 24 >> 2] = $$3433;
     break;
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1;
  HEAP32[$$1 + $130 >> 2] = $130;
  if (($$1 | 0) == (HEAP32[15179] | 0)) {
   HEAP32[15176] = $130;
   return;
  } else $$2 = $130;
 } else {
  HEAP32[$110 >> 2] = $111 & -2;
  HEAP32[$$1 + 4 >> 2] = $$1416 | 1;
  HEAP32[$$1 + $$1416 >> 2] = $$1416;
  $$2 = $$1416;
 }
 $224 = $$2 >>> 3;
 if ($$2 >>> 0 < 256) {
  $227 = 60736 + ($224 << 1 << 2) | 0;
  $228 = HEAP32[15174] | 0;
  $229 = 1 << $224;
  if (!($228 & $229)) {
   HEAP32[15174] = $228 | $229;
   $$0436 = $227;
   $$pre$phiZ2D = $227 + 8 | 0;
  } else {
   $233 = $227 + 8 | 0;
   $234 = HEAP32[$233 >> 2] | 0;
   if ((HEAP32[15178] | 0) >>> 0 > $234 >>> 0) _abort(); else {
    $$0436 = $234;
    $$pre$phiZ2D = $233;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1;
  HEAP32[$$0436 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$0436;
  HEAP32[$$1 + 12 >> 2] = $227;
  return;
 }
 $240 = $$2 >>> 8;
 if (!$240) $$0429 = 0; else if ($$2 >>> 0 > 16777215) $$0429 = 31; else {
  $245 = ($240 + 1048320 | 0) >>> 16 & 8;
  $246 = $240 << $245;
  $249 = ($246 + 520192 | 0) >>> 16 & 4;
  $251 = $246 << $249;
  $254 = ($251 + 245760 | 0) >>> 16 & 2;
  $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0;
  $$0429 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1;
 }
 $265 = 61e3 + ($$0429 << 2) | 0;
 HEAP32[$$1 + 28 >> 2] = $$0429;
 HEAP32[$$1 + 20 >> 2] = 0;
 HEAP32[$$1 + 16 >> 2] = 0;
 $269 = HEAP32[15175] | 0;
 $270 = 1 << $$0429;
 if (!($269 & $270)) {
  HEAP32[15175] = $269 | $270;
  HEAP32[$265 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $265;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 }
 $277 = HEAP32[$265 >> 2] | 0;
 L189 : do if ((HEAP32[$277 + 4 >> 2] & -8 | 0) == ($$2 | 0)) $$0418$lcssa = $277; else {
  $$041722 = $$2 << (($$0429 | 0) == 31 ? 0 : 25 - ($$0429 >>> 1) | 0);
  $$041821 = $277;
  while (1) {
   $294 = $$041821 + 16 + ($$041722 >>> 31 << 2) | 0;
   $289 = HEAP32[$294 >> 2] | 0;
   if (!$289) break;
   if ((HEAP32[$289 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
    $$0418$lcssa = $289;
    break L189;
   } else {
    $$041722 = $$041722 << 1;
    $$041821 = $289;
   }
  }
  if ((HEAP32[15178] | 0) >>> 0 > $294 >>> 0) _abort();
  HEAP32[$294 >> 2] = $$1;
  HEAP32[$$1 + 24 >> 2] = $$041821;
  HEAP32[$$1 + 12 >> 2] = $$1;
  HEAP32[$$1 + 8 >> 2] = $$1;
  return;
 } while (0);
 $301 = $$0418$lcssa + 8 | 0;
 $302 = HEAP32[$301 >> 2] | 0;
 $303 = HEAP32[15178] | 0;
 if (!($303 >>> 0 <= $302 >>> 0 & $303 >>> 0 <= $$0418$lcssa >>> 0)) _abort();
 HEAP32[$302 + 12 >> 2] = $$1;
 HEAP32[$301 >> 2] = $$1;
 HEAP32[$$1 + 8 >> 2] = $302;
 HEAP32[$$1 + 12 >> 2] = $$0418$lcssa;
 HEAP32[$$1 + 24 >> 2] = 0;
 return;
}

function __ZNSt3__26locale5__impC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$03 = 0, $$1 = 0, $$14 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $111 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $124 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 47344;
 $4 = $0 + 8 | 0;
 __THREW__ = 0;
 invoke_vii(91, $4 | 0, 28);
 $5 = __THREW__;
 __THREW__ = 0;
 if ($5 & 1) {
  $119 = ___cxa_find_matching_catch_2() | 0;
  $$1 = tempRet0;
  $$14 = $119;
 } else {
  $7 = $0 + 144 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  $8 = __ZNSt3__211char_traitsIcE6lengthEPKc(53047) | 0;
  __THREW__ = 0;
  invoke_viii(8, $7 | 0, 53047, $8 | 0);
  $9 = __THREW__;
  __THREW__ = 0;
  if ($9 & 1) {
   $121 = ___cxa_find_matching_catch_2() | 0;
   $$0 = tempRet0;
   $$03 = $121;
  } else {
   HEAP32[$0 + 12 >> 2] = HEAP32[$4 >> 2];
   __THREW__ = 0;
   invoke_v(12);
   $13 = __THREW__;
   __THREW__ = 0;
   do if (!($13 & 1)) {
    __THREW__ = 0;
    invoke_vii(92, $0 | 0, 60144);
    $15 = __THREW__;
    __THREW__ = 0;
    if (!($15 & 1)) {
     __THREW__ = 0;
     invoke_v(13);
     $17 = __THREW__;
     __THREW__ = 0;
     if (!($17 & 1)) {
      __THREW__ = 0;
      invoke_vii(93, $0 | 0, 60152);
      $19 = __THREW__;
      __THREW__ = 0;
      if (!($19 & 1)) {
       __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_();
       __THREW__ = 0;
       invoke_vii(94, $0 | 0, 60160);
       $21 = __THREW__;
       __THREW__ = 0;
       if (!($21 & 1)) {
        __THREW__ = 0;
        invoke_v(14);
        $23 = __THREW__;
        __THREW__ = 0;
        if (!($23 & 1)) {
         __THREW__ = 0;
         invoke_vii(95, $0 | 0, 60176);
         $25 = __THREW__;
         __THREW__ = 0;
         if (!($25 & 1)) {
          __THREW__ = 0;
          invoke_v(15);
          $27 = __THREW__;
          __THREW__ = 0;
          if (!($27 & 1)) {
           __THREW__ = 0;
           invoke_vii(96, $0 | 0, 60184);
           $29 = __THREW__;
           __THREW__ = 0;
           if (!($29 & 1)) {
            __THREW__ = 0;
            invoke_v(16);
            $31 = __THREW__;
            __THREW__ = 0;
            if (!($31 & 1)) {
             __THREW__ = 0;
             invoke_vii(97, $0 | 0, 60192);
             $33 = __THREW__;
             __THREW__ = 0;
             if (!($33 & 1)) {
              __THREW__ = 0;
              invoke_v(17);
              $35 = __THREW__;
              __THREW__ = 0;
              if (!($35 & 1)) {
               __THREW__ = 0;
               invoke_vii(98, $0 | 0, 60208);
               $37 = __THREW__;
               __THREW__ = 0;
               if (!($37 & 1)) {
                __THREW__ = 0;
                invoke_v(18);
                $39 = __THREW__;
                __THREW__ = 0;
                if (!($39 & 1)) {
                 __THREW__ = 0;
                 invoke_vii(99, $0 | 0, 60216);
                 $41 = __THREW__;
                 __THREW__ = 0;
                 if (!($41 & 1)) {
                  __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_();
                  __THREW__ = 0;
                  invoke_vii(100, $0 | 0, 60224);
                  $43 = __THREW__;
                  __THREW__ = 0;
                  if ($43 & 1) break;
                  __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_();
                  __THREW__ = 0;
                  invoke_vii(101, $0 | 0, 60248);
                  $45 = __THREW__;
                  __THREW__ = 0;
                  if ($45 & 1) break;
                  __THREW__ = 0;
                  invoke_v(19);
                  $47 = __THREW__;
                  __THREW__ = 0;
                  if ($47 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(102, $0 | 0, 60280);
                  $49 = __THREW__;
                  __THREW__ = 0;
                  if ($49 & 1) break;
                  __THREW__ = 0;
                  invoke_v(20);
                  $51 = __THREW__;
                  __THREW__ = 0;
                  if ($51 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(103, $0 | 0, 60288);
                  $53 = __THREW__;
                  __THREW__ = 0;
                  if ($53 & 1) break;
                  __THREW__ = 0;
                  invoke_v(21);
                  $55 = __THREW__;
                  __THREW__ = 0;
                  if ($55 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(104, $0 | 0, 60296);
                  $57 = __THREW__;
                  __THREW__ = 0;
                  if ($57 & 1) break;
                  __THREW__ = 0;
                  invoke_v(22);
                  $59 = __THREW__;
                  __THREW__ = 0;
                  if ($59 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(105, $0 | 0, 60304);
                  $61 = __THREW__;
                  __THREW__ = 0;
                  if ($61 & 1) break;
                  __THREW__ = 0;
                  invoke_v(23);
                  $63 = __THREW__;
                  __THREW__ = 0;
                  if ($63 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(106, $0 | 0, 60312);
                  $65 = __THREW__;
                  __THREW__ = 0;
                  if ($65 & 1) break;
                  __THREW__ = 0;
                  invoke_v(24);
                  $67 = __THREW__;
                  __THREW__ = 0;
                  if ($67 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(107, $0 | 0, 60320);
                  $69 = __THREW__;
                  __THREW__ = 0;
                  if ($69 & 1) break;
                  __THREW__ = 0;
                  invoke_v(25);
                  $71 = __THREW__;
                  __THREW__ = 0;
                  if ($71 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(108, $0 | 0, 60328);
                  $73 = __THREW__;
                  __THREW__ = 0;
                  if ($73 & 1) break;
                  __THREW__ = 0;
                  invoke_v(26);
                  $75 = __THREW__;
                  __THREW__ = 0;
                  if ($75 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(109, $0 | 0, 60336);
                  $77 = __THREW__;
                  __THREW__ = 0;
                  if ($77 & 1) break;
                  __THREW__ = 0;
                  invoke_v(27);
                  $79 = __THREW__;
                  __THREW__ = 0;
                  if ($79 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(110, $0 | 0, 60344);
                  $81 = __THREW__;
                  __THREW__ = 0;
                  if ($81 & 1) break;
                  __THREW__ = 0;
                  invoke_v(28);
                  $83 = __THREW__;
                  __THREW__ = 0;
                  if ($83 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(111, $0 | 0, 60352);
                  $85 = __THREW__;
                  __THREW__ = 0;
                  if ($85 & 1) break;
                  __THREW__ = 0;
                  invoke_v(29);
                  $87 = __THREW__;
                  __THREW__ = 0;
                  if ($87 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(112, $0 | 0, 60360);
                  $89 = __THREW__;
                  __THREW__ = 0;
                  if ($89 & 1) break;
                  __THREW__ = 0;
                  invoke_v(30);
                  $91 = __THREW__;
                  __THREW__ = 0;
                  if ($91 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(113, $0 | 0, 60368);
                  $93 = __THREW__;
                  __THREW__ = 0;
                  if ($93 & 1) break;
                  __THREW__ = 0;
                  invoke_v(31);
                  $95 = __THREW__;
                  __THREW__ = 0;
                  if ($95 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(114, $0 | 0, 60376);
                  $97 = __THREW__;
                  __THREW__ = 0;
                  if ($97 & 1) break;
                  __THREW__ = 0;
                  invoke_v(32);
                  $99 = __THREW__;
                  __THREW__ = 0;
                  if ($99 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(115, $0 | 0, 60392);
                  $101 = __THREW__;
                  __THREW__ = 0;
                  if ($101 & 1) break;
                  __THREW__ = 0;
                  invoke_v(33);
                  $103 = __THREW__;
                  __THREW__ = 0;
                  if ($103 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(116, $0 | 0, 60408);
                  $105 = __THREW__;
                  __THREW__ = 0;
                  if ($105 & 1) break;
                  __THREW__ = 0;
                  invoke_v(34);
                  $107 = __THREW__;
                  __THREW__ = 0;
                  if ($107 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(117, $0 | 0, 60424);
                  $109 = __THREW__;
                  __THREW__ = 0;
                  if ($109 & 1) break;
                  __THREW__ = 0;
                  invoke_v(35);
                  $111 = __THREW__;
                  __THREW__ = 0;
                  if ($111 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(118, $0 | 0, 60440);
                  $113 = __THREW__;
                  __THREW__ = 0;
                  if ($113 & 1) break;
                  __THREW__ = 0;
                  invoke_v(36);
                  $115 = __THREW__;
                  __THREW__ = 0;
                  if ($115 & 1) break;
                  __THREW__ = 0;
                  invoke_vii(119, $0 | 0, 60448);
                  $117 = __THREW__;
                  __THREW__ = 0;
                  if ($117 & 1) break;
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while (0);
   $123 = ___cxa_find_matching_catch_2() | 0;
   $124 = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
   $$0 = $124;
   $$03 = $123;
  }
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($4);
  $$1 = $$0;
  $$14 = $$03;
 }
 __ZNSt3__26locale5facetD2Ev($0);
 ___resumeException($$14 | 0);
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKcEEENSG_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS9_ISO_EEEEEEDpOT_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $135 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $145 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $160 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $17 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $18 = 0, $183 = 0, $185 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $193 = 0, $195 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $201 = 0, $203 = 0, $205 = 0, $206 = 0, $21 = 0, $211 = 0, $212 = 0, $22 = 0, $227 = 0, $23 = 0, $231 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $254 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $5 = sp + 488 | 0;
 $6 = sp + 484 | 0;
 $7 = sp + 480 | 0;
 $8 = sp + 476 | 0;
 $9 = sp + 472 | 0;
 $10 = sp + 468 | 0;
 $11 = sp + 464 | 0;
 $12 = sp + 460 | 0;
 $13 = sp + 456 | 0;
 $14 = sp + 452 | 0;
 $15 = sp + 448 | 0;
 $16 = sp + 444 | 0;
 $17 = sp + 440 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 48 | 0;
 $20 = sp + 40 | 0;
 $21 = sp + 436 | 0;
 $22 = sp + 500 | 0;
 $23 = sp + 499 | 0;
 $24 = sp + 498 | 0;
 $25 = sp + 32 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 16 | 0;
 $28 = sp + 432 | 0;
 $29 = sp + 428 | 0;
 $30 = sp + 424 | 0;
 $31 = sp + 420 | 0;
 $32 = sp + 416 | 0;
 $33 = sp + 412 | 0;
 $34 = sp + 497 | 0;
 $35 = sp + 408 | 0;
 $36 = sp + 496 | 0;
 $37 = sp + 404 | 0;
 $38 = sp + 400 | 0;
 $39 = sp + 396 | 0;
 $40 = sp + 392 | 0;
 $41 = sp + 388 | 0;
 $42 = sp + 384 | 0;
 $43 = sp + 8 | 0;
 $44 = sp + 380 | 0;
 $45 = sp + 376 | 0;
 $46 = sp + 372 | 0;
 $47 = sp + 368 | 0;
 $48 = sp + 364 | 0;
 $49 = sp + 360 | 0;
 $50 = sp + 495 | 0;
 $51 = sp + 356 | 0;
 $52 = sp + 352 | 0;
 $53 = sp + 348 | 0;
 $54 = sp + 344 | 0;
 $55 = sp + 340 | 0;
 $56 = sp + 336 | 0;
 $57 = sp + 332 | 0;
 $58 = sp + 328 | 0;
 $59 = sp + 324 | 0;
 $60 = sp + 320 | 0;
 $61 = sp + 316 | 0;
 $62 = sp + 312 | 0;
 $63 = sp + 308 | 0;
 $64 = sp + 304 | 0;
 $65 = sp + 300 | 0;
 $66 = sp + 296 | 0;
 $67 = sp + 292 | 0;
 $68 = sp + 288 | 0;
 $69 = sp + 284 | 0;
 $70 = sp + 280 | 0;
 $71 = sp + 276 | 0;
 $72 = sp + 272 | 0;
 $73 = sp + 268 | 0;
 $74 = sp + 264 | 0;
 $75 = sp + 260 | 0;
 $76 = sp + 256 | 0;
 $77 = sp + 252 | 0;
 $78 = sp + 494 | 0;
 $79 = sp + 248 | 0;
 $80 = sp + 244 | 0;
 $81 = sp + 240 | 0;
 $82 = sp + 236 | 0;
 $83 = sp + 232 | 0;
 $84 = sp + 228 | 0;
 $86 = sp + 220 | 0;
 $87 = sp + 216 | 0;
 $89 = sp + 208 | 0;
 $90 = sp + 204 | 0;
 $91 = sp + 200 | 0;
 $92 = sp + 196 | 0;
 $93 = sp + 192 | 0;
 $94 = sp + 188 | 0;
 $95 = sp + 184 | 0;
 $96 = sp + 180 | 0;
 $97 = sp + 176 | 0;
 $98 = sp + 172 | 0;
 $99 = sp + 168 | 0;
 $100 = sp + 164 | 0;
 $101 = sp + 160 | 0;
 $102 = sp + 156 | 0;
 $103 = sp + 152 | 0;
 $104 = sp;
 $105 = sp + 148 | 0;
 $106 = sp + 144 | 0;
 $107 = sp + 493 | 0;
 $108 = sp + 140 | 0;
 $109 = sp + 136 | 0;
 $110 = sp + 132 | 0;
 $111 = sp + 128 | 0;
 $112 = sp + 124 | 0;
 $113 = sp + 120 | 0;
 $114 = sp + 116 | 0;
 $115 = sp + 112 | 0;
 $116 = sp + 108 | 0;
 $117 = sp + 104 | 0;
 $118 = sp + 100 | 0;
 $119 = sp + 96 | 0;
 $120 = sp + 92 | 0;
 $121 = sp + 88 | 0;
 $122 = sp + 84 | 0;
 $123 = sp + 80 | 0;
 $124 = sp + 76 | 0;
 $125 = sp + 72 | 0;
 $126 = sp + 492 | 0;
 $127 = sp + 64 | 0;
 HEAP32[$121 >> 2] = $1;
 HEAP32[$122 >> 2] = $2;
 HEAP32[$123 >> 2] = $3;
 HEAP32[$124 >> 2] = $4;
 HEAP32[$120 >> 2] = HEAP32[$121 >> 2];
 HEAP32[$119 >> 2] = (HEAP32[$120 >> 2] | 0) + 4;
 HEAP32[$118 >> 2] = HEAP32[$119 >> 2];
 HEAP32[$125 >> 2] = HEAP32[$118 >> 2];
 HEAP8[$126 >> 0] = 0;
 HEAP32[$89 >> 2] = HEAP32[$125 >> 2];
 HEAP32[$90 >> 2] = 1;
 $135 = HEAP32[$90 >> 2] | 0;
 HEAP32[$86 >> 2] = HEAP32[$89 >> 2];
 HEAP32[$87 >> 2] = $135;
 HEAP32[sp + 212 >> 2] = 0;
 $137 = HEAP32[$87 >> 2] | 0;
 HEAP32[sp + 224 >> 2] = HEAP32[$86 >> 2];
 if ($137 >>> 0 > 178956970) {
  HEAP32[$81 >> 2] = 55296;
  $139 = ___cxa_allocate_exception(8) | 0;
  $140 = HEAP32[$81 >> 2] | 0;
  HEAP32[$79 >> 2] = $139;
  HEAP32[$80 >> 2] = $140;
  $141 = HEAP32[$79 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $141 | 0, HEAP32[$80 >> 2] | 0);
  $143 = __THREW__;
  __THREW__ = 0;
  if ($143 & 1) {
   $145 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$82 >> 2] = $145;
   HEAP32[$83 >> 2] = tempRet0;
   ___cxa_free_exception($139 | 0);
   ___resumeException(HEAP32[$82 >> 2] | 0);
  } else {
   HEAP32[$141 >> 2] = 48176;
   ___cxa_throw($139 | 0, 42808, 176);
  }
 }
 HEAP32[$84 >> 2] = (HEAP32[$87 >> 2] | 0) * 24;
 $152 = __Znwm(HEAP32[$84 >> 2] | 0) | 0;
 $153 = HEAP32[$125 >> 2] | 0;
 HEAP32[$76 >> 2] = $127;
 HEAP32[$77 >> 2] = $153;
 HEAP8[$78 >> 0] = 0;
 $154 = HEAP32[$76 >> 2] | 0;
 HEAP32[$154 >> 2] = HEAP32[$77 >> 2];
 HEAP8[$154 + 4 >> 0] = HEAP8[$78 >> 0] & 1;
 HEAP32[$73 >> 2] = $0;
 HEAP32[$74 >> 2] = $152;
 HEAP32[$75 >> 2] = $127;
 $160 = HEAP32[$73 >> 2] | 0;
 HEAP32[$72 >> 2] = HEAP32[$75 >> 2];
 $162 = HEAP32[$72 >> 2] | 0;
 HEAP32[$69 >> 2] = $160;
 HEAP32[$70 >> 2] = $74;
 HEAP32[$71 >> 2] = $162;
 $163 = HEAP32[$69 >> 2] | 0;
 HEAP32[$68 >> 2] = HEAP32[$70 >> 2];
 $165 = HEAP32[$68 >> 2] | 0;
 HEAP32[$62 >> 2] = $163;
 HEAP32[$63 >> 2] = $165;
 $166 = HEAP32[$62 >> 2] | 0;
 HEAP32[$61 >> 2] = HEAP32[$63 >> 2];
 HEAP32[$166 >> 2] = HEAP32[HEAP32[$61 >> 2] >> 2];
 HEAP32[$64 >> 2] = HEAP32[$71 >> 2];
 $172 = HEAP32[$64 >> 2] | 0;
 HEAP32[$66 >> 2] = $163 + 4;
 HEAP32[$67 >> 2] = $172;
 $173 = HEAP32[$66 >> 2] | 0;
 HEAP32[$65 >> 2] = HEAP32[$67 >> 2];
 $175 = HEAP32[$65 >> 2] | 0;
 HEAP32[$173 >> 2] = HEAP32[$175 >> 2];
 HEAP32[$173 + 4 >> 2] = HEAP32[$175 + 4 >> 2];
 $176 = HEAP32[$125 >> 2] | 0;
 HEAP32[$60 >> 2] = $0;
 HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
 HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$57 >> 2] = (HEAP32[HEAP32[$58 >> 2] >> 2] | 0) + 16;
 HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
 $183 = HEAP32[$56 >> 2] | 0;
 HEAP32[$55 >> 2] = HEAP32[$122 >> 2];
 $185 = HEAP32[$55 >> 2] | 0;
 HEAP32[$54 >> 2] = HEAP32[$123 >> 2];
 $187 = HEAP32[$54 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$124 >> 2];
 $189 = HEAP32[$5 >> 2] | 0;
 HEAP32[$45 >> 2] = $176;
 HEAP32[$46 >> 2] = $183;
 HEAP32[$47 >> 2] = $185;
 HEAP32[$48 >> 2] = $187;
 HEAP32[$49 >> 2] = $189;
 $190 = HEAP32[$45 >> 2] | 0;
 $191 = HEAP32[$46 >> 2] | 0;
 HEAP32[$44 >> 2] = HEAP32[$47 >> 2];
 $193 = HEAP32[$44 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$48 >> 2];
 $195 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$49 >> 2];
 $197 = HEAP32[$6 >> 2] | 0;
 HEAP8[$43 >> 0] = HEAP8[$50 >> 0] | 0;
 HEAP32[$38 >> 2] = $190;
 HEAP32[$39 >> 2] = $191;
 HEAP32[$40 >> 2] = $193;
 HEAP32[$41 >> 2] = $195;
 HEAP32[$42 >> 2] = $197;
 $198 = HEAP32[$38 >> 2] | 0;
 $199 = HEAP32[$39 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$40 >> 2];
 $201 = HEAP32[$37 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$41 >> 2];
 $203 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$42 >> 2];
 $205 = HEAP32[$8 >> 2] | 0;
 HEAP32[$29 >> 2] = $198;
 HEAP32[$30 >> 2] = $199;
 HEAP32[$31 >> 2] = $201;
 HEAP32[$32 >> 2] = $203;
 HEAP32[$33 >> 2] = $205;
 $206 = HEAP32[$30 >> 2] | 0;
 HEAP32[$28 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$35 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 HEAP32[$10 >> 2] = HEAP32[$33 >> 2];
 HEAP8[$25 >> 0] = HEAP8[$36 >> 0] | 0;
 HEAP8[$26 >> 0] = HEAP8[$35 >> 0] | 0;
 HEAP8[$26 + 1 >> 0] = HEAP8[$35 + 1 >> 0] | 0;
 HEAP8[$26 + 2 >> 0] = HEAP8[$35 + 2 >> 0] | 0;
 HEAP8[$26 + 3 >> 0] = HEAP8[$35 + 3 >> 0] | 0;
 HEAP8[$27 >> 0] = HEAP8[$34 >> 0] | 0;
 HEAP32[$21 >> 2] = $206;
 $211 = HEAP32[$21 >> 2] | 0;
 HEAP8[$18 >> 0] = HEAP8[$24 >> 0] | 0;
 HEAP8[$19 >> 0] = HEAP8[$23 >> 0] | 0;
 HEAP8[$20 >> 0] = HEAP8[$22 >> 0] | 0;
 HEAP32[$15 >> 2] = $211;
 HEAP32[$16 >> 2] = $26;
 HEAP32[$17 >> 2] = $25;
 $212 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$13 >> 2] >> 2];
 HEAP8[$212 >> 0] = HEAP8[HEAP32[$12 >> 2] >> 0] | 0;
 __ZN3zim15article_index_tC2Ej($212 + 4 | 0, 0);
 HEAP32[$53 >> 2] = $0;
 HEAP32[$52 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$51 >> 2] = (HEAP32[$52 >> 2] | 0) + 4;
 HEAP8[(HEAP32[$51 >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[$126 >> 0] = 1;
 if (HEAP8[$126 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$117 >> 2] = $0;
 HEAP32[$114 >> 2] = HEAP32[$117 >> 2];
 HEAP32[$115 >> 2] = 0;
 $227 = HEAP32[$114 >> 2] | 0;
 HEAP32[$113 >> 2] = $227;
 HEAP32[$112 >> 2] = HEAP32[$113 >> 2];
 HEAP32[$116 >> 2] = HEAP32[HEAP32[$112 >> 2] >> 2];
 $231 = HEAP32[$115 >> 2] | 0;
 HEAP32[$94 >> 2] = $227;
 HEAP32[$93 >> 2] = HEAP32[$94 >> 2];
 HEAP32[HEAP32[$93 >> 2] >> 2] = $231;
 if (!(HEAP32[$116 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$92 >> 2] = $227;
 HEAP32[$91 >> 2] = (HEAP32[$92 >> 2] | 0) + 4;
 $239 = HEAP32[$116 >> 2] | 0;
 HEAP32[$110 >> 2] = HEAP32[$91 >> 2];
 HEAP32[$111 >> 2] = $239;
 $240 = HEAP32[$110 >> 2] | 0;
 if (HEAP8[$240 + 4 >> 0] & 1) {
  $244 = HEAP32[$240 >> 2] | 0;
  HEAP32[$109 >> 2] = (HEAP32[$111 >> 2] | 0) + 16;
  HEAP32[$108 >> 2] = HEAP32[$109 >> 2];
  $248 = HEAP32[$108 >> 2] | 0;
  HEAP32[$105 >> 2] = $244;
  HEAP32[$106 >> 2] = $248;
  $249 = HEAP32[$105 >> 2] | 0;
  $250 = HEAP32[$106 >> 2] | 0;
  HEAP8[$104 >> 0] = HEAP8[$107 >> 0] | 0;
  HEAP32[$102 >> 2] = $249;
  HEAP32[$103 >> 2] = $250;
 }
 if (!(HEAP32[$111 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $254 = HEAP32[$111 >> 2] | 0;
 HEAP32[$99 >> 2] = HEAP32[$240 >> 2];
 HEAP32[$100 >> 2] = $254;
 HEAP32[$101 >> 2] = 1;
 $256 = HEAP32[$100 >> 2] | 0;
 $257 = HEAP32[$101 >> 2] | 0;
 HEAP32[$96 >> 2] = HEAP32[$99 >> 2];
 HEAP32[$97 >> 2] = $256;
 HEAP32[$98 >> 2] = $257;
 HEAP32[$95 >> 2] = HEAP32[$97 >> 2];
 __ZdlPv(HEAP32[$95 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $104 = 0, $112 = 0, $128 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $144 = 0, $145 = 0, $150 = 0, $151 = 0, $154 = 0, $156 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $175 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $199 = 0, $20 = 0, $200 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $210 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $235 = 0, $243 = 0, $251 = 0, $264 = 0, $266 = 0, $277 = 0, $28 = 0, $286 = 0, $289 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $spec$select166 = 0, label = 0;
 L1 : do if ($1 >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $291 = 0;
  $292 = 0;
 } else {
  $7 = $0 + 4 | 0;
  $8 = $0 + 100 | 0;
  do {
   $9 = HEAP32[$7 >> 2] | 0;
   if ($9 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $9 + 1;
    $16 = HEAPU8[$9 >> 0] | 0;
   } else $16 = ___shgetc($0) | 0;
  } while ((_isspace($16) | 0) != 0);
  L11 : do switch ($16 | 0) {
  case 43:
  case 45:
   {
    $20 = (($16 | 0) == 45) << 31 >> 31;
    $21 = HEAP32[$7 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $21 + 1;
     $$0157 = $20;
     $$0159 = HEAPU8[$21 >> 0] | 0;
     break L11;
    } else {
     $$0157 = $20;
     $$0159 = ___shgetc($0) | 0;
     break L11;
    }
    break;
   }
  default:
   {
    $$0157 = 0;
    $$0159 = $16;
   }
  } while (0);
  $28 = ($1 | 0) == 0;
  do if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
   $32 = HEAP32[$7 >> 2] | 0;
   if ($32 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $32 + 1;
    $40 = HEAPU8[$32 >> 0] | 0;
   } else $40 = ___shgetc($0) | 0;
   if (($40 | 32 | 0) != 120) if ($28) {
    $$1160170 = $40;
    $$1165168 = 8;
    label = 47;
    break;
   } else {
    $$1160 = $40;
    $$1165 = $1;
    label = 32;
    break;
   }
   $42 = HEAP32[$7 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
    HEAP32[$7 >> 2] = $42 + 1;
    $50 = HEAPU8[$42 >> 0] | 0;
   } else $50 = ___shgetc($0) | 0;
   if ((HEAPU8[33809 + $50 >> 0] | 0) > 15) {
    $54 = (HEAP32[$8 >> 2] | 0) == 0;
    if (!$54) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    if (!$2) {
     ___shlim($0, 0);
     $291 = 0;
     $292 = 0;
     break L1;
    }
    if ($54) {
     $291 = 0;
     $292 = 0;
     break L1;
    }
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    $291 = 0;
    $292 = 0;
    break L1;
   } else {
    $$1160170 = $50;
    $$1165168 = 16;
    label = 47;
   }
  } else {
   $spec$select166 = $28 ? 10 : $1;
   if ($spec$select166 >>> 0 > (HEAPU8[33809 + $$0159 >> 0] | 0) >>> 0) {
    $$1160 = $$0159;
    $$1165 = $spec$select166;
    label = 32;
   } else {
    if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
    ___shlim($0, 0);
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    $291 = 0;
    $292 = 0;
    break L1;
   }
  } while (0);
  L43 : do if ((label | 0) == 32) if (($$1165 | 0) == 10) {
   $70 = $$1160 + -48 | 0;
   if ($70 >>> 0 < 10) {
    $$0154215 = 0;
    $74 = $70;
    do {
     $$0154215 = ($$0154215 * 10 | 0) + $74 | 0;
     $75 = HEAP32[$7 >> 2] | 0;
     if ($75 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $75 + 1;
      $83 = HEAPU8[$75 >> 0] | 0;
     } else $83 = ___shgetc($0) | 0;
     $74 = $83 + -48 | 0;
    } while ($74 >>> 0 < 10 & $$0154215 >>> 0 < 429496729);
    if ($74 >>> 0 < 10) {
     $$3162208 = $83;
     $88 = $$0154215;
     $89 = 0;
     $92 = $74;
     while (1) {
      $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0;
      $91 = tempRet0;
      $94 = (($92 | 0) < 0) << 31 >> 31;
      $96 = ~$94;
      if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$92 >>> 0) {
       $$1165169 = 10;
       $$8 = $$3162208;
       $293 = $88;
       $294 = $89;
       label = 76;
       break L43;
      }
      $88 = _i64Add($90 | 0, $91 | 0, $92 | 0, $94 | 0) | 0;
      $89 = tempRet0;
      $104 = HEAP32[$7 >> 2] | 0;
      if ($104 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $104 + 1;
       $112 = HEAPU8[$104 >> 0] | 0;
      } else $112 = ___shgetc($0) | 0;
      $92 = $112 + -48 | 0;
      if (!($92 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) break; else $$3162208 = $112;
     }
     if ($92 >>> 0 > 9) {
      $$1158 = $$0157;
      $264 = $89;
      $266 = $88;
     } else {
      $$1165169 = 10;
      $$8 = $112;
      $293 = $88;
      $294 = $89;
      label = 76;
     }
    } else {
     $$1158 = $$0157;
     $264 = 0;
     $266 = $$0154215;
    }
   } else {
    $$1158 = $$0157;
    $264 = 0;
    $266 = 0;
   }
  } else {
   $$1160170 = $$1160;
   $$1165168 = $$1165;
   label = 47;
  } while (0);
  L63 : do if ((label | 0) == 47) {
   if (!($$1165168 + -1 & $$1165168)) {
    $128 = HEAP8[52173 + (($$1165168 * 23 | 0) >>> 5 & 7) >> 0] | 0;
    $130 = HEAP8[33809 + $$1160170 >> 0] | 0;
    $131 = $130 & 255;
    if ($$1165168 >>> 0 > $131 >>> 0) {
     $$1155184 = 0;
     $135 = $131;
     do {
      $$1155184 = $135 | $$1155184 << $128;
      $136 = HEAP32[$7 >> 2] | 0;
      if ($136 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
       HEAP32[$7 >> 2] = $136 + 1;
       $144 = HEAPU8[$136 >> 0] | 0;
      } else $144 = ___shgetc($0) | 0;
      $145 = HEAP8[33809 + $144 >> 0] | 0;
      $135 = $145 & 255;
     } while ($$1155184 >>> 0 < 134217728 & $$1165168 >>> 0 > $135 >>> 0);
     $$4163$lcssa = $144;
     $$pre$phi237Z2D = $135;
     $154 = 0;
     $156 = $$1155184;
     $295 = $145;
    } else {
     $$4163$lcssa = $$1160170;
     $$pre$phi237Z2D = $131;
     $154 = 0;
     $156 = 0;
     $295 = $130;
    }
    $150 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
    $151 = tempRet0;
    if ($$1165168 >>> 0 <= $$pre$phi237Z2D >>> 0 | ($151 >>> 0 < $154 >>> 0 | ($151 | 0) == ($154 | 0) & $150 >>> 0 < $156 >>> 0)) {
     $$1165169 = $$1165168;
     $$8 = $$4163$lcssa;
     $293 = $156;
     $294 = $154;
     label = 76;
     break;
    }
    $160 = $156;
    $161 = $154;
    $165 = $295;
    while (1) {
     $162 = _bitshift64Shl($160 | 0, $161 | 0, $128 | 0) | 0;
     $163 = tempRet0;
     $166 = $162 | $165 & 255;
     $167 = HEAP32[$7 >> 2] | 0;
     if ($167 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $167 + 1;
      $175 = HEAPU8[$167 >> 0] | 0;
     } else $175 = ___shgetc($0) | 0;
     $165 = HEAP8[33809 + $175 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($165 & 255) >>> 0 | ($163 >>> 0 > $151 >>> 0 | ($163 | 0) == ($151 | 0) & $166 >>> 0 > $150 >>> 0)) {
      $$1165169 = $$1165168;
      $$8 = $175;
      $293 = $166;
      $294 = $163;
      label = 76;
      break L63;
     } else {
      $160 = $166;
      $161 = $163;
     }
    }
   }
   $185 = HEAP8[33809 + $$1160170 >> 0] | 0;
   $186 = $185 & 255;
   if ($$1165168 >>> 0 > $186 >>> 0) {
    $$2156202 = 0;
    $190 = $186;
    do {
     $$2156202 = $190 + (Math_imul($$2156202, $$1165168) | 0) | 0;
     $191 = HEAP32[$7 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $191 + 1;
      $199 = HEAPU8[$191 >> 0] | 0;
     } else $199 = ___shgetc($0) | 0;
     $200 = HEAP8[33809 + $199 >> 0] | 0;
     $190 = $200 & 255;
    } while ($$2156202 >>> 0 < 119304647 & $$1165168 >>> 0 > $190 >>> 0);
    $$6$lcssa = $199;
    $$pre$phi239Z2D = $190;
    $296 = $200;
    $297 = $$2156202;
    $298 = 0;
   } else {
    $$6$lcssa = $$1160170;
    $$pre$phi239Z2D = $186;
    $296 = $185;
    $297 = 0;
    $298 = 0;
   }
   if ($$1165168 >>> 0 > $$pre$phi239Z2D >>> 0) {
    $206 = ___udivdi3(-1, -1, $$1165168 | 0, 0) | 0;
    $207 = tempRet0;
    $$7190 = $$6$lcssa;
    $208 = $298;
    $210 = $297;
    $218 = $296;
    while (1) {
     if ($208 >>> 0 > $207 >>> 0 | ($208 | 0) == ($207 | 0) & $210 >>> 0 > $206 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $210;
      $294 = $208;
      label = 76;
      break L63;
     }
     $215 = ___muldi3($210 | 0, $208 | 0, $$1165168 | 0, 0) | 0;
     $216 = tempRet0;
     $217 = $218 & 255;
     if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $$7190;
      $293 = $210;
      $294 = $208;
      label = 76;
      break L63;
     }
     $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0;
     $226 = tempRet0;
     $227 = HEAP32[$7 >> 2] | 0;
     if ($227 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
      HEAP32[$7 >> 2] = $227 + 1;
      $235 = HEAPU8[$227 >> 0] | 0;
     } else $235 = ___shgetc($0) | 0;
     $218 = HEAP8[33809 + $235 >> 0] | 0;
     if ($$1165168 >>> 0 <= ($218 & 255) >>> 0) {
      $$1165169 = $$1165168;
      $$8 = $235;
      $293 = $225;
      $294 = $226;
      label = 76;
      break;
     } else {
      $$7190 = $235;
      $208 = $226;
      $210 = $225;
     }
    }
   } else {
    $$1165169 = $$1165168;
    $$8 = $$6$lcssa;
    $293 = $297;
    $294 = $298;
    label = 76;
   }
  } while (0);
  if ((label | 0) == 76) if ($$1165169 >>> 0 > (HEAPU8[33809 + $$8 >> 0] | 0) >>> 0) {
   do {
    $243 = HEAP32[$7 >> 2] | 0;
    if ($243 >>> 0 < (HEAP32[$8 >> 2] | 0) >>> 0) {
     HEAP32[$7 >> 2] = $243 + 1;
     $251 = HEAPU8[$243 >> 0] | 0;
    } else $251 = ___shgetc($0) | 0;
   } while ($$1165169 >>> 0 > (HEAPU8[33809 + $251 >> 0] | 0) >>> 0);
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0;
   $264 = $4;
   $266 = $3;
  } else {
   $$1158 = $$0157;
   $264 = $294;
   $266 = $293;
  }
  if (HEAP32[$8 >> 2] | 0) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
  if (!($264 >>> 0 < $4 >>> 0 | ($264 | 0) == ($4 | 0) & $266 >>> 0 < $3 >>> 0)) {
   if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $277 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0;
    $291 = tempRet0;
    $292 = $277;
    break;
   }
   if ($264 >>> 0 > $4 >>> 0 | ($264 | 0) == ($4 | 0) & $266 >>> 0 > $3 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $291 = $4;
    $292 = $3;
    break;
   }
  }
  $286 = (($$1158 | 0) < 0) << 31 >> 31;
  $289 = _i64Subtract($266 ^ $$1158 | 0, $264 ^ $286 | 0, $$1158 | 0, $286 | 0) | 0;
  $291 = tempRet0;
  $292 = $289;
 } while (0);
 tempRet0 = $291;
 return $292 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $109 = 0, $11 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $130 = 0, $134 = 0, $14 = 0, $141 = 0, $15 = 0, $155 = 0, $16 = 0, $17 = 0, $177 = 0, $18 = 0, $182 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $238 = 0, $24 = 0, $25 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $264 = 0, $265 = 0, $277 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $29 = 0, $295 = 0, $3 = 0, $30 = 0, $301 = 0, $302 = 0, $31 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $33 = 0, $334 = 0, $34 = 0, $343 = 0, $348 = 0, $349 = 0, $350 = 0, $36 = 0, $37 = 0, $371 = 0, $379 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $1 = sp + 320 | 0;
 $2 = sp + 316 | 0;
 $3 = sp + 312 | 0;
 $4 = sp + 308 | 0;
 $5 = sp + 304 | 0;
 $6 = sp + 300 | 0;
 $7 = sp + 296 | 0;
 $8 = sp + 292 | 0;
 $9 = sp + 288 | 0;
 $10 = sp + 284 | 0;
 $11 = sp + 280 | 0;
 $12 = sp + 276 | 0;
 $13 = sp + 272 | 0;
 $14 = sp + 268 | 0;
 $15 = sp + 264 | 0;
 $16 = sp + 260 | 0;
 $17 = sp + 256 | 0;
 $18 = sp + 8 | 0;
 $19 = sp + 252 | 0;
 $20 = sp + 248 | 0;
 $21 = sp + 327 | 0;
 $22 = sp + 244 | 0;
 $23 = sp + 240 | 0;
 $24 = sp + 236 | 0;
 $25 = sp + 232 | 0;
 $26 = sp + 228 | 0;
 $28 = sp + 220 | 0;
 $29 = sp + 216 | 0;
 $30 = sp + 212 | 0;
 $31 = sp + 208 | 0;
 $32 = sp;
 $33 = sp + 204 | 0;
 $34 = sp + 200 | 0;
 $36 = sp + 196 | 0;
 $37 = sp + 192 | 0;
 $38 = sp + 188 | 0;
 $39 = sp + 184 | 0;
 $40 = sp + 180 | 0;
 $41 = sp + 176 | 0;
 $42 = sp + 172 | 0;
 $43 = sp + 168 | 0;
 $44 = sp + 164 | 0;
 $45 = sp + 160 | 0;
 $46 = sp + 156 | 0;
 $47 = sp + 152 | 0;
 $48 = sp + 148 | 0;
 $49 = sp + 144 | 0;
 $50 = sp + 140 | 0;
 $51 = sp + 136 | 0;
 $52 = sp + 132 | 0;
 $53 = sp + 128 | 0;
 $54 = sp + 124 | 0;
 $55 = sp + 120 | 0;
 $56 = sp + 116 | 0;
 $57 = sp + 112 | 0;
 $58 = sp + 108 | 0;
 $59 = sp + 104 | 0;
 $60 = sp + 100 | 0;
 $61 = sp + 96 | 0;
 $62 = sp + 92 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 84 | 0;
 $65 = sp + 80 | 0;
 $66 = sp + 76 | 0;
 $67 = sp + 72 | 0;
 $68 = sp + 68 | 0;
 $69 = sp + 64 | 0;
 $70 = sp + 60 | 0;
 $71 = sp + 56 | 0;
 $72 = sp + 325 | 0;
 $73 = sp + 324 | 0;
 $74 = sp + 52 | 0;
 $75 = sp + 48 | 0;
 $76 = sp + 44 | 0;
 $77 = sp + 40 | 0;
 $78 = sp + 36 | 0;
 $79 = sp + 32 | 0;
 $80 = sp + 28 | 0;
 $81 = sp + 24 | 0;
 $82 = sp + 20 | 0;
 $83 = sp + 16 | 0;
 $84 = sp + 12 | 0;
 HEAP32[$71 >> 2] = $0;
 $85 = HEAP32[$71 >> 2] | 0;
 if (!(HEAP32[$85 + 64 >> 2] | 0)) {
  HEAP32[$70 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $379 = HEAP32[$70 >> 2] | 0;
  STACKTOP = sp;
  return $379 | 0;
 }
 HEAP8[$72 >> 0] = (__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($85) | 0) & 1;
 HEAP32[$69 >> 2] = $85;
 if (!(HEAP32[(HEAP32[$69 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP32[$60 >> 2] = $85;
  HEAP32[$61 >> 2] = $73;
  HEAP32[$62 >> 2] = $73 + 1;
  HEAP32[$63 >> 2] = $73 + 1;
  $98 = HEAP32[$60 >> 2] | 0;
  HEAP32[$98 + 8 >> 2] = HEAP32[$61 >> 2];
  HEAP32[$98 + 12 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$98 + 16 >> 2] = HEAP32[$63 >> 2];
 }
 if (HEAP8[$72 >> 0] & 1) $130 = 0; else {
  HEAP32[$58 >> 2] = $85;
  $109 = HEAP32[(HEAP32[$58 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$49 >> 2] = $85;
  HEAP32[$75 >> 2] = ($109 - (HEAP32[(HEAP32[$49 >> 2] | 0) + 8 >> 2] | 0) | 0) / 2 | 0;
  HEAP32[$76 >> 2] = 4;
  HEAP32[$33 >> 2] = $75;
  HEAP32[$34 >> 2] = $76;
  $117 = HEAP32[$33 >> 2] | 0;
  $118 = HEAP32[$34 >> 2] | 0;
  HEAP8[$32 >> 0] = HEAP8[sp + 326 >> 0] | 0;
  HEAP32[$30 >> 2] = $117;
  HEAP32[$31 >> 2] = $118;
  $119 = HEAP32[$31 >> 2] | 0;
  $120 = HEAP32[$30 >> 2] | 0;
  HEAP32[sp + 224 >> 2] = $32;
  HEAP32[$28 >> 2] = $119;
  HEAP32[$29 >> 2] = $120;
  $130 = HEAP32[((HEAP32[HEAP32[$28 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$29 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$31 >> 2] | 0 : HEAP32[$30 >> 2] | 0) >> 2] | 0;
 }
 HEAP32[$74 >> 2] = $130;
 HEAP32[$77 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$24 >> 2] = $85;
 $134 = HEAP32[(HEAP32[$24 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$23 >> 2] = $85;
 do if (($134 | 0) == (HEAP32[(HEAP32[$23 >> 2] | 0) + 16 >> 2] | 0)) {
  HEAP32[$22 >> 2] = $85;
  $141 = HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[$12 >> 2] = $85;
  _memmove($141 | 0, (HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] | 0) + (0 - (HEAP32[$74 >> 2] | 0)) | 0, HEAP32[$74 >> 2] | 0) | 0;
  if (HEAP8[$85 + 98 >> 0] & 1) {
   HEAP32[$1 >> 2] = $85;
   $155 = HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0;
   HEAP32[$2 >> 2] = $85;
   HEAP32[$78 >> 2] = $155 - (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) - (HEAP32[$74 >> 2] | 0);
   HEAP32[$3 >> 2] = $85;
   HEAP32[$78 >> 2] = _fread((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0, 1, HEAP32[$78 >> 2] | 0, HEAP32[$85 + 64 >> 2] | 0) | 0;
   if (!(HEAP32[$78 >> 2] | 0)) break;
   HEAP32[$4 >> 2] = $85;
   $177 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[$5 >> 2] = $85;
   $182 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0;
   HEAP32[$6 >> 2] = $85;
   $189 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) + (HEAP32[$78 >> 2] | 0) | 0;
   HEAP32[$7 >> 2] = $85;
   HEAP32[$8 >> 2] = $177;
   HEAP32[$9 >> 2] = $182;
   HEAP32[$10 >> 2] = $189;
   $190 = HEAP32[$7 >> 2] | 0;
   HEAP32[$190 + 8 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$190 + 12 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$190 + 16 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$11 >> 2] = $85;
   HEAP32[$77 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] >> 0] | 0) | 0;
   break;
  }
  if ((HEAP32[$85 + 40 >> 2] | 0) != (HEAP32[$85 + 36 >> 2] | 0)) _memmove(HEAP32[$85 + 32 >> 2] | 0, HEAP32[$85 + 36 >> 2] | 0, (HEAP32[$85 + 40 >> 2] | 0) - (HEAP32[$85 + 36 >> 2] | 0) | 0) | 0;
  HEAP32[$85 + 36 >> 2] = (HEAP32[$85 + 32 >> 2] | 0) + ((HEAP32[$85 + 40 >> 2] | 0) - (HEAP32[$85 + 36 >> 2] | 0));
  if ((HEAP32[$85 + 32 >> 2] | 0) == ($85 + 44 | 0)) $238 = 8; else $238 = HEAP32[$85 + 52 >> 2] | 0;
  HEAP32[$85 + 40 >> 2] = (HEAP32[$85 + 32 >> 2] | 0) + $238;
  HEAP32[$80 >> 2] = (HEAP32[$85 + 60 >> 2] | 0) - (HEAP32[$74 >> 2] | 0);
  HEAP32[$81 >> 2] = (HEAP32[$85 + 40 >> 2] | 0) - (HEAP32[$85 + 36 >> 2] | 0);
  HEAP32[$19 >> 2] = $80;
  HEAP32[$20 >> 2] = $81;
  $251 = HEAP32[$19 >> 2] | 0;
  $252 = HEAP32[$20 >> 2] | 0;
  HEAP8[$18 >> 0] = HEAP8[$21 >> 0] | 0;
  HEAP32[$16 >> 2] = $251;
  HEAP32[$17 >> 2] = $252;
  $253 = HEAP32[$17 >> 2] | 0;
  $254 = HEAP32[$16 >> 2] | 0;
  HEAP32[$13 >> 2] = $18;
  HEAP32[$14 >> 2] = $253;
  HEAP32[$15 >> 2] = $254;
  HEAP32[$79 >> 2] = HEAP32[((HEAP32[HEAP32[$14 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$15 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$17 >> 2] | 0 : HEAP32[$16 >> 2] | 0) >> 2];
  $264 = $85 + 72 | 0;
  $265 = $85 + 80 | 0;
  HEAP32[$265 >> 2] = HEAP32[$264 >> 2];
  HEAP32[$265 + 4 >> 2] = HEAP32[$264 + 4 >> 2];
  HEAP32[$83 >> 2] = _fread(HEAP32[$85 + 36 >> 2] | 0, 1, HEAP32[$79 >> 2] | 0, HEAP32[$85 + 64 >> 2] | 0) | 0;
  if (HEAP32[$83 >> 2] | 0) {
   if (!(HEAP32[$85 + 68 >> 2] | 0)) {
    $277 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev($277);
    ___cxa_throw($277 | 0, 42840, 182);
   }
   HEAP32[$85 + 40 >> 2] = (HEAP32[$85 + 36 >> 2] | 0) + (HEAP32[$83 >> 2] | 0);
   $284 = HEAP32[$85 + 68 >> 2] | 0;
   $287 = HEAP32[$85 + 32 >> 2] | 0;
   $289 = HEAP32[$85 + 40 >> 2] | 0;
   HEAP32[$25 >> 2] = $85;
   $295 = (HEAP32[(HEAP32[$25 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0;
   HEAP32[$26 >> 2] = $85;
   $301 = (HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$85 + 60 >> 2] | 0) | 0;
   HEAP32[$36 >> 2] = $284;
   HEAP32[$37 >> 2] = $85 + 72;
   HEAP32[$38 >> 2] = $287;
   HEAP32[$39 >> 2] = $289;
   HEAP32[$40 >> 2] = $85 + 36;
   HEAP32[$41 >> 2] = $295;
   HEAP32[$42 >> 2] = $301;
   HEAP32[$43 >> 2] = $84;
   $302 = HEAP32[$36 >> 2] | 0;
   HEAP32[$82 >> 2] = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$302 >> 2] | 0) + 16 >> 2] & 15]($302, HEAP32[$37 >> 2] | 0, HEAP32[$38 >> 2] | 0, HEAP32[$39 >> 2] | 0, HEAP32[$40 >> 2] | 0, HEAP32[$41 >> 2] | 0, HEAP32[$42 >> 2] | 0, HEAP32[$43 >> 2] | 0) | 0;
   if ((HEAP32[$82 >> 2] | 0) == 3) {
    $317 = HEAP32[$85 + 32 >> 2] | 0;
    $319 = HEAP32[$85 + 32 >> 2] | 0;
    $321 = HEAP32[$85 + 40 >> 2] | 0;
    HEAP32[$44 >> 2] = $85;
    HEAP32[$45 >> 2] = $317;
    HEAP32[$46 >> 2] = $319;
    HEAP32[$47 >> 2] = $321;
    $322 = HEAP32[$44 >> 2] | 0;
    HEAP32[$322 + 8 >> 2] = HEAP32[$45 >> 2];
    HEAP32[$322 + 12 >> 2] = HEAP32[$46 >> 2];
    HEAP32[$322 + 16 >> 2] = HEAP32[$47 >> 2];
    HEAP32[$48 >> 2] = $85;
    HEAP32[$77 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[(HEAP32[$48 >> 2] | 0) + 12 >> 2] >> 0] | 0) | 0;
    break;
   }
   $334 = HEAP32[$84 >> 2] | 0;
   HEAP32[$50 >> 2] = $85;
   if (($334 | 0) != ((HEAP32[(HEAP32[$50 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0)) {
    HEAP32[$51 >> 2] = $85;
    $343 = HEAP32[(HEAP32[$51 >> 2] | 0) + 8 >> 2] | 0;
    HEAP32[$52 >> 2] = $85;
    $348 = (HEAP32[(HEAP32[$52 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$74 >> 2] | 0) | 0;
    $349 = HEAP32[$84 >> 2] | 0;
    HEAP32[$53 >> 2] = $85;
    HEAP32[$54 >> 2] = $343;
    HEAP32[$55 >> 2] = $348;
    HEAP32[$56 >> 2] = $349;
    $350 = HEAP32[$53 >> 2] | 0;
    HEAP32[$350 + 8 >> 2] = HEAP32[$54 >> 2];
    HEAP32[$350 + 12 >> 2] = HEAP32[$55 >> 2];
    HEAP32[$350 + 16 >> 2] = HEAP32[$56 >> 2];
    HEAP32[$57 >> 2] = $85;
    HEAP32[$77 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[(HEAP32[$57 >> 2] | 0) + 12 >> 2] >> 0] | 0) | 0;
   }
  }
 } else {
  HEAP32[$59 >> 2] = $85;
  HEAP32[$77 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[(HEAP32[$59 >> 2] | 0) + 12 >> 2] >> 0] | 0) | 0;
 } while (0);
 HEAP32[$64 >> 2] = $85;
 if ((HEAP32[(HEAP32[$64 >> 2] | 0) + 8 >> 2] | 0) == ($73 | 0)) {
  HEAP32[$65 >> 2] = $85;
  HEAP32[$66 >> 2] = 0;
  HEAP32[$67 >> 2] = 0;
  HEAP32[$68 >> 2] = 0;
  $371 = HEAP32[$65 >> 2] | 0;
  HEAP32[$371 + 8 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$371 + 12 >> 2] = HEAP32[$67 >> 2];
  HEAP32[$371 + 16 >> 2] = HEAP32[$68 >> 2];
 }
 HEAP32[$70 >> 2] = HEAP32[$77 >> 2];
 $379 = HEAP32[$70 >> 2] | 0;
 STACKTOP = sp;
 return $379 | 0;
}

function __ZN3zim10Fileheader4readENSt3__210shared_ptrIKNS_6BufferEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy13 = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $108 = 0, $11 = 0, $110 = 0, $115 = 0, $118 = 0, $12 = 0, $121 = 0, $122 = 0, $124 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $132 = 0, $134 = 0, $14 = 0, $146 = 0, $149 = 0, $15 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $164 = 0, $165 = 0, $168 = 0, $17 = 0, $171 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $81 = 0, $83 = 0, $87 = 0, $9 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $$byval_copy13 = sp + 112 | 0;
 $2 = sp + 300 | 0;
 $3 = sp + 296 | 0;
 $4 = sp + 292 | 0;
 $5 = sp + 288 | 0;
 $6 = sp + 284 | 0;
 $7 = sp + 280 | 0;
 $8 = sp + 276 | 0;
 $9 = sp + 272 | 0;
 $10 = sp + 268 | 0;
 $11 = sp + 264 | 0;
 $12 = sp + 260 | 0;
 $13 = sp + 256 | 0;
 $14 = sp + 252 | 0;
 $15 = sp + 248 | 0;
 $16 = sp + 244 | 0;
 $17 = sp + 240 | 0;
 $18 = sp + 236 | 0;
 $19 = sp + 232 | 0;
 $20 = sp + 228 | 0;
 $21 = sp + 224 | 0;
 $22 = sp + 220 | 0;
 $23 = sp + 216 | 0;
 $24 = sp + 212 | 0;
 $25 = sp + 208 | 0;
 $26 = sp + 204 | 0;
 $27 = sp + 200 | 0;
 $28 = sp + 196 | 0;
 $29 = sp + 192 | 0;
 $30 = sp + 188 | 0;
 $32 = sp + 180 | 0;
 $33 = sp + 176 | 0;
 $34 = sp + 172 | 0;
 $35 = sp + 168 | 0;
 $36 = sp + 164 | 0;
 $37 = sp + 160 | 0;
 $38 = sp + 156 | 0;
 $39 = sp + 152 | 0;
 $40 = sp + 104 | 0;
 $41 = sp + 140 | 0;
 $42 = sp + 136 | 0;
 $43 = sp + 132 | 0;
 $44 = sp + 329 | 0;
 $45 = sp + 304 | 0;
 $46 = sp + 96 | 0;
 $47 = sp + 120 | 0;
 $48 = sp + 328 | 0;
 $49 = sp + 88 | 0;
 $50 = sp + 312 | 0;
 $51 = sp + 80 | 0;
 $52 = sp + 72 | 0;
 $53 = sp + 64 | 0;
 $54 = sp + 56 | 0;
 $55 = sp + 48 | 0;
 $56 = sp + 40 | 0;
 $57 = sp + 32 | 0;
 $58 = sp + 24 | 0;
 $59 = sp + 16 | 0;
 $60 = sp + 8 | 0;
 $61 = sp;
 HEAP32[$38 >> 2] = $0;
 $62 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = $1;
 $64 = HEAP32[HEAP32[$37 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($40, 0, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$40 + 4 >> 2];
 HEAP32[$39 >> 2] = __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($64, $$byval_copy13) | 0;
 if ((HEAP32[$39 >> 2] | 0) != 72173914) {
  $68 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$44 >> 0] = 1;
  HEAP32[$35 >> 2] = $41;
  HEAP32[$36 >> 2] = 51559;
  $69 = HEAP32[$35 >> 2] | 0;
  HEAP32[$34 >> 2] = $69;
  $70 = HEAP32[$34 >> 2] | 0;
  HEAP32[$33 >> 2] = $70;
  $71 = HEAP32[$33 >> 2] | 0;
  HEAP32[$71 >> 2] = 0;
  HEAP32[$71 + 4 >> 2] = 0;
  HEAP32[$71 + 8 >> 2] = 0;
  HEAP32[$32 >> 2] = $70;
  HEAP32[sp + 184 >> 2] = HEAP32[$32 >> 2];
  $73 = HEAP32[$36 >> 2] | 0;
  $75 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$36 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $69 | 0, $73 | 0, $75 | 0);
  $76 = __THREW__;
  __THREW__ = 0;
  if ($76 & 1) {
   $81 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$42 >> 2] = $81;
   HEAP32[$43 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $68 | 0, $41 | 0);
   $78 = __THREW__;
   __THREW__ = 0;
   if (!($78 & 1)) {
    HEAP8[$44 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $68 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $83 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$42 >> 2] = $83;
   HEAP32[$43 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($41);
  }
  if (!(HEAP8[$44 >> 0] & 1)) {
   $177 = HEAP32[$42 >> 2] | 0;
   $178 = HEAP32[$43 >> 2] | 0;
   ___resumeException($177 | 0);
  }
  ___cxa_free_exception($68 | 0);
  $177 = HEAP32[$42 >> 2] | 0;
  $178 = HEAP32[$43 >> 2] | 0;
  ___resumeException($177 | 0);
 }
 HEAP32[$30 >> 2] = $1;
 $87 = HEAP32[HEAP32[$30 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($46, 4, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$46 + 4 >> 2];
 HEAP16[$45 >> 1] = __ZNK3zim6Buffer2asItEET_NS_8offset_tE($87, $$byval_copy13) | 0;
 if ((HEAPU16[$45 >> 1] | 0 | 0) != 5) if ((HEAPU16[$45 >> 1] | 0 | 0) != 6) {
  $95 = ___cxa_allocate_exception(8) | 0;
  HEAP8[$48 >> 0] = 1;
  HEAP32[$28 >> 2] = $47;
  HEAP32[$29 >> 2] = 51580;
  $96 = HEAP32[$28 >> 2] | 0;
  HEAP32[$27 >> 2] = $96;
  $97 = HEAP32[$27 >> 2] | 0;
  HEAP32[$26 >> 2] = $97;
  $98 = HEAP32[$26 >> 2] | 0;
  HEAP32[$98 >> 2] = 0;
  HEAP32[$98 + 4 >> 2] = 0;
  HEAP32[$98 + 8 >> 2] = 0;
  HEAP32[$25 >> 2] = $97;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  $100 = HEAP32[$29 >> 2] | 0;
  $102 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$29 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_viii(8, $96 | 0, $100 | 0, $102 | 0);
  $103 = __THREW__;
  __THREW__ = 0;
  if ($103 & 1) {
   $108 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$42 >> 2] = $108;
   HEAP32[$43 >> 2] = tempRet0;
  } else {
   __THREW__ = 0;
   invoke_vii(58, $95 | 0, $47 | 0);
   $105 = __THREW__;
   __THREW__ = 0;
   if (!($105 & 1)) {
    HEAP8[$48 >> 0] = 0;
    __THREW__ = 0;
    invoke_viii(11, $95 | 0, 41024, 53);
    __THREW__ = 0;
   }
   $110 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$42 >> 2] = $110;
   HEAP32[$43 >> 2] = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($47);
  }
  if (!(HEAP8[$48 >> 0] & 1)) {
   $177 = HEAP32[$42 >> 2] | 0;
   $178 = HEAP32[$43 >> 2] | 0;
   ___resumeException($177 | 0);
  }
  ___cxa_free_exception($95 | 0);
  $177 = HEAP32[$42 >> 2] | 0;
  $178 = HEAP32[$43 >> 2] | 0;
  ___resumeException($177 | 0);
 }
 __ZN3zim10Fileheader15setMajorVersionEt($62, HEAP16[$45 >> 1] | 0);
 HEAP32[$23 >> 2] = $1;
 $115 = HEAP32[HEAP32[$23 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($49, 6, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$49 + 4 >> 2];
 __ZN3zim10Fileheader15setMinorVersionEt($62, __ZNK3zim6Buffer2asItEET_NS_8offset_tE($115, $$byval_copy13) | 0);
 __ZN3zim4UuidC2Ev($50);
 HEAP32[$22 >> 2] = $1;
 $118 = HEAP32[HEAP32[$22 >> 2] >> 2] | 0;
 $121 = HEAP32[(HEAP32[$118 >> 2] | 0) + 8 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($51, 8, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$51 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$51 + 4 >> 2];
 $122 = FUNCTION_TABLE_iii[$121 & 63]($118, $$byval_copy13) | 0;
 HEAP32[$21 >> 2] = $1;
 $124 = HEAP32[HEAP32[$21 >> 2] >> 2] | 0;
 $127 = HEAP32[(HEAP32[$124 >> 2] | 0) + 8 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($52, 24, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$52 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$52 + 4 >> 2];
 $128 = FUNCTION_TABLE_iii[$127 & 63]($124, $$byval_copy13) | 0;
 HEAP32[$18 >> 2] = $122;
 HEAP32[$19 >> 2] = $128;
 HEAP32[$20 >> 2] = $50;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 $130 = HEAP32[$17 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$19 >> 2];
 $132 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[$20 >> 2];
 $134 = HEAP32[$12 >> 2] | 0;
 HEAP32[$13 >> 2] = $130;
 HEAP32[$14 >> 2] = $132;
 HEAP32[$15 >> 2] = $134;
 HEAP32[$16 >> 2] = (HEAP32[$14 >> 2] | 0) - (HEAP32[$13 >> 2] | 0);
 if ((HEAP32[$16 >> 2] | 0) >>> 0 > 0) _memmove(HEAP32[$15 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
 __ZN3zim10Fileheader7setUuidERKNS_4UuidE($62, $50);
 HEAP32[$10 >> 2] = $1;
 $146 = HEAP32[HEAP32[$10 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($53, 24, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$53 + 4 >> 2];
 __ZN3zim10Fileheader15setArticleCountEj($62, __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($146, $$byval_copy13) | 0);
 HEAP32[$8 >> 2] = $1;
 $149 = HEAP32[HEAP32[$8 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($54, 28, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$54 + 4 >> 2];
 __ZN3zim10Fileheader15setClusterCountEj($62, __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($149, $$byval_copy13) | 0);
 HEAP32[$7 >> 2] = $1;
 $152 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($55, 32, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$55 + 4 >> 2];
 $153 = __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($152, $$byval_copy13) | 0;
 __ZN3zim10Fileheader12setUrlPtrPosEy($62, $153, tempRet0);
 HEAP32[$6 >> 2] = $1;
 $156 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($56, 40, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$56 + 4 >> 2];
 $157 = __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($156, $$byval_copy13) | 0;
 __ZN3zim10Fileheader14setTitleIdxPosEy($62, $157, tempRet0);
 HEAP32[$4 >> 2] = $1;
 $160 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($57, 48, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$57 + 4 >> 2];
 $161 = __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($160, $$byval_copy13) | 0;
 __ZN3zim10Fileheader16setClusterPtrPosEy($62, $161, tempRet0);
 HEAP32[$3 >> 2] = $1;
 $164 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($58, 56, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$58 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$58 + 4 >> 2];
 $165 = __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($164, $$byval_copy13) | 0;
 __ZN3zim10Fileheader14setMimeListPosEy($62, $165, tempRet0);
 HEAP32[$2 >> 2] = $1;
 $168 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($59, 64, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
 __ZN3zim10Fileheader11setMainPageEj($62, __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($168, $$byval_copy13) | 0);
 HEAP32[$5 >> 2] = $1;
 $171 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($60, 68, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$60 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$60 + 4 >> 2];
 __ZN3zim10Fileheader13setLayoutPageEj($62, __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($171, $$byval_copy13) | 0);
 HEAP32[$9 >> 2] = $1;
 $174 = HEAP32[HEAP32[$9 >> 2] >> 2] | 0;
 __ZN3zim8offset_tC2Ey($61, 72, 0);
 HEAP32[$$byval_copy13 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$$byval_copy13 + 4 >> 2] = HEAP32[$61 + 4 >> 2];
 $175 = __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($174, $$byval_copy13) | 0;
 __ZN3zim10Fileheader14setChecksumPosEy($62, $175, tempRet0);
 __ZNK3zim10Fileheader12sanity_checkEv($62);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i53 = 0, $$0$i$i$i58 = 0, $$0$i$i$i63 = 0, $$0$i$i$i68 = 0, $$0$i$i$i73 = 0, $$0$i$i$i78 = 0, $$pre$phi81Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $11 = 0, $111 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $137 = 0, $140 = 0, $142 = 0, $144 = 0, $151 = 0, $154 = 0, $156 = 0, $158 = 0, $16 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $34 = 0, $38 = 0, $41 = 0, $43 = 0, $45 = 0, $60 = 0, $63 = 0, $65 = 0, $67 = 0, $74 = 0, $77 = 0, $79 = 0, $81 = 0, $89 = 0, $93 = 0, $97 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 62600) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
   $16 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $16;
   HEAP8[$3 + 1 >> 0] = $16 >> 8;
   HEAP8[$3 + 2 >> 0] = $16 >> 16;
   HEAP8[$3 + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
   $20 = $8 + 11 | 0;
   if ((HEAP8[$20 >> 0] | 0) < 0) {
    $23 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$20 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(73, $8 | 0, 0);
   $25 = __THREW__;
   __THREW__ = 0;
   if ($25 & 1) {
    $27 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($27);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 127]($10, $12);
   $34 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $34;
   HEAP8[$3 + 1 >> 0] = $34 >> 8;
   HEAP8[$3 + 2 >> 0] = $34 >> 16;
   HEAP8[$3 + 3 >> 0] = $34 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
   $38 = $8 + 11 | 0;
   if ((HEAP8[$38 >> 0] | 0) < 0) {
    $41 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($41, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$38 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(73, $8 | 0, 0);
   $43 = __THREW__;
   __THREW__ = 0;
   if ($43 & 1) {
    $45 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($45);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i48 = 0;
   while (1) {
    if (($$0$i$i$i48 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i48 << 2) >> 2] = 0;
    $$0$i$i$i48 = $$0$i$i$i48 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phiZ2D = $12;
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $60 = $6 + 11 | 0;
  if ((HEAP8[$60 >> 0] | 0) < 0) {
   $63 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($63, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$60 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $65 = __THREW__;
  __THREW__ = 0;
  if ($65 & 1) {
   $67 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($67);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i53 = 0;
  while (1) {
   if (($$0$i$i$i53 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i53 << 2) >> 2] = 0;
   $$0$i$i$i53 = $$0$i$i$i53 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $74 = $7 + 11 | 0;
  if ((HEAP8[$74 >> 0] | 0) < 0) {
   $77 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($77, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$74 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $7 | 0, 0);
  $79 = __THREW__;
  __THREW__ = 0;
  if ($79 & 1) {
   $81 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($81);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i58 = 0;
  while (1) {
   if (($$0$i$i$i58 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i58 << 2) >> 2] = 0;
   $$0$i$i$i58 = $$0$i$i$i58 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $89 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 62592) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 44 >> 2] & 127]($10, $89);
   $93 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $93;
   HEAP8[$3 + 1 >> 0] = $93 >> 8;
   HEAP8[$3 + 2 >> 0] = $93 >> 16;
   HEAP8[$3 + 3 >> 0] = $93 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 32 >> 2] & 127]($11, $89);
   $97 = $8 + 11 | 0;
   if ((HEAP8[$97 >> 0] | 0) < 0) {
    $100 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($100, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$97 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(73, $8 | 0, 0);
   $102 = __THREW__;
   __THREW__ = 0;
   if ($102 & 1) {
    $104 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($104);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i63 = 0;
   while (1) {
    if (($$0$i$i$i63 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i63 << 2) >> 2] = 0;
    $$0$i$i$i63 = $$0$i$i$i63 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi81Z2D = $89;
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 40 >> 2] & 127]($10, $89);
   $111 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $111;
   HEAP8[$3 + 1 >> 0] = $111 >> 8;
   HEAP8[$3 + 2 >> 0] = $111 >> 16;
   HEAP8[$3 + 3 >> 0] = $111 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$89 >> 2] | 0) + 28 >> 2] & 127]($11, $89);
   $115 = $8 + 11 | 0;
   if ((HEAP8[$115 >> 0] | 0) < 0) {
    $118 = HEAP32[$8 >> 2] | 0;
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($118, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP8[$10 >> 0] = 0;
    __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
    HEAP8[$115 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(73, $8 | 0, 0);
   $120 = __THREW__;
   __THREW__ = 0;
   if ($120 & 1) {
    $122 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($122);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i68 = 0;
   while (1) {
    if (($$0$i$i$i68 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i68 << 2) >> 2] = 0;
    $$0$i$i$i68 = $$0$i$i$i68 + 1 | 0;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
   $$pre$phi81Z2D = $89;
  }
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 12 >> 2] & 127]($89) | 0;
  HEAP8[$5 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 16 >> 2] & 127]($89) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi81Z2D >> 2] | 0) + 20 >> 2] & 127]($11, $89);
  $137 = $6 + 11 | 0;
  if ((HEAP8[$137 >> 0] | 0) < 0) {
   $140 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($140, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$137 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $142 = __THREW__;
  __THREW__ = 0;
  if ($142 & 1) {
   $144 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($144);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i73 = 0;
  while (1) {
   if (($$0$i$i$i73 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i73 << 2) >> 2] = 0;
   $$0$i$i$i73 = $$0$i$i$i73 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$$pre$phi81Z2D >> 2] | 0) + 24 >> 2] & 127]($11, $89);
  $151 = $7 + 11 | 0;
  if ((HEAP8[$151 >> 0] | 0) < 0) {
   $154 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($154, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$151 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $7 | 0, 0);
  $156 = __THREW__;
  __THREW__ = 0;
  if ($156 & 1) {
   $158 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($158);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i78 = 0;
  while (1) {
   if (($$0$i$i$i78 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i78 << 2) >> 2] = 0;
   $$0$i$i$i78 = $$0$i$i$i78 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 127]($89) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i48 = 0, $$0$i$i$i51 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $$0$i$i$i75 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $127 = 0, $142 = 0, $145 = 0, $147 = 0, $149 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $35 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $62 = 0, $65 = 0, $67 = 0, $69 = 0, $77 = 0, $80 = 0, $82 = 0, $84 = 0, $92 = 0, $96 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 62616) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
   $16 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $16;
   HEAP8[$3 + 1 >> 0] = $16 >> 8;
   HEAP8[$3 + 2 >> 0] = $16 >> 16;
   HEAP8[$3 + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
   $21 = $8 + 8 + 3 | 0;
   if ((HEAP8[$21 >> 0] | 0) < 0) {
    $24 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$21 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(90, $8 | 0, 0);
   $26 = __THREW__;
   __THREW__ = 0;
   if ($26 & 1) {
    $28 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($28);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i = 0;
   while (1) {
    if (($$0$i$i$i | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
    $$0$i$i$i = $$0$i$i$i + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 40 >> 2] & 127]($10, $12);
   $35 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $35;
   HEAP8[$3 + 1 >> 0] = $35 >> 8;
   HEAP8[$3 + 2 >> 0] = $35 >> 16;
   HEAP8[$3 + 3 >> 0] = $35 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
   $40 = $8 + 8 + 3 | 0;
   if ((HEAP8[$40 >> 0] | 0) < 0) {
    $43 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($43, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$40 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(90, $8 | 0, 0);
   $45 = __THREW__;
   __THREW__ = 0;
   if ($45 & 1) {
    $47 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($47);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i48 = 0;
   while (1) {
    if (($$0$i$i$i48 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i48 << 2) >> 2] = 0;
    $$0$i$i$i48 = $$0$i$i$i48 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $62 = $6 + 11 | 0;
  if ((HEAP8[$62 >> 0] | 0) < 0) {
   $65 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($65, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$62 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $67 = __THREW__;
  __THREW__ = 0;
  if ($67 & 1) {
   $69 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($69);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i51 = 0;
  while (1) {
   if (($$0$i$i$i51 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i51 << 2) >> 2] = 0;
   $$0$i$i$i51 = $$0$i$i$i51 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $77 = $7 + 8 + 3 | 0;
  if ((HEAP8[$77 >> 0] | 0) < 0) {
   $80 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($80, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$77 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $7 | 0, 0);
  $82 = __THREW__;
  __THREW__ = 0;
  if ($82 & 1) {
   $84 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($84);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i55 = 0;
  while (1) {
   if (($$0$i$i$i55 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i55 << 2) >> 2] = 0;
   $$0$i$i$i55 = $$0$i$i$i55 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $92 = __ZNKSt3__26locale9use_facetERNS0_2idE($2, 62608) | 0;
  if ($1) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 44 >> 2] & 127]($10, $92);
   $96 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $96;
   HEAP8[$3 + 1 >> 0] = $96 >> 8;
   HEAP8[$3 + 2 >> 0] = $96 >> 16;
   HEAP8[$3 + 3 >> 0] = $96 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 32 >> 2] & 127]($11, $92);
   $101 = $8 + 8 + 3 | 0;
   if ((HEAP8[$101 >> 0] | 0) < 0) {
    $104 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($104, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$101 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(90, $8 | 0, 0);
   $106 = __THREW__;
   __THREW__ = 0;
   if ($106 & 1) {
    $108 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($108);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i60 = 0;
   while (1) {
    if (($$0$i$i$i60 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i60 << 2) >> 2] = 0;
    $$0$i$i$i60 = $$0$i$i$i60 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  } else {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 40 >> 2] & 127]($10, $92);
   $115 = HEAP32[$10 >> 2] | 0;
   HEAP8[$3 >> 0] = $115;
   HEAP8[$3 + 1 >> 0] = $115 >> 8;
   HEAP8[$3 + 2 >> 0] = $115 >> 16;
   HEAP8[$3 + 3 >> 0] = $115 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 28 >> 2] & 127]($11, $92);
   $120 = $8 + 8 + 3 | 0;
   if ((HEAP8[$120 >> 0] | 0) < 0) {
    $123 = HEAP32[$8 >> 2] | 0;
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($123, $10);
    HEAP32[$8 + 4 >> 2] = 0;
   } else {
    HEAP32[$10 >> 2] = 0;
    __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
    HEAP8[$120 >> 0] = 0;
   }
   __THREW__ = 0;
   invoke_vii(90, $8 | 0, 0);
   $125 = __THREW__;
   __THREW__ = 0;
   if ($125 & 1) {
    $127 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($127);
   };
   HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
   $$0$i$i$i65 = 0;
   while (1) {
    if (($$0$i$i$i65 | 0) == 3) break;
    HEAP32[$11 + ($$0$i$i$i65 << 2) >> 2] = 0;
    $$0$i$i$i65 = $$0$i$i$i65 + 1 | 0;
   }
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  }
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 12 >> 2] & 127]($92) | 0;
  HEAP32[$5 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 16 >> 2] & 127]($92) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 20 >> 2] & 127]($11, $92);
  $142 = $6 + 11 | 0;
  if ((HEAP8[$142 >> 0] | 0) < 0) {
   $145 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($145, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$142 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $147 = __THREW__;
  __THREW__ = 0;
  if ($147 & 1) {
   $149 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($149);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i70 = 0;
  while (1) {
   if (($$0$i$i$i70 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i70 << 2) >> 2] = 0;
   $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$92 >> 2] | 0) + 24 >> 2] & 127]($11, $92);
  $157 = $7 + 8 + 3 | 0;
  if ((HEAP8[$157 >> 0] | 0) < 0) {
   $160 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($160, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$157 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $7 | 0, 0);
  $162 = __THREW__;
  __THREW__ = 0;
  if ($162 & 1) {
   $164 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($164);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i75 = 0;
  while (1) {
   if (($$0$i$i$i75 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i75 << 2) >> 2] = 0;
   $$0$i$i$i75 = $$0$i$i$i75 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$92 >> 2] | 0) + 36 >> 2] & 127]($92) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $10 = 0, $103 = 0, $107 = 0, $11 = 0, $111 = 0, $116 = 0, $117 = 0, $12 = 0, $122 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $49 = 0, $53 = 0, $58 = 0, $59 = 0, $64 = 0, $66 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy30 = sp + 128 | 0;
 $$byval_copy26 = sp + 112 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 108 | 0;
 $12 = sp + 104 | 0;
 $13 = sp + 100 | 0;
 $14 = sp + 96 | 0;
 $15 = sp + 92 | 0;
 $16 = sp + 88 | 0;
 $17 = sp + 84 | 0;
 $18 = sp + 80 | 0;
 $19 = sp + 76 | 0;
 $20 = sp + 72 | 0;
 $21 = sp + 68 | 0;
 $22 = sp + 64 | 0;
 $23 = sp + 60 | 0;
 $24 = sp + 56 | 0;
 $25 = sp + 52 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 44 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 36 | 0;
 $30 = sp + 32 | 0;
 $31 = sp + 28 | 0;
 $32 = sp + 24 | 0;
 $33 = sp + 20 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$4 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3);
 __THREW__ = 0;
 $39 = invoke_iii(32, $$byval_copy30 | 0, 62400) | 0;
 $40 = __THREW__;
 __THREW__ = 0;
 if ($40 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy30);
  ___resumeException($43 | 0);
 }
 __ZNSt3__26localeD2Ev($$byval_copy30);
 do switch ($6 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 99:
  {
   $49 = $0 + 8 | 0;
   $53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 12 >> 2] & 127]($49) | 0;
   HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
   $58 = HEAP8[$53 + 8 + 3 >> 0] | 0;
   $59 = $58 << 24 >> 24 < 0;
   $64 = $59 ? HEAP32[$53 >> 2] | 0 : $53;
   $66 = $64 + (($59 ? HEAP32[$53 + 4 >> 2] | 0 : $58 & 255) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $64, $66) | 0;
   label = 28;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 68:
  {
   HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 40464, 40496) | 0;
   label = 28;
   break;
  }
 case 70:
  {
   HEAP32[$15 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 40496, 40528) | 0;
   label = 28;
   break;
  }
 case 72:
  {
   HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 73:
  {
   HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 106:
  {
   HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 109:
  {
   HEAP32[$20 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 77:
  {
   HEAP32[$21 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 112:
  {
   HEAP32[$23 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 114:
  {
   HEAP32[$24 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$25 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 40528, 40572) | 0;
   label = 28;
   break;
  }
 case 82:
  {
   HEAP32[$26 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 40576, 40596) | 0;
   label = 28;
   break;
  }
 case 83:
  {
   HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 40608, 40640) | 0;
   label = 28;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 120:
  {
   $103 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$33 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2];
   $$sroa$098$0 = FUNCTION_TABLE_iiiiiii[$103 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0;
   break;
  }
 case 88:
  {
   $107 = $0 + 8 | 0;
   $111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$107 >> 2] | 0) + 24 >> 2] & 127]($107) | 0;
   HEAP32[$34 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$35 >> 2] = HEAP32[$2 >> 2];
   $116 = HEAP8[$111 + 8 + 3 >> 0] | 0;
   $117 = $116 << 24 >> 24 < 0;
   $122 = $117 ? HEAP32[$111 >> 2] | 0 : $111;
   $124 = $122 + (($117 ? HEAP32[$111 + 4 >> 2] | 0 : $116 & 255) << 2) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $122, $124) | 0;
   label = 28;
   break;
  }
 case 121:
  {
   HEAP32[$36 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 89:
  {
   HEAP32[$37 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 37:
  {
   HEAP32[$38 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2];
   __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   label = 28;
  }
 } while (0);
 if ((label | 0) == 28) $$sroa$098$0 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$098$0 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $$sroa$098$0 = 0, $10 = 0, $102 = 0, $106 = 0, $11 = 0, $110 = 0, $114 = 0, $115 = 0, $12 = 0, $120 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $49 = 0, $53 = 0, $57 = 0, $58 = 0, $63 = 0, $65 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy30 = sp + 128 | 0;
 $$byval_copy26 = sp + 112 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 108 | 0;
 $12 = sp + 104 | 0;
 $13 = sp + 100 | 0;
 $14 = sp + 96 | 0;
 $15 = sp + 92 | 0;
 $16 = sp + 88 | 0;
 $17 = sp + 84 | 0;
 $18 = sp + 80 | 0;
 $19 = sp + 76 | 0;
 $20 = sp + 72 | 0;
 $21 = sp + 68 | 0;
 $22 = sp + 64 | 0;
 $23 = sp + 60 | 0;
 $24 = sp + 56 | 0;
 $25 = sp + 52 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 44 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 36 | 0;
 $30 = sp + 32 | 0;
 $31 = sp + 28 | 0;
 $32 = sp + 24 | 0;
 $33 = sp + 20 | 0;
 $34 = sp + 16 | 0;
 $35 = sp + 12 | 0;
 $36 = sp + 8 | 0;
 $37 = sp + 4 | 0;
 $38 = sp;
 HEAP32[$4 >> 2] = 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy30, $3);
 __THREW__ = 0;
 $39 = invoke_iii(32, $$byval_copy30 | 0, 62368) | 0;
 $40 = __THREW__;
 __THREW__ = 0;
 if ($40 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy30);
  ___resumeException($43 | 0);
 }
 __ZNSt3__26localeD2Ev($$byval_copy30);
 do switch ($6 << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$8 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$9 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 99:
  {
   $49 = $0 + 8 | 0;
   $53 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$49 >> 2] | 0) + 12 >> 2] & 127]($49) | 0;
   HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$11 >> 2] = HEAP32[$2 >> 2];
   $57 = HEAP8[$53 + 11 >> 0] | 0;
   $58 = $57 << 24 >> 24 < 0;
   $63 = $58 ? HEAP32[$53 >> 2] | 0 : $53;
   $65 = $63 + ($58 ? HEAP32[$53 + 4 >> 2] | 0 : $57 & 255) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $63, $65) | 0;
   label = 28;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$12 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 12 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 68:
  {
   HEAP32[$13 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$14 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 53750, 53758) | 0;
   label = 28;
   break;
  }
 case 70:
  {
   HEAP32[$15 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 53758, 53766) | 0;
   label = 28;
   break;
  }
 case 72:
  {
   HEAP32[$17 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$17 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 73:
  {
   HEAP32[$18 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$18 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 106:
  {
   HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$19 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 28 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 109:
  {
   HEAP32[$20 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$20 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 77:
  {
   HEAP32[$21 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$21 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 4 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$22 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$22 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 112:
  {
   HEAP32[$23 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$23 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 8 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 114:
  {
   HEAP32[$24 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$25 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$24 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$25 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 53766, 53777) | 0;
   label = 28;
   break;
  }
 case 82:
  {
   HEAP32[$26 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$26 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 53777, 53782) | 0;
   label = 28;
   break;
  }
 case 83:
  {
   HEAP32[$28 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$28 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, 53782, 53790) | 0;
   label = 28;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$31 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 120:
  {
   $102 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$33 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$33 >> 2];
   $$sroa$098$0 = FUNCTION_TABLE_iiiiiii[$102 & 63]($0, $$byval_copy26, $$byval_copy30, $3, $4, $5) | 0;
   break;
  }
 case 88:
  {
   $106 = $0 + 8 | 0;
   $110 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 24 >> 2] & 127]($106) | 0;
   HEAP32[$34 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$35 >> 2] = HEAP32[$2 >> 2];
   $114 = HEAP8[$110 + 11 >> 0] | 0;
   $115 = $114 << 24 >> 24 < 0;
   $120 = $115 ? HEAP32[$110 >> 2] | 0 : $110;
   $122 = $120 + ($115 ? HEAP32[$110 + 4 >> 2] | 0 : $114 & 255) | 0;
   HEAP32[$$byval_copy26 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$35 >> 2];
   HEAP32[$1 >> 2] = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy26, $$byval_copy30, $3, $4, $5, $120, $122) | 0;
   label = 28;
   break;
  }
 case 121:
  {
   HEAP32[$36 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$36 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 89:
  {
   HEAP32[$37 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$37 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 case 37:
  {
   HEAP32[$38 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy30 >> 2] = HEAP32[$38 >> 2];
   __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $$byval_copy30, $4, $39);
   label = 28;
   break;
  }
 default:
  {
   HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4;
   label = 28;
  }
 } while (0);
 if ((label | 0) == 28) $$sroa$098$0 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $$sroa$098$0 | 0;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $13 = 0, $132 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $147 = 0, $149 = 0, $15 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $169 = 0, $17 = 0, $173 = 0, $177 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $189 = 0, $19 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $211 = 0, $22 = 0, $224 = 0, $23 = 0, $238 = 0, $24 = 0, $243 = 0, $25 = 0, $258 = 0, $26 = 0, $265 = 0, $266 = 0, $269 = 0, $27 = 0, $272 = 0, $274 = 0, $28 = 0, $285 = 0, $288 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $301 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448 | 0;
 $2 = sp + 432 | 0;
 $3 = sp + 428 | 0;
 $4 = sp + 424 | 0;
 $5 = sp + 420 | 0;
 $6 = sp + 416 | 0;
 $7 = sp + 412 | 0;
 $8 = sp + 408 | 0;
 $9 = sp + 404 | 0;
 $10 = sp + 400 | 0;
 $11 = sp + 396 | 0;
 $12 = sp + 392 | 0;
 $13 = sp + 388 | 0;
 $14 = sp + 384 | 0;
 $15 = sp + 380 | 0;
 $16 = sp + 376 | 0;
 $17 = sp + 372 | 0;
 $18 = sp + 368 | 0;
 $19 = sp + 364 | 0;
 $20 = sp + 360 | 0;
 $21 = sp + 356 | 0;
 $22 = sp + 352 | 0;
 $23 = sp;
 $24 = sp + 348 | 0;
 $25 = sp + 344 | 0;
 $26 = sp + 340 | 0;
 $27 = sp + 336 | 0;
 $28 = sp + 436 | 0;
 $29 = sp + 332 | 0;
 $30 = sp + 328 | 0;
 $31 = sp + 324 | 0;
 $32 = sp + 320 | 0;
 $33 = sp + 316 | 0;
 $34 = sp + 312 | 0;
 $35 = sp + 308 | 0;
 $36 = sp + 304 | 0;
 $37 = sp + 300 | 0;
 $38 = sp + 296 | 0;
 $39 = sp + 292 | 0;
 $40 = sp + 288 | 0;
 $41 = sp + 284 | 0;
 $42 = sp + 280 | 0;
 $43 = sp + 276 | 0;
 $44 = sp + 272 | 0;
 $45 = sp + 268 | 0;
 $46 = sp + 264 | 0;
 $47 = sp + 260 | 0;
 $48 = sp + 256 | 0;
 $49 = sp + 252 | 0;
 $50 = sp + 248 | 0;
 $51 = sp + 244 | 0;
 $52 = sp + 240 | 0;
 $53 = sp + 236 | 0;
 $54 = sp + 232 | 0;
 $55 = sp + 228 | 0;
 $56 = sp + 224 | 0;
 $57 = sp + 220 | 0;
 $58 = sp + 216 | 0;
 $59 = sp + 212 | 0;
 $60 = sp + 208 | 0;
 $61 = sp + 204 | 0;
 $62 = sp + 200 | 0;
 $63 = sp + 196 | 0;
 $64 = sp + 192 | 0;
 $65 = sp + 188 | 0;
 $66 = sp + 184 | 0;
 $67 = sp + 180 | 0;
 $68 = sp + 176 | 0;
 $69 = sp + 172 | 0;
 $70 = sp + 168 | 0;
 $71 = sp + 164 | 0;
 $72 = sp + 160 | 0;
 $73 = sp + 156 | 0;
 $74 = sp + 152 | 0;
 $75 = sp + 148 | 0;
 $76 = sp + 144 | 0;
 $77 = sp + 140 | 0;
 $78 = sp + 136 | 0;
 $79 = sp + 132 | 0;
 $80 = sp + 128 | 0;
 $81 = sp + 124 | 0;
 $82 = sp + 120 | 0;
 $83 = sp + 116 | 0;
 $84 = sp + 112 | 0;
 $85 = sp + 108 | 0;
 $86 = sp + 104 | 0;
 $87 = sp + 100 | 0;
 $88 = sp + 96 | 0;
 $89 = sp + 92 | 0;
 $90 = sp + 88 | 0;
 $91 = sp + 84 | 0;
 $92 = sp + 80 | 0;
 $93 = sp + 76 | 0;
 $94 = sp + 72 | 0;
 $95 = sp + 68 | 0;
 $96 = sp + 64 | 0;
 $97 = sp + 60 | 0;
 $98 = sp + 56 | 0;
 $99 = sp + 52 | 0;
 $100 = sp + 48 | 0;
 $101 = sp + 44 | 0;
 $107 = sp + 20 | 0;
 $108 = sp + 16 | 0;
 $109 = sp + 12 | 0;
 $110 = sp + 8 | 0;
 $111 = sp + 4 | 0;
 HEAP32[$110 >> 2] = $0;
 HEAP32[$111 >> 2] = $1;
 $112 = HEAP32[$110 >> 2] | 0;
 HEAP32[$109 >> 2] = $112;
 $113 = HEAP32[$109 >> 2] | 0;
 HEAP32[$108 >> 2] = $113;
 HEAP32[$107 >> 2] = HEAP32[HEAP32[$108 >> 2] >> 2];
 $116 = HEAP32[$107 >> 2] | 0;
 HEAP32[$86 >> 2] = $113;
 HEAP32[$85 >> 2] = HEAP32[HEAP32[$86 >> 2] >> 2];
 $119 = HEAP32[$85 >> 2] | 0;
 HEAP32[$91 >> 2] = $113;
 HEAP32[$90 >> 2] = HEAP32[$91 >> 2];
 $121 = HEAP32[$90 >> 2] | 0;
 HEAP32[$89 >> 2] = $121;
 HEAP32[$88 >> 2] = (HEAP32[$89 >> 2] | 0) + 8;
 HEAP32[$87 >> 2] = HEAP32[$88 >> 2];
 $132 = $119 + ((((HEAP32[HEAP32[$87 >> 2] >> 2] | 0) - (HEAP32[$121 >> 2] | 0) | 0) / 12 | 0) * 12 | 0) | 0;
 HEAP32[$93 >> 2] = $113;
 HEAP32[$92 >> 2] = HEAP32[HEAP32[$93 >> 2] >> 2];
 $135 = HEAP32[$92 >> 2] | 0;
 HEAP32[$94 >> 2] = $113;
 $136 = HEAP32[$94 >> 2] | 0;
 $144 = $135 + ((((HEAP32[$136 + 4 >> 2] | 0) - (HEAP32[$136 >> 2] | 0) | 0) / 12 | 0) * 12 | 0) | 0;
 HEAP32[$96 >> 2] = $113;
 HEAP32[$95 >> 2] = HEAP32[HEAP32[$96 >> 2] >> 2];
 $147 = HEAP32[$95 >> 2] | 0;
 HEAP32[$101 >> 2] = $113;
 HEAP32[$100 >> 2] = HEAP32[$101 >> 2];
 $149 = HEAP32[$100 >> 2] | 0;
 HEAP32[$99 >> 2] = $149;
 HEAP32[$98 >> 2] = (HEAP32[$99 >> 2] | 0) + 8;
 HEAP32[$97 >> 2] = HEAP32[$98 >> 2];
 $160 = $147 + ((((HEAP32[HEAP32[$97 >> 2] >> 2] | 0) - (HEAP32[$149 >> 2] | 0) | 0) / 12 | 0) * 12 | 0) | 0;
 HEAP32[sp + 40 >> 2] = $113;
 HEAP32[sp + 36 >> 2] = $116;
 HEAP32[sp + 32 >> 2] = $132;
 HEAP32[sp + 28 >> 2] = $144;
 HEAP32[sp + 24 >> 2] = $160;
 HEAP32[$4 >> 2] = $112;
 HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 8;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $165 = HEAP32[$112 >> 2] | 0;
 $167 = HEAP32[$112 + 4 >> 2] | 0;
 $169 = (HEAP32[$111 >> 2] | 0) + 4 | 0;
 HEAP32[$30 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$31 >> 2] = $165;
 HEAP32[$32 >> 2] = $167;
 HEAP32[$33 >> 2] = $169;
 while (1) {
  if ((HEAP32[$32 >> 2] | 0) == (HEAP32[$31 >> 2] | 0)) break;
  $173 = HEAP32[$30 >> 2] | 0;
  HEAP32[$29 >> 2] = (HEAP32[HEAP32[$33 >> 2] >> 2] | 0) + -12;
  $177 = HEAP32[$29 >> 2] | 0;
  $179 = (HEAP32[$32 >> 2] | 0) + -12 | 0;
  HEAP32[$32 >> 2] = $179;
  HEAP32[$6 >> 2] = $179;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $181 = HEAP32[$5 >> 2] | 0;
  HEAP32[$25 >> 2] = $173;
  HEAP32[$26 >> 2] = $177;
  HEAP32[$27 >> 2] = $181;
  $182 = HEAP32[$25 >> 2] | 0;
  $183 = HEAP32[$26 >> 2] | 0;
  HEAP32[$24 >> 2] = HEAP32[$27 >> 2];
  $185 = HEAP32[$24 >> 2] | 0;
  HEAP8[$23 >> 0] = HEAP8[$28 >> 0] | 0;
  HEAP32[$20 >> 2] = $182;
  HEAP32[$21 >> 2] = $183;
  HEAP32[$22 >> 2] = $185;
  $186 = HEAP32[$20 >> 2] | 0;
  $187 = HEAP32[$21 >> 2] | 0;
  HEAP32[$19 >> 2] = HEAP32[$22 >> 2];
  $189 = HEAP32[$19 >> 2] | 0;
  HEAP32[$16 >> 2] = $186;
  HEAP32[$17 >> 2] = $187;
  HEAP32[$18 >> 2] = $189;
  $190 = HEAP32[$17 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
  $192 = HEAP32[$15 >> 2] | 0;
  HEAP32[$13 >> 2] = $190;
  HEAP32[$14 >> 2] = $192;
  $193 = HEAP32[$13 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
  $195 = HEAP32[$12 >> 2] | 0;
  HEAP32[$193 >> 2] = HEAP32[$195 >> 2];
  HEAP32[$193 + 4 >> 2] = HEAP32[$195 + 4 >> 2];
  HEAP32[$193 + 8 >> 2] = HEAP32[$195 + 8 >> 2];
  HEAP32[$9 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$11 >> 2] = 0;
  while (1) {
   if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 3) break;
   HEAP32[(HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] << 2) >> 2] = 0;
   HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
  }
  $207 = HEAP32[$33 >> 2] | 0;
  HEAP32[$207 >> 2] = (HEAP32[$207 >> 2] | 0) + -12;
 }
 $211 = (HEAP32[$111 >> 2] | 0) + 4 | 0;
 HEAP32[$37 >> 2] = $112;
 HEAP32[$38 >> 2] = $211;
 HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$39 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
 HEAP32[$34 >> 2] = HEAP32[$38 >> 2];
 HEAP32[HEAP32[$37 >> 2] >> 2] = HEAP32[HEAP32[$34 >> 2] >> 2];
 HEAP32[$35 >> 2] = $39;
 HEAP32[HEAP32[$38 >> 2] >> 2] = HEAP32[HEAP32[$35 >> 2] >> 2];
 $224 = (HEAP32[$111 >> 2] | 0) + 8 | 0;
 HEAP32[$43 >> 2] = $112 + 4;
 HEAP32[$44 >> 2] = $224;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$45 >> 2] = HEAP32[HEAP32[$42 >> 2] >> 2];
 HEAP32[$40 >> 2] = HEAP32[$44 >> 2];
 HEAP32[HEAP32[$43 >> 2] >> 2] = HEAP32[HEAP32[$40 >> 2] >> 2];
 HEAP32[$41 >> 2] = $45;
 HEAP32[HEAP32[$44 >> 2] >> 2] = HEAP32[HEAP32[$41 >> 2] >> 2];
 HEAP32[$48 >> 2] = $112;
 HEAP32[$47 >> 2] = (HEAP32[$48 >> 2] | 0) + 8;
 HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
 $238 = HEAP32[$46 >> 2] | 0;
 HEAP32[$51 >> 2] = HEAP32[$111 >> 2];
 HEAP32[$50 >> 2] = (HEAP32[$51 >> 2] | 0) + 12;
 HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
 $243 = HEAP32[$49 >> 2] | 0;
 HEAP32[$55 >> 2] = $238;
 HEAP32[$56 >> 2] = $243;
 HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$57 >> 2] = HEAP32[HEAP32[$54 >> 2] >> 2];
 HEAP32[$52 >> 2] = HEAP32[$56 >> 2];
 HEAP32[HEAP32[$55 >> 2] >> 2] = HEAP32[HEAP32[$52 >> 2] >> 2];
 HEAP32[$53 >> 2] = $57;
 HEAP32[HEAP32[$56 >> 2] >> 2] = HEAP32[HEAP32[$53 >> 2] >> 2];
 HEAP32[HEAP32[$111 >> 2] >> 2] = HEAP32[(HEAP32[$111 >> 2] | 0) + 4 >> 2];
 HEAP32[$58 >> 2] = $112;
 $258 = HEAP32[$58 >> 2] | 0;
 $265 = ((HEAP32[$258 + 4 >> 2] | 0) - (HEAP32[$258 >> 2] | 0) | 0) / 12 | 0;
 HEAP32[$82 >> 2] = $112;
 HEAP32[$83 >> 2] = $265;
 $266 = HEAP32[$82 >> 2] | 0;
 HEAP32[$81 >> 2] = $266;
 HEAP32[$80 >> 2] = HEAP32[HEAP32[$81 >> 2] >> 2];
 $269 = HEAP32[$80 >> 2] | 0;
 HEAP32[$60 >> 2] = $266;
 HEAP32[$59 >> 2] = HEAP32[HEAP32[$60 >> 2] >> 2];
 $272 = HEAP32[$59 >> 2] | 0;
 HEAP32[$65 >> 2] = $266;
 HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
 $274 = HEAP32[$64 >> 2] | 0;
 HEAP32[$63 >> 2] = $274;
 HEAP32[$62 >> 2] = (HEAP32[$63 >> 2] | 0) + 8;
 HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
 $285 = $272 + ((((HEAP32[HEAP32[$61 >> 2] >> 2] | 0) - (HEAP32[$274 >> 2] | 0) | 0) / 12 | 0) * 12 | 0) | 0;
 HEAP32[$67 >> 2] = $266;
 HEAP32[$66 >> 2] = HEAP32[HEAP32[$67 >> 2] >> 2];
 $288 = HEAP32[$66 >> 2] | 0;
 HEAP32[$72 >> 2] = $266;
 HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
 $290 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = $290;
 HEAP32[$69 >> 2] = (HEAP32[$70 >> 2] | 0) + 8;
 HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
 $301 = $288 + ((((HEAP32[HEAP32[$68 >> 2] >> 2] | 0) - (HEAP32[$290 >> 2] | 0) | 0) / 12 | 0) * 12 | 0) | 0;
 HEAP32[$74 >> 2] = $266;
 HEAP32[$73 >> 2] = HEAP32[HEAP32[$74 >> 2] >> 2];
 $306 = (HEAP32[$73 >> 2] | 0) + ((HEAP32[$83 >> 2] | 0) * 12 | 0) | 0;
 HEAP32[$75 >> 2] = $266;
 HEAP32[$76 >> 2] = $269;
 HEAP32[$77 >> 2] = $285;
 HEAP32[$78 >> 2] = $301;
 HEAP32[$79 >> 2] = $306;
 HEAP32[$84 >> 2] = $112;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i138 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i144 = 0, $$0103 = 0, $$0104 = 0, $$0105$off0 = 0, $$0106 = 0, $$0107 = 0, $$0108 = 0, $$0109 = 0, $$0112 = 0, $$0116 = 0, $$0132 = 0, $$0133 = 0, $$0133188 = 0, $$1110 = 0, $$1113 = 0, $$1117 = 0, $$2$off0 = 0, $$2111 = 0, $$2114 = 0, $$2114$be = 0, $$2118 = 0, $$3 = 0, $$3115 = 0, $$3119 = 0, $$4126196 = 0, $$4131195 = 0, $$5 = 0, $$5121 = 0, $$6 = 0, $$7 = 0, $$sink253$index = 0, $$sink253$index5 = 0, $$sroa$0159$0 = 0, $100 = 0, $106 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $134 = 0, $139 = 0, $140 = 0, $144 = 0, $145 = 0, $147 = 0, $150 = 0, $155 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $171 = 0, $178 = 0, $184 = 0, $189 = 0, $196 = 0, $209 = 0, $22 = 0, $27 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $60 = 0, $61 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $75 = 0, $82 = 0, $83 = 0, $89 = 0, $92 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $7 = sp;
 $11 = ($3 - $2 | 0) / 12 | 0;
 do if ($11 >>> 0 > 100) {
  $13 = _malloc($11) | 0;
  if (!$13) {
   __THREW__ = 0;
   invoke_v(5);
   __THREW__ = 0;
   $16 = ___cxa_find_matching_catch_2() | 0;
   $$4126196 = tempRet0;
   $$4131195 = $16;
   break;
  } else {
   $$0132 = $13;
   $$sroa$0159$0 = $13;
   label = 5;
   break;
  }
 } else {
  $$0132 = $7;
  $$sroa$0159$0 = 0;
  label = 5;
 } while (0);
 if ((label | 0) == 5) {
  $$0108 = $2;
  $$0109 = $$0132;
  $$0112 = 0;
  $$0116 = $11;
  while (1) {
   if (($$0108 | 0) == ($3 | 0)) break;
   $22 = HEAP8[$$0108 + 8 + 3 >> 0] | 0;
   if ($22 << 24 >> 24 < 0) $27 = HEAP32[$$0108 + 4 >> 2] | 0; else $27 = $22 & 255;
   if (!$27) {
    HEAP8[$$0109 >> 0] = 2;
    $$1113 = $$0112 + 1 | 0;
    $$1117 = $$0116 + -1 | 0;
   } else {
    HEAP8[$$0109 >> 0] = 1;
    $$1113 = $$0112;
    $$1117 = $$0116;
   }
   $$0108 = $$0108 + 12 | 0;
   $$0109 = $$0109 + 1 | 0;
   $$0112 = $$1113;
   $$0116 = $$1117;
  }
  $$0107 = 0;
  $$2114 = $$0112;
  $$2118 = $$0116;
  L20 : while (1) {
   $33 = HEAP32[$0 >> 2] | 0;
   do if (!$33) $69 = 1; else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 42;
      break L20;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $69 = 1;
     break;
    } else {
     $69 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $50 = HEAP32[$1 >> 2] | 0;
   if (!$50) {
    $68 = 1;
    $89 = 0;
   } else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 42;
      break;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $68 = 1;
     $89 = 0;
    } else {
     $68 = 0;
     $89 = $50;
    }
   }
   $72 = HEAP32[$0 >> 2] | 0;
   if (!(($$2118 | 0) != 0 & ($69 ^ $68))) {
    label = 29;
    break;
   }
   $109 = HEAP32[$72 + 12 >> 2] | 0;
   if (($109 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
    __THREW__ = 0;
    $116 = invoke_ii(HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0, $72 | 0) | 0;
    $117 = __THREW__;
    __THREW__ = 0;
    if ($117 & 1) {
     label = 48;
     break;
    } else $$0$i$i = $116;
   } else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$109 >> 2] | 0) | 0;
   if ($6) $$0106 = $$0$i$i; else {
    __THREW__ = 0;
    $124 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0, $4 | 0, $$0$i$i | 0) | 0;
    $125 = __THREW__;
    __THREW__ = 0;
    if ($125 & 1) {
     label = 48;
     break;
    } else $$0106 = $124;
   }
   $129 = $$0107 + 1 | 0;
   $$0104 = $2;
   $$0105$off0 = 0;
   $$1110 = $$0132;
   $$3115 = $$2114;
   $$3119 = $$2118;
   while (1) {
    if (($$0104 | 0) == ($3 | 0)) break;
    do if ((HEAP8[$$1110 >> 0] | 0) == 1) {
     $134 = $$0104 + 8 + 3 | 0;
     if ((HEAP8[$134 >> 0] | 0) < 0) $139 = HEAP32[$$0104 >> 2] | 0; else $139 = $$0104;
     $140 = HEAP32[$139 + ($$0107 << 2) >> 2] | 0;
     if ($6) $$0103 = $140; else {
      __THREW__ = 0;
      $144 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0, $4 | 0, $140 | 0) | 0;
      $145 = __THREW__;
      __THREW__ = 0;
      if ($145 & 1) {
       label = 58;
       break L20;
      } else $$0103 = $144;
     }
     if (($$0106 | 0) != ($$0103 | 0)) {
      HEAP8[$$1110 >> 0] = 0;
      $$2$off0 = $$0105$off0;
      $$5 = $$3115;
      $$5121 = $$3119 + -1 | 0;
      break;
     }
     $150 = HEAP8[$134 >> 0] | 0;
     if ($150 << 24 >> 24 < 0) $155 = HEAP32[$$0104 + 4 >> 2] | 0; else $155 = $150 & 255;
     if (($155 | 0) == ($129 | 0)) {
      HEAP8[$$1110 >> 0] = 2;
      $$2$off0 = 1;
      $$5 = $$3115 + 1 | 0;
      $$5121 = $$3119 + -1 | 0;
     } else {
      $$2$off0 = 1;
      $$5 = $$3115;
      $$5121 = $$3119;
     }
    } else {
     $$2$off0 = $$0105$off0;
     $$5 = $$3115;
     $$5121 = $$3119;
    } while (0);
    $$0104 = $$0104 + 12 | 0;
    $$0105$off0 = $$2$off0;
    $$1110 = $$1110 + 1 | 0;
    $$3115 = $$5;
    $$3119 = $$5121;
   }
   L70 : do if ($$0105$off0) {
    $162 = HEAP32[$0 >> 2] | 0;
    $163 = $162 + 12 | 0;
    $164 = HEAP32[$163 >> 2] | 0;
    if (($164 | 0) == (HEAP32[$162 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     invoke_ii(HEAP32[(HEAP32[$162 >> 2] | 0) + 40 >> 2] | 0, $162 | 0) | 0;
     $171 = __THREW__;
     __THREW__ = 0;
     if ($171 & 1) {
      label = 74;
      break L20;
     }
    } else {
     HEAP32[$163 >> 2] = $164 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$164 >> 2] | 0) | 0;
    }
    if (($$3115 + $$3119 | 0) >>> 0 > 1) {
     $$0 = $2;
     $$2111 = $$0132;
     $$6 = $$3115;
     while (1) {
      if (($$0 | 0) == ($3 | 0)) {
       $$2114$be = $$6;
       break L70;
      }
      if ((HEAP8[$$2111 >> 0] | 0) == 2) {
       $184 = HEAP8[$$0 + 8 + 3 >> 0] | 0;
       if ($184 << 24 >> 24 < 0) $189 = HEAP32[$$0 + 4 >> 2] | 0; else $189 = $184 & 255;
       if (($189 | 0) == ($129 | 0)) $$7 = $$6; else {
        HEAP8[$$2111 >> 0] = 0;
        $$7 = $$6 + -1 | 0;
       }
      } else $$7 = $$6;
      $$0 = $$0 + 12 | 0;
      $$2111 = $$2111 + 1 | 0;
      $$6 = $$7;
     }
    } else $$2114$be = $$3115;
   } else $$2114$be = $$3115; while (0);
   $$0107 = $129;
   $$2114 = $$2114$be;
   $$2118 = $$3119;
  }
  if ((label | 0) == 29) {
   do if (!$72) {
    $209 = 1;
    label = 36;
   } else {
    $75 = HEAP32[$72 + 12 >> 2] | 0;
    if (($75 | 0) == (HEAP32[$72 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $82 = invoke_ii(HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] | 0, $72 | 0) | 0;
     $83 = __THREW__;
     __THREW__ = 0;
     if ($83 & 1) break; else $$0$i$i$i$i138 = $82;
    } else $$0$i$i$i$i138 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$75 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i138, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $209 = 1;
     label = 36;
     break;
    } else {
     $209 = (HEAP32[$0 >> 2] | 0) == 0;
     label = 36;
     break;
    }
   } while (0);
   L103 : do if ((label | 0) == 36) {
    do if (!$89) label = 82; else {
     $92 = HEAP32[$89 + 12 >> 2] | 0;
     if (($92 | 0) == (HEAP32[$89 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $99 = invoke_ii(HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] | 0, $89 | 0) | 0;
      $100 = __THREW__;
      __THREW__ = 0;
      if ($100 & 1) break L103; else $$0$i$i2$i$i144 = $99;
     } else $$0$i$i2$i$i144 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$92 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i144, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 82;
      break;
     } else if ($209) break; else {
      label = 84;
      break;
     }
    } while (0);
    if ((label | 0) == 82) if ($209) label = 84;
    if ((label | 0) == 84) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
    $$0133 = $2;
    $$3 = $$0132;
    while (1) {
     if (($$0133 | 0) == ($3 | 0)) {
      label = 90;
      break;
     }
     if ((HEAP8[$$3 >> 0] | 0) == 2) {
      $$0133188 = $$0133;
      break;
     }
     $$0133 = $$0133 + 12 | 0;
     $$3 = $$3 + 1 | 0;
    }
    if ((label | 0) == 90) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     $$0133188 = $3;
    }
    if ($$sroa$0159$0 | 0) _free($$sroa$0159$0);
    STACKTOP = sp;
    return $$0133188 | 0;
   } while (0);
   $196 = ___cxa_find_matching_catch_2() | 0;
   $$sink253$index = $196;
   $$sink253$index5 = tempRet0;
  } else if ((label | 0) == 42) {
   $106 = ___cxa_find_matching_catch_2() | 0;
   $$sink253$index = $106;
   $$sink253$index5 = tempRet0;
  } else if ((label | 0) == 48) {
   $127 = ___cxa_find_matching_catch_2() | 0;
   $$sink253$index = $127;
   $$sink253$index5 = tempRet0;
  } else if ((label | 0) == 58) {
   $147 = ___cxa_find_matching_catch_2() | 0;
   $$sink253$index = $147;
   $$sink253$index5 = tempRet0;
  } else if ((label | 0) == 74) {
   $178 = ___cxa_find_matching_catch_2() | 0;
   $$sink253$index = $178;
   $$sink253$index5 = tempRet0;
  }
  if (!$$sroa$0159$0) {
   $$4126196 = $$sink253$index5;
   $$4131195 = $$sink253$index;
  } else {
   _free($$sroa$0159$0);
   $$4126196 = $$sink253$index5;
   $$4131195 = $$sink253$index;
  }
 }
 ___resumeException($$4131195 | 0);
 return 0;
}

function __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i132 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i138 = 0, $$0100 = 0, $$0101 = 0, $$0102 = 0, $$0103 = 0, $$0106 = 0, $$0110 = 0, $$0126 = 0, $$0127 = 0, $$0127182 = 0, $$097 = 0, $$098 = 0, $$099$off0 = 0, $$1104 = 0, $$1107 = 0, $$1111 = 0, $$2$off0 = 0, $$2105 = 0, $$2108 = 0, $$2108$be = 0, $$2112 = 0, $$3 = 0, $$3109 = 0, $$3113 = 0, $$4120190 = 0, $$4125189 = 0, $$5 = 0, $$5115 = 0, $$6 = 0, $$7 = 0, $$sink247$index = 0, $$sink247$index5 = 0, $$sroa$0153$0 = 0, $105 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $120 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $133 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $146 = 0, $149 = 0, $154 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $170 = 0, $177 = 0, $182 = 0, $187 = 0, $194 = 0, $207 = 0, $21 = 0, $26 = 0, $32 = 0, $35 = 0, $42 = 0, $43 = 0, $49 = 0, $52 = 0, $59 = 0, $60 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $74 = 0, $81 = 0, $82 = 0, $88 = 0, $91 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $7 = sp;
 $11 = ($3 - $2 | 0) / 12 | 0;
 do if ($11 >>> 0 > 100) {
  $13 = _malloc($11) | 0;
  if (!$13) {
   __THREW__ = 0;
   invoke_v(5);
   __THREW__ = 0;
   $16 = ___cxa_find_matching_catch_2() | 0;
   $$4120190 = tempRet0;
   $$4125189 = $16;
   break;
  } else {
   $$0126 = $13;
   $$sroa$0153$0 = $13;
   label = 5;
   break;
  }
 } else {
  $$0126 = $7;
  $$sroa$0153$0 = 0;
  label = 5;
 } while (0);
 if ((label | 0) == 5) {
  $$0102 = $2;
  $$0103 = $$0126;
  $$0106 = 0;
  $$0110 = $11;
  while (1) {
   if (($$0102 | 0) == ($3 | 0)) break;
   $21 = HEAP8[$$0102 + 11 >> 0] | 0;
   if ($21 << 24 >> 24 < 0) $26 = HEAP32[$$0102 + 4 >> 2] | 0; else $26 = $21 & 255;
   if (!$26) {
    HEAP8[$$0103 >> 0] = 2;
    $$1107 = $$0106 + 1 | 0;
    $$1111 = $$0110 + -1 | 0;
   } else {
    HEAP8[$$0103 >> 0] = 1;
    $$1107 = $$0106;
    $$1111 = $$0110;
   }
   $$0102 = $$0102 + 12 | 0;
   $$0103 = $$0103 + 1 | 0;
   $$0106 = $$1107;
   $$0110 = $$1111;
  }
  $$0101 = 0;
  $$2108 = $$0106;
  $$2112 = $$0110;
  L20 : while (1) {
   $32 = HEAP32[$0 >> 2] | 0;
   do if (!$32) $68 = 1; else {
    $35 = HEAP32[$32 + 12 >> 2] | 0;
    if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $42 = invoke_ii(HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] | 0, $32 | 0) | 0;
     $43 = __THREW__;
     __THREW__ = 0;
     if ($43 & 1) {
      label = 42;
      break L20;
     } else $$0$i$i$i$i = $42;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$35 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $68 = 1;
     break;
    } else {
     $68 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $49 = HEAP32[$1 >> 2] | 0;
   if (!$49) {
    $67 = 1;
    $88 = 0;
   } else {
    $52 = HEAP32[$49 + 12 >> 2] | 0;
    if (($52 | 0) == (HEAP32[$49 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $59 = invoke_ii(HEAP32[(HEAP32[$49 >> 2] | 0) + 36 >> 2] | 0, $49 | 0) | 0;
     $60 = __THREW__;
     __THREW__ = 0;
     if ($60 & 1) {
      label = 42;
      break;
     } else $$0$i$i2$i$i = $59;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$52 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $67 = 1;
     $88 = 0;
    } else {
     $67 = 0;
     $88 = $49;
    }
   }
   $71 = HEAP32[$0 >> 2] | 0;
   if (!(($$2112 | 0) != 0 & ($68 ^ $67))) {
    label = 29;
    break;
   }
   $108 = HEAP32[$71 + 12 >> 2] | 0;
   if (($108 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
    __THREW__ = 0;
    $115 = invoke_ii(HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] | 0, $71 | 0) | 0;
    $116 = __THREW__;
    __THREW__ = 0;
    if ($116 & 1) {
     label = 48;
     break;
    } else $$0$i$i = $115;
   } else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$108 >> 0] | 0) | 0;
   $120 = $$0$i$i & 255;
   if ($6) $$0100 = $120; else {
    __THREW__ = 0;
    $124 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0, $4 | 0, $120 | 0) | 0;
    $125 = __THREW__;
    __THREW__ = 0;
    if ($125 & 1) {
     label = 48;
     break;
    } else $$0100 = $124;
   }
   $129 = $$0101 + 1 | 0;
   $$098 = $2;
   $$099$off0 = 0;
   $$1104 = $$0126;
   $$3109 = $$2108;
   $$3113 = $$2112;
   while (1) {
    if (($$098 | 0) == ($3 | 0)) break;
    do if ((HEAP8[$$1104 >> 0] | 0) == 1) {
     $133 = $$098 + 11 | 0;
     if ((HEAP8[$133 >> 0] | 0) < 0) $138 = HEAP32[$$098 >> 2] | 0; else $138 = $$098;
     $139 = HEAP8[$138 + $$0101 >> 0] | 0;
     if ($6) $$097 = $139; else {
      __THREW__ = 0;
      $143 = invoke_iii(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0, $4 | 0, $139 | 0) | 0;
      $144 = __THREW__;
      __THREW__ = 0;
      if ($144 & 1) {
       label = 58;
       break L20;
      } else $$097 = $143;
     }
     if ($$0100 << 24 >> 24 != $$097 << 24 >> 24) {
      HEAP8[$$1104 >> 0] = 0;
      $$2$off0 = $$099$off0;
      $$5 = $$3109;
      $$5115 = $$3113 + -1 | 0;
      break;
     }
     $149 = HEAP8[$133 >> 0] | 0;
     if ($149 << 24 >> 24 < 0) $154 = HEAP32[$$098 + 4 >> 2] | 0; else $154 = $149 & 255;
     if (($154 | 0) == ($129 | 0)) {
      HEAP8[$$1104 >> 0] = 2;
      $$2$off0 = 1;
      $$5 = $$3109 + 1 | 0;
      $$5115 = $$3113 + -1 | 0;
     } else {
      $$2$off0 = 1;
      $$5 = $$3109;
      $$5115 = $$3113;
     }
    } else {
     $$2$off0 = $$099$off0;
     $$5 = $$3109;
     $$5115 = $$3113;
    } while (0);
    $$098 = $$098 + 12 | 0;
    $$099$off0 = $$2$off0;
    $$1104 = $$1104 + 1 | 0;
    $$3109 = $$5;
    $$3113 = $$5115;
   }
   L70 : do if ($$099$off0) {
    $161 = HEAP32[$0 >> 2] | 0;
    $162 = $161 + 12 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    if (($163 | 0) == (HEAP32[$161 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 40 >> 2] | 0, $161 | 0) | 0;
     $170 = __THREW__;
     __THREW__ = 0;
     if ($170 & 1) {
      label = 74;
      break L20;
     }
    } else {
     HEAP32[$162 >> 2] = $163 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$163 >> 0] | 0) | 0;
    }
    if (($$3109 + $$3113 | 0) >>> 0 > 1) {
     $$0 = $2;
     $$2105 = $$0126;
     $$6 = $$3109;
     while (1) {
      if (($$0 | 0) == ($3 | 0)) {
       $$2108$be = $$6;
       break L70;
      }
      if ((HEAP8[$$2105 >> 0] | 0) == 2) {
       $182 = HEAP8[$$0 + 11 >> 0] | 0;
       if ($182 << 24 >> 24 < 0) $187 = HEAP32[$$0 + 4 >> 2] | 0; else $187 = $182 & 255;
       if (($187 | 0) == ($129 | 0)) $$7 = $$6; else {
        HEAP8[$$2105 >> 0] = 0;
        $$7 = $$6 + -1 | 0;
       }
      } else $$7 = $$6;
      $$0 = $$0 + 12 | 0;
      $$2105 = $$2105 + 1 | 0;
      $$6 = $$7;
     }
    } else $$2108$be = $$3109;
   } else $$2108$be = $$3109; while (0);
   $$0101 = $129;
   $$2108 = $$2108$be;
   $$2112 = $$3113;
  }
  if ((label | 0) == 29) {
   do if (!$71) {
    $207 = 1;
    label = 36;
   } else {
    $74 = HEAP32[$71 + 12 >> 2] | 0;
    if (($74 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $81 = invoke_ii(HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] | 0, $71 | 0) | 0;
     $82 = __THREW__;
     __THREW__ = 0;
     if ($82 & 1) break; else $$0$i$i$i$i132 = $81;
    } else $$0$i$i$i$i132 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$74 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i132, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $207 = 1;
     label = 36;
     break;
    } else {
     $207 = (HEAP32[$0 >> 2] | 0) == 0;
     label = 36;
     break;
    }
   } while (0);
   L103 : do if ((label | 0) == 36) {
    do if (!$88) label = 82; else {
     $91 = HEAP32[$88 + 12 >> 2] | 0;
     if (($91 | 0) == (HEAP32[$88 + 16 >> 2] | 0)) {
      __THREW__ = 0;
      $98 = invoke_ii(HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] | 0, $88 | 0) | 0;
      $99 = __THREW__;
      __THREW__ = 0;
      if ($99 & 1) break L103; else $$0$i$i2$i$i138 = $98;
     } else $$0$i$i2$i$i138 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$91 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i138, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 82;
      break;
     } else if ($207) break; else {
      label = 84;
      break;
     }
    } while (0);
    if ((label | 0) == 82) if ($207) label = 84;
    if ((label | 0) == 84) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
    $$0127 = $2;
    $$3 = $$0126;
    while (1) {
     if (($$0127 | 0) == ($3 | 0)) {
      label = 90;
      break;
     }
     if ((HEAP8[$$3 >> 0] | 0) == 2) {
      $$0127182 = $$0127;
      break;
     }
     $$0127 = $$0127 + 12 | 0;
     $$3 = $$3 + 1 | 0;
    }
    if ((label | 0) == 90) {
     HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 4;
     $$0127182 = $3;
    }
    if ($$sroa$0153$0 | 0) _free($$sroa$0153$0);
    STACKTOP = sp;
    return $$0127182 | 0;
   } while (0);
   $194 = ___cxa_find_matching_catch_2() | 0;
   $$sink247$index = $194;
   $$sink247$index5 = tempRet0;
  } else if ((label | 0) == 42) {
   $105 = ___cxa_find_matching_catch_2() | 0;
   $$sink247$index = $105;
   $$sink247$index5 = tempRet0;
  } else if ((label | 0) == 48) {
   $127 = ___cxa_find_matching_catch_2() | 0;
   $$sink247$index = $127;
   $$sink247$index5 = tempRet0;
  } else if ((label | 0) == 58) {
   $146 = ___cxa_find_matching_catch_2() | 0;
   $$sink247$index = $146;
   $$sink247$index5 = tempRet0;
  } else if ((label | 0) == 74) {
   $177 = ___cxa_find_matching_catch_2() | 0;
   $$sink247$index = $177;
   $$sink247$index5 = tempRet0;
  }
  if (!$$sroa$0153$0) {
   $$4120190 = $$sink247$index5;
   $$4125189 = $$sink247$index;
  } else {
   _free($$sroa$0153$0);
   $$4120190 = $$sink247$index5;
   $$4125189 = $$sink247$index;
  }
 }
 ___resumeException($$4125189 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$025 = 0, $$126 = 0, $$2 = 0, $$227 = 0, $$230 = 0, $$3 = 0, $$331 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $117 = 0, $12 = 0, $121 = 0, $122 = 0, $125 = 0, $131 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $147 = 0, $148 = 0, $15 = 0, $153 = 0, $158 = 0, $16 = 0, $161 = 0, $162 = 0, $168 = 0, $171 = 0, $178 = 0, $179 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $21 = 0, $25 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $50 = 0, $51 = 0, $57 = 0, $6 = 0, $60 = 0, $67 = 0, $68 = 0, $7 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $89 = 0, $9 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $vararg_buffer = sp + 264 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 292 | 0;
 $8 = sp + 280 | 0;
 $9 = sp + 276 | 0;
 $10 = sp;
 $11 = sp + 272 | 0;
 $12 = sp + 268 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($8, $3);
 __THREW__ = 0;
 $15 = invoke_iii(32, $8 | 0, 62400) | 0;
 $16 = __THREW__;
 __THREW__ = 0;
 if ($16 & 1) label = 33; else {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$15 >> 2] | 0) + 48 >> 2] | 0, $15 | 0, 40416, 40442, $6 | 0) | 0;
  $21 = __THREW__;
  __THREW__ = 0;
  if ($21 & 1) label = 33; else {
   __ZNSt3__26localeD2Ev($8);
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$8 + 8 >> 2] = 0;
   $$0$i$i32 = 0;
   while (1) {
    if (($$0$i$i32 | 0) == 3) break;
    HEAP32[$8 + ($$0$i$i32 << 2) >> 2] = 0;
    $$0$i$i32 = $$0$i$i32 + 1 | 0;
   }
   $25 = $8 + 11 | 0;
   if ((HEAP8[$25 >> 0] | 0) < 0) $31 = (HEAP32[$8 + 8 >> 2] & 2147483647) + -1 | 0; else $31 = 10;
   __THREW__ = 0;
   invoke_viii(13, $8 | 0, $31 | 0, 0);
   $32 = __THREW__;
   __THREW__ = 0;
   if ($32 & 1) {
    $99 = ___cxa_find_matching_catch_2() | 0;
    $$2 = $99;
    $$230 = tempRet0;
   } else {
    $37 = (HEAP8[$25 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
    HEAP32[$9 >> 2] = $37;
    HEAP32[$11 >> 2] = $10;
    HEAP32[$12 >> 2] = 0;
    $38 = $8 + 4 | 0;
    $39 = $8 + 8 | 0;
    $$pre = HEAP32[$1 >> 2] | 0;
    $$025 = $37;
    $187 = $$pre;
    $40 = $$pre;
    L18 : while (1) {
     if (!$40) {
      $108 = 0;
      $158 = 0;
      $188 = 1;
     } else {
      $43 = HEAP32[$40 + 12 >> 2] | 0;
      if (($43 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $50 = invoke_ii(HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] | 0, $40 | 0) | 0;
       $51 = __THREW__;
       __THREW__ = 0;
       if ($51 & 1) {
        label = 35;
        break;
       } else $$0$i$i$i$i = $50;
      } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$43 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $108 = 0;
       $158 = 0;
       $188 = 1;
      } else {
       $108 = $40;
       $158 = $187;
       $188 = 0;
      }
     }
     $57 = HEAP32[$2 >> 2] | 0;
     do if (!$57) label = 25; else {
      $60 = HEAP32[$57 + 12 >> 2] | 0;
      if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $67 = invoke_ii(HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] | 0, $57 | 0) | 0;
       $68 = __THREW__;
       __THREW__ = 0;
       if ($68 & 1) {
        label = 35;
        break L18;
       } else $$0$i$i2$i$i = $67;
      } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$60 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 25;
       break;
      } else if ($188) {
       $189 = $57;
       break;
      } else {
       $$227 = $$025;
       $168 = $57;
       label = 47;
       break L18;
      }
     } while (0);
     if ((label | 0) == 25) {
      label = 0;
      if ($188) {
       $$227 = $$025;
       $168 = 0;
       label = 47;
       break;
      } else $189 = 0;
     }
     $75 = HEAP8[$25 >> 0] | 0;
     $79 = $75 << 24 >> 24 < 0 ? HEAP32[$38 >> 2] | 0 : $75 & 255;
     if ((HEAP32[$9 >> 2] | 0) == ($$025 + $79 | 0)) {
      __THREW__ = 0;
      invoke_viii(13, $8 | 0, $79 << 1 | 0, 0);
      $83 = __THREW__;
      __THREW__ = 0;
      if ($83 & 1) {
       label = 37;
       break;
      }
      if ((HEAP8[$25 >> 0] | 0) < 0) $89 = (HEAP32[$39 >> 2] & 2147483647) + -1 | 0; else $89 = 10;
      __THREW__ = 0;
      invoke_viii(13, $8 | 0, $89 | 0, 0);
      $90 = __THREW__;
      __THREW__ = 0;
      if ($90 & 1) {
       label = 37;
       break;
      }
      $95 = (HEAP8[$25 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
      HEAP32[$9 >> 2] = $95 + $79;
      $$126 = $95;
     } else $$126 = $$025;
     $107 = $108 + 12 | 0;
     $109 = HEAP32[$107 >> 2] | 0;
     $110 = $108 + 16 | 0;
     if (($109 | 0) == (HEAP32[$110 >> 2] | 0)) {
      __THREW__ = 0;
      $116 = invoke_ii(HEAP32[(HEAP32[$108 >> 2] | 0) + 36 >> 2] | 0, $108 | 0) | 0;
      $117 = __THREW__;
      __THREW__ = 0;
      if ($117 & 1) {
       label = 35;
       break;
      } else $$0$i$i45 = $116;
     } else $$0$i$i45 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$109 >> 2] | 0) | 0;
     __THREW__ = 0;
     $121 = invoke_iiiiiiiiiii(2, $$0$i$i45 | 0, 16, $$126 | 0, $9 | 0, $12 | 0, 0, $7 | 0, $10 | 0, $11 | 0, $6 | 0) | 0;
     $122 = __THREW__;
     __THREW__ = 0;
     if ($122 & 1) {
      label = 35;
      break;
     }
     if ($121 | 0) {
      $$227 = $$126;
      $168 = $189;
      label = 47;
      break;
     }
     $125 = HEAP32[$107 >> 2] | 0;
     if (($125 | 0) == (HEAP32[$110 >> 2] | 0)) {
      __THREW__ = 0;
      invoke_ii(HEAP32[(HEAP32[$108 >> 2] | 0) + 40 >> 2] | 0, $108 | 0) | 0;
      $131 = __THREW__;
      __THREW__ = 0;
      if ($131 & 1) {
       label = 35;
       break;
      }
     } else {
      HEAP32[$107 >> 2] = $125 + 4;
      __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$125 >> 2] | 0) | 0;
     }
     $$025 = $$126;
     $187 = $158;
     $40 = $108;
    }
    if ((label | 0) == 35) {
     $101 = ___cxa_find_matching_catch_2() | 0;
     $$sink74$index = $101;
     $$sink74$index3 = tempRet0;
    } else if ((label | 0) == 37) {
     $105 = ___cxa_find_matching_catch_2() | 0;
     $$sink74$index = $105;
     $$sink74$index3 = tempRet0;
    } else if ((label | 0) == 47) {
     __THREW__ = 0;
     invoke_viii(13, $8 | 0, (HEAP32[$9 >> 2] | 0) - $$227 | 0, 0);
     $138 = __THREW__;
     __THREW__ = 0;
     L61 : do if (!($138 & 1)) {
      $140 = HEAP8[$25 >> 0] | 0;
      $141 = HEAP32[$8 >> 2] | 0;
      __THREW__ = 0;
      $142 = invoke_i(1) | 0;
      $143 = __THREW__;
      __THREW__ = 0;
      if (!($143 & 1)) {
       __THREW__ = 0;
       HEAP32[$vararg_buffer >> 2] = $5;
       $147 = invoke_iiiii(16, ($140 << 24 >> 24 < 0 ? $141 : $8) | 0, $142 | 0, 53044, $vararg_buffer | 0) | 0;
       $148 = __THREW__;
       __THREW__ = 0;
       if (!($148 & 1)) {
        if (($147 | 0) != 1) HEAP32[$4 >> 2] = 4;
        if (!$108) $190 = 1; else {
         $153 = HEAP32[$108 + 12 >> 2] | 0;
         if (($153 | 0) == (HEAP32[$108 + 16 >> 2] | 0)) {
          __THREW__ = 0;
          $161 = invoke_ii(HEAP32[(HEAP32[$158 >> 2] | 0) + 36 >> 2] | 0, $108 | 0) | 0;
          $162 = __THREW__;
          __THREW__ = 0;
          if ($162 & 1) break; else $$0$i$i$i$i50 = $161;
         } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$153 >> 2] | 0) | 0;
         if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
          HEAP32[$1 >> 2] = 0;
          $190 = 1;
         } else $190 = 0;
        }
        do if (!$168) label = 64; else {
         $171 = HEAP32[$168 + 12 >> 2] | 0;
         if (($171 | 0) == (HEAP32[$168 + 16 >> 2] | 0)) {
          __THREW__ = 0;
          $178 = invoke_ii(HEAP32[(HEAP32[$168 >> 2] | 0) + 36 >> 2] | 0, $168 | 0) | 0;
          $179 = __THREW__;
          __THREW__ = 0;
          if ($179 & 1) break L61; else $$0$i$i2$i$i56 = $178;
         } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$171 >> 2] | 0) | 0;
         if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
          HEAP32[$2 >> 2] = 0;
          label = 64;
          break;
         } else if ($190) break; else {
          label = 66;
          break;
         }
        } while (0);
        if ((label | 0) == 64) if ($190) label = 66;
        if ((label | 0) == 66) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
        $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
        STACKTOP = sp;
        return $$sroa$0$0$copyload | 0;
       }
      }
     } while (0);
     $103 = ___cxa_find_matching_catch_2() | 0;
     $$sink74$index = $103;
     $$sink74$index3 = tempRet0;
    }
    $$2 = $$sink74$index;
    $$230 = $$sink74$index3;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $$3 = $$2;
   $$331 = $$230;
  }
 }
 if ((label | 0) == 33) {
  $97 = ___cxa_find_matching_catch_2() | 0;
  $98 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  $$3 = $97;
  $$331 = $98;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i47 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i53 = 0, $$0$i$i29 = 0, $$0$i$i42 = 0, $$022 = 0, $$123 = 0, $$2 = 0, $$224 = 0, $$227 = 0, $$3 = 0, $$328 = 0, $$pre = 0, $$sink71$index = 0, $$sink71$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $116 = 0, $117 = 0, $12 = 0, $122 = 0, $123 = 0, $126 = 0, $132 = 0, $139 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $169 = 0, $172 = 0, $179 = 0, $180 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $21 = 0, $25 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $50 = 0, $51 = 0, $57 = 0, $6 = 0, $60 = 0, $67 = 0, $68 = 0, $7 = 0, $75 = 0, $79 = 0, $8 = 0, $83 = 0, $89 = 0, $9 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp + 192 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 220 | 0;
 $8 = sp + 208 | 0;
 $9 = sp + 204 | 0;
 $10 = sp;
 $11 = sp + 200 | 0;
 $12 = sp + 196 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAP32[$7 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$7 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 __ZNKSt3__28ios_base6getlocEv($8, $3);
 __THREW__ = 0;
 $15 = invoke_iii(32, $8 | 0, 62368) | 0;
 $16 = __THREW__;
 __THREW__ = 0;
 if ($16 & 1) label = 33; else {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$15 >> 2] | 0) + 32 >> 2] | 0, $15 | 0, 40416, 40442, $6 | 0) | 0;
  $21 = __THREW__;
  __THREW__ = 0;
  if ($21 & 1) label = 33; else {
   __ZNSt3__26localeD2Ev($8);
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$8 + 8 >> 2] = 0;
   $$0$i$i29 = 0;
   while (1) {
    if (($$0$i$i29 | 0) == 3) break;
    HEAP32[$8 + ($$0$i$i29 << 2) >> 2] = 0;
    $$0$i$i29 = $$0$i$i29 + 1 | 0;
   }
   $25 = $8 + 11 | 0;
   if ((HEAP8[$25 >> 0] | 0) < 0) $31 = (HEAP32[$8 + 8 >> 2] & 2147483647) + -1 | 0; else $31 = 10;
   __THREW__ = 0;
   invoke_viii(13, $8 | 0, $31 | 0, 0);
   $32 = __THREW__;
   __THREW__ = 0;
   if ($32 & 1) {
    $99 = ___cxa_find_matching_catch_2() | 0;
    $$2 = $99;
    $$227 = tempRet0;
   } else {
    $37 = (HEAP8[$25 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
    HEAP32[$9 >> 2] = $37;
    HEAP32[$11 >> 2] = $10;
    HEAP32[$12 >> 2] = 0;
    $38 = $8 + 4 | 0;
    $39 = $8 + 8 | 0;
    $$pre = HEAP32[$1 >> 2] | 0;
    $$022 = $37;
    $188 = $$pre;
    $40 = $$pre;
    L18 : while (1) {
     if (!$40) {
      $108 = 0;
      $159 = 0;
      $189 = 1;
     } else {
      $43 = HEAP32[$40 + 12 >> 2] | 0;
      if (($43 | 0) == (HEAP32[$40 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $50 = invoke_ii(HEAP32[(HEAP32[$40 >> 2] | 0) + 36 >> 2] | 0, $40 | 0) | 0;
       $51 = __THREW__;
       __THREW__ = 0;
       if ($51 & 1) {
        label = 35;
        break;
       } else $$0$i$i$i$i = $50;
      } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$43 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $108 = 0;
       $159 = 0;
       $189 = 1;
      } else {
       $108 = $40;
       $159 = $188;
       $189 = 0;
      }
     }
     $57 = HEAP32[$2 >> 2] | 0;
     do if (!$57) label = 25; else {
      $60 = HEAP32[$57 + 12 >> 2] | 0;
      if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $67 = invoke_ii(HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] | 0, $57 | 0) | 0;
       $68 = __THREW__;
       __THREW__ = 0;
       if ($68 & 1) {
        label = 35;
        break L18;
       } else $$0$i$i2$i$i = $67;
      } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$60 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 25;
       break;
      } else if ($189) {
       $190 = $57;
       break;
      } else {
       $$224 = $$022;
       $169 = $57;
       label = 47;
       break L18;
      }
     } while (0);
     if ((label | 0) == 25) {
      label = 0;
      if ($189) {
       $$224 = $$022;
       $169 = 0;
       label = 47;
       break;
      } else $190 = 0;
     }
     $75 = HEAP8[$25 >> 0] | 0;
     $79 = $75 << 24 >> 24 < 0 ? HEAP32[$38 >> 2] | 0 : $75 & 255;
     if ((HEAP32[$9 >> 2] | 0) == ($$022 + $79 | 0)) {
      __THREW__ = 0;
      invoke_viii(13, $8 | 0, $79 << 1 | 0, 0);
      $83 = __THREW__;
      __THREW__ = 0;
      if ($83 & 1) {
       label = 37;
       break;
      }
      if ((HEAP8[$25 >> 0] | 0) < 0) $89 = (HEAP32[$39 >> 2] & 2147483647) + -1 | 0; else $89 = 10;
      __THREW__ = 0;
      invoke_viii(13, $8 | 0, $89 | 0, 0);
      $90 = __THREW__;
      __THREW__ = 0;
      if ($90 & 1) {
       label = 37;
       break;
      }
      $95 = (HEAP8[$25 >> 0] | 0) < 0 ? HEAP32[$8 >> 2] | 0 : $8;
      HEAP32[$9 >> 2] = $95 + $79;
      $$123 = $95;
     } else $$123 = $$022;
     $107 = $108 + 12 | 0;
     $109 = HEAP32[$107 >> 2] | 0;
     $110 = $108 + 16 | 0;
     if (($109 | 0) == (HEAP32[$110 >> 2] | 0)) {
      __THREW__ = 0;
      $116 = invoke_ii(HEAP32[(HEAP32[$108 >> 2] | 0) + 36 >> 2] | 0, $108 | 0) | 0;
      $117 = __THREW__;
      __THREW__ = 0;
      if ($117 & 1) {
       label = 35;
       break;
      } else $$0$i$i42 = $116;
     } else $$0$i$i42 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$109 >> 0] | 0) | 0;
     __THREW__ = 0;
     $122 = invoke_iiiiiiiiiii(1, $$0$i$i42 & 255 | 0, 16, $$123 | 0, $9 | 0, $12 | 0, 0, $7 | 0, $10 | 0, $11 | 0, $6 | 0) | 0;
     $123 = __THREW__;
     __THREW__ = 0;
     if ($123 & 1) {
      label = 35;
      break;
     }
     if ($122 | 0) {
      $$224 = $$123;
      $169 = $190;
      label = 47;
      break;
     }
     $126 = HEAP32[$107 >> 2] | 0;
     if (($126 | 0) == (HEAP32[$110 >> 2] | 0)) {
      __THREW__ = 0;
      invoke_ii(HEAP32[(HEAP32[$108 >> 2] | 0) + 40 >> 2] | 0, $108 | 0) | 0;
      $132 = __THREW__;
      __THREW__ = 0;
      if ($132 & 1) {
       label = 35;
       break;
      }
     } else {
      HEAP32[$107 >> 2] = $126 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$126 >> 0] | 0) | 0;
     }
     $$022 = $$123;
     $188 = $159;
     $40 = $108;
    }
    if ((label | 0) == 35) {
     $101 = ___cxa_find_matching_catch_2() | 0;
     $$sink71$index = $101;
     $$sink71$index3 = tempRet0;
    } else if ((label | 0) == 37) {
     $105 = ___cxa_find_matching_catch_2() | 0;
     $$sink71$index = $105;
     $$sink71$index3 = tempRet0;
    } else if ((label | 0) == 47) {
     __THREW__ = 0;
     invoke_viii(13, $8 | 0, (HEAP32[$9 >> 2] | 0) - $$224 | 0, 0);
     $139 = __THREW__;
     __THREW__ = 0;
     L61 : do if (!($139 & 1)) {
      $141 = HEAP8[$25 >> 0] | 0;
      $142 = HEAP32[$8 >> 2] | 0;
      __THREW__ = 0;
      $143 = invoke_i(1) | 0;
      $144 = __THREW__;
      __THREW__ = 0;
      if (!($144 & 1)) {
       __THREW__ = 0;
       HEAP32[$vararg_buffer >> 2] = $5;
       $148 = invoke_iiiii(16, ($141 << 24 >> 24 < 0 ? $142 : $8) | 0, $143 | 0, 53044, $vararg_buffer | 0) | 0;
       $149 = __THREW__;
       __THREW__ = 0;
       if (!($149 & 1)) {
        if (($148 | 0) != 1) HEAP32[$4 >> 2] = 4;
        if (!$108) $191 = 1; else {
         $154 = HEAP32[$108 + 12 >> 2] | 0;
         if (($154 | 0) == (HEAP32[$108 + 16 >> 2] | 0)) {
          __THREW__ = 0;
          $162 = invoke_ii(HEAP32[(HEAP32[$159 >> 2] | 0) + 36 >> 2] | 0, $108 | 0) | 0;
          $163 = __THREW__;
          __THREW__ = 0;
          if ($163 & 1) break; else $$0$i$i$i$i47 = $162;
         } else $$0$i$i$i$i47 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$154 >> 0] | 0) | 0;
         if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i47, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
          HEAP32[$1 >> 2] = 0;
          $191 = 1;
         } else $191 = 0;
        }
        do if (!$169) label = 64; else {
         $172 = HEAP32[$169 + 12 >> 2] | 0;
         if (($172 | 0) == (HEAP32[$169 + 16 >> 2] | 0)) {
          __THREW__ = 0;
          $179 = invoke_ii(HEAP32[(HEAP32[$169 >> 2] | 0) + 36 >> 2] | 0, $169 | 0) | 0;
          $180 = __THREW__;
          __THREW__ = 0;
          if ($180 & 1) break L61; else $$0$i$i2$i$i53 = $179;
         } else $$0$i$i2$i$i53 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$172 >> 0] | 0) | 0;
         if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i53, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
          HEAP32[$2 >> 2] = 0;
          label = 64;
          break;
         } else if ($191) break; else {
          label = 66;
          break;
         }
        } while (0);
        if ((label | 0) == 64) if ($191) label = 66;
        if ((label | 0) == 66) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
        $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
        STACKTOP = sp;
        return $$sroa$0$0$copyload | 0;
       }
      }
     } while (0);
     $103 = ___cxa_find_matching_catch_2() | 0;
     $$sink71$index = $103;
     $$sink71$index3 = tempRet0;
    }
    $$2 = $$sink71$index;
    $$227 = $$sink71$index3;
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
   $$3 = $$2;
   $$328 = $$227;
  }
 }
 if ((label | 0) == 33) {
  $97 = ___cxa_find_matching_catch_2() | 0;
  $98 = tempRet0;
  __ZNSt3__26localeD2Ev($8);
  $$3 = $97;
  $$328 = $98;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($$3 | 0);
 return 0;
}

function _inflate_table($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $140 = 0, $141 = 0, $147 = 0, $148 = 0, $15 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $236 = 0, $24 = 0, $246 = 0, $25 = 0, $259 = 0, $26 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $365 = 0, $367 = 0, $372 = 0, $48 = 0, $6 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 156 | 0;
 $8 = sp + 152 | 0;
 $9 = sp + 148 | 0;
 $10 = sp + 144 | 0;
 $11 = sp + 140 | 0;
 $12 = sp + 136 | 0;
 $13 = sp + 132 | 0;
 $14 = sp + 128 | 0;
 $15 = sp + 124 | 0;
 $16 = sp + 120 | 0;
 $17 = sp + 116 | 0;
 $18 = sp + 112 | 0;
 $19 = sp + 108 | 0;
 $20 = sp + 104 | 0;
 $21 = sp + 100 | 0;
 $22 = sp + 96 | 0;
 $23 = sp + 92 | 0;
 $24 = sp + 88 | 0;
 $25 = sp + 84 | 0;
 $26 = sp + 80 | 0;
 $27 = sp + 164 | 0;
 $28 = sp + 76 | 0;
 $29 = sp + 72 | 0;
 $30 = sp + 68 | 0;
 $31 = sp + 64 | 0;
 $32 = sp + 32 | 0;
 $33 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$10 >> 2] = $3;
 HEAP32[$11 >> 2] = $4;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = 0;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >>> 0 > 15) break;
  HEAP16[$32 + (HEAP32[$13 >> 2] << 1) >> 1] = 0;
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 HEAP32[$14 >> 2] = 0;
 while (1) {
  if ((HEAP32[$14 >> 2] | 0) >>> 0 >= (HEAP32[$9 >> 2] | 0) >>> 0) break;
  $48 = $32 + ((HEAPU16[(HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) << 1) | 0;
  HEAP16[$48 >> 1] = (HEAP16[$48 >> 1] | 0) + 1 << 16 >> 16;
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 }
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 HEAP32[$16 >> 2] = 15;
 while (1) {
  if ((HEAP32[$16 >> 2] | 0) >>> 0 < 1) break;
  if (HEAPU16[$32 + (HEAP32[$16 >> 2] << 1) >> 1] | 0 | 0) break;
  HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + -1;
 }
 if ((HEAP32[$17 >> 2] | 0) >>> 0 > (HEAP32[$16 >> 2] | 0) >>> 0) HEAP32[$17 >> 2] = HEAP32[$16 >> 2];
 if (!(HEAP32[$16 >> 2] | 0)) {
  HEAP8[$27 >> 0] = 64;
  HEAP8[$27 + 1 >> 0] = 1;
  HEAP16[$27 + 2 >> 1] = 0;
  $72 = HEAP32[$10 >> 2] | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  HEAP32[$72 >> 2] = $73 + 4;
  HEAP16[$73 >> 1] = HEAP16[$27 >> 1] | 0;
  HEAP16[$73 + 2 >> 1] = HEAP16[$27 + 2 >> 1] | 0;
  $75 = HEAP32[$10 >> 2] | 0;
  $76 = HEAP32[$75 >> 2] | 0;
  HEAP32[$75 >> 2] = $76 + 4;
  HEAP16[$76 >> 1] = HEAP16[$27 >> 1] | 0;
  HEAP16[$76 + 2 >> 1] = HEAP16[$27 + 2 >> 1] | 0;
  HEAP32[HEAP32[$11 >> 2] >> 2] = 1;
  HEAP32[$6 >> 2] = 0;
  $372 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $372 | 0;
 }
 HEAP32[$15 >> 2] = 1;
 while (1) {
  if ((HEAP32[$15 >> 2] | 0) >>> 0 >= (HEAP32[$16 >> 2] | 0) >>> 0) break;
  if (HEAPU16[$32 + (HEAP32[$15 >> 2] << 1) >> 1] | 0 | 0) break;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 }
 if ((HEAP32[$17 >> 2] | 0) >>> 0 < (HEAP32[$15 >> 2] | 0) >>> 0) HEAP32[$17 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$20 >> 2] = 1;
 HEAP32[$13 >> 2] = 1;
 while (1) {
  $95 = HEAP32[$20 >> 2] | 0;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 > 15) break;
  HEAP32[$20 >> 2] = $95 << 1;
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) - (HEAPU16[$32 + (HEAP32[$13 >> 2] << 1) >> 1] | 0);
  if ((HEAP32[$20 >> 2] | 0) < 0) {
   label = 24;
   break;
  }
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 if ((label | 0) == 24) {
  HEAP32[$6 >> 2] = -1;
  $372 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $372 | 0;
 }
 if (($95 | 0) > 0) if ((HEAP32[$7 >> 2] | 0) == 0 | (HEAP32[$16 >> 2] | 0) != 1) {
  HEAP32[$6 >> 2] = -1;
  $372 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $372 | 0;
 }
 HEAP16[$33 + 2 >> 1] = 0;
 HEAP32[$13 >> 2] = 1;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >>> 0 >= 15) break;
  HEAP16[$33 + ((HEAP32[$13 >> 2] | 0) + 1 << 1) >> 1] = (HEAPU16[$33 + (HEAP32[$13 >> 2] << 1) >> 1] | 0) + (HEAPU16[$32 + (HEAP32[$13 >> 2] << 1) >> 1] | 0);
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 HEAP32[$14 >> 2] = 0;
 while (1) {
  if ((HEAP32[$14 >> 2] | 0) >>> 0 >= (HEAP32[$9 >> 2] | 0) >>> 0) break;
  if (HEAPU16[(HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0 | 0) {
   $140 = HEAP32[$14 >> 2] & 65535;
   $141 = HEAP32[$12 >> 2] | 0;
   $147 = $33 + ((HEAPU16[(HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) << 1) | 0;
   $148 = HEAP16[$147 >> 1] | 0;
   HEAP16[$147 >> 1] = $148 + 1 << 16 >> 16;
   HEAP16[$141 + (($148 & 65535) << 1) >> 1] = $140;
  }
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
 }
 switch (HEAP32[$7 >> 2] | 0) {
 case 0:
  {
   $155 = HEAP32[$12 >> 2] | 0;
   HEAP32[$30 >> 2] = $155;
   HEAP32[$29 >> 2] = $155;
   HEAP32[$31 >> 2] = 20;
   break;
  }
 case 1:
  {
   HEAP32[$29 >> 2] = 30864;
   HEAP32[$30 >> 2] = 30928;
   HEAP32[$31 >> 2] = 257;
   break;
  }
 default:
  {
   HEAP32[$29 >> 2] = 30992;
   HEAP32[$30 >> 2] = 31056;
   HEAP32[$31 >> 2] = 0;
  }
 }
 HEAP32[$22 >> 2] = 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$28 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$18 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$19 >> 2] = 0;
 HEAP32[$25 >> 2] = -1;
 HEAP32[$21 >> 2] = 1 << HEAP32[$17 >> 2];
 HEAP32[$26 >> 2] = (HEAP32[$21 >> 2] | 0) - 1;
 if (!((HEAP32[$7 >> 2] | 0) == 1 & (HEAP32[$21 >> 2] | 0) >>> 0 > 852)) if (!((HEAP32[$7 >> 2] | 0) == 2 & (HEAP32[$21 >> 2] | 0) >>> 0 > 592)) {
  while (1) {
   HEAP8[$27 + 1 >> 0] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$19 >> 2] | 0);
   do if (((HEAPU16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) + 1 | 0) >>> 0 < (HEAP32[$31 >> 2] | 0) >>> 0) {
    HEAP8[$27 >> 0] = 0;
    HEAP16[$27 + 2 >> 1] = HEAP16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0;
   } else if ((HEAPU16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) >>> 0 >= (HEAP32[$31 >> 2] | 0) >>> 0) {
    HEAP8[$27 >> 0] = HEAP16[(HEAP32[$30 >> 2] | 0) + ((HEAPU16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) - (HEAP32[$31 >> 2] | 0) << 1) >> 1];
    HEAP16[$27 + 2 >> 1] = HEAP16[(HEAP32[$29 >> 2] | 0) + ((HEAPU16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) - (HEAP32[$31 >> 2] | 0) << 1) >> 1] | 0;
    break;
   } else {
    HEAP8[$27 >> 0] = 96;
    HEAP16[$27 + 2 >> 1] = 0;
    break;
   } while (0);
   HEAP32[$23 >> 2] = 1 << (HEAP32[$13 >> 2] | 0) - (HEAP32[$19 >> 2] | 0);
   HEAP32[$24 >> 2] = 1 << HEAP32[$18 >> 2];
   HEAP32[$15 >> 2] = HEAP32[$24 >> 2];
   do {
    HEAP32[$24 >> 2] = (HEAP32[$24 >> 2] | 0) - (HEAP32[$23 >> 2] | 0);
    $236 = (HEAP32[$28 >> 2] | 0) + (((HEAP32[$22 >> 2] | 0) >>> (HEAP32[$19 >> 2] | 0)) + (HEAP32[$24 >> 2] | 0) << 2) | 0;
    HEAP16[$236 >> 1] = HEAP16[$27 >> 1] | 0;
    HEAP16[$236 + 2 >> 1] = HEAP16[$27 + 2 >> 1] | 0;
   } while ((HEAP32[$24 >> 2] | 0) != 0);
   HEAP32[$23 >> 2] = 1 << (HEAP32[$13 >> 2] | 0) - 1;
   while (1) {
    $246 = HEAP32[$23 >> 2] | 0;
    if (!(HEAP32[$22 >> 2] & HEAP32[$23 >> 2])) break;
    HEAP32[$23 >> 2] = $246 >>> 1;
   }
   if ($246 | 0) {
    HEAP32[$22 >> 2] = HEAP32[$22 >> 2] & (HEAP32[$23 >> 2] | 0) - 1;
    HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + (HEAP32[$23 >> 2] | 0);
   } else HEAP32[$22 >> 2] = 0;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
   $259 = $32 + (HEAP32[$13 >> 2] << 1) | 0;
   $261 = (HEAP16[$259 >> 1] | 0) + -1 << 16 >> 16;
   HEAP16[$259 >> 1] = $261;
   if (!($261 & 65535)) {
    if ((HEAP32[$13 >> 2] | 0) == (HEAP32[$16 >> 2] | 0)) break;
    HEAP32[$13 >> 2] = HEAPU16[(HEAP32[$8 >> 2] | 0) + ((HEAPU16[(HEAP32[$12 >> 2] | 0) + (HEAP32[$14 >> 2] << 1) >> 1] | 0) << 1) >> 1];
   }
   if ((HEAP32[$13 >> 2] | 0) >>> 0 > (HEAP32[$17 >> 2] | 0) >>> 0) if ((HEAP32[$22 >> 2] & HEAP32[$26 >> 2] | 0) != (HEAP32[$25 >> 2] | 0)) {
    if (!(HEAP32[$19 >> 2] | 0)) HEAP32[$19 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + (HEAP32[$15 >> 2] << 2);
    HEAP32[$18 >> 2] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$19 >> 2] | 0);
    HEAP32[$20 >> 2] = 1 << HEAP32[$18 >> 2];
    while (1) {
     if (((HEAP32[$18 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0) >>> 0 >= (HEAP32[$16 >> 2] | 0) >>> 0) break;
     HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) - (HEAPU16[$32 + ((HEAP32[$18 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) << 1) >> 1] | 0);
     if ((HEAP32[$20 >> 2] | 0) <= 0) break;
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
     HEAP32[$20 >> 2] = HEAP32[$20 >> 2] << 1;
    }
    HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) + (1 << HEAP32[$18 >> 2]);
    if ((HEAP32[$7 >> 2] | 0) == 1 & (HEAP32[$21 >> 2] | 0) >>> 0 > 852) {
     label = 71;
     break;
    }
    if ((HEAP32[$7 >> 2] | 0) == 2 & (HEAP32[$21 >> 2] | 0) >>> 0 > 592) {
     label = 71;
     break;
    }
    HEAP32[$25 >> 2] = HEAP32[$22 >> 2] & HEAP32[$26 >> 2];
    HEAP8[(HEAP32[HEAP32[$10 >> 2] >> 2] | 0) + (HEAP32[$25 >> 2] << 2) >> 0] = HEAP32[$18 >> 2];
    HEAP8[(HEAP32[HEAP32[$10 >> 2] >> 2] | 0) + (HEAP32[$25 >> 2] << 2) + 1 >> 0] = HEAP32[$17 >> 2];
    HEAP16[(HEAP32[HEAP32[$10 >> 2] >> 2] | 0) + (HEAP32[$25 >> 2] << 2) + 2 >> 1] = ((HEAP32[$28 >> 2] | 0) - (HEAP32[HEAP32[$10 >> 2] >> 2] | 0) | 0) / 4 | 0;
   }
  }
  if ((label | 0) == 71) {
   HEAP32[$6 >> 2] = 1;
   $372 = HEAP32[$6 >> 2] | 0;
   STACKTOP = sp;
   return $372 | 0;
  }
  if (HEAP32[$22 >> 2] | 0) {
   HEAP8[$27 >> 0] = 64;
   HEAP8[$27 + 1 >> 0] = (HEAP32[$13 >> 2] | 0) - (HEAP32[$19 >> 2] | 0);
   HEAP16[$27 + 2 >> 1] = 0;
   $365 = (HEAP32[$28 >> 2] | 0) + (HEAP32[$22 >> 2] << 2) | 0;
   HEAP16[$365 >> 1] = HEAP16[$27 >> 1] | 0;
   HEAP16[$365 + 2 >> 1] = HEAP16[$27 + 2 >> 1] | 0;
  }
  $367 = HEAP32[$10 >> 2] | 0;
  HEAP32[$367 >> 2] = (HEAP32[$367 >> 2] | 0) + (HEAP32[$21 >> 2] << 2);
  HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$17 >> 2];
  HEAP32[$6 >> 2] = 0;
  $372 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $372 | 0;
 }
 HEAP32[$6 >> 2] = 1;
 $372 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $372 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $105 = 0, $11 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $133 = 0, $137 = 0, $14 = 0, $15 = 0, $153 = 0, $156 = 0, $16 = 0, $160 = 0, $17 = 0, $178 = 0, $18 = 0, $180 = 0, $181 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $211 = 0, $214 = 0, $22 = 0, $223 = 0, $23 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $252 = 0, $26 = 0, $27 = 0, $270 = 0, $272 = 0, $275 = 0, $277 = 0, $278 = 0, $28 = 0, $286 = 0, $287 = 0, $29 = 0, $295 = 0, $297 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $2 = sp + 340 | 0;
 $3 = sp + 336 | 0;
 $4 = sp + 332 | 0;
 $5 = sp + 328 | 0;
 $6 = sp + 324 | 0;
 $7 = sp + 320 | 0;
 $8 = sp + 316 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 308 | 0;
 $11 = sp + 304 | 0;
 $12 = sp + 300 | 0;
 $13 = sp + 296 | 0;
 $14 = sp + 292 | 0;
 $15 = sp + 288 | 0;
 $16 = sp + 284 | 0;
 $17 = sp + 280 | 0;
 $18 = sp + 276 | 0;
 $19 = sp + 272 | 0;
 $20 = sp + 268 | 0;
 $21 = sp + 264 | 0;
 $22 = sp + 260 | 0;
 $23 = sp + 256 | 0;
 $24 = sp + 252 | 0;
 $25 = sp + 248 | 0;
 $26 = sp + 244 | 0;
 $27 = sp + 240 | 0;
 $28 = sp + 236 | 0;
 $29 = sp + 232 | 0;
 $30 = sp + 228 | 0;
 $31 = sp + 224 | 0;
 $32 = sp + 220 | 0;
 $33 = sp + 216 | 0;
 $34 = sp + 212 | 0;
 $35 = sp + 208 | 0;
 $36 = sp + 204 | 0;
 $37 = sp + 200 | 0;
 $38 = sp + 196 | 0;
 $39 = sp + 192 | 0;
 $40 = sp + 188 | 0;
 $41 = sp + 184 | 0;
 $42 = sp + 180 | 0;
 $43 = sp + 176 | 0;
 $44 = sp + 172 | 0;
 $45 = sp + 168 | 0;
 $46 = sp + 164 | 0;
 $47 = sp + 160 | 0;
 $48 = sp + 156 | 0;
 $49 = sp;
 $50 = sp + 152 | 0;
 $51 = sp + 148 | 0;
 $52 = sp + 345 | 0;
 $53 = sp + 144 | 0;
 $54 = sp + 140 | 0;
 $55 = sp + 136 | 0;
 $56 = sp + 132 | 0;
 $57 = sp + 128 | 0;
 $58 = sp + 124 | 0;
 $59 = sp + 120 | 0;
 $60 = sp + 116 | 0;
 $61 = sp + 112 | 0;
 $62 = sp + 108 | 0;
 $63 = sp + 104 | 0;
 $64 = sp + 100 | 0;
 $65 = sp + 96 | 0;
 $66 = sp + 92 | 0;
 $67 = sp + 88 | 0;
 $68 = sp + 84 | 0;
 $69 = sp + 80 | 0;
 $70 = sp + 76 | 0;
 $71 = sp + 72 | 0;
 $72 = sp + 68 | 0;
 $73 = sp + 64 | 0;
 $74 = sp + 60 | 0;
 $75 = sp + 56 | 0;
 $76 = sp + 344 | 0;
 $77 = sp + 52 | 0;
 $78 = sp + 48 | 0;
 $79 = sp + 44 | 0;
 $80 = sp + 40 | 0;
 $81 = sp + 36 | 0;
 $82 = sp + 32 | 0;
 $83 = sp + 28 | 0;
 $84 = sp + 24 | 0;
 $85 = sp + 20 | 0;
 $86 = sp + 16 | 0;
 $87 = sp + 12 | 0;
 $88 = sp + 8 | 0;
 $89 = sp + 4 | 0;
 HEAP32[$80 >> 2] = $0;
 HEAP32[$81 >> 2] = $1;
 $90 = HEAP32[$80 >> 2] | 0;
 $91 = HEAP32[$81 >> 2] | 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($91, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
  HEAP32[$79 >> 2] = __ZNSt3__211char_traitsIcE7not_eofEi(HEAP32[$81 >> 2] | 0) | 0;
  $308 = HEAP32[$79 >> 2] | 0;
  STACKTOP = sp;
  return $308 | 0;
 }
 HEAP32[$78 >> 2] = $90;
 $96 = HEAP32[(HEAP32[$78 >> 2] | 0) + 12 >> 2] | 0;
 HEAP32[$77 >> 2] = $90;
 HEAP32[$82 >> 2] = $96 - (HEAP32[(HEAP32[$77 >> 2] | 0) + 8 >> 2] | 0);
 HEAP32[$73 >> 2] = $90;
 $105 = HEAP32[(HEAP32[$73 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[$72 >> 2] = $90;
 do if (($105 | 0) == (HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] | 0)) {
  if (!(HEAP32[$90 + 48 >> 2] & 16)) {
   HEAP32[$79 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   $308 = HEAP32[$79 >> 2] | 0;
   STACKTOP = sp;
   return $308 | 0;
  }
  HEAP32[$71 >> 2] = $90;
  $117 = HEAP32[(HEAP32[$71 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$42 >> 2] = $90;
  HEAP32[$83 >> 2] = $117 - (HEAP32[(HEAP32[$42 >> 2] | 0) + 20 >> 2] | 0);
  $125 = HEAP32[$90 + 44 >> 2] | 0;
  HEAP32[$9 >> 2] = $90;
  HEAP32[$86 >> 2] = $125 - (HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] | 0);
  __THREW__ = 0;
  invoke_vii(47, $90 + 32 | 0, 0);
  $133 = __THREW__;
  __THREW__ = 0;
  if (!($133 & 1)) {
   HEAP32[$8 >> 2] = $90 + 32;
   $137 = HEAP32[$8 >> 2] | 0;
   HEAP32[$7 >> 2] = $137;
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   if ((HEAPU8[(HEAP32[$5 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
    HEAP32[$4 >> 2] = $137;
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
    $153 = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] & 2147483647;
   } else $153 = 11;
   HEAP32[$10 >> 2] = $90 + 32;
   HEAP32[$11 >> 2] = $153 - 1;
   __THREW__ = 0;
   invoke_viii(13, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, 0);
   $156 = __THREW__;
   __THREW__ = 0;
   if (!($156 & 1)) {
    HEAP32[$25 >> 2] = $90 + 32;
    HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
    $160 = HEAP32[$24 >> 2] | 0;
    HEAP32[$23 >> 2] = $160;
    HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
    if ((HEAPU8[(HEAP32[$21 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
     HEAP32[$15 >> 2] = $160;
     HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
     HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
     $178 = HEAP32[HEAP32[$13 >> 2] >> 2] | 0;
    } else {
     HEAP32[$20 >> 2] = $160;
     HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
     HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
     HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
     $178 = HEAP32[$16 >> 2] | 0;
    }
    HEAP32[$12 >> 2] = $178;
    HEAP32[$87 >> 2] = HEAP32[$12 >> 2];
    $180 = HEAP32[$87 >> 2] | 0;
    $181 = HEAP32[$87 >> 2] | 0;
    HEAP32[$35 >> 2] = $90 + 32;
    $183 = HEAP32[$35 >> 2] | 0;
    HEAP32[$34 >> 2] = $183;
    HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
    HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
    if ((HEAPU8[(HEAP32[$32 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
     HEAP32[$28 >> 2] = $183;
     HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
     HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
     $204 = HEAP32[(HEAP32[$26 >> 2] | 0) + 4 >> 2] | 0;
    } else {
     HEAP32[$31 >> 2] = $183;
     HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
     HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
     $204 = HEAPU8[(HEAP32[$29 >> 2] | 0) + 11 >> 0] | 0;
    }
    HEAP32[$36 >> 2] = $90;
    HEAP32[$37 >> 2] = $180;
    HEAP32[$38 >> 2] = $181 + $204;
    $205 = HEAP32[$36 >> 2] | 0;
    $206 = HEAP32[$37 >> 2] | 0;
    HEAP32[$205 + 24 >> 2] = $206;
    HEAP32[$205 + 20 >> 2] = $206;
    HEAP32[$205 + 28 >> 2] = HEAP32[$38 >> 2];
    $211 = HEAP32[$83 >> 2] | 0;
    HEAP32[$39 >> 2] = $90;
    HEAP32[$40 >> 2] = $211;
    $214 = (HEAP32[$39 >> 2] | 0) + 24 | 0;
    HEAP32[$214 >> 2] = (HEAP32[$214 >> 2] | 0) + (HEAP32[$40 >> 2] | 0);
    HEAP32[$41 >> 2] = $90;
    HEAP32[$90 + 44 >> 2] = (HEAP32[(HEAP32[$41 >> 2] | 0) + 20 >> 2] | 0) + (HEAP32[$86 >> 2] | 0);
    break;
   }
  }
  $223 = ___cxa_find_matching_catch_3(0) | 0;
  HEAP32[$84 >> 2] = $223;
  HEAP32[$85 >> 2] = tempRet0;
  ___cxa_begin_catch(HEAP32[$84 >> 2] | 0) | 0;
  HEAP32[$79 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  ___cxa_end_catch();
  $308 = HEAP32[$79 >> 2] | 0;
  STACKTOP = sp;
  return $308 | 0;
 } while (0);
 HEAP32[$43 >> 2] = $90;
 HEAP32[$88 >> 2] = (HEAP32[(HEAP32[$43 >> 2] | 0) + 24 >> 2] | 0) + 1;
 HEAP32[$50 >> 2] = $88;
 HEAP32[$51 >> 2] = $90 + 44;
 $232 = HEAP32[$50 >> 2] | 0;
 $233 = HEAP32[$51 >> 2] | 0;
 HEAP8[$49 >> 0] = HEAP8[$52 >> 0] | 0;
 HEAP32[$47 >> 2] = $232;
 HEAP32[$48 >> 2] = $233;
 $234 = HEAP32[$47 >> 2] | 0;
 $235 = HEAP32[$48 >> 2] | 0;
 HEAP32[$44 >> 2] = $49;
 HEAP32[$45 >> 2] = $234;
 HEAP32[$46 >> 2] = $235;
 HEAP32[$90 + 44 >> 2] = HEAP32[((HEAP32[HEAP32[$45 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$46 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$48 >> 2] | 0 : HEAP32[$47 >> 2] | 0) >> 2];
 if (HEAP32[$90 + 48 >> 2] & 8 | 0) {
  HEAP32[$66 >> 2] = $90 + 32;
  HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
  $252 = HEAP32[$65 >> 2] | 0;
  HEAP32[$64 >> 2] = $252;
  HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
  HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
  if ((HEAPU8[(HEAP32[$62 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$56 >> 2] = $252;
   HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
   HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
   $270 = HEAP32[HEAP32[$54 >> 2] >> 2] | 0;
  } else {
   HEAP32[$61 >> 2] = $252;
   HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
   HEAP32[$59 >> 2] = HEAP32[$60 >> 2];
   HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
   HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
   $270 = HEAP32[$57 >> 2] | 0;
  }
  HEAP32[$53 >> 2] = $270;
  HEAP32[$89 >> 2] = HEAP32[$53 >> 2];
  $272 = HEAP32[$89 >> 2] | 0;
  $275 = (HEAP32[$89 >> 2] | 0) + (HEAP32[$82 >> 2] | 0) | 0;
  $277 = HEAP32[$90 + 44 >> 2] | 0;
  HEAP32[$67 >> 2] = $90;
  HEAP32[$68 >> 2] = $272;
  HEAP32[$69 >> 2] = $275;
  HEAP32[$70 >> 2] = $277;
  $278 = HEAP32[$67 >> 2] | 0;
  HEAP32[$278 + 8 >> 2] = HEAP32[$68 >> 2];
  HEAP32[$278 + 12 >> 2] = HEAP32[$69 >> 2];
  HEAP32[$278 + 16 >> 2] = HEAP32[$70 >> 2];
 }
 $286 = HEAP32[$81 >> 2] & 255;
 HEAP32[$75 >> 2] = $90;
 HEAP8[$76 >> 0] = $286;
 $287 = HEAP32[$75 >> 2] | 0;
 if ((HEAP32[$287 + 24 >> 2] | 0) == (HEAP32[$287 + 28 >> 2] | 0)) {
  $295 = HEAP32[(HEAP32[$287 >> 2] | 0) + 52 >> 2] | 0;
  $297 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$76 >> 0] | 0) | 0;
  HEAP32[$74 >> 2] = FUNCTION_TABLE_iii[$295 & 63]($287, $297) | 0;
 } else {
  $299 = HEAP8[$76 >> 0] | 0;
  $300 = $287 + 24 | 0;
  $301 = HEAP32[$300 >> 2] | 0;
  HEAP32[$300 >> 2] = $301 + 1;
  HEAP8[$301 >> 0] = $299;
  HEAP32[$74 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$76 >> 0] | 0) | 0;
 }
 HEAP32[$79 >> 2] = HEAP32[$74 >> 2];
 $308 = HEAP32[$79 >> 2] | 0;
 STACKTOP = sp;
 return $308 | 0;
}

function _lzma_index_hash_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $107 = 0, $11 = 0, $115 = 0, $12 = 0, $120 = 0, $130 = 0, $138 = 0, $150 = 0, $155 = 0, $158 = 0, $163 = 0, $172 = 0, $177 = 0, $181 = 0, $186 = 0, $195 = 0, $200 = 0, $204 = 0, $209 = 0, $216 = 0, $217 = 0, $223 = 0, $224 = 0, $225 = 0, $237 = 0, $246 = 0, $25 = 0, $254 = 0, $26 = 0, $264 = 0, $265 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $277 = 0, $285 = 0, $297 = 0, $306 = 0, $318 = 0, $327 = 0, $344 = 0, $347 = 0, $361 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $387 = 0, $389 = 0, $4 = 0, $401 = 0, $405 = 0, $46 = 0, $5 = 0, $55 = 0, $6 = 0, $68 = 0, $7 = 0, $8 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) {
  HEAP32[$4 >> 2] = 10;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 }
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 HEAP32[$10 >> 2] = 0;
 L5 : while (1) {
  if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) {
   label = 46;
   break;
  }
  L8 : do switch (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) {
  case 6:
   {
    break L5;
    break;
   }
  case 0:
   {
    $25 = HEAP32[$6 >> 2] | 0;
    $26 = HEAP32[$7 >> 2] | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    HEAP32[$26 >> 2] = $27 + 1;
    if (HEAPU8[$25 + $27 >> 0] | 0 | 0) {
     label = 7;
     break L5;
    }
    HEAP32[HEAP32[$5 >> 2] >> 2] = 1;
    break;
   }
  case 1:
   {
    HEAP32[$10 >> 2] = _lzma_vli_decode((HEAP32[$5 >> 2] | 0) + 280 | 0, (HEAP32[$5 >> 2] | 0) + 304 | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
    if ((HEAP32[$10 >> 2] | 0) != 1) {
     label = 46;
     break L5;
    }
    $46 = (HEAP32[$5 >> 2] | 0) + 280 | 0;
    $55 = (HEAP32[$5 >> 2] | 0) + 8 + 16 | 0;
    if ((HEAP32[$46 >> 2] | 0) != (HEAP32[$55 >> 2] | 0) ? 1 : (HEAP32[$46 + 4 >> 2] | 0) != (HEAP32[$55 + 4 >> 2] | 0)) {
     label = 11;
     break L5;
    }
    HEAP32[$10 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 304 >> 2] = 0;
    $68 = (HEAP32[$5 >> 2] | 0) + 280 | 0;
    HEAP32[HEAP32[$5 >> 2] >> 2] = (HEAP32[$68 >> 2] | 0) == 0 & (HEAP32[$68 + 4 >> 2] | 0) == 0 ? 4 : 2;
    break;
   }
  case 3:
  case 2:
   {
    $82 = HEAP32[$5 >> 2] | 0;
    HEAP32[$11 >> 2] = (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == 2 ? $82 + 288 | 0 : $82 + 296 | 0;
    HEAP32[$10 >> 2] = _lzma_vli_decode(HEAP32[$11 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + 304 | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
    if ((HEAP32[$10 >> 2] | 0) != 1) {
     label = 46;
     break L5;
    }
    HEAP32[$10 >> 2] = 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 304 >> 2] = 0;
    $100 = HEAP32[$5 >> 2] | 0;
    if ((HEAP32[HEAP32[$5 >> 2] >> 2] | 0) == 2) {
     $102 = $100 + 288 | 0;
     $107 = HEAP32[$102 + 4 >> 2] | 0;
     if ($107 >>> 0 < 0 | ($107 | 0) == 0 & (HEAP32[$102 >> 2] | 0) >>> 0 < 5) {
      label = 17;
      break L5;
     }
     $115 = (HEAP32[$5 >> 2] | 0) + 288 | 0;
     $120 = HEAP32[$115 + 4 >> 2] | 0;
     if ($120 >>> 0 > 2147483647 | ($120 | 0) == 2147483647 & (HEAP32[$115 >> 2] | 0) >>> 0 > 4294967292) {
      label = 17;
      break L5;
     }
     HEAP32[HEAP32[$5 >> 2] >> 2] = 3;
     break L8;
    }
    $130 = (HEAP32[$5 >> 2] | 0) + 288 | 0;
    $138 = (HEAP32[$5 >> 2] | 0) + 296 | 0;
    HEAP32[$12 >> 2] = _hash_append($100 + 144 | 0, HEAP32[$130 >> 2] | 0, HEAP32[$130 + 4 >> 2] | 0, HEAP32[$138 >> 2] | 0, HEAP32[$138 + 4 >> 2] | 0) | 0;
    if (HEAP32[$12 >> 2] | 0) {
     label = 20;
     break L5;
    }
    $150 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
    $155 = HEAP32[$150 + 4 >> 2] | 0;
    $158 = (HEAP32[$5 >> 2] | 0) + 144 | 0;
    $163 = HEAP32[$158 + 4 >> 2] | 0;
    if ($155 >>> 0 < $163 >>> 0 | (($155 | 0) == ($163 | 0) ? (HEAP32[$150 >> 2] | 0) >>> 0 < (HEAP32[$158 >> 2] | 0) >>> 0 : 0)) {
     label = 24;
     break L5;
    }
    $172 = (HEAP32[$5 >> 2] | 0) + 8 + 8 | 0;
    $177 = HEAP32[$172 + 4 >> 2] | 0;
    $181 = (HEAP32[$5 >> 2] | 0) + 144 + 8 | 0;
    $186 = HEAP32[$181 + 4 >> 2] | 0;
    if ($177 >>> 0 < $186 >>> 0 | (($177 | 0) == ($186 | 0) ? (HEAP32[$172 >> 2] | 0) >>> 0 < (HEAP32[$181 >> 2] | 0) >>> 0 : 0)) {
     label = 24;
     break L5;
    }
    $195 = (HEAP32[$5 >> 2] | 0) + 8 + 24 | 0;
    $200 = HEAP32[$195 + 4 >> 2] | 0;
    $204 = (HEAP32[$5 >> 2] | 0) + 144 + 24 | 0;
    $209 = HEAP32[$204 + 4 >> 2] | 0;
    if ($200 >>> 0 < $209 >>> 0 | (($200 | 0) == ($209 | 0) ? (HEAP32[$195 >> 2] | 0) >>> 0 < (HEAP32[$204 >> 2] | 0) >>> 0 : 0)) {
     label = 24;
     break L5;
    }
    $216 = (HEAP32[$5 >> 2] | 0) + 280 | 0;
    $217 = $216;
    $223 = _i64Add(HEAP32[$217 >> 2] | 0, HEAP32[$217 + 4 >> 2] | 0, -1, -1) | 0;
    $224 = tempRet0;
    $225 = $216;
    HEAP32[$225 >> 2] = $223;
    HEAP32[$225 + 4 >> 2] = $224;
    HEAP32[HEAP32[$5 >> 2] >> 2] = ($223 | 0) == 0 & ($224 | 0) == 0 ? 4 : 2;
    break;
   }
  case 4:
   {
    $237 = (HEAP32[$5 >> 2] | 0) + 144 + 16 | 0;
    $246 = (HEAP32[$5 >> 2] | 0) + 144 + 24 | 0;
    $254 = _i64Subtract(4, 0, _index_size_unpadded_665(HEAP32[$237 >> 2] | 0, HEAP32[$237 + 4 >> 2] | 0, HEAP32[$246 >> 2] | 0, HEAP32[$246 + 4 >> 2] | 0) | 0, tempRet0 | 0) | 0;
    HEAP32[(HEAP32[$5 >> 2] | 0) + 304 >> 2] = $254 & 3;
    HEAP32[HEAP32[$5 >> 2] >> 2] = 5;
    label = 27;
    break;
   }
  case 5:
   {
    label = 27;
    break;
   }
  default:
   {
    label = 44;
    break L5;
   }
  } while (0);
  if ((label | 0) == 27) {
   label = 0;
   $264 = HEAP32[$5 >> 2] | 0;
   if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 304 >> 2] | 0) >>> 0 <= 0) {
    label = 30;
    break;
   }
   $265 = $264 + 304 | 0;
   HEAP32[$265 >> 2] = (HEAP32[$265 >> 2] | 0) + -1;
   $268 = HEAP32[$6 >> 2] | 0;
   $269 = HEAP32[$7 >> 2] | 0;
   $270 = HEAP32[$269 >> 2] | 0;
   HEAP32[$269 >> 2] = $270 + 1;
   if (HEAPU8[$268 + $270 >> 0] | 0 | 0) {
    label = 29;
    break;
   }
  }
 }
 do if ((label | 0) == 7) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 17) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 20) {
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2];
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 24) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 29) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 30) {
  $277 = $264 + 8 | 0;
  $285 = (HEAP32[$5 >> 2] | 0) + 144 | 0;
  if (!((HEAP32[$277 >> 2] | 0) != (HEAP32[$285 >> 2] | 0) ? 1 : (HEAP32[$277 + 4 >> 2] | 0) != (HEAP32[$285 + 4 >> 2] | 0))) {
   $297 = (HEAP32[$5 >> 2] | 0) + 8 + 8 | 0;
   $306 = (HEAP32[$5 >> 2] | 0) + 144 + 8 | 0;
   if (!((HEAP32[$297 >> 2] | 0) != (HEAP32[$306 >> 2] | 0) ? 1 : (HEAP32[$297 + 4 >> 2] | 0) != (HEAP32[$306 + 4 >> 2] | 0))) {
    $318 = (HEAP32[$5 >> 2] | 0) + 8 + 24 | 0;
    $327 = (HEAP32[$5 >> 2] | 0) + 144 + 24 | 0;
    if (!((HEAP32[$318 >> 2] | 0) != (HEAP32[$327 >> 2] | 0) ? 1 : (HEAP32[$318 + 4 >> 2] | 0) != (HEAP32[$327 + 4 >> 2] | 0))) {
     _lzma_check_finish((HEAP32[$5 >> 2] | 0) + 8 + 32 | 0, 10);
     _lzma_check_finish((HEAP32[$5 >> 2] | 0) + 144 + 32 | 0, 10);
     $344 = (HEAP32[$5 >> 2] | 0) + 8 + 32 | 0;
     $347 = (HEAP32[$5 >> 2] | 0) + 144 + 32 | 0;
     if (!(_memcmp($344, $347, _lzma_check_size(10) | 0) | 0)) {
      $361 = _lzma_crc32((HEAP32[$6 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0, (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 308 >> 2] | 0) | 0;
      HEAP32[(HEAP32[$5 >> 2] | 0) + 308 >> 2] = $361;
      HEAP32[HEAP32[$5 >> 2] >> 2] = 6;
      break;
     }
     HEAP32[$4 >> 2] = 9;
     $405 = HEAP32[$4 >> 2] | 0;
     STACKTOP = sp;
     return $405 | 0;
    }
   }
  }
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 44) {
  HEAP32[$4 >> 2] = 11;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 46) {
  $401 = _lzma_crc32((HEAP32[$6 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0, (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) - (HEAP32[$9 >> 2] | 0) | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 308 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 308 >> 2] = $401;
  HEAP32[$4 >> 2] = HEAP32[$10 >> 2];
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } while (0);
 while (1) {
  if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
   label = 39;
   break;
  }
  $377 = (HEAP32[(HEAP32[$5 >> 2] | 0) + 308 >> 2] | 0) >>> (HEAP32[(HEAP32[$5 >> 2] | 0) + 304 >> 2] << 3) & 255;
  $378 = HEAP32[$6 >> 2] | 0;
  $379 = HEAP32[$7 >> 2] | 0;
  $380 = HEAP32[$379 >> 2] | 0;
  HEAP32[$379 >> 2] = $380 + 1;
  if (($377 | 0) != (HEAPU8[$378 + $380 >> 0] | 0 | 0)) {
   label = 41;
   break;
  }
  $387 = (HEAP32[$5 >> 2] | 0) + 304 | 0;
  $389 = (HEAP32[$387 >> 2] | 0) + 1 | 0;
  HEAP32[$387 >> 2] = $389;
  if ($389 >>> 0 >= 4) {
   label = 43;
   break;
  }
 }
 if ((label | 0) == 39) {
  HEAP32[$4 >> 2] = 0;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 41) {
  HEAP32[$4 >> 2] = 9;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 } else if ((label | 0) == 43) {
  HEAP32[$4 >> 2] = 1;
  $405 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $405 | 0;
 }
 return 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $100 = 0, $104 = 0, $106 = 0, $11 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $123 = 0, $13 = 0, $14 = 0, $141 = 0, $146 = 0, $148 = 0, $15 = 0, $157 = 0, $16 = 0, $163 = 0, $166 = 0, $17 = 0, $172 = 0, $178 = 0, $18 = 0, $181 = 0, $185 = 0, $188 = 0, $19 = 0, $192 = 0, $196 = 0, $198 = 0, $20 = 0, $203 = 0, $204 = 0, $208 = 0, $21 = 0, $214 = 0, $22 = 0, $220 = 0, $222 = 0, $23 = 0, $233 = 0, $235 = 0, $236 = 0, $24 = 0, $241 = 0, $247 = 0, $25 = 0, $251 = 0, $253 = 0, $258 = 0, $259 = 0, $26 = 0, $263 = 0, $27 = 0, $279 = 0, $28 = 0, $283 = 0, $285 = 0, $29 = 0, $290 = 0, $291 = 0, $30 = 0, $302 = 0, $306 = 0, $308 = 0, $31 = 0, $313 = 0, $314 = 0, $32 = 0, $323 = 0, $33 = 0, $333 = 0, $335 = 0, $336 = 0, $34 = 0, $348 = 0, $35 = 0, $351 = 0, $352 = 0, $353 = 0, $36 = 0, $360 = 0, $366 = 0, $369 = 0, $37 = 0, $371 = 0, $374 = 0, $375 = 0, $379 = 0, $38 = 0, $381 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $65 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $85 = 0, $9 = 0, $90 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $6 = sp + 252 | 0;
 $7 = sp + 248 | 0;
 $8 = sp + 64 | 0;
 $9 = sp + 244 | 0;
 $10 = sp + 56 | 0;
 $11 = sp + 240 | 0;
 $12 = sp + 236 | 0;
 $13 = sp + 232 | 0;
 $14 = sp + 228 | 0;
 $15 = sp + 224 | 0;
 $16 = sp + 220 | 0;
 $17 = sp + 216 | 0;
 $18 = sp + 212 | 0;
 $19 = sp + 208 | 0;
 $20 = sp + 204 | 0;
 $21 = sp + 200 | 0;
 $22 = sp + 196 | 0;
 $23 = sp + 192 | 0;
 $24 = sp + 188 | 0;
 $25 = sp + 184 | 0;
 $26 = sp + 180 | 0;
 $27 = sp + 176 | 0;
 $28 = sp + 172 | 0;
 $29 = sp + 168 | 0;
 $30 = sp + 48 | 0;
 $31 = sp + 164 | 0;
 $32 = sp + 40 | 0;
 $33 = sp + 160 | 0;
 $34 = sp + 156 | 0;
 $35 = sp + 32 | 0;
 $36 = sp + 152 | 0;
 $37 = sp + 148 | 0;
 $38 = sp + 24 | 0;
 $39 = sp + 144 | 0;
 $40 = sp + 140 | 0;
 $41 = sp + 136 | 0;
 $42 = sp + 132 | 0;
 $43 = sp + 128 | 0;
 $44 = sp + 124 | 0;
 $45 = sp + 120 | 0;
 $46 = sp + 116 | 0;
 $47 = sp + 112 | 0;
 $48 = sp + 108 | 0;
 $49 = sp + 104 | 0;
 $50 = sp + 100 | 0;
 $51 = sp + 96 | 0;
 $52 = sp + 92 | 0;
 $53 = sp + 16 | 0;
 $54 = sp + 88 | 0;
 $55 = sp + 84 | 0;
 $56 = sp + 8 | 0;
 $57 = sp + 80 | 0;
 $58 = sp + 76 | 0;
 $59 = sp + 72 | 0;
 $60 = sp;
 HEAP32[$55 >> 2] = $1;
 $61 = $56;
 HEAP32[$61 >> 2] = $2;
 HEAP32[$61 + 4 >> 2] = $3;
 HEAP32[$57 >> 2] = $4;
 HEAP32[$58 >> 2] = $5;
 $65 = HEAP32[$55 >> 2] | 0;
 $67 = HEAP32[$65 + 44 >> 2] | 0;
 HEAP32[$54 >> 2] = $65;
 if ($67 >>> 0 < (HEAP32[(HEAP32[$54 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
  HEAP32[$6 >> 2] = $65;
  HEAP32[$65 + 44 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2];
 }
 if (!(HEAP32[$58 >> 2] & 24)) {
  HEAP32[$7 >> 2] = $0;
  $79 = $8;
  HEAP32[$79 >> 2] = -1;
  HEAP32[$79 + 4 >> 2] = -1;
  $83 = HEAP32[$7 >> 2] | 0;
  HEAP32[$83 >> 2] = 0;
  HEAP32[$83 + 4 >> 2] = 0;
  $85 = $8;
  $90 = HEAP32[$85 + 4 >> 2] | 0;
  $91 = $83 + 8 | 0;
  HEAP32[$91 >> 2] = HEAP32[$85 >> 2];
  HEAP32[$91 + 4 >> 2] = $90;
  STACKTOP = sp;
  return;
 }
 if ((HEAP32[$57 >> 2] | 0) == 1 ? (HEAP32[$58 >> 2] & 24 | 0) == 24 : 0) {
  HEAP32[$9 >> 2] = $0;
  $100 = $10;
  HEAP32[$100 >> 2] = -1;
  HEAP32[$100 + 4 >> 2] = -1;
  $104 = HEAP32[$9 >> 2] | 0;
  HEAP32[$104 >> 2] = 0;
  HEAP32[$104 + 4 >> 2] = 0;
  $106 = $10;
  $111 = HEAP32[$106 + 4 >> 2] | 0;
  $112 = $104 + 8 | 0;
  HEAP32[$112 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$112 + 4 >> 2] = $111;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[$65 + 44 >> 2] | 0)) $146 = 0; else {
  $120 = HEAP32[$65 + 44 >> 2] | 0;
  HEAP32[$24 >> 2] = $65 + 32;
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  $123 = HEAP32[$23 >> 2] | 0;
  HEAP32[$22 >> 2] = $123;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  if ((HEAPU8[(HEAP32[$20 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
   HEAP32[$14 >> 2] = $123;
   HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
   $141 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
  } else {
   HEAP32[$19 >> 2] = $123;
   HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
   HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
   HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
   $141 = HEAP32[$15 >> 2] | 0;
  }
  HEAP32[$11 >> 2] = $141;
  $146 = $120 - (HEAP32[$11 >> 2] | 0) | 0;
 }
 HEAP32[$59 >> 2] = $146;
 L19 : do switch (HEAP32[$57 >> 2] | 0) {
 case 0:
  {
   $148 = $60;
   HEAP32[$148 >> 2] = 0;
   HEAP32[$148 + 4 >> 2] = 0;
   break;
  }
 case 1:
  {
   if (HEAP32[$58 >> 2] & 8 | 0) {
    HEAP32[$25 >> 2] = $65;
    $157 = HEAP32[(HEAP32[$25 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[$26 >> 2] = $65;
    $163 = $157 - (HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0) | 0;
    $166 = $60;
    HEAP32[$166 >> 2] = $163;
    HEAP32[$166 + 4 >> 2] = (($163 | 0) < 0) << 31 >> 31;
    break L19;
   } else {
    HEAP32[$27 >> 2] = $65;
    $172 = HEAP32[(HEAP32[$27 >> 2] | 0) + 24 >> 2] | 0;
    HEAP32[$28 >> 2] = $65;
    $178 = $172 - (HEAP32[(HEAP32[$28 >> 2] | 0) + 20 >> 2] | 0) | 0;
    $181 = $60;
    HEAP32[$181 >> 2] = $178;
    HEAP32[$181 + 4 >> 2] = (($178 | 0) < 0) << 31 >> 31;
    break L19;
   }
   break;
  }
 case 2:
  {
   $185 = HEAP32[$59 >> 2] | 0;
   $188 = $60;
   HEAP32[$188 >> 2] = $185;
   HEAP32[$188 + 4 >> 2] = (($185 | 0) < 0) << 31 >> 31;
   break;
  }
 default:
  {
   HEAP32[$29 >> 2] = $0;
   $192 = $30;
   HEAP32[$192 >> 2] = -1;
   HEAP32[$192 + 4 >> 2] = -1;
   $196 = HEAP32[$29 >> 2] | 0;
   HEAP32[$196 >> 2] = 0;
   HEAP32[$196 + 4 >> 2] = 0;
   $198 = $30;
   $203 = HEAP32[$198 + 4 >> 2] | 0;
   $204 = $196 + 8 | 0;
   HEAP32[$204 >> 2] = HEAP32[$198 >> 2];
   HEAP32[$204 + 4 >> 2] = $203;
   STACKTOP = sp;
   return;
  }
 } while (0);
 $208 = $56;
 $214 = $60;
 $220 = _i64Add(HEAP32[$214 >> 2] | 0, HEAP32[$214 + 4 >> 2] | 0, HEAP32[$208 >> 2] | 0, HEAP32[$208 + 4 >> 2] | 0) | 0;
 $222 = $60;
 HEAP32[$222 >> 2] = $220;
 HEAP32[$222 + 4 >> 2] = tempRet0;
 if ((HEAP32[$60 + 4 >> 2] | 0) >= 0) {
  $233 = HEAP32[$59 >> 2] | 0;
  $235 = (($233 | 0) < 0) << 31 >> 31;
  $236 = $60;
  $241 = HEAP32[$236 + 4 >> 2] | 0;
  if (!(($235 | 0) < ($241 | 0) | (($235 | 0) == ($241 | 0) ? $233 >>> 0 < (HEAP32[$236 >> 2] | 0) >>> 0 : 0))) {
   $263 = $60;
   if ((HEAP32[$263 >> 2] | 0) != 0 | (HEAP32[$263 + 4 >> 2] | 0) != 0) {
    if (HEAP32[$58 >> 2] & 8 | 0) {
     HEAP32[$33 >> 2] = $65;
     if (!(HEAP32[(HEAP32[$33 >> 2] | 0) + 12 >> 2] | 0)) {
      HEAP32[$34 >> 2] = $0;
      $279 = $35;
      HEAP32[$279 >> 2] = -1;
      HEAP32[$279 + 4 >> 2] = -1;
      $283 = HEAP32[$34 >> 2] | 0;
      HEAP32[$283 >> 2] = 0;
      HEAP32[$283 + 4 >> 2] = 0;
      $285 = $35;
      $290 = HEAP32[$285 + 4 >> 2] | 0;
      $291 = $283 + 8 | 0;
      HEAP32[$291 >> 2] = HEAP32[$285 >> 2];
      HEAP32[$291 + 4 >> 2] = $290;
      STACKTOP = sp;
      return;
     }
    }
    if (HEAP32[$58 >> 2] & 16 | 0) {
     HEAP32[$36 >> 2] = $65;
     if (!(HEAP32[(HEAP32[$36 >> 2] | 0) + 24 >> 2] | 0)) {
      HEAP32[$37 >> 2] = $0;
      $302 = $38;
      HEAP32[$302 >> 2] = -1;
      HEAP32[$302 + 4 >> 2] = -1;
      $306 = HEAP32[$37 >> 2] | 0;
      HEAP32[$306 >> 2] = 0;
      HEAP32[$306 + 4 >> 2] = 0;
      $308 = $38;
      $313 = HEAP32[$308 + 4 >> 2] | 0;
      $314 = $306 + 8 | 0;
      HEAP32[$314 >> 2] = HEAP32[$308 >> 2];
      HEAP32[$314 + 4 >> 2] = $313;
      STACKTOP = sp;
      return;
     }
    }
   }
   if (HEAP32[$58 >> 2] & 8 | 0) {
    HEAP32[$39 >> 2] = $65;
    $323 = HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] | 0;
    HEAP32[$40 >> 2] = $65;
    $333 = (HEAP32[(HEAP32[$40 >> 2] | 0) + 8 >> 2] | 0) + (HEAP32[$60 >> 2] | 0) | 0;
    $335 = HEAP32[$65 + 44 >> 2] | 0;
    HEAP32[$41 >> 2] = $65;
    HEAP32[$42 >> 2] = $323;
    HEAP32[$43 >> 2] = $333;
    HEAP32[$44 >> 2] = $335;
    $336 = HEAP32[$41 >> 2] | 0;
    HEAP32[$336 + 8 >> 2] = HEAP32[$42 >> 2];
    HEAP32[$336 + 12 >> 2] = HEAP32[$43 >> 2];
    HEAP32[$336 + 16 >> 2] = HEAP32[$44 >> 2];
   }
   if (HEAP32[$58 >> 2] & 16 | 0) {
    HEAP32[$45 >> 2] = $65;
    $348 = HEAP32[(HEAP32[$45 >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[$46 >> 2] = $65;
    $351 = HEAP32[(HEAP32[$46 >> 2] | 0) + 28 >> 2] | 0;
    HEAP32[$47 >> 2] = $65;
    HEAP32[$48 >> 2] = $348;
    HEAP32[$49 >> 2] = $351;
    $352 = HEAP32[$47 >> 2] | 0;
    $353 = HEAP32[$48 >> 2] | 0;
    HEAP32[$352 + 24 >> 2] = $353;
    HEAP32[$352 + 20 >> 2] = $353;
    HEAP32[$352 + 28 >> 2] = HEAP32[$49 >> 2];
    $360 = HEAP32[$60 >> 2] | 0;
    HEAP32[$50 >> 2] = $65;
    HEAP32[$51 >> 2] = $360;
    $366 = (HEAP32[$50 >> 2] | 0) + 24 | 0;
    HEAP32[$366 >> 2] = (HEAP32[$366 >> 2] | 0) + (HEAP32[$51 >> 2] | 0);
   }
   $369 = $60;
   $371 = HEAP32[$369 >> 2] | 0;
   $374 = HEAP32[$369 + 4 >> 2] | 0;
   HEAP32[$52 >> 2] = $0;
   $375 = $53;
   HEAP32[$375 >> 2] = $371;
   HEAP32[$375 + 4 >> 2] = $374;
   $379 = HEAP32[$52 >> 2] | 0;
   HEAP32[$379 >> 2] = 0;
   HEAP32[$379 + 4 >> 2] = 0;
   $381 = $53;
   $386 = HEAP32[$381 + 4 >> 2] | 0;
   $387 = $379 + 8 | 0;
   HEAP32[$387 >> 2] = HEAP32[$381 >> 2];
   HEAP32[$387 + 4 >> 2] = $386;
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$31 >> 2] = $0;
 $247 = $32;
 HEAP32[$247 >> 2] = -1;
 HEAP32[$247 + 4 >> 2] = -1;
 $251 = HEAP32[$31 >> 2] | 0;
 HEAP32[$251 >> 2] = 0;
 HEAP32[$251 + 4 >> 2] = 0;
 $253 = $32;
 $258 = HEAP32[$253 + 4 >> 2] | 0;
 $259 = $251 + 8 | 0;
 HEAP32[$259 >> 2] = HEAP32[$253 >> 2];
 HEAP32[$259 + 4 >> 2] = $258;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i43 = 0, $$0$i$i$i47 = 0, $$0$i$i$i52 = 0, $$0$i$i$i57 = 0, $$0$i$i$i62 = 0, $$0$i$i$i67 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $11 = 0, $112 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $134 = 0, $137 = 0, $139 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $156 = 0, $16 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $73 = 0, $76 = 0, $78 = 0, $80 = 0, $88 = 0, $92 = 0, $97 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62616) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
  $16 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $16;
  HEAP8[$2 + 1 >> 0] = $16 >> 8;
  HEAP8[$2 + 2 >> 0] = $16 >> 16;
  HEAP8[$2 + 3 >> 0] = $16 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
  $21 = $8 + 8 + 3 | 0;
  if ((HEAP8[$21 >> 0] | 0) < 0) {
   $24 = HEAP32[$8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($24, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
   HEAP8[$21 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $8 | 0, 0);
  $26 = __THREW__;
  __THREW__ = 0;
  if ($26 & 1) {
   $28 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($28);
  };
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i = 0;
  while (1) {
   if (($$0$i$i$i | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
   $$0$i$i$i = $$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
  $36 = $7 + 8 + 3 | 0;
  if ((HEAP8[$36 >> 0] | 0) < 0) {
   $39 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($39, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$36 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $7 | 0, 0);
  $41 = __THREW__;
  __THREW__ = 0;
  if ($41 & 1) {
   $43 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($43);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i40 = 0;
  while (1) {
   if (($$0$i$i$i40 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i40 << 2) >> 2] = 0;
   $$0$i$i$i40 = $$0$i$i$i40 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $58 = $5 + 11 | 0;
  if ((HEAP8[$58 >> 0] | 0) < 0) {
   $61 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($61, $10);
   HEAP32[$5 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$58 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $5 | 0, 0);
  $63 = __THREW__;
  __THREW__ = 0;
  if ($63 & 1) {
   $65 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($65);
  };
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i43 = 0;
  while (1) {
   if (($$0$i$i$i43 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i43 << 2) >> 2] = 0;
   $$0$i$i$i43 = $$0$i$i$i43 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $73 = $6 + 8 + 3 | 0;
  if ((HEAP8[$73 >> 0] | 0) < 0) {
   $76 = HEAP32[$6 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($76, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10);
   HEAP8[$73 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $6 | 0, 0);
  $78 = __THREW__;
  __THREW__ = 0;
  if ($78 & 1) {
   $80 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($80);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i47 = 0;
  while (1) {
   if (($$0$i$i$i47 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i47 << 2) >> 2] = 0;
   $$0$i$i$i47 = $$0$i$i$i47 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $88 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62608) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 44 >> 2] & 127]($10, $88);
  $92 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $92;
  HEAP8[$2 + 1 >> 0] = $92 >> 8;
  HEAP8[$2 + 2 >> 0] = $92 >> 16;
  HEAP8[$2 + 3 >> 0] = $92 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 32 >> 2] & 127]($11, $88);
  $97 = $8 + 8 + 3 | 0;
  if ((HEAP8[$97 >> 0] | 0) < 0) {
   $100 = HEAP32[$8 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($100, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($8, $10);
   HEAP8[$97 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $8 | 0, 0);
  $102 = __THREW__;
  __THREW__ = 0;
  if ($102 & 1) {
   $104 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($104);
  };
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i52 = 0;
  while (1) {
   if (($$0$i$i$i52 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i52 << 2) >> 2] = 0;
   $$0$i$i$i52 = $$0$i$i$i52 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 28 >> 2] & 127]($11, $88);
  $112 = $7 + 8 + 3 | 0;
  if ((HEAP8[$112 >> 0] | 0) < 0) {
   $115 = HEAP32[$7 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($115, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($7, $10);
   HEAP8[$112 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $7 | 0, 0);
  $117 = __THREW__;
  __THREW__ = 0;
  if ($117 & 1) {
   $119 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($119);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i57 = 0;
  while (1) {
   if (($$0$i$i$i57 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i57 << 2) >> 2] = 0;
   $$0$i$i$i57 = $$0$i$i$i57 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  HEAP32[$3 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 12 >> 2] & 127]($88) | 0;
  HEAP32[$4 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 16 >> 2] & 127]($88) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 20 >> 2] & 127]($11, $88);
  $134 = $5 + 11 | 0;
  if ((HEAP8[$134 >> 0] | 0) < 0) {
   $137 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($137, $10);
   HEAP32[$5 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$134 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $5 | 0, 0);
  $139 = __THREW__;
  __THREW__ = 0;
  if ($139 & 1) {
   $141 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($141);
  };
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i62 = 0;
  while (1) {
   if (($$0$i$i$i62 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i62 << 2) >> 2] = 0;
   $$0$i$i$i62 = $$0$i$i$i62 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$88 >> 2] | 0) + 24 >> 2] & 127]($11, $88);
  $149 = $6 + 8 + 3 | 0;
  if ((HEAP8[$149 >> 0] | 0) < 0) {
   $152 = HEAP32[$6 >> 2] | 0;
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($152, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP32[$10 >> 2] = 0;
   __ZNSt3__211char_traitsIwE6assignERwRKw($6, $10);
   HEAP8[$149 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(90, $6 | 0, 0);
  $154 = __THREW__;
  __THREW__ = 0;
  if ($154 & 1) {
   $156 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($156);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i67 = 0;
  while (1) {
   if (($$0$i$i$i67 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i67 << 2) >> 2] = 0;
   $$0$i$i$i67 = $$0$i$i$i67 + 1 | 0;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$88 >> 2] | 0) + 36 >> 2] & 127]($88) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$i$i = 0, $$0$i$i$i40 = 0, $$0$i$i$i45 = 0, $$0$i$i$i50 = 0, $$0$i$i$i55 = 0, $$0$i$i$i60 = 0, $$0$i$i$i65 = 0, $$0$i$i$i70 = 0, $10 = 0, $100 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $12 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $143 = 0, $146 = 0, $148 = 0, $150 = 0, $16 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $34 = 0, $37 = 0, $39 = 0, $41 = 0, $56 = 0, $59 = 0, $61 = 0, $63 = 0, $70 = 0, $73 = 0, $75 = 0, $77 = 0, $85 = 0, $89 = 0, $93 = 0, $96 = 0, $98 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($0) {
  $12 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62600) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 44 >> 2] & 127]($10, $12);
  $16 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $16;
  HEAP8[$2 + 1 >> 0] = $16 >> 8;
  HEAP8[$2 + 2 >> 0] = $16 >> 16;
  HEAP8[$2 + 3 >> 0] = $16 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 127]($11, $12);
  $20 = $8 + 11 | 0;
  if ((HEAP8[$20 >> 0] | 0) < 0) {
   $23 = HEAP32[$8 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($23, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
   HEAP8[$20 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $8 | 0, 0);
  $25 = __THREW__;
  __THREW__ = 0;
  if ($25 & 1) {
   $27 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($27);
  };
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i = 0;
  while (1) {
   if (($$0$i$i$i | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i << 2) >> 2] = 0;
   $$0$i$i$i = $$0$i$i$i + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 127]($11, $12);
  $34 = $7 + 11 | 0;
  if ((HEAP8[$34 >> 0] | 0) < 0) {
   $37 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($37, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$34 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $7 | 0, 0);
  $39 = __THREW__;
  __THREW__ = 0;
  if ($39 & 1) {
   $41 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($41);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i40 = 0;
  while (1) {
   if (($$0$i$i$i40 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i40 << 2) >> 2] = 0;
   $$0$i$i$i40 = $$0$i$i$i40 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 127]($12) | 0;
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 127]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 127]($11, $12);
  $56 = $5 + 11 | 0;
  if ((HEAP8[$56 >> 0] | 0) < 0) {
   $59 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($59, $10);
   HEAP32[$5 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$56 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $5 | 0, 0);
  $61 = __THREW__;
  __THREW__ = 0;
  if ($61 & 1) {
   $63 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($63);
  };
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i45 = 0;
  while (1) {
   if (($$0$i$i$i45 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i45 << 2) >> 2] = 0;
   $$0$i$i$i45 = $$0$i$i$i45 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 127]($11, $12);
  $70 = $6 + 11 | 0;
  if ((HEAP8[$70 >> 0] | 0) < 0) {
   $73 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($73, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$70 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $75 = __THREW__;
  __THREW__ = 0;
  if ($75 & 1) {
   $77 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($77);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i50 = 0;
  while (1) {
   if (($$0$i$i$i50 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i50 << 2) >> 2] = 0;
   $$0$i$i$i50 = $$0$i$i$i50 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 127]($12) | 0;
 } else {
  $85 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62592) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 44 >> 2] & 127]($10, $85);
  $89 = HEAP32[$10 >> 2] | 0;
  HEAP8[$2 >> 0] = $89;
  HEAP8[$2 + 1 >> 0] = $89 >> 8;
  HEAP8[$2 + 2 >> 0] = $89 >> 16;
  HEAP8[$2 + 3 >> 0] = $89 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 32 >> 2] & 127]($11, $85);
  $93 = $8 + 11 | 0;
  if ((HEAP8[$93 >> 0] | 0) < 0) {
   $96 = HEAP32[$8 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($96, $10);
   HEAP32[$8 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($8, $10);
   HEAP8[$93 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $8 | 0, 0);
  $98 = __THREW__;
  __THREW__ = 0;
  if ($98 & 1) {
   $100 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($100);
  };
  HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$8 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i55 = 0;
  while (1) {
   if (($$0$i$i$i55 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i55 << 2) >> 2] = 0;
   $$0$i$i$i55 = $$0$i$i$i55 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 28 >> 2] & 127]($11, $85);
  $107 = $7 + 11 | 0;
  if ((HEAP8[$107 >> 0] | 0) < 0) {
   $110 = HEAP32[$7 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($110, $10);
   HEAP32[$7 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($7, $10);
   HEAP8[$107 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $7 | 0, 0);
  $112 = __THREW__;
  __THREW__ = 0;
  if ($112 & 1) {
   $114 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($114);
  };
  HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i60 = 0;
  while (1) {
   if (($$0$i$i$i60 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i60 << 2) >> 2] = 0;
   $$0$i$i$i60 = $$0$i$i$i60 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  HEAP8[$3 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 12 >> 2] & 127]($85) | 0;
  HEAP8[$4 >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 16 >> 2] & 127]($85) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] & 127]($11, $85);
  $129 = $5 + 11 | 0;
  if ((HEAP8[$129 >> 0] | 0) < 0) {
   $132 = HEAP32[$5 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($132, $10);
   HEAP32[$5 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($5, $10);
   HEAP8[$129 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $5 | 0, 0);
  $134 = __THREW__;
  __THREW__ = 0;
  if ($134 & 1) {
   $136 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($136);
  };
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i65 = 0;
  while (1) {
   if (($$0$i$i$i65 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i65 << 2) >> 2] = 0;
   $$0$i$i$i65 = $$0$i$i$i65 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$85 >> 2] | 0) + 24 >> 2] & 127]($11, $85);
  $143 = $6 + 11 | 0;
  if ((HEAP8[$143 >> 0] | 0) < 0) {
   $146 = HEAP32[$6 >> 2] | 0;
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($146, $10);
   HEAP32[$6 + 4 >> 2] = 0;
  } else {
   HEAP8[$10 >> 0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($6, $10);
   HEAP8[$143 >> 0] = 0;
  }
  __THREW__ = 0;
  invoke_vii(73, $6 | 0, 0);
  $148 = __THREW__;
  __THREW__ = 0;
  if ($148 & 1) {
   $150 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($150);
  };
  HEAP32[$6 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  $$0$i$i$i70 = 0;
  while (1) {
   if (($$0$i$i$i70 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i$i70 << 2) >> 2] = 0;
   $$0$i$i$i70 = $$0$i$i$i70 + 1 | 0;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 127]($85) | 0;
 }
 HEAP32[$9 >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}
function __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $111 = 0, $112 = 0, $12 = 0, $124 = 0, $13 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $234 = 0, $24 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $348 = 0, $35 = 0, $357 = 0, $4 = 0, $46 = 0, $5 = 0, $50 = 0, $54 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $2 = sp + 128 | 0;
 $3 = sp + 124 | 0;
 $4 = sp + 120 | 0;
 $5 = sp + 116 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 108 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 100 | 0;
 $10 = sp + 96 | 0;
 $11 = sp + 92 | 0;
 $12 = sp + 88 | 0;
 $13 = sp + 84 | 0;
 $14 = sp + 80 | 0;
 $15 = sp + 76 | 0;
 $16 = sp + 72 | 0;
 $17 = sp + 68 | 0;
 $18 = sp + 64 | 0;
 $19 = sp + 60 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 48 | 0;
 $23 = sp + 44 | 0;
 $24 = sp + 40 | 0;
 $25 = sp + 36 | 0;
 $26 = sp + 32 | 0;
 $27 = sp + 28 | 0;
 $28 = sp + 24 | 0;
 $29 = sp + 20 | 0;
 $30 = sp + 16 | 0;
 $31 = sp + 12 | 0;
 $32 = sp + 8 | 0;
 $33 = sp + 4 | 0;
 $34 = sp;
 $35 = sp + 132 | 0;
 HEAP32[$30 >> 2] = $0;
 HEAP32[$31 >> 2] = $1;
 if (!(HEAP32[HEAP32[$31 >> 2] >> 2] | 0)) label = 3; else if (!(HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0)) label = 3; else $46 = __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_(HEAP32[$31 >> 2] | 0) | 0;
 if ((label | 0) == 3) $46 = HEAP32[$31 >> 2] | 0;
 HEAP32[$32 >> 2] = $46;
 $50 = HEAP32[$32 >> 2] | 0;
 if (HEAP32[HEAP32[$32 >> 2] >> 2] | 0) $54 = HEAP32[$50 >> 2] | 0; else $54 = HEAP32[$50 + 4 >> 2] | 0;
 HEAP32[$33 >> 2] = $54;
 HEAP32[$34 >> 2] = 0;
 if (HEAP32[$33 >> 2] | 0) HEAP32[(HEAP32[$33 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$32 >> 2] | 0) + 8 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$32 >> 2];
 $69 = HEAP32[$33 >> 2] | 0;
 $70 = HEAP32[$32 >> 2] | 0;
 do if ((HEAP32[$29 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$70 + 8 >> 2] >> 2] = $69;
  if ((HEAP32[$32 >> 2] | 0) != (HEAP32[$30 >> 2] | 0)) {
   HEAP32[$28 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$34 >> 2] = HEAP32[(HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
   break;
  } else {
   HEAP32[$30 >> 2] = HEAP32[$33 >> 2];
   break;
  }
 } else {
  HEAP32[$27 >> 2] = $70;
  HEAP32[(HEAP32[(HEAP32[$27 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] = $69;
  HEAP32[$34 >> 2] = HEAP32[HEAP32[(HEAP32[$32 >> 2] | 0) + 8 >> 2] >> 2];
 } while (0);
 HEAP8[$35 >> 0] = HEAP8[(HEAP32[$32 >> 2] | 0) + 12 >> 0] & 1;
 if ((HEAP32[$32 >> 2] | 0) != (HEAP32[$31 >> 2] | 0)) {
  HEAP32[(HEAP32[$32 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$31 >> 2] | 0) + 8 >> 2];
  HEAP32[$22 >> 2] = HEAP32[$31 >> 2];
  $111 = HEAP32[$32 >> 2] | 0;
  $112 = HEAP32[$32 >> 2] | 0;
  if ((HEAP32[$22 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] >> 2] | 0)) HEAP32[HEAP32[$112 + 8 >> 2] >> 2] = $111; else {
   HEAP32[$18 >> 2] = $112;
   HEAP32[(HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] = $111;
  }
  HEAP32[HEAP32[$32 >> 2] >> 2] = HEAP32[HEAP32[$31 >> 2] >> 2];
  $124 = HEAP32[$32 >> 2] | 0;
  HEAP32[$14 >> 2] = HEAP32[HEAP32[$32 >> 2] >> 2];
  HEAP32[$15 >> 2] = $124;
  HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2] = HEAP32[$15 >> 2];
  HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2];
  if (HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] | 0) {
   $140 = HEAP32[$32 >> 2] | 0;
   HEAP32[$8 >> 2] = HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2];
   HEAP32[$9 >> 2] = $140;
   HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] = HEAP32[$9 >> 2];
  }
  HEAP8[(HEAP32[$32 >> 2] | 0) + 12 >> 0] = HEAP8[(HEAP32[$31 >> 2] | 0) + 12 >> 0] & 1;
  if ((HEAP32[$30 >> 2] | 0) == (HEAP32[$31 >> 2] | 0)) HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
 }
 if (!(HEAP8[$35 >> 0] & 1 & (HEAP32[$30 >> 2] | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$33 >> 2] | 0) {
  HEAP8[(HEAP32[$33 >> 2] | 0) + 12 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 while (1) {
  HEAP32[$4 >> 2] = HEAP32[$34 >> 2];
  $173 = HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] & 1;
  if ((HEAP32[$4 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
   if (!$173) {
    HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 1;
    HEAP32[$16 >> 2] = HEAP32[$34 >> 2];
    HEAP8[(HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] = 0;
    HEAP32[$17 >> 2] = HEAP32[$34 >> 2];
    __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[(HEAP32[$17 >> 2] | 0) + 8 >> 2] | 0);
    if ((HEAP32[$30 >> 2] | 0) == (HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0)) HEAP32[$30 >> 2] = HEAP32[$34 >> 2];
    HEAP32[$34 >> 2] = HEAP32[HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] >> 2];
   }
   if (HEAP32[HEAP32[$34 >> 2] >> 2] | 0) if (!(HEAP8[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 12 >> 0] & 1)) {
    label = 62;
    break;
   }
   if (HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) if (!(HEAP8[(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 0] & 1)) {
    label = 62;
    break;
   }
   HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 0;
   HEAP32[$19 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$33 >> 2] = HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2];
   if (!(HEAP8[(HEAP32[$33 >> 2] | 0) + 12 >> 0] & 1)) {
    label = 57;
    break;
   }
   if ((HEAP32[$33 >> 2] | 0) == (HEAP32[$30 >> 2] | 0)) {
    label = 57;
    break;
   }
   HEAP32[$20 >> 2] = HEAP32[$33 >> 2];
   $348 = HEAP32[$33 >> 2] | 0;
   if ((HEAP32[$20 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
    HEAP32[$21 >> 2] = $348;
    $357 = HEAP32[(HEAP32[(HEAP32[$21 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0;
   } else $357 = HEAP32[HEAP32[$348 + 8 >> 2] >> 2] | 0;
   HEAP32[$34 >> 2] = $357;
  } else {
   if (!$173) {
    HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 1;
    HEAP32[$2 >> 2] = HEAP32[$34 >> 2];
    HEAP8[(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] = 0;
    HEAP32[$3 >> 2] = HEAP32[$34 >> 2];
    __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0);
    if ((HEAP32[$30 >> 2] | 0) == (HEAP32[HEAP32[$34 >> 2] >> 2] | 0)) HEAP32[$30 >> 2] = HEAP32[$34 >> 2];
    HEAP32[$34 >> 2] = HEAP32[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 4 >> 2];
   }
   if (HEAP32[HEAP32[$34 >> 2] >> 2] | 0) if (!(HEAP8[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 12 >> 0] & 1)) {
    label = 43;
    break;
   }
   if (HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) if (!(HEAP8[(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 0] & 1)) {
    label = 43;
    break;
   }
   HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 0;
   HEAP32[$5 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$33 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2];
   if ((HEAP32[$33 >> 2] | 0) == (HEAP32[$30 >> 2] | 0)) {
    label = 38;
    break;
   }
   if (!(HEAP8[(HEAP32[$33 >> 2] | 0) + 12 >> 0] & 1)) {
    label = 38;
    break;
   }
   HEAP32[$6 >> 2] = HEAP32[$33 >> 2];
   $234 = HEAP32[$33 >> 2] | 0;
   if ((HEAP32[$6 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
    HEAP32[$7 >> 2] = $234;
    $243 = HEAP32[(HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] | 0;
   } else $243 = HEAP32[HEAP32[$234 + 8 >> 2] >> 2] | 0;
   HEAP32[$34 >> 2] = $243;
  }
 }
 if ((label | 0) == 38) {
  HEAP8[(HEAP32[$33 >> 2] | 0) + 12 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 43) {
  if (!(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0)) label = 45; else if (HEAP8[(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 0] & 1) label = 45;
  if ((label | 0) == 45) {
   HEAP8[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 12 >> 0] = 1;
   HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 0;
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$34 >> 2] | 0);
   HEAP32[$10 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$34 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$11 >> 2] = HEAP32[$34 >> 2];
  HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = HEAP8[(HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] & 1;
  HEAP32[$12 >> 2] = HEAP32[$34 >> 2];
  HEAP8[(HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] = 1;
  HEAP8[(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 0] = 1;
  HEAP32[$13 >> 2] = HEAP32[$34 >> 2];
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 57) {
  HEAP8[(HEAP32[$33 >> 2] | 0) + 12 >> 0] = 1;
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 62) {
  if (!(HEAP32[HEAP32[$34 >> 2] >> 2] | 0)) label = 64; else if (HEAP8[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 12 >> 0] & 1) label = 64;
  if ((label | 0) == 64) {
   HEAP8[(HEAP32[(HEAP32[$34 >> 2] | 0) + 4 >> 2] | 0) + 12 >> 0] = 1;
   HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = 0;
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$34 >> 2] | 0);
   HEAP32[$23 >> 2] = HEAP32[$34 >> 2];
   HEAP32[$34 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$24 >> 2] = HEAP32[$34 >> 2];
  HEAP8[(HEAP32[$34 >> 2] | 0) + 12 >> 0] = HEAP8[(HEAP32[(HEAP32[$24 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] & 1;
  HEAP32[$25 >> 2] = HEAP32[$34 >> 2];
  HEAP8[(HEAP32[(HEAP32[$25 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] = 1;
  HEAP8[(HEAP32[HEAP32[$34 >> 2] >> 2] | 0) + 12 >> 0] = 1;
  HEAP32[$26 >> 2] = HEAP32[$34 >> 2];
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[(HEAP32[$26 >> 2] | 0) + 8 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE16__construct_nodeIJS3_RS8_EEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINSD_ISL_EEEEEEDpOT_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $137 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $19 = 0, $196 = 0, $20 = 0, $200 = 0, $208 = 0, $209 = 0, $21 = 0, $213 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $4 = sp + 396 | 0;
 $5 = sp + 392 | 0;
 $6 = sp + 388 | 0;
 $7 = sp + 384 | 0;
 $8 = sp + 380 | 0;
 $9 = sp + 376 | 0;
 $10 = sp + 372 | 0;
 $11 = sp + 368 | 0;
 $12 = sp + 364 | 0;
 $13 = sp + 360 | 0;
 $14 = sp + 356 | 0;
 $15 = sp + 352 | 0;
 $16 = sp + 348 | 0;
 $17 = sp + 344 | 0;
 $18 = sp + 340 | 0;
 $19 = sp + 336 | 0;
 $20 = sp + 332 | 0;
 $21 = sp + 328 | 0;
 $22 = sp + 8 | 0;
 $23 = sp + 324 | 0;
 $24 = sp + 320 | 0;
 $25 = sp + 316 | 0;
 $26 = sp + 312 | 0;
 $27 = sp + 308 | 0;
 $28 = sp + 403 | 0;
 $29 = sp + 304 | 0;
 $30 = sp + 300 | 0;
 $31 = sp + 296 | 0;
 $32 = sp + 292 | 0;
 $33 = sp + 288 | 0;
 $34 = sp + 284 | 0;
 $35 = sp + 280 | 0;
 $36 = sp + 276 | 0;
 $37 = sp + 272 | 0;
 $38 = sp + 268 | 0;
 $39 = sp + 264 | 0;
 $40 = sp + 260 | 0;
 $41 = sp + 256 | 0;
 $42 = sp + 252 | 0;
 $43 = sp + 248 | 0;
 $44 = sp + 244 | 0;
 $45 = sp + 240 | 0;
 $46 = sp + 236 | 0;
 $47 = sp + 232 | 0;
 $48 = sp + 228 | 0;
 $49 = sp + 224 | 0;
 $50 = sp + 220 | 0;
 $51 = sp + 216 | 0;
 $52 = sp + 212 | 0;
 $53 = sp + 208 | 0;
 $54 = sp + 204 | 0;
 $55 = sp + 200 | 0;
 $56 = sp + 402 | 0;
 $57 = sp + 196 | 0;
 $58 = sp + 192 | 0;
 $59 = sp + 188 | 0;
 $60 = sp + 184 | 0;
 $61 = sp + 180 | 0;
 $62 = sp + 176 | 0;
 $64 = sp + 168 | 0;
 $65 = sp + 164 | 0;
 $67 = sp + 156 | 0;
 $68 = sp + 152 | 0;
 $69 = sp + 148 | 0;
 $70 = sp + 144 | 0;
 $71 = sp + 140 | 0;
 $72 = sp + 136 | 0;
 $73 = sp + 132 | 0;
 $74 = sp + 128 | 0;
 $75 = sp + 124 | 0;
 $76 = sp + 120 | 0;
 $77 = sp + 116 | 0;
 $78 = sp + 112 | 0;
 $79 = sp + 108 | 0;
 $80 = sp + 104 | 0;
 $81 = sp + 100 | 0;
 $82 = sp;
 $83 = sp + 96 | 0;
 $84 = sp + 92 | 0;
 $85 = sp + 401 | 0;
 $86 = sp + 88 | 0;
 $87 = sp + 84 | 0;
 $88 = sp + 80 | 0;
 $89 = sp + 76 | 0;
 $90 = sp + 72 | 0;
 $91 = sp + 68 | 0;
 $92 = sp + 64 | 0;
 $93 = sp + 60 | 0;
 $94 = sp + 56 | 0;
 $95 = sp + 52 | 0;
 $96 = sp + 48 | 0;
 $97 = sp + 44 | 0;
 $98 = sp + 40 | 0;
 $99 = sp + 36 | 0;
 $100 = sp + 32 | 0;
 $101 = sp + 28 | 0;
 $102 = sp + 24 | 0;
 $103 = sp + 400 | 0;
 $104 = sp + 16 | 0;
 HEAP32[$99 >> 2] = $1;
 HEAP32[$100 >> 2] = $2;
 HEAP32[$101 >> 2] = $3;
 HEAP32[$98 >> 2] = HEAP32[$99 >> 2];
 HEAP32[$97 >> 2] = (HEAP32[$98 >> 2] | 0) + 4;
 HEAP32[$96 >> 2] = HEAP32[$97 >> 2];
 HEAP32[$102 >> 2] = HEAP32[$96 >> 2];
 HEAP8[$103 >> 0] = 0;
 HEAP32[$67 >> 2] = HEAP32[$102 >> 2];
 HEAP32[$68 >> 2] = 1;
 $112 = HEAP32[$68 >> 2] | 0;
 HEAP32[$64 >> 2] = HEAP32[$67 >> 2];
 HEAP32[$65 >> 2] = $112;
 HEAP32[sp + 160 >> 2] = 0;
 $114 = HEAP32[$65 >> 2] | 0;
 HEAP32[sp + 172 >> 2] = HEAP32[$64 >> 2];
 if ($114 >>> 0 > 107374182) {
  HEAP32[$59 >> 2] = 55296;
  $116 = ___cxa_allocate_exception(8) | 0;
  $117 = HEAP32[$59 >> 2] | 0;
  HEAP32[$57 >> 2] = $116;
  HEAP32[$58 >> 2] = $117;
  $118 = HEAP32[$57 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $118 | 0, HEAP32[$58 >> 2] | 0);
  $120 = __THREW__;
  __THREW__ = 0;
  if ($120 & 1) {
   $122 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$60 >> 2] = $122;
   HEAP32[$61 >> 2] = tempRet0;
   ___cxa_free_exception($116 | 0);
   ___resumeException(HEAP32[$60 >> 2] | 0);
  } else {
   HEAP32[$118 >> 2] = 48176;
   ___cxa_throw($116 | 0, 42808, 176);
  }
 }
 HEAP32[$62 >> 2] = (HEAP32[$65 >> 2] | 0) * 40;
 $129 = __Znwm(HEAP32[$62 >> 2] | 0) | 0;
 $130 = HEAP32[$102 >> 2] | 0;
 HEAP32[$54 >> 2] = $104;
 HEAP32[$55 >> 2] = $130;
 HEAP8[$56 >> 0] = 0;
 $131 = HEAP32[$54 >> 2] | 0;
 HEAP32[$131 >> 2] = HEAP32[$55 >> 2];
 HEAP8[$131 + 4 >> 0] = HEAP8[$56 >> 0] & 1;
 HEAP32[$51 >> 2] = $0;
 HEAP32[$52 >> 2] = $129;
 HEAP32[$53 >> 2] = $104;
 $137 = HEAP32[$51 >> 2] | 0;
 HEAP32[$50 >> 2] = HEAP32[$53 >> 2];
 $139 = HEAP32[$50 >> 2] | 0;
 HEAP32[$47 >> 2] = $137;
 HEAP32[$48 >> 2] = $52;
 HEAP32[$49 >> 2] = $139;
 $140 = HEAP32[$47 >> 2] | 0;
 HEAP32[$46 >> 2] = HEAP32[$48 >> 2];
 $142 = HEAP32[$46 >> 2] | 0;
 HEAP32[$40 >> 2] = $140;
 HEAP32[$41 >> 2] = $142;
 $143 = HEAP32[$40 >> 2] | 0;
 HEAP32[$39 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$143 >> 2] = HEAP32[HEAP32[$39 >> 2] >> 2];
 HEAP32[$42 >> 2] = HEAP32[$49 >> 2];
 $149 = HEAP32[$42 >> 2] | 0;
 HEAP32[$44 >> 2] = $140 + 4;
 HEAP32[$45 >> 2] = $149;
 $150 = HEAP32[$44 >> 2] | 0;
 HEAP32[$43 >> 2] = HEAP32[$45 >> 2];
 $152 = HEAP32[$43 >> 2] | 0;
 HEAP32[$150 >> 2] = HEAP32[$152 >> 2];
 HEAP32[$150 + 4 >> 2] = HEAP32[$152 + 4 >> 2];
 $153 = HEAP32[$102 >> 2] | 0;
 HEAP32[$38 >> 2] = $0;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$35 >> 2] = (HEAP32[HEAP32[$36 >> 2] >> 2] | 0) + 16;
 HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
 $160 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = HEAP32[$100 >> 2];
 $162 = HEAP32[$33 >> 2] | 0;
 HEAP32[$32 >> 2] = HEAP32[$101 >> 2];
 $164 = HEAP32[$32 >> 2] | 0;
 HEAP32[$24 >> 2] = $153;
 HEAP32[$25 >> 2] = $160;
 HEAP32[$26 >> 2] = $162;
 HEAP32[$27 >> 2] = $164;
 $165 = HEAP32[$24 >> 2] | 0;
 $166 = HEAP32[$25 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$26 >> 2];
 $168 = HEAP32[$23 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$27 >> 2];
 $170 = HEAP32[$4 >> 2] | 0;
 HEAP8[$22 >> 0] = HEAP8[$28 >> 0] | 0;
 HEAP32[$18 >> 2] = $165;
 HEAP32[$19 >> 2] = $166;
 HEAP32[$20 >> 2] = $168;
 HEAP32[$21 >> 2] = $170;
 $171 = HEAP32[$18 >> 2] | 0;
 $172 = HEAP32[$19 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$20 >> 2];
 $174 = HEAP32[$17 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$21 >> 2];
 $176 = HEAP32[$5 >> 2] | 0;
 HEAP32[$13 >> 2] = $171;
 HEAP32[$14 >> 2] = $172;
 HEAP32[$15 >> 2] = $174;
 HEAP32[$16 >> 2] = $176;
 $177 = HEAP32[$14 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[$15 >> 2];
 $179 = HEAP32[$12 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$16 >> 2];
 $181 = HEAP32[$6 >> 2] | 0;
 HEAP32[$9 >> 2] = $177;
 HEAP32[$10 >> 2] = $179;
 HEAP32[$11 >> 2] = $181;
 $182 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 $184 = HEAP32[$8 >> 2] | 0;
 HEAP32[$182 >> 2] = HEAP32[$184 >> 2];
 HEAP32[$182 + 4 >> 2] = HEAP32[$184 + 4 >> 2];
 HEAP32[$182 + 8 >> 2] = HEAP32[$184 + 8 >> 2];
 HEAP32[$182 + 12 >> 2] = HEAP32[$184 + 12 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$182 + 16 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 HEAP32[$31 >> 2] = $0;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$29 >> 2] = (HEAP32[$30 >> 2] | 0) + 4;
 HEAP8[(HEAP32[$29 >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[$103 >> 0] = 1;
 if (HEAP8[$103 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$95 >> 2] = $0;
 HEAP32[$92 >> 2] = HEAP32[$95 >> 2];
 HEAP32[$93 >> 2] = 0;
 $196 = HEAP32[$92 >> 2] | 0;
 HEAP32[$91 >> 2] = $196;
 HEAP32[$90 >> 2] = HEAP32[$91 >> 2];
 HEAP32[$94 >> 2] = HEAP32[HEAP32[$90 >> 2] >> 2];
 $200 = HEAP32[$93 >> 2] | 0;
 HEAP32[$72 >> 2] = $196;
 HEAP32[$71 >> 2] = HEAP32[$72 >> 2];
 HEAP32[HEAP32[$71 >> 2] >> 2] = $200;
 if (!(HEAP32[$94 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$70 >> 2] = $196;
 HEAP32[$69 >> 2] = (HEAP32[$70 >> 2] | 0) + 4;
 $208 = HEAP32[$94 >> 2] | 0;
 HEAP32[$88 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$89 >> 2] = $208;
 $209 = HEAP32[$88 >> 2] | 0;
 if (HEAP8[$209 + 4 >> 0] & 1) {
  $213 = HEAP32[$209 >> 2] | 0;
  HEAP32[$87 >> 2] = (HEAP32[$89 >> 2] | 0) + 16;
  HEAP32[$86 >> 2] = HEAP32[$87 >> 2];
  $217 = HEAP32[$86 >> 2] | 0;
  HEAP32[$83 >> 2] = $213;
  HEAP32[$84 >> 2] = $217;
  $218 = HEAP32[$83 >> 2] | 0;
  $219 = HEAP32[$84 >> 2] | 0;
  HEAP8[$82 >> 0] = HEAP8[$85 >> 0] | 0;
  HEAP32[$80 >> 2] = $218;
  HEAP32[$81 >> 2] = $219;
 }
 if (!(HEAP32[$89 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $223 = HEAP32[$89 >> 2] | 0;
 HEAP32[$77 >> 2] = HEAP32[$209 >> 2];
 HEAP32[$78 >> 2] = $223;
 HEAP32[$79 >> 2] = 1;
 $225 = HEAP32[$78 >> 2] | 0;
 $226 = HEAP32[$79 >> 2] | 0;
 HEAP32[$74 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$75 >> 2] = $225;
 HEAP32[$76 >> 2] = $226;
 HEAP32[$73 >> 2] = HEAP32[$75 >> 2];
 __ZdlPv(HEAP32[$73 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0105132 = 0, $$0111131 = 0, $$097 = 0, $$098$lcssa = 0, $$098133 = 0, $$10 = 0, $$1106$ph = 0, $$1106147 = 0, $$1112 = 0, $$1112$ph = 0, $$11122124 = 0, $$11182 = 0, $$11183 = 0, $$199 = 0, $$199$ph = 0, $$2 = 0, $$2100154 = 0, $$2107135 = 0, $$2113153 = 0, $$3101 = 0, $$3108 = 0, $$3108$ph = 0, $$3108176 = 0, $$3114 = 0, $$4 = 0, $$4102 = 0, $$4109 = 0, $$4115 = 0, $$5 = 0, $$5103 = 0, $$5110 = 0, $$5110180 = 0, $$5110181 = 0, $$5116$ph = 0, $$5116146 = 0, $$6 = 0, $$6104$lcssa = 0, $$6104$ph = 0, $$6104148 = 0, $$6117134 = 0, $$7118 = 0, $$7118$ph = 0, $$7118175 = 0, $$7136 = 0, $$8 = 0, $$8$ph = 0, $$8119 = 0, $$8177 = 0, $$9 = 0, $$9$sink = 0, $$9120 = 0, $$9120179 = 0, $$pre = 0, $$pre$phi173Z2D = 0, $$pre$phi174Z2D = 0, $$pre$phiZ2D = 0, $$pre171 = 0, $105 = 0, $108 = 0, $109 = 0, $113 = 0, $117 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $137 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $153 = 0, $17 = 0, $19 = 0, $23 = 0, $26 = 0, $33 = 0, $38 = 0, $4 = 0, $41 = 0, $47 = 0, $48 = 0, $53 = 0, $6 = 0, $60 = 0, $66 = 0, $72 = 0, $82 = 0, $83 = 0, $89 = 0, label = 0;
 $4 = HEAP32[$1 >> 2] | 0;
 if (!$3) label = 5; else {
  $6 = HEAP32[$3 >> 2] | 0;
  if (!$6) label = 5; else if (!$0) {
   $$2 = $6;
   $$4102 = $4;
   $$4115 = $2;
   label = 26;
  } else {
   HEAP32[$3 >> 2] = 0;
   $$4 = $6;
   $$4109 = $0;
   $$8119 = $2;
   $$9 = $4;
   label = 48;
  }
 }
 L5 : do if ((label | 0) == 5) {
  $14 = ($0 | 0) != 0;
  if (HEAP32[HEAP32[(___pthread_self_751() | 0) + 188 >> 2] >> 2] | 0) if ($14) {
   $$1106$ph = $0;
   $$5116$ph = $2;
   $$6104$ph = $4;
   label = 33;
   break;
  } else {
   $$1112$ph = $2;
   $$199$ph = $4;
   label = 15;
   break;
  }
  if (!$14) {
   $$097 = _strlen($4) | 0;
   label = 63;
   break;
  }
  L13 : do if (!$2) $$098$lcssa = $4; else {
   $$0105132 = $0;
   $$0111131 = $2;
   $$098133 = $4;
   while (1) {
    $17 = HEAP8[$$098133 >> 0] | 0;
    if (!($17 << 24 >> 24)) break;
    $19 = $$098133 + 1 | 0;
    HEAP32[$$0105132 >> 2] = $17 << 24 >> 24 & 57343;
    $23 = $$0111131 + -1 | 0;
    if (!$23) {
     $$098$lcssa = $19;
     break L13;
    } else {
     $$0105132 = $$0105132 + 4 | 0;
     $$0111131 = $23;
     $$098133 = $19;
    }
   }
   HEAP32[$$0105132 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   $$097 = $2 - $$0111131 | 0;
   label = 63;
   break L5;
  } while (0);
  HEAP32[$1 >> 2] = $$098$lcssa;
  $$097 = $2;
  label = 63;
 } while (0);
 L20 : while (1) {
  L21 : do if ((label | 0) == 15) {
   label = 0;
   $$1112 = $$1112$ph;
   $$199 = $$199$ph;
   while (1) {
    $26 = HEAP8[$$199 >> 0] | 0;
    if ((($26 & 255) + -1 | 0) >>> 0 < 127) if (!($$199 & 3)) {
     $33 = HEAP32[$$199 >> 2] | 0;
     $38 = $33 & 255;
     if (!(($33 + -16843009 | $33) & -2139062144)) {
      $$2100154 = $$199;
      $$2113153 = $$1112;
      do {
       $$2100154 = $$2100154 + 4 | 0;
       $$2113153 = $$2113153 + -4 | 0;
       $41 = HEAP32[$$2100154 >> 2] | 0;
      } while (!(($41 + -16843009 | $41) & -2139062144 | 0));
      $$3101 = $$2100154;
      $$3114 = $$2113153;
      $48 = $41 & 255;
     } else {
      $$3101 = $$199;
      $$3114 = $$1112;
      $48 = $38;
     }
    } else {
     $$3101 = $$199;
     $$3114 = $$1112;
     $48 = $26;
    } else {
     $$3101 = $$199;
     $$3114 = $$1112;
     $48 = $26;
    }
    $47 = $48 & 255;
    if (($47 + -1 | 0) >>> 0 >= 127) break;
    $$1112 = $$3114 + -1 | 0;
    $$199 = $$3101 + 1 | 0;
   }
   $53 = $47 + -194 | 0;
   if ($53 >>> 0 > 50) {
    $$11182 = $$3101;
    $$5110180 = $0;
    $$9120179 = $$3114;
    label = 57;
   } else {
    $$2 = HEAP32[33568 + ($53 << 2) >> 2] | 0;
    $$4102 = $$3101 + 1 | 0;
    $$4115 = $$3114;
    label = 26;
    continue L20;
   }
  } else if ((label | 0) == 26) {
   label = 0;
   $60 = (HEAPU8[$$4102 >> 0] | 0) >>> 3;
   if (($60 + -16 | $60 + ($$2 >> 26)) >>> 0 > 7) {
    $$5110 = $0;
    $$6 = $$2;
    $$9$sink = $$4102;
    $$9120 = $$4115;
    label = 56;
   } else {
    $66 = $$4102 + 1 | 0;
    if (!($$2 & 33554432)) $$5103 = $66; else {
     if ((HEAP8[$66 >> 0] & -64) << 24 >> 24 != -128) {
      $$5110 = $0;
      $$6 = $$2;
      $$9$sink = $$4102;
      $$9120 = $$4115;
      label = 56;
      break;
     }
     $72 = $$4102 + 2 | 0;
     if (!($$2 & 524288)) $$5103 = $72; else {
      if ((HEAP8[$72 >> 0] & -64) << 24 >> 24 != -128) {
       $$5110 = $0;
       $$6 = $$2;
       $$9$sink = $$4102;
       $$9120 = $$4115;
       label = 56;
       break;
      }
      $$5103 = $$4102 + 3 | 0;
     }
    }
    $$1112$ph = $$4115 + -1 | 0;
    $$199$ph = $$5103;
    label = 15;
    continue L20;
   }
  } else if ((label | 0) == 33) {
   label = 0;
   L23 : do if (!$$5116$ph) $$6104$lcssa = $$6104$ph; else {
    $$1106147 = $$1106$ph;
    $$5116146 = $$5116$ph;
    $$6104148 = $$6104$ph;
    while (1) {
     $82 = HEAPU8[$$6104148 >> 0] | 0;
     $83 = $82 + -1 | 0;
     if ($83 >>> 0 < 127) if (($$6104148 & 3 | 0) == 0 & $$5116146 >>> 0 > 4) {
      $$2107135 = $$1106147;
      $$6117134 = $$5116146;
      $$7136 = $$6104148;
      while (1) {
       $89 = HEAP32[$$7136 >> 2] | 0;
       if (($89 + -16843009 | $89) & -2139062144 | 0) {
        label = 42;
        break;
       }
       HEAP32[$$2107135 >> 2] = $89 & 255;
       HEAP32[$$2107135 + 4 >> 2] = HEAPU8[$$7136 + 1 >> 0];
       HEAP32[$$2107135 + 8 >> 2] = HEAPU8[$$7136 + 2 >> 0];
       $105 = $$7136 + 4 | 0;
       $108 = $$2107135 + 16 | 0;
       HEAP32[$$2107135 + 12 >> 2] = HEAPU8[$$7136 + 3 >> 0];
       $109 = $$6117134 + -4 | 0;
       if ($109 >>> 0 > 4) {
        $$2107135 = $108;
        $$6117134 = $109;
        $$7136 = $105;
       } else {
        label = 41;
        break;
       }
      }
      if ((label | 0) == 41) {
       label = 0;
       $$3108$ph = $108;
       $$7118$ph = $109;
       $$8$ph = $105;
       $$pre = HEAP8[$105 >> 0] | 0;
      } else if ((label | 0) == 42) {
       label = 0;
       $$3108$ph = $$2107135;
       $$7118$ph = $$6117134;
       $$8$ph = $$7136;
       $$pre = $89 & 255;
      }
      $$pre171 = $$pre & 255;
      $$3108 = $$3108$ph;
      $$7118 = $$7118$ph;
      $$8 = $$8$ph;
      $$pre$phi173Z2D = $$pre171 + -1 | 0;
      $$pre$phiZ2D = $$pre171;
      label = 44;
     } else {
      $$3108176 = $$1106147;
      $$7118175 = $$5116146;
      $$8177 = $$6104148;
      $$pre$phi174Z2D = $82;
     } else {
      $$3108 = $$1106147;
      $$7118 = $$5116146;
      $$8 = $$6104148;
      $$pre$phi173Z2D = $83;
      $$pre$phiZ2D = $82;
      label = 44;
     }
     if ((label | 0) == 44) {
      label = 0;
      if ($$pre$phi173Z2D >>> 0 < 127) {
       $$3108176 = $$3108;
       $$7118175 = $$7118;
       $$8177 = $$8;
       $$pre$phi174Z2D = $$pre$phiZ2D;
      } else break;
     }
     $113 = $$8177 + 1 | 0;
     HEAP32[$$3108176 >> 2] = $$pre$phi174Z2D;
     $$5116146 = $$7118175 + -1 | 0;
     if (!$$5116146) {
      $$6104$lcssa = $113;
      break L23;
     } else {
      $$1106147 = $$3108176 + 4 | 0;
      $$6104148 = $113;
     }
    }
    $117 = $$pre$phiZ2D + -194 | 0;
    if ($117 >>> 0 > 50) {
     $$11182 = $$8;
     $$5110180 = $$3108;
     $$9120179 = $$7118;
     label = 57;
     break L21;
    }
    $$4 = HEAP32[33568 + ($117 << 2) >> 2] | 0;
    $$4109 = $$3108;
    $$8119 = $$7118;
    $$9 = $$8 + 1 | 0;
    label = 48;
    continue L20;
   } while (0);
   HEAP32[$1 >> 2] = $$6104$lcssa;
   $$097 = $2;
   label = 63;
   continue L20;
  } else if ((label | 0) == 48) {
   label = 0;
   $123 = HEAPU8[$$9 >> 0] | 0;
   $124 = $123 >>> 3;
   if (($124 + -16 | $124 + ($$4 >> 26)) >>> 0 > 7) {
    $$5110 = $$4109;
    $$6 = $$4;
    $$9$sink = $$9;
    $$9120 = $$8119;
    label = 56;
   } else {
    $131 = $$9 + 1 | 0;
    $133 = $123 + -128 | $$4 << 6;
    do if (($133 | 0) < 0) {
     $137 = (HEAPU8[$131 >> 0] | 0) + -128 | 0;
     if ($137 >>> 0 <= 63) {
      $140 = $$9 + 2 | 0;
      $141 = $137 | $133 << 6;
      if (($141 | 0) >= 0) {
       $$10 = $140;
       $$5 = $141;
       break;
      }
      $145 = (HEAPU8[$140 >> 0] | 0) + -128 | 0;
      if ($145 >>> 0 <= 63) {
       $$10 = $$9 + 3 | 0;
       $$5 = $145 | $141 << 6;
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 84;
     $$11122124 = $$9 + -1 | 0;
     break L21;
    } else {
     $$10 = $131;
     $$5 = $133;
    } while (0);
    HEAP32[$$4109 >> 2] = $$5;
    $$1106$ph = $$4109 + 4 | 0;
    $$5116$ph = $$8119 + -1 | 0;
    $$6104$ph = $$10;
    label = 33;
    continue L20;
   }
  } else if ((label | 0) == 63) {
   label = 0;
   return $$097 | 0;
  } while (0);
  if ((label | 0) == 56) {
   label = 0;
   $153 = $$9$sink + -1 | 0;
   if (!$$6) {
    $$11182 = $153;
    $$5110180 = $$5110;
    $$9120179 = $$9120;
    label = 57;
   } else {
    $$11183 = $153;
    $$5110181 = $$5110;
    label = 61;
   }
  }
  if ((label | 0) == 57) {
   label = 0;
   if (!(HEAP8[$$11182 >> 0] | 0)) {
    if ($$5110180 | 0) {
     HEAP32[$$5110180 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
    }
    $$097 = $2 - $$9120179 | 0;
    label = 63;
    continue;
   } else {
    $$11183 = $$11182;
    $$5110181 = $$5110180;
    label = 61;
   }
  }
  if ((label | 0) == 61) {
   label = 0;
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   if (!$$5110181) {
    $$097 = -1;
    label = 63;
    continue;
   } else $$11122124 = $$11183;
  }
  HEAP32[$1 >> 2] = $$11122124;
  $$097 = -1;
  label = 63;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i56 = 0, $$0$i$i$i$i71 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i62 = 0, $$0$i$i2$i$i77 = 0, $$0$i$i68 = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$sroa$050$0$copyload = 0, $10 = 0, $11 = 0, $110 = 0, $113 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $145 = 0, $15 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $169 = 0, $17 = 0, $176 = 0, $185 = 0, $188 = 0, $19 = 0, $200 = 0, $203 = 0, $21 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $33 = 0, $35 = 0, $37 = 0, $49 = 0, $57 = 0, $63 = 0, $64 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $88 = 0, $9 = 0, $95 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3);
 __THREW__ = 0;
 $10 = invoke_iii(32, $$byval_copy1 | 0, 62368) | 0;
 $11 = __THREW__;
 __THREW__ = 0;
 if ($11 & 1) {
  $49 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy1);
  ___resumeException($49 | 0);
 }
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4 >> 2] = 0;
 $13 = $10 + 8 | 0;
 $$0 = $6;
 $15 = 0;
 L4 : while (1) {
  $17 = HEAP32[$1 >> 2] | 0;
  if (!(($$0 | 0) != ($7 | 0) & ($15 | 0) == 0)) {
   $185 = $17;
   break;
  }
  $19 = $17;
  if (!$17) {
   $154 = 0;
   $217 = 1;
   $74 = $19;
  } else {
   $21 = HEAP32[$17 + 12 >> 2] | 0;
   if (($21 | 0) == (HEAP32[$17 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$17 >> 2] | 0) + 36 >> 2] & 127]($17) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$21 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $154 = 0;
    $217 = 1;
    $74 = 0;
   } else {
    $154 = $17;
    $217 = 0;
    $74 = $19;
   }
  }
  $33 = HEAP32[$2 >> 2] | 0;
  $35 = $33;
  do if (!$33) {
   $$ph = $35;
   label = 16;
  } else {
   $37 = HEAP32[$33 + 12 >> 2] | 0;
   if (($37 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 127]($33) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    $$ph = 0;
    label = 16;
    break;
   } else if ($217) {
    $218 = $33;
    $75 = $35;
    break;
   } else {
    label = 65;
    break L4;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($217) {
    label = 65;
    break;
   } else {
    $218 = 0;
    $75 = $$ph;
   }
  }
  L27 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$$0 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
   $57 = $$0 + 1 | 0;
   if (($57 | 0) == ($7 | 0)) {
    label = 65;
    break L4;
   }
   $63 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$57 >> 0] | 0, 0) | 0;
   switch ($63 << 24 >> 24) {
   case 48:
   case 69:
    {
     $64 = $$0 + 2 | 0;
     if (($64 | 0) == ($7 | 0)) {
      label = 65;
      break L4;
     }
     $$052 = $63;
     $$053 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10, HEAP8[$64 >> 0] | 0, 0) | 0;
     $78 = $57;
     break;
    }
   default:
    {
     $$052 = 0;
     $$053 = $63;
     $78 = $$0;
    }
   }
   $73 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$8 >> 2] = $74;
   HEAP32[$9 >> 2] = $75;
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$73 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$053, $$052) | 0;
   $$4 = $78 + 2 | 0;
  } else {
   $79 = HEAP8[$$0 >> 0] | 0;
   if ($79 << 24 >> 24 > -1) {
    $82 = HEAP32[$13 >> 2] | 0;
    if (HEAP16[$82 + ($79 << 24 >> 24 << 1) >> 1] & 8192) {
     $$0$pn = $$0;
     while (1) {
      $$3 = $$0$pn + 1 | 0;
      if (($$3 | 0) == ($7 | 0)) {
       $$3$lcssa = $7;
       break;
      }
      $88 = HEAP8[$$3 >> 0] | 0;
      if ($88 << 24 >> 24 <= -1) {
       $$3$lcssa = $$3;
       break;
      }
      if (!(HEAP16[$82 + ($88 << 24 >> 24 << 1) >> 1] & 8192)) {
       $$3$lcssa = $$3;
       break;
      } else $$0$pn = $$3;
     }
     $110 = $218;
     $95 = $154;
     while (1) {
      if (!$95) {
       $126 = 0;
       $219 = 1;
      } else {
       $98 = HEAP32[$95 + 12 >> 2] | 0;
       if (($98 | 0) == (HEAP32[$95 + 16 >> 2] | 0)) $$0$i$i$i$i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$95 >> 2] | 0) + 36 >> 2] & 127]($95) | 0; else $$0$i$i$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$98 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$1 >> 2] = 0;
        $126 = 0;
        $219 = 1;
       } else {
        $126 = $95;
        $219 = 0;
       }
      }
      do if (!$110) label = 44; else {
       $113 = HEAP32[$110 + 12 >> 2] | 0;
       if (($113 | 0) == (HEAP32[$110 + 16 >> 2] | 0)) $$0$i$i2$i$i62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$110 >> 2] | 0) + 36 >> 2] & 127]($110) | 0; else $$0$i$i2$i$i62 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$113 >> 0] | 0) | 0;
       if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i62, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
        HEAP32[$2 >> 2] = 0;
        label = 44;
        break;
       } else if ($219) {
        $220 = $110;
        break;
       } else {
        $$4 = $$3$lcssa;
        break L27;
       }
      } while (0);
      if ((label | 0) == 44) {
       label = 0;
       if ($219) {
        $$4 = $$3$lcssa;
        break L27;
       } else $220 = 0;
      }
      $125 = $126 + 12 | 0;
      $127 = HEAP32[$125 >> 2] | 0;
      $128 = $126 + 16 | 0;
      if (($127 | 0) == (HEAP32[$128 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 36 >> 2] & 127]($126) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$127 >> 0] | 0) | 0;
      if (($$0$i$i & 255) << 24 >> 24 <= -1) {
       $$4 = $$3$lcssa;
       break L27;
      }
      if (!(HEAP16[(HEAP32[$13 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
       $$4 = $$3$lcssa;
       break L27;
      }
      $145 = HEAP32[$125 >> 2] | 0;
      if (($145 | 0) == (HEAP32[$128 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$126 >> 2] | 0) + 40 >> 2] & 127]($126) | 0; else {
       HEAP32[$125 >> 2] = $145 + 1;
       __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$145 >> 0] | 0) | 0;
      }
      $110 = $220;
      $95 = $126;
     }
    }
   }
   $153 = $154 + 12 | 0;
   $155 = HEAP32[$153 >> 2] | 0;
   $156 = $154 + 16 | 0;
   if (($155 | 0) == (HEAP32[$156 >> 2] | 0)) $$0$i$i68 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 127]($154) | 0; else $$0$i$i68 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$155 >> 0] | 0) | 0;
   $169 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, $$0$i$i68 & 255) | 0;
   if ($169 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, HEAP8[$$0 >> 0] | 0) | 0) << 24 >> 24) {
    HEAP32[$4 >> 2] = 4;
    $$4 = $$0;
    break;
   }
   $176 = HEAP32[$153 >> 2] | 0;
   if (($176 | 0) == (HEAP32[$156 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 40 >> 2] & 127]($154) | 0; else {
    HEAP32[$153 >> 2] = $176 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$176 >> 0] | 0) | 0;
   }
   $$4 = $$0 + 1 | 0;
  } while (0);
  $$0 = $$4;
  $15 = HEAP32[$4 >> 2] | 0;
 }
 if ((label | 0) == 65) {
  HEAP32[$4 >> 2] = 4;
  $185 = $154;
 }
 if (!$185) {
  $$sroa$050$0$copyload = 0;
  $221 = 1;
 } else {
  $188 = HEAP32[$185 + 12 >> 2] | 0;
  if (($188 | 0) == (HEAP32[$185 + 16 >> 2] | 0)) $$0$i$i$i$i71 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$185 >> 2] | 0) + 36 >> 2] & 127]($185) | 0; else $$0$i$i$i$i71 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$188 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i71, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $$sroa$050$0$copyload = 0;
   $221 = 1;
  } else {
   $$sroa$050$0$copyload = $185;
   $221 = 0;
  }
 }
 $200 = HEAP32[$2 >> 2] | 0;
 do if (!$200) label = 78; else {
  $203 = HEAP32[$200 + 12 >> 2] | 0;
  if (($203 | 0) == (HEAP32[$200 + 16 >> 2] | 0)) $$0$i$i2$i$i77 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$200 >> 2] | 0) + 36 >> 2] & 127]($200) | 0; else $$0$i$i2$i$i77 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$203 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i77, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 78;
   break;
  } else if ($221) break; else {
   label = 80;
   break;
  }
 } while (0);
 if ((label | 0) == 78) if ($221) label = 80;
 if ((label | 0) == 80) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 STACKTOP = sp;
 return $$sroa$050$0$copyload | 0;
}

function __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i130 = 0, $$0111 = 0, $$0112 = 0, $$0114 = 0, $$0116 = 0, $$07$i$i = 0, $$07$i$i129 = 0, $$1 = 0, $$1113 = 0, $$1115 = 0, $$1117 = 0, $$2 = 0, $$2118 = 0, $$3 = 0, $$pre$phiZ2D = 0, $105 = 0, $106 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $120 = 0, $127 = 0, $13 = 0, $131 = 0, $133 = 0, $145 = 0, $146 = 0, $148 = 0, $152 = 0, $155 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $173 = 0, $178 = 0, $179 = 0, $18 = 0, $184 = 0, $190 = 0, $191 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, $99 = 0, $lpad$phi$sink166$index = 0, $lpad$phi$sink166$index7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62400) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62408) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 HEAP32[$5 >> 2] = $3;
 $13 = HEAP8[$0 >> 0] | 0;
 L1 : do switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   __THREW__ = 0;
   $17 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $13 | 0) | 0;
   $18 = __THREW__;
   __THREW__ = 0;
   if ($18 & 1) {
    $23 = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$sink166$index = $23;
    $lpad$phi$sink166$index7 = tempRet0;
    break L1;
   } else {
    $21 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $21 + 4;
    HEAP32[$21 >> 2] = $17;
    $$0114 = $0 + 1 | 0;
    label = 5;
    break L1;
   }
   break;
  }
 default:
  {
   $$0114 = $0;
   label = 5;
  }
 } while (0);
 L6 : do if ((label | 0) == 5) {
  $25 = $2;
  L8 : do if (($25 - $$0114 | 0) > 1) if ((HEAP8[$$0114 >> 0] | 0) == 48) {
   $31 = $$0114 + 1 | 0;
   switch (HEAP8[$31 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     label = 6;
     break L8;
    }
   }
   __THREW__ = 0;
   $36 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, 48) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    $39 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $39 + 4;
    HEAP32[$39 >> 2] = $36;
    $41 = $$0114 + 2 | 0;
    __THREW__ = 0;
    $46 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$31 >> 0] | 0) | 0;
    $47 = __THREW__;
    __THREW__ = 0;
    if (!($47 & 1)) {
     $49 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $49 + 4;
     HEAP32[$49 >> 2] = $46;
     $$0116 = $41;
     while (1) {
      if ($$0116 >>> 0 >= $2 >>> 0) {
       $$1115 = $41;
       $$2118 = $$0116;
       label = 24;
       break L8;
      }
      $52 = HEAP8[$$0116 >> 0] | 0;
      __THREW__ = 0;
      $53 = invoke_i(1) | 0;
      $54 = __THREW__;
      __THREW__ = 0;
      if ($54 & 1) break;
      if (!(_isxdigit_l($52 << 24 >> 24, $53) | 0)) {
       $$1115 = $41;
       $$2118 = $$0116;
       label = 24;
       break L8;
      }
      $$0116 = $$0116 + 1 | 0;
     }
     $63 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink166$index = $63;
     $lpad$phi$sink166$index7 = tempRet0;
     break L6;
    }
   }
  } else label = 6; else label = 6; while (0);
  L20 : do if ((label | 0) == 6) {
   $$1117 = $$0114;
   while (1) {
    if ($$1117 >>> 0 >= $2 >>> 0) {
     $$1115 = $$0114;
     $$2118 = $$1117;
     label = 24;
     break L20;
    }
    $69 = HEAP8[$$1117 >> 0] | 0;
    __THREW__ = 0;
    $70 = invoke_i(1) | 0;
    $71 = __THREW__;
    __THREW__ = 0;
    if ($71 & 1) break;
    if (!(_isdigit_l($69 << 24 >> 24, $70) | 0)) {
     $$1115 = $$0114;
     $$2118 = $$1117;
     label = 24;
     break L20;
    }
    $$1117 = $$1117 + 1 | 0;
   }
   $61 = ___cxa_find_matching_catch_2() | 0;
   $lpad$phi$sink166$index = $61;
   $lpad$phi$sink166$index7 = tempRet0;
   break L6;
  } while (0);
  L28 : do if ((label | 0) == 24) {
   $77 = $7 + 11 | 0;
   $78 = HEAP8[$77 >> 0] | 0;
   $80 = $7 + 4 | 0;
   L30 : do if (!(($78 << 24 >> 24 < 0 ? HEAP32[$80 >> 2] | 0 : $78 & 255) | 0)) {
    __THREW__ = 0;
    invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $$1115 | 0, $$2118 | 0, HEAP32[$5 >> 2] | 0) | 0;
    $89 = __THREW__;
    __THREW__ = 0;
    if ($89 & 1) break L28;
    $95 = (HEAP32[$5 >> 2] | 0) + ($$2118 - $$1115 << 2) | 0;
    HEAP32[$5 >> 2] = $95;
    $$pre$phiZ2D = $8;
    $190 = $95;
   } else {
    L34 : do if (($$1115 | 0) != ($$2118 | 0)) {
     $$0$i$i = $$2118;
     $$07$i$i = $$1115;
     while (1) {
      $97 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $97 >>> 0) break L34;
      $99 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$97 >> 0] | 0;
      HEAP8[$97 >> 0] = $99;
      $$0$i$i = $97;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    __THREW__ = 0;
    $105 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0;
    $106 = __THREW__;
    __THREW__ = 0;
    if ($106 & 1) {
     $120 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink166$index = $120;
     $lpad$phi$sink166$index7 = tempRet0;
     break L6;
    }
    $$0 = $$1115;
    $$0111 = 0;
    $$0112 = 0;
    while (1) {
     if ($$0 >>> 0 >= $$2118 >>> 0) break;
     $127 = HEAP8[((HEAP8[$77 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$0111 >> 0] | 0;
     if ($127 << 24 >> 24 > 0 & ($$0112 | 0) == ($127 << 24 >> 24 | 0)) {
      $131 = HEAP32[$5 >> 2] | 0;
      HEAP32[$5 >> 2] = $131 + 4;
      HEAP32[$131 >> 2] = $105;
      $133 = HEAP8[$77 >> 0] | 0;
      $$1 = $$0111 + ($$0111 >>> 0 < (($133 << 24 >> 24 < 0 ? HEAP32[$80 >> 2] | 0 : $133 & 255) + -1 | 0) >>> 0 & 1) | 0;
      $$1113 = 0;
     } else {
      $$1 = $$0111;
      $$1113 = $$0112;
     }
     __THREW__ = 0;
     $145 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0;
     $146 = __THREW__;
     __THREW__ = 0;
     if ($146 & 1) {
      label = 43;
      break;
     }
     $148 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $148 + 4;
     HEAP32[$148 >> 2] = $145;
     $$0 = $$0 + 1 | 0;
     $$0111 = $$1;
     $$0112 = $$1113 + 1 | 0;
    }
    if ((label | 0) == 43) {
     $152 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink166$index = $152;
     $lpad$phi$sink166$index7 = tempRet0;
     break L6;
    }
    $112 = $3 + ($$1115 - $0 << 2) | 0;
    $113 = HEAP32[$5 >> 2] | 0;
    if (($112 | 0) == ($113 | 0)) {
     $$pre$phiZ2D = $8;
     $190 = $112;
    } else {
     $$0$i$i130 = $113;
     $$07$i$i129 = $112;
     while (1) {
      $115 = $$0$i$i130 + -4 | 0;
      if ($$07$i$i129 >>> 0 >= $115 >>> 0) {
       $$pre$phiZ2D = $8;
       $190 = $113;
       break L30;
      }
      $117 = HEAP32[$$07$i$i129 >> 2] | 0;
      HEAP32[$$07$i$i129 >> 2] = HEAP32[$115 >> 2];
      HEAP32[$115 >> 2] = $117;
      $$0$i$i130 = $115;
      $$07$i$i129 = $$07$i$i129 + 4 | 0;
     }
    }
   } while (0);
   $$2 = $$2118;
   $191 = $190;
   while (1) {
    if ($$2 >>> 0 >= $2 >>> 0) {
     $$3 = $$2;
     $178 = $191;
     break;
    }
    $155 = HEAP8[$$2 >> 0] | 0;
    if ($155 << 24 >> 24 == 46) {
     label = 47;
     break;
    }
    __THREW__ = 0;
    $169 = invoke_iii(HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $155 | 0) | 0;
    $170 = __THREW__;
    __THREW__ = 0;
    if ($170 & 1) {
     label = 15;
     break;
    }
    $172 = HEAP32[$5 >> 2] | 0;
    $173 = $172 + 4 | 0;
    HEAP32[$5 >> 2] = $173;
    HEAP32[$172 >> 2] = $169;
    $$2 = $$2 + 1 | 0;
    $191 = $173;
   }
   if ((label | 0) == 15) {
    $59 = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$sink166$index = $59;
    $lpad$phi$sink166$index7 = tempRet0;
    break L6;
   }
   if ((label | 0) == 47) {
    __THREW__ = 0;
    $160 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0, $9 | 0) | 0;
    $161 = __THREW__;
    __THREW__ = 0;
    if ($161 & 1) break;
    $163 = HEAP32[$5 >> 2] | 0;
    $164 = $163 + 4 | 0;
    HEAP32[$5 >> 2] = $164;
    HEAP32[$163 >> 2] = $160;
    $$3 = $$2 + 1 | 0;
    $178 = $164;
   }
   __THREW__ = 0;
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $$3 | 0, $2 | 0, $178 | 0) | 0;
   $179 = __THREW__;
   __THREW__ = 0;
   if (!($179 & 1)) {
    $184 = (HEAP32[$5 >> 2] | 0) + ($25 - $$3 << 2) | 0;
    HEAP32[$5 >> 2] = $184;
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $184 : $3 + ($1 - $0 << 2) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    STACKTOP = sp;
    return;
   }
  } while (0);
  $65 = ___cxa_find_matching_catch_2() | 0;
  $lpad$phi$sink166$index = $65;
  $lpad$phi$sink166$index7 = tempRet0;
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($lpad$phi$sink166$index | 0);
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i55 = 0, $$0$i$i$i$i69 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i61 = 0, $$0$i$i2$i$i75 = 0, $$0$i$i66 = 0, $$0$pn = 0, $$052 = 0, $$053 = 0, $$3 = 0, $$3$lcssa = 0, $$4 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$ph = 0, $$sroa$050$0$copyload = 0, $10 = 0, $104 = 0, $107 = 0, $11 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $135 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $158 = 0, $16 = 0, $165 = 0, $174 = 0, $177 = 0, $18 = 0, $189 = 0, $192 = 0, $20 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $32 = 0, $34 = 0, $36 = 0, $48 = 0, $56 = 0, $62 = 0, $63 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $8 = 0, $89 = 0, $9 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy1, $3);
 __THREW__ = 0;
 $10 = invoke_iii(32, $$byval_copy1 | 0, 62400) | 0;
 $11 = __THREW__;
 __THREW__ = 0;
 if ($11 & 1) {
  $48 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy1);
  ___resumeException($48 | 0);
 }
 __ZNSt3__26localeD2Ev($$byval_copy1);
 HEAP32[$4 >> 2] = 0;
 $$0 = $6;
 $14 = 0;
 L4 : while (1) {
  $16 = HEAP32[$1 >> 2] | 0;
  if (!(($$0 | 0) != ($7 | 0) & ($14 | 0) == 0)) {
   $174 = $16;
   break;
  }
  $18 = $16;
  if (!$16) {
   $144 = 0;
   $206 = 1;
   $73 = $18;
  } else {
   $20 = HEAP32[$16 + 12 >> 2] | 0;
   if (($20 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 127]($16) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$20 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $144 = 0;
    $206 = 1;
    $73 = 0;
   } else {
    $144 = $16;
    $206 = 0;
    $73 = $18;
   }
  }
  $32 = HEAP32[$2 >> 2] | 0;
  $34 = $32;
  do if (!$32) {
   $$ph = $34;
   label = 16;
  } else {
   $36 = HEAP32[$32 + 12 >> 2] | 0;
   if (($36 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    $$ph = 0;
    label = 16;
    break;
   } else if ($206) {
    $207 = $32;
    $74 = $34;
    break;
   } else {
    label = 62;
    break L4;
   }
  } while (0);
  if ((label | 0) == 16) {
   label = 0;
   if ($206) {
    label = 62;
    break;
   } else {
    $207 = 0;
    $74 = $$ph;
   }
  }
  L27 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$$0 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
   $56 = $$0 + 4 | 0;
   if (($56 | 0) == ($7 | 0)) {
    label = 62;
    break L4;
   }
   $62 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$56 >> 2] | 0, 0) | 0;
   switch ($62 << 24 >> 24) {
   case 48:
   case 69:
    {
     $63 = $$0 + 8 | 0;
     if (($63 | 0) == ($7 | 0)) {
      label = 62;
      break L4;
     }
     $$052 = $62;
     $$053 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] & 63]($10, HEAP32[$63 >> 2] | 0, 0) | 0;
     $77 = $56;
     break;
    }
   default:
    {
     $$052 = 0;
     $$053 = $62;
     $77 = $$0;
    }
   }
   $72 = HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] | 0;
   HEAP32[$8 >> 2] = $73;
   HEAP32[$9 >> 2] = $74;
   HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiiiii[$72 & 15]($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $$053, $$052) | 0;
   $$4 = $77 + 8 | 0;
  } else {
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, HEAP32[$$0 >> 2] | 0) | 0)) {
    $143 = $144 + 12 | 0;
    $145 = HEAP32[$143 >> 2] | 0;
    $146 = $144 + 16 | 0;
    if (($145 | 0) == (HEAP32[$146 >> 2] | 0)) $$0$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$144 >> 2] | 0) + 36 >> 2] & 127]($144) | 0; else $$0$i$i66 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$145 >> 2] | 0) | 0;
    $158 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($10, $$0$i$i66) | 0;
    if (($158 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($10, HEAP32[$$0 >> 2] | 0) | 0)) {
     HEAP32[$4 >> 2] = 4;
     $$4 = $$0;
     break;
    }
    $165 = HEAP32[$143 >> 2] | 0;
    if (($165 | 0) == (HEAP32[$146 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$144 >> 2] | 0) + 40 >> 2] & 127]($144) | 0; else {
     HEAP32[$143 >> 2] = $165 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$165 >> 2] | 0) | 0;
    }
    $$4 = $$0 + 4 | 0;
    break;
   }
   $$0$pn = $$0;
   while (1) {
    $$3 = $$0$pn + 4 | 0;
    if (($$3 | 0) == ($7 | 0)) {
     $$3$lcssa = $7;
     break;
    }
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, HEAP32[$$3 >> 2] | 0) | 0) $$0$pn = $$3; else {
     $$3$lcssa = $$3;
     break;
    }
   }
   $104 = $207;
   $89 = $144;
   while (1) {
    if (!$89) {
     $120 = 0;
     $208 = 1;
    } else {
     $92 = HEAP32[$89 + 12 >> 2] | 0;
     if (($92 | 0) == (HEAP32[$89 + 16 >> 2] | 0)) $$0$i$i$i$i55 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 127]($89) | 0; else $$0$i$i$i$i55 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$92 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i55, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      $120 = 0;
      $208 = 1;
     } else {
      $120 = $89;
      $208 = 0;
     }
    }
    do if (!$104) label = 42; else {
     $107 = HEAP32[$104 + 12 >> 2] | 0;
     if (($107 | 0) == (HEAP32[$104 + 16 >> 2] | 0)) $$0$i$i2$i$i61 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$104 >> 2] | 0) + 36 >> 2] & 127]($104) | 0; else $$0$i$i2$i$i61 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$107 >> 2] | 0) | 0;
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i61, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
      HEAP32[$2 >> 2] = 0;
      label = 42;
      break;
     } else if ($208) {
      $209 = $104;
      break;
     } else {
      $$4 = $$3$lcssa;
      break L27;
     }
    } while (0);
    if ((label | 0) == 42) {
     label = 0;
     if ($208) {
      $$4 = $$3$lcssa;
      break L27;
     } else $209 = 0;
    }
    $119 = $120 + 12 | 0;
    $121 = HEAP32[$119 >> 2] | 0;
    $122 = $120 + 16 | 0;
    if (($121 | 0) == (HEAP32[$122 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 36 >> 2] & 127]($120) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$121 >> 2] | 0) | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10, 8192, $$0$i$i) | 0)) {
     $$4 = $$3$lcssa;
     break L27;
    }
    $135 = HEAP32[$119 >> 2] | 0;
    if (($135 | 0) == (HEAP32[$122 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] & 127]($120) | 0; else {
     HEAP32[$119 >> 2] = $135 + 4;
     __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$135 >> 2] | 0) | 0;
    }
    $104 = $209;
    $89 = $120;
   }
  } while (0);
  $$0 = $$4;
  $14 = HEAP32[$4 >> 2] | 0;
 }
 if ((label | 0) == 62) {
  HEAP32[$4 >> 2] = 4;
  $174 = $144;
 }
 if (!$174) {
  $$sroa$050$0$copyload = 0;
  $210 = 1;
 } else {
  $177 = HEAP32[$174 + 12 >> 2] | 0;
  if (($177 | 0) == (HEAP32[$174 + 16 >> 2] | 0)) $$0$i$i$i$i69 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$174 >> 2] | 0) + 36 >> 2] & 127]($174) | 0; else $$0$i$i$i$i69 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$177 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i69, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $$sroa$050$0$copyload = 0;
   $210 = 1;
  } else {
   $$sroa$050$0$copyload = $174;
   $210 = 0;
  }
 }
 $189 = HEAP32[$2 >> 2] | 0;
 do if (!$189) label = 75; else {
  $192 = HEAP32[$189 + 12 >> 2] | 0;
  if (($192 | 0) == (HEAP32[$189 + 16 >> 2] | 0)) $$0$i$i2$i$i75 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$189 >> 2] | 0) + 36 >> 2] & 127]($189) | 0; else $$0$i$i2$i$i75 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$192 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i75, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 75;
   break;
  } else if ($210) break; else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 75) if ($210) label = 77;
 if ((label | 0) == 77) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
 STACKTOP = sp;
 return $$sroa$050$0$copyload | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $139 = 0, $14 = 0, $144 = 0, $147 = 0.0, $148 = 0, $15 = 0, $151 = 0, $155 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $189 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $160 = 0;
    $190 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $160 = 0;
     $190 = 1;
    } else {
     $100 = $34;
     $160 = $189;
     $190 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$54 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($190) {
     $191 = $51;
     break;
    } else {
     $$2 = $$018;
     $170 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;
     $170 = 0;
     label = 41;
     break;
    } else $191 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$101 >> 2] | 0) | 0;
   __THREW__ = 0;
   $115 = invoke_iiiiiiiiiiiii(2, $$0$i$i33 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $116 = __THREW__;
   __THREW__ = 0;
   if ($116 & 1) {
    label = 29;
    break;
   }
   if ($115 | 0) {
    $$2 = $$119;
    $170 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99 >> 2] | 0;
   if (($119 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $125 = __THREW__;
    __THREW__ = 0;
    if ($125 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $119 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$119 >> 2] | 0) | 0;
   }
   $$018 = $$119;
   $189 = $160;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $130 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($130 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $130 & 255) | 0) == 0)) {
    $139 = HEAP32[$13 >> 2] | 0;
    if (($139 - $12 | 0) < 160) {
     $144 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $139 + 4;
     HEAP32[$139 >> 2] = $144;
    }
   }
   __THREW__ = 0;
   $147 = +invoke_diii(3, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $148 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($148 & 1)) {
    HEAPF32[$5 >> 2] = $147;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $151 = __THREW__;
    __THREW__ = 0;
    if (!($151 & 1)) {
     if (!$100) $192 = 1; else {
      $155 = HEAP32[$100 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $163 = invoke_ii(HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $164 = __THREW__;
       __THREW__ = 0;
       if ($164 & 1) break; else $$0$i$i$i$i37 = $163;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$155 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $192 = 1;
      } else $192 = 0;
     }
     do if (!$170) label = 58; else {
      $173 = HEAP32[$170 + 12 >> 2] | 0;
      if (($173 | 0) == (HEAP32[$170 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $180 = invoke_ii(HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] | 0, $170 | 0) | 0;
       $181 = __THREW__;
       __THREW__ = 0;
       if ($181 & 1) break L58; else $$0$i$i2$i$i43 = $180;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$173 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($192) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($192) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $139 = 0, $14 = 0, $144 = 0, $147 = 0.0, $148 = 0, $15 = 0, $151 = 0, $155 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $189 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $160 = 0;
    $190 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $160 = 0;
     $190 = 1;
    } else {
     $100 = $34;
     $160 = $189;
     $190 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$54 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($190) {
     $191 = $51;
     break;
    } else {
     $$2 = $$018;
     $170 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;
     $170 = 0;
     label = 41;
     break;
    } else $191 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$101 >> 2] | 0) | 0;
   __THREW__ = 0;
   $115 = invoke_iiiiiiiiiiiii(2, $$0$i$i33 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $116 = __THREW__;
   __THREW__ = 0;
   if ($116 & 1) {
    label = 29;
    break;
   }
   if ($115 | 0) {
    $$2 = $$119;
    $170 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99 >> 2] | 0;
   if (($119 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $125 = __THREW__;
    __THREW__ = 0;
    if ($125 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $119 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$119 >> 2] | 0) | 0;
   }
   $$018 = $$119;
   $189 = $160;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $130 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($130 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $130 & 255) | 0) == 0)) {
    $139 = HEAP32[$13 >> 2] | 0;
    if (($139 - $12 | 0) < 160) {
     $144 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $139 + 4;
     HEAP32[$139 >> 2] = $144;
    }
   }
   __THREW__ = 0;
   $147 = +invoke_diii(1, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $148 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($148 & 1)) {
    HEAPF64[$5 >> 3] = $147;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $151 = __THREW__;
    __THREW__ = 0;
    if (!($151 & 1)) {
     if (!$100) $192 = 1; else {
      $155 = HEAP32[$100 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $163 = invoke_ii(HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $164 = __THREW__;
       __THREW__ = 0;
       if ($164 & 1) break; else $$0$i$i$i$i37 = $163;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$155 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $192 = 1;
      } else $192 = 0;
     }
     do if (!$170) label = 58; else {
      $173 = HEAP32[$170 + 12 >> 2] | 0;
      if (($173 | 0) == (HEAP32[$170 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $180 = invoke_ii(HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] | 0, $170 | 0) | 0;
       $181 = __THREW__;
       __THREW__ = 0;
       if ($181 & 1) break L58; else $$0$i$i2$i$i43 = $180;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$173 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($192) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($192) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $139 = 0, $14 = 0, $144 = 0, $147 = 0.0, $148 = 0, $15 = 0, $151 = 0, $155 = 0, $16 = 0, $160 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 300 | 0;
 $11 = sp + 296 | 0;
 $12 = sp;
 $13 = sp + 292 | 0;
 $14 = sp + 288 | 0;
 $15 = sp + 333 | 0;
 $16 = sp + 332 | 0;
 __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $189 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $160 = 0;
    $190 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $160 = 0;
     $190 = 1;
    } else {
     $100 = $34;
     $160 = $189;
     $190 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$54 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($190) {
     $191 = $51;
     break;
    } else {
     $$2 = $$018;
     $170 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($190) {
     $$2 = $$018;
     $170 = 0;
     label = 41;
     break;
    } else $191 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$101 >> 2] | 0) | 0;
   __THREW__ = 0;
   $115 = invoke_iiiiiiiiiiiii(2, $$0$i$i33 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $116 = __THREW__;
   __THREW__ = 0;
   if ($116 & 1) {
    label = 29;
    break;
   }
   if ($115 | 0) {
    $$2 = $$119;
    $170 = $191;
    label = 41;
    break;
   }
   $119 = HEAP32[$99 >> 2] | 0;
   if (($119 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $125 = __THREW__;
    __THREW__ = 0;
    if ($125 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $119 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$119 >> 2] | 0) | 0;
   }
   $$018 = $$119;
   $189 = $160;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $130 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($130 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $130 & 255) | 0) == 0)) {
    $139 = HEAP32[$13 >> 2] | 0;
    if (($139 - $12 | 0) < 160) {
     $144 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $139 + 4;
     HEAP32[$139 >> 2] = $144;
    }
   }
   __THREW__ = 0;
   $147 = +invoke_diii(2, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $148 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($148 & 1)) {
    HEAPF64[$5 >> 3] = $147;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $151 = __THREW__;
    __THREW__ = 0;
    if (!($151 & 1)) {
     if (!$100) $192 = 1; else {
      $155 = HEAP32[$100 + 12 >> 2] | 0;
      if (($155 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $163 = invoke_ii(HEAP32[(HEAP32[$160 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $164 = __THREW__;
       __THREW__ = 0;
       if ($164 & 1) break; else $$0$i$i$i$i37 = $163;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$155 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i37, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $192 = 1;
      } else $192 = 0;
     }
     do if (!$170) label = 58; else {
      $173 = HEAP32[$170 + 12 >> 2] | 0;
      if (($173 | 0) == (HEAP32[$170 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $180 = invoke_ii(HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] | 0, $170 | 0) | 0;
       $181 = __THREW__;
       __THREW__ = 0;
       if ($181 & 1) break L58; else $$0$i$i2$i$i43 = $180;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$173 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i43, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($192) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($192) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $12 = 0, $120 = 0, $126 = 0, $13 = 0, $131 = 0, $14 = 0, $140 = 0, $145 = 0, $148 = 0.0, $149 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $161 = 0, $164 = 0, $165 = 0, $171 = 0, $174 = 0, $181 = 0, $182 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $190 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $161 = 0;
    $191 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $161 = 0;
     $191 = 1;
    } else {
     $100 = $34;
     $161 = $190;
     $191 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($191) {
     $192 = $51;
     break;
    } else {
     $$2 = $$018;
     $171 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;
     $171 = 0;
     label = 41;
     break;
    } else $192 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$101 >> 0] | 0) | 0;
   __THREW__ = 0;
   $116 = invoke_iiiiiiiiiiiii(1, $$0$i$i33 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $117 = __THREW__;
   __THREW__ = 0;
   if ($117 & 1) {
    label = 29;
    break;
   }
   if ($116 | 0) {
    $$2 = $$119;
    $171 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99 >> 2] | 0;
   if (($120 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $126 = __THREW__;
    __THREW__ = 0;
    if ($126 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $120 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$120 >> 0] | 0) | 0;
   }
   $$018 = $$119;
   $190 = $161;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $131 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($131 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $131 & 255) | 0) == 0)) {
    $140 = HEAP32[$13 >> 2] | 0;
    if (($140 - $12 | 0) < 160) {
     $145 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $140 + 4;
     HEAP32[$140 >> 2] = $145;
    }
   }
   __THREW__ = 0;
   $148 = +invoke_diii(3, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $149 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($149 & 1)) {
    HEAPF32[$5 >> 2] = $148;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $152 = __THREW__;
    __THREW__ = 0;
    if (!($152 & 1)) {
     if (!$100) $193 = 1; else {
      $156 = HEAP32[$100 + 12 >> 2] | 0;
      if (($156 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $164 = invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       if ($165 & 1) break; else $$0$i$i$i$i37 = $164;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$156 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $193 = 1;
      } else $193 = 0;
     }
     do if (!$171) label = 58; else {
      $174 = HEAP32[$171 + 12 >> 2] | 0;
      if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $181 = invoke_ii(HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] | 0, $171 | 0) | 0;
       $182 = __THREW__;
       __THREW__ = 0;
       if ($182 & 1) break L58; else $$0$i$i2$i$i43 = $181;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$174 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($193) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($193) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $12 = 0, $120 = 0, $126 = 0, $13 = 0, $131 = 0, $14 = 0, $140 = 0, $145 = 0, $148 = 0.0, $149 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $161 = 0, $164 = 0, $165 = 0, $171 = 0, $174 = 0, $181 = 0, $182 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $190 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $161 = 0;
    $191 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $161 = 0;
     $191 = 1;
    } else {
     $100 = $34;
     $161 = $190;
     $191 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($191) {
     $192 = $51;
     break;
    } else {
     $$2 = $$018;
     $171 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;
     $171 = 0;
     label = 41;
     break;
    } else $192 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$101 >> 0] | 0) | 0;
   __THREW__ = 0;
   $116 = invoke_iiiiiiiiiiiii(1, $$0$i$i33 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $117 = __THREW__;
   __THREW__ = 0;
   if ($117 & 1) {
    label = 29;
    break;
   }
   if ($116 | 0) {
    $$2 = $$119;
    $171 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99 >> 2] | 0;
   if (($120 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $126 = __THREW__;
    __THREW__ = 0;
    if ($126 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $120 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$120 >> 0] | 0) | 0;
   }
   $$018 = $$119;
   $190 = $161;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $131 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($131 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $131 & 255) | 0) == 0)) {
    $140 = HEAP32[$13 >> 2] | 0;
    if (($140 - $12 | 0) < 160) {
     $145 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $140 + 4;
     HEAP32[$140 >> 2] = $145;
    }
   }
   __THREW__ = 0;
   $148 = +invoke_diii(1, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $149 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($149 & 1)) {
    HEAPF64[$5 >> 3] = $148;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $152 = __THREW__;
    __THREW__ = 0;
    if (!($152 & 1)) {
     if (!$100) $193 = 1; else {
      $156 = HEAP32[$100 + 12 >> 2] | 0;
      if (($156 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $164 = invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       if ($165 & 1) break; else $$0$i$i$i$i37 = $164;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$156 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $193 = 1;
      } else $193 = 0;
     }
     do if (!$171) label = 58; else {
      $174 = HEAP32[$171 + 12 >> 2] | 0;
      if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $181 = invoke_ii(HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] | 0, $171 | 0) | 0;
       $182 = __THREW__;
       __THREW__ = 0;
       if ($182 & 1) break L58; else $$0$i$i2$i$i43 = $181;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$174 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($193) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($193) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i37 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i43 = 0, $$0$i$i33 = 0, $$018 = 0, $$1 = 0, $$119 = 0, $$121 = 0, $$2 = 0, $$pre = 0, $$sink61$index = 0, $$sink61$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $116 = 0, $117 = 0, $12 = 0, $120 = 0, $126 = 0, $13 = 0, $131 = 0, $14 = 0, $140 = 0, $145 = 0, $148 = 0.0, $149 = 0, $15 = 0, $152 = 0, $156 = 0, $16 = 0, $161 = 0, $164 = 0, $165 = 0, $171 = 0, $174 = 0, $181 = 0, $182 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $25 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $44 = 0, $45 = 0, $51 = 0, $54 = 0, $6 = 0, $61 = 0, $62 = 0, $69 = 0, $7 = 0, $73 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 160 | 0;
 $7 = sp + 231 | 0;
 $8 = sp + 230 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 204 | 0;
 $11 = sp + 200 | 0;
 $12 = sp;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 229 | 0;
 $16 = sp + 228 | 0;
 __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($9, $3, $6, $7, $8);
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 HEAP32[$10 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $19 = $10 + 11 | 0;
 if ((HEAP8[$19 >> 0] | 0) < 0) $25 = (HEAP32[$10 + 8 >> 2] & 2147483647) + -1 | 0; else $25 = 10;
 __THREW__ = 0;
 invoke_viii(13, $10 | 0, $25 | 0, 0);
 $26 = __THREW__;
 __THREW__ = 0;
 if ($26 & 1) {
  $91 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $91;
  $$121 = tempRet0;
 } else {
  $31 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
  HEAP32[$11 >> 2] = $31;
  HEAP32[$13 >> 2] = $12;
  HEAP32[$14 >> 2] = 0;
  HEAP8[$15 >> 0] = 1;
  HEAP8[$16 >> 0] = 69;
  $32 = $10 + 4 | 0;
  $33 = $10 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$018 = $31;
  $190 = $$pre;
  $34 = $$pre;
  L11 : while (1) {
   if (!$34) {
    $100 = 0;
    $161 = 0;
    $191 = 1;
   } else {
    $37 = HEAP32[$34 + 12 >> 2] | 0;
    if (($37 | 0) == (HEAP32[$34 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $44 = invoke_ii(HEAP32[(HEAP32[$34 >> 2] | 0) + 36 >> 2] | 0, $34 | 0) | 0;
     $45 = __THREW__;
     __THREW__ = 0;
     if ($45 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $44;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $100 = 0;
     $161 = 0;
     $191 = 1;
    } else {
     $100 = $34;
     $161 = $190;
     $191 = 0;
    }
   }
   $51 = HEAP32[$2 >> 2] | 0;
   do if (!$51) label = 20; else {
    $54 = HEAP32[$51 + 12 >> 2] | 0;
    if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $61 = invoke_ii(HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] | 0, $51 | 0) | 0;
     $62 = __THREW__;
     __THREW__ = 0;
     if ($62 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $61;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$54 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($191) {
     $192 = $51;
     break;
    } else {
     $$2 = $$018;
     $171 = $51;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$018;
     $171 = 0;
     label = 41;
     break;
    } else $192 = 0;
   }
   $69 = HEAP8[$19 >> 0] | 0;
   $73 = $69 << 24 >> 24 < 0 ? HEAP32[$32 >> 2] | 0 : $69 & 255;
   if ((HEAP32[$11 >> 2] | 0) == ($$018 + $73 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $73 << 1 | 0, 0);
    $77 = __THREW__;
    __THREW__ = 0;
    if ($77 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$19 >> 0] | 0) < 0) $83 = (HEAP32[$33 >> 2] & 2147483647) + -1 | 0; else $83 = 10;
    __THREW__ = 0;
    invoke_viii(13, $10 | 0, $83 | 0, 0);
    $84 = __THREW__;
    __THREW__ = 0;
    if ($84 & 1) {
     label = 31;
     break;
    }
    $89 = (HEAP8[$19 >> 0] | 0) < 0 ? HEAP32[$10 >> 2] | 0 : $10;
    HEAP32[$11 >> 2] = $89 + $73;
    $$119 = $89;
   } else $$119 = $$018;
   $99 = $100 + 12 | 0;
   $101 = HEAP32[$99 >> 2] | 0;
   $102 = $100 + 16 | 0;
   if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    $108 = invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
    $109 = __THREW__;
    __THREW__ = 0;
    if ($109 & 1) {
     label = 29;
     break;
    } else $$0$i$i33 = $108;
   } else $$0$i$i33 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$101 >> 0] | 0) | 0;
   __THREW__ = 0;
   $116 = invoke_iiiiiiiiiiiii(1, $$0$i$i33 & 255 | 0, $15 | 0, $16 | 0, $$119 | 0, $11 | 0, HEAP8[$7 >> 0] | 0, HEAP8[$8 >> 0] | 0, $9 | 0, $12 | 0, $13 | 0, $14 | 0, $6 | 0) | 0;
   $117 = __THREW__;
   __THREW__ = 0;
   if ($117 & 1) {
    label = 29;
    break;
   }
   if ($116 | 0) {
    $$2 = $$119;
    $171 = $192;
    label = 41;
    break;
   }
   $120 = HEAP32[$99 >> 2] | 0;
   if (($120 | 0) == (HEAP32[$102 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] | 0, $100 | 0) | 0;
    $126 = __THREW__;
    __THREW__ = 0;
    if ($126 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$99 >> 2] = $120 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$120 >> 0] | 0) | 0;
   }
   $$018 = $$119;
   $190 = $161;
   $34 = $100;
  }
  if ((label | 0) == 29) {
   $93 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $93;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $97 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $97;
   $$sink61$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $131 = HEAP8[$9 + 11 >> 0] | 0;
   if (!((HEAP8[$15 >> 0] | 0) == 0 ? 1 : (($131 << 24 >> 24 < 0 ? HEAP32[$9 + 4 >> 2] | 0 : $131 & 255) | 0) == 0)) {
    $140 = HEAP32[$13 >> 2] | 0;
    if (($140 - $12 | 0) < 160) {
     $145 = HEAP32[$14 >> 2] | 0;
     HEAP32[$13 >> 2] = $140 + 4;
     HEAP32[$140 >> 2] = $145;
    }
   }
   __THREW__ = 0;
   $148 = +invoke_diii(2, $$2 | 0, HEAP32[$11 >> 2] | 0, $4 | 0);
   $149 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($149 & 1)) {
    HEAPF64[$5 >> 3] = $148;
    __THREW__ = 0;
    invoke_viiii(28, $9 | 0, $12 | 0, HEAP32[$13 >> 2] | 0, $4 | 0);
    $152 = __THREW__;
    __THREW__ = 0;
    if (!($152 & 1)) {
     if (!$100) $193 = 1; else {
      $156 = HEAP32[$100 + 12 >> 2] | 0;
      if (($156 | 0) == (HEAP32[$100 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $164 = invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] | 0, $100 | 0) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       if ($165 & 1) break; else $$0$i$i$i$i37 = $164;
      } else $$0$i$i$i$i37 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$156 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i37, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $193 = 1;
      } else $193 = 0;
     }
     do if (!$171) label = 58; else {
      $174 = HEAP32[$171 + 12 >> 2] | 0;
      if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $181 = invoke_ii(HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] | 0, $171 | 0) | 0;
       $182 = __THREW__;
       __THREW__ = 0;
       if ($182 & 1) break L58; else $$0$i$i2$i$i43 = $181;
      } else $$0$i$i2$i$i43 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$174 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i43, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($193) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($193) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $95 = ___cxa_find_matching_catch_2() | 0;
   $$sink61$index = $95;
   $$sink61$index3 = tempRet0;
  }
  $$1 = $$sink61$index;
  $$121 = $$sink61$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $152 = 0, $156 = 0, $161 = 0, $164 = 0, $165 = 0, $171 = 0, $174 = 0, $18 = 0, $181 = 0, $182 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $190 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $161 = 0;
    $191 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $161 = 0;
     $191 = 1;
     $99 = 0;
    } else {
     $161 = $190;
     $191 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($191) {
     $192 = $50;
     break;
    } else {
     $$2 = $$032;
     $171 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$032;
     $171 = 0;
     label = 41;
     break;
    } else $192 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $171 = $192;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $190 = $161;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(17, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = tempRet0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    $147 = $5;
    HEAP32[$147 >> 2] = $143;
    HEAP32[$147 + 4 >> 2] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $152 = __THREW__;
    __THREW__ = 0;
    if (!($152 & 1)) {
     if (!$99) $193 = 1; else {
      $156 = HEAP32[$99 + 12 >> 2] | 0;
      if (($156 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $164 = invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       if ($165 & 1) break; else $$0$i$i$i$i50 = $164;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$156 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $193 = 1;
      } else $193 = 0;
     }
     do if (!$171) label = 58; else {
      $174 = HEAP32[$171 + 12 >> 2] | 0;
      if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $181 = invoke_ii(HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] | 0, $171 | 0) | 0;
       $182 = __THREW__;
       __THREW__ = 0;
       if ($182 & 1) break L58; else $$0$i$i2$i$i56 = $181;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$174 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($193) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($193) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $15 = 0, $153 = 0, $157 = 0, $162 = 0, $165 = 0, $166 = 0, $172 = 0, $175 = 0, $18 = 0, $182 = 0, $183 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $191 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $162 = 0;
    $192 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $162 = 0;
     $192 = 1;
     $99 = 0;
    } else {
     $162 = $191;
     $192 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($192) {
     $193 = $50;
     break;
    } else {
     $$2 = $$032;
     $172 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($192) {
     $$2 = $$032;
     $172 = 0;
     label = 41;
     break;
    } else $193 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $172 = $193;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $191 = $162;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(17, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = tempRet0;
   $146 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($146 & 1)) {
    $148 = $5;
    HEAP32[$148 >> 2] = $144;
    HEAP32[$148 + 4 >> 2] = $145;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $153 = __THREW__;
    __THREW__ = 0;
    if (!($153 & 1)) {
     if (!$99) $194 = 1; else {
      $157 = HEAP32[$99 + 12 >> 2] | 0;
      if (($157 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $165 = invoke_ii(HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $166 = __THREW__;
       __THREW__ = 0;
       if ($166 & 1) break; else $$0$i$i$i$i50 = $165;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$157 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $194 = 1;
      } else $194 = 0;
     }
     do if (!$172) label = 58; else {
      $175 = HEAP32[$172 + 12 >> 2] | 0;
      if (($175 | 0) == (HEAP32[$172 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $182 = invoke_ii(HEAP32[(HEAP32[$172 >> 2] | 0) + 36 >> 2] | 0, $172 | 0) | 0;
       $183 = __THREW__;
       __THREW__ = 0;
       if ($183 & 1) break L58; else $$0$i$i2$i$i56 = $182;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$175 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($194) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($194) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $152 = 0, $156 = 0, $161 = 0, $164 = 0, $165 = 0, $171 = 0, $174 = 0, $18 = 0, $181 = 0, $182 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $190 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $161 = 0;
    $191 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $161 = 0;
     $191 = 1;
     $99 = 0;
    } else {
     $161 = $190;
     $191 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($191) {
     $192 = $50;
     break;
    } else {
     $$2 = $$032;
     $171 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($191) {
     $$2 = $$032;
     $171 = 0;
     label = 41;
     break;
    } else $192 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $171 = $192;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $190 = $161;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(21, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = tempRet0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    $147 = $5;
    HEAP32[$147 >> 2] = $143;
    HEAP32[$147 + 4 >> 2] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $152 = __THREW__;
    __THREW__ = 0;
    if (!($152 & 1)) {
     if (!$99) $193 = 1; else {
      $156 = HEAP32[$99 + 12 >> 2] | 0;
      if (($156 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $164 = invoke_ii(HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $165 = __THREW__;
       __THREW__ = 0;
       if ($165 & 1) break; else $$0$i$i$i$i50 = $164;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$156 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $193 = 1;
      } else $193 = 0;
     }
     do if (!$171) label = 58; else {
      $174 = HEAP32[$171 + 12 >> 2] | 0;
      if (($174 | 0) == (HEAP32[$171 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $181 = invoke_ii(HEAP32[(HEAP32[$171 >> 2] | 0) + 36 >> 2] | 0, $171 | 0) | 0;
       $182 = __THREW__;
       __THREW__ = 0;
       if ($182 & 1) break L58; else $$0$i$i2$i$i56 = $181;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$174 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($193) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($193) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $15 = 0, $153 = 0, $157 = 0, $162 = 0, $165 = 0, $166 = 0, $172 = 0, $175 = 0, $18 = 0, $182 = 0, $183 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $191 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $162 = 0;
    $192 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $162 = 0;
     $192 = 1;
     $99 = 0;
    } else {
     $162 = $191;
     $192 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($192) {
     $193 = $50;
     break;
    } else {
     $$2 = $$032;
     $172 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($192) {
     $$2 = $$032;
     $172 = 0;
     label = 41;
     break;
    } else $193 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $172 = $193;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $191 = $162;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(21, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = tempRet0;
   $146 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($146 & 1)) {
    $148 = $5;
    HEAP32[$148 >> 2] = $144;
    HEAP32[$148 + 4 >> 2] = $145;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $153 = __THREW__;
    __THREW__ = 0;
    if (!($153 & 1)) {
     if (!$99) $194 = 1; else {
      $157 = HEAP32[$99 + 12 >> 2] | 0;
      if (($157 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $165 = invoke_ii(HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $166 = __THREW__;
       __THREW__ = 0;
       if ($166 & 1) break; else $$0$i$i$i$i50 = $165;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$157 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $194 = 1;
      } else $194 = 0;
     }
     do if (!$172) label = 58; else {
      $175 = HEAP32[$172 + 12 >> 2] | 0;
      if (($175 | 0) == (HEAP32[$172 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $182 = invoke_ii(HEAP32[(HEAP32[$172 >> 2] | 0) + 36 >> 2] | 0, $172 | 0) | 0;
       $183 = __THREW__;
       __THREW__ = 0;
       if ($183 & 1) break L58; else $$0$i$i2$i$i56 = $182;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$175 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($194) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($194) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $159 = 0, $160 = 0, $166 = 0, $169 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $185 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $156 = 0;
    $186 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $156 = 0;
     $186 = 1;
     $99 = 0;
    } else {
     $156 = $185;
     $186 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($186) {
     $187 = $50;
     break;
    } else {
     $$2 = $$032;
     $166 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;
     $166 = 0;
     label = 41;
     break;
    } else $187 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $166 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $185 = $156;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(20, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($144 & 1)) {
    HEAP16[$5 >> 1] = $143;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $147 = __THREW__;
    __THREW__ = 0;
    if (!($147 & 1)) {
     if (!$99) $188 = 1; else {
      $151 = HEAP32[$99 + 12 >> 2] | 0;
      if (($151 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $159 = invoke_ii(HEAP32[(HEAP32[$156 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $160 = __THREW__;
       __THREW__ = 0;
       if ($160 & 1) break; else $$0$i$i$i$i50 = $159;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$151 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $188 = 1;
      } else $188 = 0;
     }
     do if (!$166) label = 58; else {
      $169 = HEAP32[$166 + 12 >> 2] | 0;
      if (($169 | 0) == (HEAP32[$166 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $176 = invoke_ii(HEAP32[(HEAP32[$166 >> 2] | 0) + 36 >> 2] | 0, $166 | 0) | 0;
       $177 = __THREW__;
       __THREW__ = 0;
       if ($177 & 1) break L58; else $$0$i$i2$i$i56 = $176;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($188) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($188) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $159 = 0, $160 = 0, $166 = 0, $169 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $185 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $156 = 0;
    $186 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $156 = 0;
     $186 = 1;
     $99 = 0;
    } else {
     $156 = $185;
     $186 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($186) {
     $187 = $50;
     break;
    } else {
     $$2 = $$032;
     $166 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;
     $166 = 0;
     label = 41;
     break;
    } else $187 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $166 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $185 = $156;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(18, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($144 & 1)) {
    HEAP32[$5 >> 2] = $143;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $147 = __THREW__;
    __THREW__ = 0;
    if (!($147 & 1)) {
     if (!$99) $188 = 1; else {
      $151 = HEAP32[$99 + 12 >> 2] | 0;
      if (($151 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $159 = invoke_ii(HEAP32[(HEAP32[$156 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $160 = __THREW__;
       __THREW__ = 0;
       if ($160 & 1) break; else $$0$i$i$i$i50 = $159;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$151 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $188 = 1;
      } else $188 = 0;
     }
     do if (!$166) label = 58; else {
      $169 = HEAP32[$166 + 12 >> 2] | 0;
      if (($169 | 0) == (HEAP32[$166 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $176 = invoke_ii(HEAP32[(HEAP32[$166 >> 2] | 0) + 36 >> 2] | 0, $166 | 0) | 0;
       $177 = __THREW__;
       __THREW__ = 0;
       if ($177 & 1) break L58; else $$0$i$i2$i$i56 = $176;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($188) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($188) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $159 = 0, $160 = 0, $166 = 0, $169 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $185 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $156 = 0;
    $186 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $156 = 0;
     $186 = 1;
     $99 = 0;
    } else {
     $156 = $185;
     $186 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($186) {
     $187 = $50;
     break;
    } else {
     $$2 = $$032;
     $166 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;
     $166 = 0;
     label = 41;
     break;
    } else $187 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $166 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $185 = $156;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(19, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($144 & 1)) {
    HEAP32[$5 >> 2] = $143;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $147 = __THREW__;
    __THREW__ = 0;
    if (!($147 & 1)) {
     if (!$99) $188 = 1; else {
      $151 = HEAP32[$99 + 12 >> 2] | 0;
      if (($151 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $159 = invoke_ii(HEAP32[(HEAP32[$156 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $160 = __THREW__;
       __THREW__ = 0;
       if ($160 & 1) break; else $$0$i$i$i$i50 = $159;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$151 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $188 = 1;
      } else $188 = 0;
     }
     do if (!$166) label = 58; else {
      $169 = HEAP32[$166 + 12 >> 2] | 0;
      if (($169 | 0) == (HEAP32[$166 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $176 = invoke_ii(HEAP32[(HEAP32[$166 >> 2] | 0) + 36 >> 2] | 0, $166 | 0) | 0;
       $177 = __THREW__;
       __THREW__ = 0;
       if ($177 & 1) break L58; else $$0$i$i2$i$i56 = $176;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($188) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($188) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $160 = 0, $161 = 0, $167 = 0, $170 = 0, $177 = 0, $178 = 0, $18 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $186 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $157 = 0;
    $187 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $157 = 0;
     $187 = 1;
     $99 = 0;
    } else {
     $157 = $186;
     $187 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($187) {
     $188 = $50;
     break;
    } else {
     $$2 = $$032;
     $167 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;
     $167 = 0;
     label = 41;
     break;
    } else $188 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $167 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $186 = $157;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(20, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    HEAP16[$5 >> 1] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $148 = __THREW__;
    __THREW__ = 0;
    if (!($148 & 1)) {
     if (!$99) $189 = 1; else {
      $152 = HEAP32[$99 + 12 >> 2] | 0;
      if (($152 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $160 = invoke_ii(HEAP32[(HEAP32[$157 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $161 = __THREW__;
       __THREW__ = 0;
       if ($161 & 1) break; else $$0$i$i$i$i50 = $160;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$152 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $189 = 1;
      } else $189 = 0;
     }
     do if (!$167) label = 58; else {
      $170 = HEAP32[$167 + 12 >> 2] | 0;
      if (($170 | 0) == (HEAP32[$167 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $177 = invoke_ii(HEAP32[(HEAP32[$167 >> 2] | 0) + 36 >> 2] | 0, $167 | 0) | 0;
       $178 = __THREW__;
       __THREW__ = 0;
       if ($178 & 1) break L58; else $$0$i$i2$i$i56 = $177;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$170 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($189) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($189) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $160 = 0, $161 = 0, $167 = 0, $170 = 0, $177 = 0, $178 = 0, $18 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $186 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $157 = 0;
    $187 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $157 = 0;
     $187 = 1;
     $99 = 0;
    } else {
     $157 = $186;
     $187 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($187) {
     $188 = $50;
     break;
    } else {
     $$2 = $$032;
     $167 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;
     $167 = 0;
     label = 41;
     break;
    } else $188 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $167 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $186 = $157;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(18, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    HEAP32[$5 >> 2] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $148 = __THREW__;
    __THREW__ = 0;
    if (!($148 & 1)) {
     if (!$99) $189 = 1; else {
      $152 = HEAP32[$99 + 12 >> 2] | 0;
      if (($152 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $160 = invoke_ii(HEAP32[(HEAP32[$157 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $161 = __THREW__;
       __THREW__ = 0;
       if ($161 & 1) break; else $$0$i$i$i$i50 = $160;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$152 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $189 = 1;
      } else $189 = 0;
     }
     do if (!$167) label = 58; else {
      $170 = HEAP32[$167 + 12 >> 2] | 0;
      if (($170 | 0) == (HEAP32[$167 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $177 = invoke_ii(HEAP32[(HEAP32[$167 >> 2] | 0) + 36 >> 2] | 0, $167 | 0) | 0;
       $178 = __THREW__;
       __THREW__ = 0;
       if ($178 & 1) break L58; else $$0$i$i2$i$i56 = $177;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$170 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($189) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($189) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $160 = 0, $161 = 0, $167 = 0, $170 = 0, $177 = 0, $178 = 0, $18 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $186 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $157 = 0;
    $187 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $157 = 0;
     $187 = 1;
     $99 = 0;
    } else {
     $157 = $186;
     $187 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($187) {
     $188 = $50;
     break;
    } else {
     $$2 = $$032;
     $167 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;
     $167 = 0;
     label = 41;
     break;
    } else $188 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $167 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $186 = $157;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(19, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    HEAP32[$5 >> 2] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $148 = __THREW__;
    __THREW__ = 0;
    if (!($148 & 1)) {
     if (!$99) $189 = 1; else {
      $152 = HEAP32[$99 + 12 >> 2] | 0;
      if (($152 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $160 = invoke_ii(HEAP32[(HEAP32[$157 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $161 = __THREW__;
       __THREW__ = 0;
       if ($161 & 1) break; else $$0$i$i$i$i50 = $160;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$152 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $189 = 1;
      } else $189 = 0;
     }
     do if (!$167) label = 58; else {
      $170 = HEAP32[$167 + 12 >> 2] | 0;
      if (($170 | 0) == (HEAP32[$167 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $177 = invoke_ii(HEAP32[(HEAP32[$167 >> 2] | 0) + 36 >> 2] | 0, $167 | 0) | 0;
       $178 = __THREW__;
       __THREW__ = 0;
       if ($178 & 1) break L58; else $$0$i$i2$i$i56 = $177;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$170 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($189) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($189) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0, $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5168 = 0, $$pre = 0, $$pre$phi204Z2D = 0.0, $105 = 0, $106 = 0, $107 = 0, $117 = 0, $118 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $154 = 0, $156 = 0, $167 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $177 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $194 = 0.0, $195 = 0, $208 = 0.0, $21 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $28 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $66 = 0.0, $7 = 0, $73 = 0, $75 = 0, $84 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond172 = 0, label = 0, $106$looptemp = 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0 + 100 | 0;
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1;
  $$0$ph = HEAPU8[$6 >> 0] | 0;
 } else $$0$ph = ___shgetc($0) | 0;
 $$0 = $$0$ph;
 $$0143 = 0;
 L5 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 10;
    break L5;
    break;
   }
  case 48:
   break;
  default:
   {
    $$1149$ph = 0;
    $$3$ph = $$0;
    $$3146$ph = $$0143;
    $212 = 0;
    $213 = 0;
    break L5;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0;
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1;
   $$0$be = HEAPU8[$14 >> 0] | 0;
  } else $$0$be = ___shgetc($0) | 0;
  $$0 = $$0$be;
  $$0143 = 1;
 }
 if ((label | 0) == 10) {
  $21 = HEAP32[$5 >> 2] | 0;
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1;
   $28 = HEAPU8[$21 >> 0] | 0;
  } else $28 = ___shgetc($0) | 0;
  if (($28 | 0) == 48) {
   $37 = 0;
   $38 = 0;
   while (1) {
    $30 = HEAP32[$5 >> 2] | 0;
    if ($30 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $30 + 1;
     $41 = HEAPU8[$30 >> 0] | 0;
    } else $41 = ___shgetc($0) | 0;
    $39 = _i64Add($37 | 0, $38 | 0, -1, -1) | 0;
    $40 = tempRet0;
    if (($41 | 0) == 48) {
     $37 = $39;
     $38 = $40;
    } else {
     $$1149$ph = 1;
     $$3$ph = $41;
     $$3146$ph = 1;
     $212 = $39;
     $213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;
   $$3$ph = $28;
   $$3146$ph = $$0143;
   $212 = 0;
   $213 = 0;
  }
 }
 $$0151 = 0;
 $$0155 = 1.0;
 $$0158 = 0.0;
 $$0163 = 0;
 $$1149 = $$1149$ph;
 $$3 = $$3$ph;
 $$3146 = $$3146$ph;
 $51 = 0;
 $53 = 0;
 $96 = $212;
 $98 = $213;
 while (1) {
  $43 = $$3 + -48 | 0;
  $$pre = $$3 | 32;
  if ($43 >>> 0 < 10) label = 24; else {
   $47 = ($$3 | 0) == 46;
   if (!($47 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) if (!$$1149) {
    $$2150 = 1;
    $$2153 = $$0151;
    $$2157 = $$0155;
    $$2160 = $$0158;
    $$2165 = $$0163;
    $$4147 = $$3146;
    $214 = $53;
    $215 = $51;
    $216 = $53;
    $217 = $51;
   } else {
    $$3$lcssa = 46;
    break;
   } else label = 24;
  }
  if ((label | 0) == 24) {
   label = 0;
   $$0133 = ($$3 | 0) > 57 ? $$pre + -87 | 0 : $43;
   do if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$1152 = $$0151;
    $$1156 = $$0155;
    $$1159 = $$0158;
    $$1164 = $$0133 + ($$0163 << 4) | 0;
   } else if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
    $66 = $$0155 * .0625;
    $$1152 = $$0151;
    $$1156 = $66;
    $$1159 = $$0158 + $66 * +($$0133 | 0);
    $$1164 = $$0163;
    break;
   } else {
    $or$cond = ($$0151 | 0) != 0 | ($$0133 | 0) == 0;
    $$1152 = $or$cond ? $$0151 : 1;
    $$1156 = $$0155;
    $$1159 = $or$cond ? $$0158 : $$0158 + $$0155 * .5;
    $$1164 = $$0163;
    break;
   } while (0);
   $73 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0;
   $$2150 = $$1149;
   $$2153 = $$1152;
   $$2157 = $$1156;
   $$2160 = $$1159;
   $$2165 = $$1164;
   $$4147 = 1;
   $214 = $96;
   $215 = $98;
   $216 = $73;
   $217 = tempRet0;
  }
  $75 = HEAP32[$5 >> 2] | 0;
  if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $75 + 1;
   $$3$be = HEAPU8[$75 >> 0] | 0;
  } else $$3$be = ___shgetc($0) | 0;
  $$0151 = $$2153;
  $$0155 = $$2157;
  $$0158 = $$2160;
  $$0163 = $$2165;
  $$1149 = $$2150;
  $$3 = $$3$be;
  $$3146 = $$4147;
  $51 = $217;
  $53 = $216;
  $96 = $214;
  $98 = $215;
 }
 do if (!$$3146) {
  $84 = (HEAP32[$7 >> 2] | 0) == 0;
  if (!$84) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  if (!$4) ___shlim($0, 0); else if (!$84) {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   if (!(($$1149 | 0) == 0 | $84)) HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  $$0169 = +($3 | 0) * 0.0;
 } else {
  $95 = ($$1149 | 0) == 0;
  $97 = $95 ? $53 : $96;
  $99 = $95 ? $51 : $98;
  if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
   $$3166185 = $$0163;
   $106 = $53;
   $107 = $51;
   while (1) {
    $105 = $$3166185 << 4;
    $106$looptemp = $106;
    $106 = _i64Add($106 | 0, $107 | 0, 1, 0) | 0;
    if (!(($107 | 0) < 0 | ($107 | 0) == 0 & $106$looptemp >>> 0 < 7)) {
     $$3166$lcssa = $105;
     break;
    } else {
     $$3166185 = $105;
     $107 = tempRet0;
    }
   }
  } else $$3166$lcssa = $$0163;
  if (($$3$lcssa | 32 | 0) == 112) {
   $117 = _scanexp($0, $4) | 0;
   $118 = tempRet0;
   if (($117 | 0) == 0 & ($118 | 0) == -2147483648) {
    if (!$4) {
     ___shlim($0, 0);
     $$0169 = 0.0;
     break;
    }
    if (!(HEAP32[$7 >> 2] | 0)) {
     $135 = 0;
     $136 = 0;
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
     $135 = 0;
     $136 = 0;
    }
   } else {
    $135 = $117;
    $136 = $118;
   }
  } else if (!(HEAP32[$7 >> 2] | 0)) {
   $135 = 0;
   $136 = 0;
  } else {
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
   $135 = 0;
   $136 = 0;
  }
  $131 = _bitshift64Shl($97 | 0, $99 | 0, 2) | 0;
  $133 = _i64Add($131 | 0, tempRet0 | 0, -32, -1) | 0;
  $137 = _i64Add($133 | 0, tempRet0 | 0, $135 | 0, $136 | 0) | 0;
  $138 = tempRet0;
  if (!$$3166$lcssa) {
   $$0169 = +($3 | 0) * 0.0;
   break;
  }
  $142 = 0 - $2 | 0;
  $144 = (($142 | 0) < 0) << 31 >> 31;
  if (($138 | 0) > ($144 | 0) | ($138 | 0) == ($144 | 0) & $137 >>> 0 > $142 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$0169 = +($3 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
   break;
  }
  $154 = $2 + -106 | 0;
  $156 = (($154 | 0) < 0) << 31 >> 31;
  if (($138 | 0) < ($156 | 0) | ($138 | 0) == ($156 | 0) & $137 >>> 0 < $154 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $$0169 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
   break;
  }
  if (($$3166$lcssa | 0) > -1) {
   $$3161181 = $$0158;
   $$4167180 = $$3166$lcssa;
   $171 = $137;
   $172 = $138;
   while (1) {
    $167 = !($$3161181 >= .5);
    $$5168 = $$4167180 << 1 | ($167 ^ 1) & 1;
    $$4162 = $$3161181 + ($167 ? $$3161181 : $$3161181 + -1.0);
    $173 = _i64Add($171 | 0, $172 | 0, -1, -1) | 0;
    $174 = tempRet0;
    if (($$5168 | 0) > -1) {
     $$3161181 = $$4162;
     $$4167180 = $$5168;
     $171 = $173;
     $172 = $174;
    } else {
     $$3161$lcssa = $$4162;
     $$4167$lcssa = $$5168;
     $182 = $173;
     $183 = $174;
     break;
    }
   }
  } else {
   $$3161$lcssa = $$0158;
   $$4167$lcssa = $$3166$lcssa;
   $182 = $137;
   $183 = $138;
  }
  $177 = (($1 | 0) < 0) << 31 >> 31;
  $180 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0;
  $184 = _i64Add($180 | 0, tempRet0 | 0, $182 | 0, $183 | 0) | 0;
  $185 = tempRet0;
  if (($185 | 0) < ($177 | 0) | ($185 | 0) == ($177 | 0) & $184 >>> 0 < $1 >>> 0) if (($184 | 0) > 0) {
   $$0170 = $184;
   label = 65;
  } else {
   $$0170174 = 0;
   $195 = 84;
   label = 67;
  } else {
   $$0170 = $1;
   label = 65;
  }
  if ((label | 0) == 65) if (($$0170 | 0) < 53) {
   $$0170174 = $$0170;
   $195 = 84 - $$0170 | 0;
   label = 67;
  } else {
   $$0154 = 0.0;
   $$0170173 = $$0170;
   $$pre$phi204Z2D = +($3 | 0);
  }
  if ((label | 0) == 67) {
   $194 = +($3 | 0);
   $$0154 = +_copysignl(+_scalbn(1.0, $195), $194);
   $$0170173 = $$0170174;
   $$pre$phi204Z2D = $194;
  }
  $or$cond172 = ($$4167$lcssa & 1 | 0) == 0 & ($$3161$lcssa != 0.0 & ($$0170173 | 0) < 32);
  $208 = ($or$cond172 ? 0.0 : $$3161$lcssa) * $$pre$phi204Z2D + ($$0154 + $$pre$phi204Z2D * +(($$4167$lcssa + ($or$cond172 & 1) | 0) >>> 0)) - $$0154;
  if (!($208 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
  $$0169 = +_scalbnl($208, $182);
 } while (0);
 return +$$0169;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $117 = 0, $12 = 0, $123 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $140 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $151 = 0, $156 = 0, $159 = 0, $160 = 0, $166 = 0, $169 = 0, $176 = 0, $177 = 0, $18 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $6 = sp + 300 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 276 | 0;
 $10 = sp + 272 | 0;
 $11 = sp;
 $12 = sp + 268 | 0;
 $13 = sp + 264 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $185 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $156 = 0;
    $186 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$36 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $156 = 0;
     $186 = 1;
     $99 = 0;
    } else {
     $156 = $185;
     $186 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($186) {
     $187 = $50;
     break;
    } else {
     $$2 = $$032;
     $166 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($186) {
     $$2 = $$032;
     $166 = 0;
     label = 41;
     break;
    } else $187 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$100 >> 2] | 0) | 0;
   __THREW__ = 0;
   $113 = invoke_iiiiiiiiiii(2, $$0$i$i46 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP32[$6 >> 2] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $114 = __THREW__;
   __THREW__ = 0;
   if ($114 & 1) {
    label = 29;
    break;
   }
   if ($113 | 0) {
    $$2 = $$133;
    $166 = $187;
    label = 41;
    break;
   }
   $117 = HEAP32[$98 >> 2] | 0;
   if (($117 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $123 = __THREW__;
    __THREW__ = 0;
    if ($123 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $117 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$117 >> 2] | 0) | 0;
   }
   $$032 = $$133;
   $185 = $156;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $128 = HEAP8[$8 + 11 >> 0] | 0;
   if (($128 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $128 & 255) | 0) {
    $135 = HEAP32[$12 >> 2] | 0;
    if (($135 - $11 | 0) < 160) {
     $140 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $135 + 4;
     HEAP32[$135 >> 2] = $140;
    }
   }
   __THREW__ = 0;
   $143 = invoke_iiiii(22, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $144 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($144 & 1)) {
    HEAP32[$5 >> 2] = $143;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $147 = __THREW__;
    __THREW__ = 0;
    if (!($147 & 1)) {
     if (!$99) $188 = 1; else {
      $151 = HEAP32[$99 + 12 >> 2] | 0;
      if (($151 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $159 = invoke_ii(HEAP32[(HEAP32[$156 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $160 = __THREW__;
       __THREW__ = 0;
       if ($160 & 1) break; else $$0$i$i$i$i50 = $159;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$151 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i50, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $188 = 1;
      } else $188 = 0;
     }
     do if (!$166) label = 58; else {
      $169 = HEAP32[$166 + 12 >> 2] | 0;
      if (($169 | 0) == (HEAP32[$166 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $176 = invoke_ii(HEAP32[(HEAP32[$166 >> 2] | 0) + 36 >> 2] | 0, $166 | 0) | 0;
       $177 = __THREW__;
       __THREW__ = 0;
       if ($177 & 1) break L58; else $$0$i$i2$i$i56 = $176;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$169 >> 2] | 0) | 0;
      if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i56, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($188) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($188) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i50 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i56 = 0, $$0$i$i46 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$135 = 0, $$2 = 0, $$pre = 0, $$sink74$index = 0, $$sink74$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $108 = 0, $11 = 0, $114 = 0, $115 = 0, $118 = 0, $12 = 0, $124 = 0, $129 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $144 = 0, $145 = 0, $148 = 0, $15 = 0, $152 = 0, $157 = 0, $160 = 0, $161 = 0, $167 = 0, $170 = 0, $177 = 0, $178 = 0, $18 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $24 = 0, $25 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $43 = 0, $44 = 0, $50 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $72 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $88 = 0, $9 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($3) | 0;
 $15 = __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $3, sp + 160 | 0) | 0;
 __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($8, $3, $6);
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 HEAP32[$9 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$9 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $18 = $9 + 11 | 0;
 if ((HEAP8[$18 >> 0] | 0) < 0) $24 = (HEAP32[$9 + 8 >> 2] & 2147483647) + -1 | 0; else $24 = 10;
 __THREW__ = 0;
 invoke_viii(13, $9 | 0, $24 | 0, 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $90 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $90;
  $$135 = tempRet0;
 } else {
  $30 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
  HEAP32[$10 >> 2] = $30;
  HEAP32[$12 >> 2] = $11;
  HEAP32[$13 >> 2] = 0;
  $31 = $9 + 4 | 0;
  $32 = $9 + 8 | 0;
  $$pre = HEAP32[$1 >> 2] | 0;
  $$032 = $30;
  $186 = $$pre;
  $33 = $$pre;
  L11 : while (1) {
   if (!$33) {
    $157 = 0;
    $187 = 1;
    $99 = 0;
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0;
    if (($36 | 0) == (HEAP32[$33 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $43 = invoke_ii(HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] | 0, $33 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      label = 29;
      break;
     } else $$0$i$i$i$i = $43;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$36 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $157 = 0;
     $187 = 1;
     $99 = 0;
    } else {
     $157 = $186;
     $187 = 0;
     $99 = $33;
    }
   }
   $50 = HEAP32[$2 >> 2] | 0;
   do if (!$50) label = 20; else {
    $53 = HEAP32[$50 + 12 >> 2] | 0;
    if (($53 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $60 = invoke_ii(HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] | 0, $50 | 0) | 0;
     $61 = __THREW__;
     __THREW__ = 0;
     if ($61 & 1) {
      label = 29;
      break L11;
     } else $$0$i$i2$i$i = $60;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$53 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 20;
     break;
    } else if ($187) {
     $188 = $50;
     break;
    } else {
     $$2 = $$032;
     $167 = $50;
     label = 41;
     break L11;
    }
   } while (0);
   if ((label | 0) == 20) {
    label = 0;
    if ($187) {
     $$2 = $$032;
     $167 = 0;
     label = 41;
     break;
    } else $188 = 0;
   }
   $68 = HEAP8[$18 >> 0] | 0;
   $72 = $68 << 24 >> 24 < 0 ? HEAP32[$31 >> 2] | 0 : $68 & 255;
   if ((HEAP32[$10 >> 2] | 0) == ($$032 + $72 | 0)) {
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $72 << 1 | 0, 0);
    $76 = __THREW__;
    __THREW__ = 0;
    if ($76 & 1) {
     label = 31;
     break;
    }
    if ((HEAP8[$18 >> 0] | 0) < 0) $82 = (HEAP32[$32 >> 2] & 2147483647) + -1 | 0; else $82 = 10;
    __THREW__ = 0;
    invoke_viii(13, $9 | 0, $82 | 0, 0);
    $83 = __THREW__;
    __THREW__ = 0;
    if ($83 & 1) {
     label = 31;
     break;
    }
    $88 = (HEAP8[$18 >> 0] | 0) < 0 ? HEAP32[$9 >> 2] | 0 : $9;
    HEAP32[$10 >> 2] = $88 + $72;
    $$133 = $88;
   } else $$133 = $$032;
   $98 = $99 + 12 | 0;
   $100 = HEAP32[$98 >> 2] | 0;
   $101 = $99 + 16 | 0;
   if (($100 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    $107 = invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
    $108 = __THREW__;
    __THREW__ = 0;
    if ($108 & 1) {
     label = 29;
     break;
    } else $$0$i$i46 = $107;
   } else $$0$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$100 >> 0] | 0) | 0;
   __THREW__ = 0;
   $114 = invoke_iiiiiiiiiii(1, $$0$i$i46 & 255 | 0, $14 | 0, $$133 | 0, $10 | 0, $13 | 0, HEAP8[$6 >> 0] | 0, $8 | 0, $11 | 0, $12 | 0, $15 | 0) | 0;
   $115 = __THREW__;
   __THREW__ = 0;
   if ($115 & 1) {
    label = 29;
    break;
   }
   if ($114 | 0) {
    $$2 = $$133;
    $167 = $188;
    label = 41;
    break;
   }
   $118 = HEAP32[$98 >> 2] | 0;
   if (($118 | 0) == (HEAP32[$101 >> 2] | 0)) {
    __THREW__ = 0;
    invoke_ii(HEAP32[(HEAP32[$99 >> 2] | 0) + 40 >> 2] | 0, $99 | 0) | 0;
    $124 = __THREW__;
    __THREW__ = 0;
    if ($124 & 1) {
     label = 29;
     break;
    }
   } else {
    HEAP32[$98 >> 2] = $118 + 1;
    __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$118 >> 0] | 0) | 0;
   }
   $$032 = $$133;
   $186 = $157;
   $33 = $99;
  }
  if ((label | 0) == 29) {
   $92 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $92;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 31) {
   $96 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $96;
   $$sink74$index3 = tempRet0;
  } else if ((label | 0) == 41) {
   $129 = HEAP8[$8 + 11 >> 0] | 0;
   if (($129 << 24 >> 24 < 0 ? HEAP32[$8 + 4 >> 2] | 0 : $129 & 255) | 0) {
    $136 = HEAP32[$12 >> 2] | 0;
    if (($136 - $11 | 0) < 160) {
     $141 = HEAP32[$13 >> 2] | 0;
     HEAP32[$12 >> 2] = $136 + 4;
     HEAP32[$136 >> 2] = $141;
    }
   }
   __THREW__ = 0;
   $144 = invoke_iiiii(22, $$2 | 0, HEAP32[$10 >> 2] | 0, $4 | 0, $14 | 0) | 0;
   $145 = __THREW__;
   __THREW__ = 0;
   L58 : do if (!($145 & 1)) {
    HEAP32[$5 >> 2] = $144;
    __THREW__ = 0;
    invoke_viiii(28, $8 | 0, $11 | 0, HEAP32[$12 >> 2] | 0, $4 | 0);
    $148 = __THREW__;
    __THREW__ = 0;
    if (!($148 & 1)) {
     if (!$99) $189 = 1; else {
      $152 = HEAP32[$99 + 12 >> 2] | 0;
      if (($152 | 0) == (HEAP32[$99 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $160 = invoke_ii(HEAP32[(HEAP32[$157 >> 2] | 0) + 36 >> 2] | 0, $99 | 0) | 0;
       $161 = __THREW__;
       __THREW__ = 0;
       if ($161 & 1) break; else $$0$i$i$i$i50 = $160;
      } else $$0$i$i$i$i50 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$152 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $189 = 1;
      } else $189 = 0;
     }
     do if (!$167) label = 58; else {
      $170 = HEAP32[$167 + 12 >> 2] | 0;
      if (($170 | 0) == (HEAP32[$167 + 16 >> 2] | 0)) {
       __THREW__ = 0;
       $177 = invoke_ii(HEAP32[(HEAP32[$167 >> 2] | 0) + 36 >> 2] | 0, $167 | 0) | 0;
       $178 = __THREW__;
       __THREW__ = 0;
       if ($178 & 1) break L58; else $$0$i$i2$i$i56 = $177;
      } else $$0$i$i2$i$i56 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$170 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i56, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$2 >> 2] = 0;
       label = 58;
       break;
      } else if ($189) break; else {
       label = 60;
       break;
      }
     } while (0);
     if ((label | 0) == 58) if ($189) label = 60;
     if ((label | 0) == 60) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2;
     $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
     STACKTOP = sp;
     return $$sroa$0$0$copyload | 0;
    }
   } while (0);
   $94 = ___cxa_find_matching_catch_2() | 0;
   $$sink74$index = $94;
   $$sink74$index3 = tempRet0;
  }
  $$1 = $$sink74$index;
  $$135 = $$sink74$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 ___resumeException($$1 | 0);
 return 0;
}

function __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i127 = 0, $$0108 = 0, $$0109 = 0, $$0111 = 0, $$0113 = 0, $$07$i$i = 0, $$07$i$i126 = 0, $$1 = 0, $$1110 = 0, $$1112 = 0, $$1114 = 0, $$2 = 0, $$2115 = 0, $$3 = 0, $$pre$phiZ2D = 0, $105 = 0, $106 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $120 = 0, $127 = 0, $13 = 0, $131 = 0, $133 = 0, $145 = 0, $146 = 0, $148 = 0, $152 = 0, $155 = 0, $160 = 0, $161 = 0, $163 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $179 = 0, $18 = 0, $184 = 0, $21 = 0, $23 = 0, $25 = 0, $31 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $46 = 0, $47 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $78 = 0, $8 = 0, $80 = 0, $89 = 0, $9 = 0, $97 = 0, $99 = 0, $lpad$phi$sink160$index = 0, $lpad$phi$sink160$index7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62368) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62384) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 HEAP32[$5 >> 2] = $3;
 $13 = HEAP8[$0 >> 0] | 0;
 L1 : do switch ($13 << 24 >> 24) {
 case 43:
 case 45:
  {
   __THREW__ = 0;
   $17 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $13 | 0) | 0;
   $18 = __THREW__;
   __THREW__ = 0;
   if ($18 & 1) {
    $23 = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$sink160$index = $23;
    $lpad$phi$sink160$index7 = tempRet0;
    break L1;
   } else {
    $21 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $17;
    $$0111 = $0 + 1 | 0;
    label = 5;
    break L1;
   }
   break;
  }
 default:
  {
   $$0111 = $0;
   label = 5;
  }
 } while (0);
 L6 : do if ((label | 0) == 5) {
  $25 = $2;
  L8 : do if (($25 - $$0111 | 0) > 1) if ((HEAP8[$$0111 >> 0] | 0) == 48) {
   $31 = $$0111 + 1 | 0;
   switch (HEAP8[$31 >> 0] | 0) {
   case 88:
   case 120:
    break;
   default:
    {
     label = 6;
     break L8;
    }
   }
   __THREW__ = 0;
   $36 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, 48) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    $39 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $39 + 1;
    HEAP8[$39 >> 0] = $36;
    $41 = $$0111 + 2 | 0;
    __THREW__ = 0;
    $46 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$31 >> 0] | 0) | 0;
    $47 = __THREW__;
    __THREW__ = 0;
    if (!($47 & 1)) {
     $49 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $49 + 1;
     HEAP8[$49 >> 0] = $46;
     $$0113 = $41;
     while (1) {
      if ($$0113 >>> 0 >= $2 >>> 0) {
       $$1112 = $41;
       $$2115 = $$0113;
       label = 24;
       break L8;
      }
      $52 = HEAP8[$$0113 >> 0] | 0;
      __THREW__ = 0;
      $53 = invoke_i(1) | 0;
      $54 = __THREW__;
      __THREW__ = 0;
      if ($54 & 1) break;
      if (!(_isxdigit_l($52 << 24 >> 24, $53) | 0)) {
       $$1112 = $41;
       $$2115 = $$0113;
       label = 24;
       break L8;
      }
      $$0113 = $$0113 + 1 | 0;
     }
     $63 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink160$index = $63;
     $lpad$phi$sink160$index7 = tempRet0;
     break L6;
    }
   }
  } else label = 6; else label = 6; while (0);
  L20 : do if ((label | 0) == 6) {
   $$1114 = $$0111;
   while (1) {
    if ($$1114 >>> 0 >= $2 >>> 0) {
     $$1112 = $$0111;
     $$2115 = $$1114;
     label = 24;
     break L20;
    }
    $69 = HEAP8[$$1114 >> 0] | 0;
    __THREW__ = 0;
    $70 = invoke_i(1) | 0;
    $71 = __THREW__;
    __THREW__ = 0;
    if ($71 & 1) break;
    if (!(_isdigit_l($69 << 24 >> 24, $70) | 0)) {
     $$1112 = $$0111;
     $$2115 = $$1114;
     label = 24;
     break L20;
    }
    $$1114 = $$1114 + 1 | 0;
   }
   $61 = ___cxa_find_matching_catch_2() | 0;
   $lpad$phi$sink160$index = $61;
   $lpad$phi$sink160$index7 = tempRet0;
   break L6;
  } while (0);
  L28 : do if ((label | 0) == 24) {
   $77 = $7 + 11 | 0;
   $78 = HEAP8[$77 >> 0] | 0;
   $80 = $7 + 4 | 0;
   L30 : do if (!(($78 << 24 >> 24 < 0 ? HEAP32[$80 >> 2] | 0 : $78 & 255) | 0)) {
    __THREW__ = 0;
    invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $$1112 | 0, $$2115 | 0, HEAP32[$5 >> 2] | 0) | 0;
    $89 = __THREW__;
    __THREW__ = 0;
    if ($89 & 1) break L28;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + ($$2115 - $$1112);
    $$pre$phiZ2D = $8;
   } else {
    L34 : do if (($$1112 | 0) != ($$2115 | 0)) {
     $$0$i$i = $$2115;
     $$07$i$i = $$1112;
     while (1) {
      $97 = $$0$i$i + -1 | 0;
      if ($$07$i$i >>> 0 >= $97 >>> 0) break L34;
      $99 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$97 >> 0] | 0;
      HEAP8[$97 >> 0] = $99;
      $$0$i$i = $97;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    } while (0);
    __THREW__ = 0;
    $105 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0;
    $106 = __THREW__;
    __THREW__ = 0;
    if ($106 & 1) {
     $120 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink160$index = $120;
     $lpad$phi$sink160$index7 = tempRet0;
     break L6;
    }
    $$0 = $$1112;
    $$0108 = 0;
    $$0109 = 0;
    while (1) {
     if ($$0 >>> 0 >= $$2115 >>> 0) break;
     $127 = HEAP8[((HEAP8[$77 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$0108 >> 0] | 0;
     if ($127 << 24 >> 24 > 0 & ($$0109 | 0) == ($127 << 24 >> 24 | 0)) {
      $131 = HEAP32[$5 >> 2] | 0;
      HEAP32[$5 >> 2] = $131 + 1;
      HEAP8[$131 >> 0] = $105;
      $133 = HEAP8[$77 >> 0] | 0;
      $$1 = $$0108 + ($$0108 >>> 0 < (($133 << 24 >> 24 < 0 ? HEAP32[$80 >> 2] | 0 : $133 & 255) + -1 | 0) >>> 0 & 1) | 0;
      $$1110 = 0;
     } else {
      $$1 = $$0108;
      $$1110 = $$0109;
     }
     __THREW__ = 0;
     $145 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0;
     $146 = __THREW__;
     __THREW__ = 0;
     if ($146 & 1) {
      label = 43;
      break;
     }
     $148 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $148 + 1;
     HEAP8[$148 >> 0] = $145;
     $$0 = $$0 + 1 | 0;
     $$0108 = $$1;
     $$0109 = $$1110 + 1 | 0;
    }
    if ((label | 0) == 43) {
     $152 = ___cxa_find_matching_catch_2() | 0;
     $lpad$phi$sink160$index = $152;
     $lpad$phi$sink160$index7 = tempRet0;
     break L6;
    }
    $112 = $3 + ($$1112 - $0) | 0;
    $113 = HEAP32[$5 >> 2] | 0;
    if (($112 | 0) == ($113 | 0)) $$pre$phiZ2D = $8; else {
     $$0$i$i127 = $113;
     $$07$i$i126 = $112;
     while (1) {
      $115 = $$0$i$i127 + -1 | 0;
      if ($$07$i$i126 >>> 0 >= $115 >>> 0) {
       $$pre$phiZ2D = $8;
       break L30;
      }
      $117 = HEAP8[$$07$i$i126 >> 0] | 0;
      HEAP8[$$07$i$i126 >> 0] = HEAP8[$115 >> 0] | 0;
      HEAP8[$115 >> 0] = $117;
      $$0$i$i127 = $115;
      $$07$i$i126 = $$07$i$i126 + 1 | 0;
     }
    }
   } while (0);
   $$2 = $$2115;
   while (1) {
    if ($$2 >>> 0 >= $2 >>> 0) {
     $$3 = $$2;
     break;
    }
    $155 = HEAP8[$$2 >> 0] | 0;
    if ($155 << 24 >> 24 == 46) {
     label = 47;
     break;
    }
    __THREW__ = 0;
    $169 = invoke_iii(HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $155 | 0) | 0;
    $170 = __THREW__;
    __THREW__ = 0;
    if ($170 & 1) {
     label = 15;
     break;
    }
    $172 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $172 + 1;
    HEAP8[$172 >> 0] = $169;
    $$2 = $$2 + 1 | 0;
   }
   if ((label | 0) == 15) {
    $59 = ___cxa_find_matching_catch_2() | 0;
    $lpad$phi$sink160$index = $59;
    $lpad$phi$sink160$index7 = tempRet0;
    break L6;
   }
   if ((label | 0) == 47) {
    __THREW__ = 0;
    $160 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0, $9 | 0) | 0;
    $161 = __THREW__;
    __THREW__ = 0;
    if ($161 & 1) break;
    $163 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $163 + 1;
    HEAP8[$163 >> 0] = $160;
    $$3 = $$2 + 1 | 0;
   }
   __THREW__ = 0;
   invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $$3 | 0, $2 | 0, HEAP32[$5 >> 2] | 0) | 0;
   $179 = __THREW__;
   __THREW__ = 0;
   if (!($179 & 1)) {
    $184 = (HEAP32[$5 >> 2] | 0) + ($25 - $$3) | 0;
    HEAP32[$5 >> 2] = $184;
    HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $184 : $3 + ($1 - $0) | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
    STACKTOP = sp;
    return;
   }
  } while (0);
  $65 = ___cxa_find_matching_catch_2() | 0;
  $lpad$phi$sink160$index = $65;
  $lpad$phi$sink160$index7 = tempRet0;
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 ___resumeException($lpad$phi$sink160$index | 0);
}

function __ZN3zim8FileImpl23getNamespaceBeginOffsetEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $133 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $15 = 0, $153 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $73 = 0, $8 = 0, $84 = 0, $9 = 0, $90 = 0, $94 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $$byval_copy1 = sp + 280 | 0;
 $2 = sp + 276 | 0;
 $3 = sp + 272 | 0;
 $4 = sp + 268 | 0;
 $5 = sp + 264 | 0;
 $6 = sp + 260 | 0;
 $7 = sp + 256 | 0;
 $8 = sp + 252 | 0;
 $9 = sp + 248 | 0;
 $10 = sp + 244 | 0;
 $11 = sp + 240 | 0;
 $12 = sp + 236 | 0;
 $13 = sp + 232 | 0;
 $14 = sp + 228 | 0;
 $15 = sp + 224 | 0;
 $16 = sp + 220 | 0;
 $17 = sp + 216 | 0;
 $18 = sp + 40 | 0;
 $19 = sp + 212 | 0;
 $20 = sp + 208 | 0;
 $21 = sp + 32 | 0;
 $22 = sp + 204 | 0;
 $23 = sp + 24 | 0;
 $24 = sp + 200 | 0;
 $25 = sp + 196 | 0;
 $26 = sp + 192 | 0;
 $27 = sp + 188 | 0;
 $28 = sp + 184 | 0;
 $29 = sp + 180 | 0;
 $30 = sp + 176 | 0;
 $31 = sp + 172 | 0;
 $32 = sp + 168 | 0;
 $33 = sp + 164 | 0;
 $34 = sp + 160 | 0;
 $35 = sp + 156 | 0;
 $36 = sp + 152 | 0;
 $37 = sp + 16 | 0;
 $38 = sp + 148 | 0;
 $39 = sp + 144 | 0;
 $40 = sp + 8 | 0;
 $41 = sp + 140 | 0;
 $42 = sp;
 $43 = sp + 136 | 0;
 $44 = sp + 132 | 0;
 $45 = sp + 128 | 0;
 $46 = sp + 124 | 0;
 $47 = sp + 120 | 0;
 $48 = sp + 116 | 0;
 $49 = sp + 284 | 0;
 $50 = sp + 112 | 0;
 $51 = sp + 108 | 0;
 $52 = sp + 104 | 0;
 $53 = sp + 100 | 0;
 $54 = sp + 96 | 0;
 $55 = sp + 92 | 0;
 $56 = sp + 88 | 0;
 $57 = sp + 80 | 0;
 $58 = sp + 76 | 0;
 $59 = sp + 72 | 0;
 $60 = sp + 64 | 0;
 $61 = sp + 56 | 0;
 $62 = sp + 52 | 0;
 $63 = sp + 48 | 0;
 $64 = sp + 44 | 0;
 HEAP32[$48 >> 2] = $0;
 HEAP8[$49 >> 0] = $1;
 $65 = HEAP32[$48 >> 2] | 0;
 _pthread_mutex_lock($65 + 288 | 0) | 0;
 HEAP32[$44 >> 2] = $65 + 276;
 HEAP32[$45 >> 2] = $49;
 HEAP32[$46 >> 2] = __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE4findIcEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEERKT_(HEAP32[$44 >> 2] | 0, HEAP32[$45 >> 2] | 0) | 0;
 HEAP8[$42 >> 0] = HEAP8[$46 >> 0] | 0;
 HEAP8[$42 + 1 >> 0] = HEAP8[$46 + 1 >> 0] | 0;
 HEAP8[$42 + 2 >> 0] = HEAP8[$46 + 2 >> 0] | 0;
 HEAP8[$42 + 3 >> 0] = HEAP8[$46 + 3 >> 0] | 0;
 HEAP32[$41 >> 2] = $43;
 HEAP32[HEAP32[$41 >> 2] >> 2] = HEAP32[$42 >> 2];
 HEAP32[$51 >> 2] = HEAP32[$43 >> 2];
 HEAP8[$40 >> 0] = HEAP8[$51 >> 0] | 0;
 HEAP8[$40 + 1 >> 0] = HEAP8[$51 + 1 >> 0] | 0;
 HEAP8[$40 + 2 >> 0] = HEAP8[$51 + 2 >> 0] | 0;
 HEAP8[$40 + 3 >> 0] = HEAP8[$51 + 3 >> 0] | 0;
 HEAP32[$38 >> 2] = $50;
 $73 = HEAP32[$38 >> 2] | 0;
 HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
 HEAP8[$37 >> 0] = HEAP8[$39 >> 0] | 0;
 HEAP8[$37 + 1 >> 0] = HEAP8[$39 + 1 >> 0] | 0;
 HEAP8[$37 + 2 >> 0] = HEAP8[$39 + 2 >> 0] | 0;
 HEAP8[$37 + 3 >> 0] = HEAP8[$39 + 3 >> 0] | 0;
 HEAP32[$36 >> 2] = $73;
 HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$37 >> 2];
 HEAP32[$34 >> 2] = $65 + 276;
 HEAP32[$32 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$29 >> 2] = (HEAP32[$30 >> 2] | 0) + 4;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 $84 = HEAP32[$26 >> 2] | 0;
 HEAP32[$24 >> 2] = $31;
 HEAP32[$25 >> 2] = $84;
 HEAP32[HEAP32[$24 >> 2] >> 2] = HEAP32[$25 >> 2];
 HEAP32[$35 >> 2] = HEAP32[$31 >> 2];
 HEAP8[$23 >> 0] = HEAP8[$35 >> 0] | 0;
 HEAP8[$23 + 1 >> 0] = HEAP8[$35 + 1 >> 0] | 0;
 HEAP8[$23 + 2 >> 0] = HEAP8[$35 + 2 >> 0] | 0;
 HEAP8[$23 + 3 >> 0] = HEAP8[$35 + 3 >> 0] | 0;
 HEAP32[$22 >> 2] = $33;
 HEAP32[HEAP32[$22 >> 2] >> 2] = HEAP32[$23 >> 2];
 HEAP32[$53 >> 2] = HEAP32[$33 >> 2];
 HEAP8[$21 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$21 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 HEAP8[$21 + 2 >> 0] = HEAP8[$53 + 2 >> 0] | 0;
 HEAP8[$21 + 3 >> 0] = HEAP8[$53 + 3 >> 0] | 0;
 HEAP32[$19 >> 2] = $52;
 $90 = HEAP32[$19 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP8[$18 >> 0] = HEAP8[$20 >> 0] | 0;
 HEAP8[$18 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
 HEAP8[$18 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
 HEAP8[$18 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
 HEAP32[$17 >> 2] = $90;
 HEAP32[HEAP32[$17 >> 2] >> 2] = HEAP32[$18 >> 2];
 HEAP32[$15 >> 2] = $50;
 HEAP32[$16 >> 2] = $52;
 $94 = HEAP32[$16 >> 2] | 0;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$14 >> 2] = $94;
 $96 = HEAP32[$14 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$12 >> 2] = $96;
 if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) ^ 1) {
  HEAP32[$10 >> 2] = $50;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = (HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + 16;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$47 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2];
  _pthread_mutex_unlock($65 + 288 | 0) | 0;
  $162 = HEAP32[$47 >> 2] | 0;
  STACKTOP = sp;
  return $162 | 0;
 }
 _pthread_mutex_unlock($65 + 288 | 0) | 0;
 HEAP32[$54 >> 2] = 0;
 HEAP32[$56 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv($65) | 0;
 HEAP32[$55 >> 2] = __ZNK12REAL_TYPEDEFIjEcvjEv($56) | 0;
 __ZN3zim15article_index_tC2Ej($58, 0);
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$58 >> 2];
 __ZN3zim8FileImpl9getDirentENS_15article_index_tE($57, $65, $$byval_copy1);
 while (1) {
  if (((HEAP32[$55 >> 2] | 0) - (HEAP32[$54 >> 2] | 0) | 0) >>> 0 <= 1) break;
  HEAP32[$59 >> 2] = (HEAP32[$54 >> 2] | 0) + ((((HEAP32[$55 >> 2] | 0) - (HEAP32[$54 >> 2] | 0) | 0) >>> 0) / 2 | 0);
  __ZN3zim15article_index_tC2Ej($61, HEAP32[$59 >> 2] | 0);
  __THREW__ = 0;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$61 >> 2];
  invoke_viii(26, $60 | 0, $65 | 0, $$byval_copy1 | 0);
  $128 = __THREW__;
  __THREW__ = 0;
  if ($128 & 1) {
   label = 8;
   break;
  }
  HEAP32[$3 >> 2] = $60;
  $133 = (__ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0) << 24 >> 24;
  $137 = HEAP32[$59 >> 2] | 0;
  if (($133 | 0) >= (HEAP8[$49 >> 0] | 0)) HEAP32[$55 >> 2] = $137; else HEAP32[$54 >> 2] = $137;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($60);
 }
 if ((label | 0) == 8) {
  $138 = ___cxa_find_matching_catch_2() | 0;
  $139 = tempRet0;
  HEAP32[$62 >> 2] = $138;
  HEAP32[$63 >> 2] = $139;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
  $140 = HEAP32[$62 >> 2] | 0;
  $141 = HEAP32[$63 >> 2] | 0;
  ___resumeException($140 | 0);
 }
 HEAP32[$2 >> 2] = $57;
 $145 = (__ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) << 24 >> 24;
 __ZN3zim15article_index_tC2Ej($64, ($145 | 0) < (HEAP8[$49 >> 0] | 0) ? HEAP32[$55 >> 2] | 0 : HEAP32[$54 >> 2] | 0);
 __THREW__ = 0;
 invoke_ii(95, $65 + 288 | 0) | 0;
 $153 = __THREW__;
 __THREW__ = 0;
 if ($153 & 1) {
  $138 = ___cxa_find_matching_catch_2() | 0;
  $139 = tempRet0;
  HEAP32[$62 >> 2] = $138;
  HEAP32[$63 >> 2] = $139;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
  $140 = HEAP32[$62 >> 2] | 0;
  $141 = HEAP32[$63 >> 2] | 0;
  ___resumeException($140 | 0);
 }
 __THREW__ = 0;
 $156 = invoke_iii(46, $65 + 276 | 0, $49 | 0) | 0;
 $157 = __THREW__;
 __THREW__ = 0;
 if ($157 & 1) {
  $138 = ___cxa_find_matching_catch_2() | 0;
  $139 = tempRet0;
  HEAP32[$62 >> 2] = $138;
  HEAP32[$63 >> 2] = $139;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
  $140 = HEAP32[$62 >> 2] | 0;
  $141 = HEAP32[$63 >> 2] | 0;
  ___resumeException($140 | 0);
 };
 HEAP32[$156 >> 2] = HEAP32[$64 >> 2];
 __THREW__ = 0;
 invoke_ii(92, $65 + 288 | 0) | 0;
 $160 = __THREW__;
 __THREW__ = 0;
 if ($160 & 1) {
  $138 = ___cxa_find_matching_catch_2() | 0;
  $139 = tempRet0;
  HEAP32[$62 >> 2] = $138;
  HEAP32[$63 >> 2] = $139;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
  $140 = HEAP32[$62 >> 2] | 0;
  $141 = HEAP32[$63 >> 2] | 0;
  ___resumeException($140 | 0);
 };
 HEAP32[$47 >> 2] = HEAP32[$64 >> 2];
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
 $162 = HEAP32[$47 >> 2] | 0;
 STACKTOP = sp;
 return $162 | 0;
}

function __ZL13init_resourcePKcPKhi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $101 = 0, $102 = 0, $108 = 0, $109 = 0, $11 = 0, $117 = 0, $118 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $171 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $72 = 0, $73 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $94 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy1 = sp + 416 | 0;
 $$byval_copy = sp + 412 | 0;
 $4 = sp + 408 | 0;
 $5 = sp + 404 | 0;
 $6 = sp + 400 | 0;
 $7 = sp + 396 | 0;
 $8 = sp + 392 | 0;
 $9 = sp + 388 | 0;
 $10 = sp + 384 | 0;
 $11 = sp + 8 | 0;
 $12 = sp;
 $13 = sp + 380 | 0;
 $14 = sp + 376 | 0;
 $15 = sp + 372 | 0;
 $16 = sp + 368 | 0;
 $17 = sp + 364 | 0;
 $18 = sp + 360 | 0;
 $19 = sp + 356 | 0;
 $20 = sp + 352 | 0;
 $21 = sp + 348 | 0;
 $22 = sp + 344 | 0;
 $23 = sp + 340 | 0;
 $24 = sp + 336 | 0;
 $25 = sp + 332 | 0;
 $26 = sp + 328 | 0;
 $27 = sp + 324 | 0;
 $28 = sp + 320 | 0;
 $29 = sp + 316 | 0;
 $30 = sp + 312 | 0;
 $31 = sp + 308 | 0;
 $32 = sp + 304 | 0;
 $33 = sp + 300 | 0;
 $34 = sp + 296 | 0;
 $35 = sp + 292 | 0;
 $36 = sp + 288 | 0;
 $37 = sp + 284 | 0;
 $38 = sp + 280 | 0;
 $39 = sp + 276 | 0;
 $40 = sp + 272 | 0;
 $41 = sp + 268 | 0;
 $42 = sp + 264 | 0;
 $44 = sp + 256 | 0;
 $45 = sp + 252 | 0;
 $46 = sp + 248 | 0;
 $47 = sp + 244 | 0;
 $48 = sp + 240 | 0;
 $49 = sp + 236 | 0;
 $50 = sp + 232 | 0;
 $51 = sp + 228 | 0;
 $52 = sp + 224 | 0;
 $53 = sp + 220 | 0;
 $54 = sp + 32 | 0;
 $55 = sp + 28 | 0;
 $56 = sp + 24 | 0;
 $57 = sp + 20 | 0;
 $58 = sp + 16 | 0;
 $59 = sp + 12 | 0;
 HEAP32[$50 >> 2] = $1;
 HEAP32[$51 >> 2] = $2;
 HEAP32[$52 >> 2] = $3;
 HEAP32[$53 >> 2] = _getenv(HEAP32[$50 >> 2] | 0) | 0;
 if (!(HEAP32[$53 >> 2] | 0)) {
  $64 = HEAP32[$51 >> 2] | 0;
  $65 = HEAP32[$52 >> 2] | 0;
  HEAP32[$47 >> 2] = $0;
  HEAP32[$48 >> 2] = $64;
  HEAP32[$49 >> 2] = $65;
  $66 = HEAP32[$47 >> 2] | 0;
  HEAP32[$46 >> 2] = $66;
  $67 = HEAP32[$46 >> 2] | 0;
  HEAP32[$45 >> 2] = $67;
  $68 = HEAP32[$45 >> 2] | 0;
  HEAP32[$68 >> 2] = 0;
  HEAP32[$68 + 4 >> 2] = 0;
  HEAP32[$68 + 8 >> 2] = 0;
  HEAP32[$44 >> 2] = $67;
  HEAP32[sp + 260 >> 2] = HEAP32[$44 >> 2];
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($66, HEAP32[$48 >> 2] | 0, HEAP32[$49 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 $72 = HEAP32[$53 >> 2] | 0;
 HEAP32[$38 >> 2] = $54;
 HEAP32[$39 >> 2] = $72;
 HEAP32[$40 >> 2] = 8;
 $73 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = $73 + 108;
 $75 = HEAP32[$37 >> 2] | 0;
 HEAP32[$36 >> 2] = $75;
 HEAP32[HEAP32[$36 >> 2] >> 2] = 44548;
 HEAP32[$75 >> 2] = 44532;
 HEAP32[$73 >> 2] = 42916;
 HEAP32[$73 + 108 >> 2] = 42936;
 HEAP32[$33 >> 2] = $73;
 HEAP32[$34 >> 2] = 42948;
 HEAP32[$35 >> 2] = $73 + 8;
 $80 = HEAP32[$33 >> 2] | 0;
 $81 = HEAP32[$34 >> 2] | 0;
 HEAP32[$80 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$80 + (HEAP32[(HEAP32[$80 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$81 + 4 >> 2];
 HEAP32[$80 + 4 >> 2] = 0;
 $94 = HEAP32[$35 >> 2] | 0;
 HEAP32[$31 >> 2] = $80 + (HEAP32[(HEAP32[$80 >> 2] | 0) + -12 >> 2] | 0);
 HEAP32[$32 >> 2] = $94;
 $95 = HEAP32[$31 >> 2] | 0;
 __ZNSt3__28ios_base4initEPv($95, HEAP32[$32 >> 2] | 0);
 HEAP32[$95 + 72 >> 2] = 0;
 HEAP32[$95 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$73 >> 2] = 42916;
 HEAP32[$73 + 108 >> 2] = 42936;
 $101 = $73 + 8 | 0;
 __THREW__ = 0;
 invoke_vi(187, $101 | 0);
 $102 = __THREW__;
 __THREW__ = 0;
 if ($102 & 1) {
  $125 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$41 >> 2] = $125;
  HEAP32[$42 >> 2] = tempRet0;
  $129 = 42948;
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($73, $129);
  $130 = $73 + 108 | 0;
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($130);
  $131 = HEAP32[$41 >> 2] | 0;
  $132 = HEAP32[$42 >> 2] | 0;
  ___resumeException($131 | 0);
 }
 __THREW__ = 0;
 $108 = invoke_iiii(41, $73 + 8 | 0, HEAP32[$39 >> 2] | 0, HEAP32[$40 >> 2] | 8 | 0) | 0;
 $109 = __THREW__;
 __THREW__ = 0;
 do if (!($109 & 1)) {
  if (!$108) {
   HEAP32[$29 >> 2] = $73 + (HEAP32[(HEAP32[$73 >> 2] | 0) + -12 >> 2] | 0);
   HEAP32[$30 >> 2] = 4;
   $117 = HEAP32[$30 >> 2] | 0;
   HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
   HEAP32[$28 >> 2] = $117;
   $118 = HEAP32[$27 >> 2] | 0;
   __THREW__ = 0;
   invoke_vii(46, $118 | 0, HEAP32[$118 + 16 >> 2] | HEAP32[$28 >> 2] | 0);
   $123 = __THREW__;
   __THREW__ = 0;
   if ($123 & 1) break;
  }
  HEAP32[$26 >> 2] = $54 + (HEAP32[(HEAP32[$54 >> 2] | 0) + -12 >> 2] | 0);
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  do if (!(HEAP32[(HEAP32[$25 >> 2] | 0) + 16 >> 2] | 0)) {
   HEAP32[$16 >> 2] = $58;
   HEAP32[$17 >> 2] = $54;
   $156 = HEAP32[$16 >> 2] | 0;
   $157 = HEAP32[$17 >> 2] | 0;
   HEAP32[$15 >> 2] = $157 + (HEAP32[(HEAP32[$157 >> 2] | 0) + -12 >> 2] | 0);
   HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$156 >> 2] = HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2];
   HEAP32[$13 >> 2] = $59;
   HEAP32[HEAP32[$13 >> 2] >> 2] = 0;
   HEAP8[$11 >> 0] = HEAP8[$59 >> 0] | 0;
   HEAP8[$11 + 1 >> 0] = HEAP8[$59 + 1 >> 0] | 0;
   HEAP8[$11 + 2 >> 0] = HEAP8[$59 + 2 >> 0] | 0;
   HEAP8[$11 + 3 >> 0] = HEAP8[$59 + 3 >> 0] | 0;
   HEAP8[$12 >> 0] = HEAP8[$58 >> 0] | 0;
   HEAP8[$12 + 1 >> 0] = HEAP8[$58 + 1 >> 0] | 0;
   HEAP8[$12 + 2 >> 0] = HEAP8[$58 + 2 >> 0] | 0;
   HEAP8[$12 + 3 >> 0] = HEAP8[$58 + 3 >> 0] | 0;
   HEAP32[$8 >> 2] = $0;
   $167 = HEAP32[$8 >> 2] | 0;
   HEAP32[$7 >> 2] = $167;
   $168 = HEAP32[$7 >> 2] | 0;
   HEAP32[$6 >> 2] = $168;
   $169 = HEAP32[$6 >> 2] | 0;
   HEAP32[$169 >> 2] = 0;
   HEAP32[$169 + 4 >> 2] = 0;
   HEAP32[$169 + 8 >> 2] = 0;
   HEAP32[$5 >> 2] = $168;
   HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$9 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   __THREW__ = 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$10 >> 2];
   invoke_viii(9, $167 | 0, $$byval_copy | 0, $$byval_copy1 | 0);
   $171 = __THREW__;
   __THREW__ = 0;
   if ($171 & 1) {
    $152 = ___cxa_find_matching_catch_2() | 0;
    $153 = tempRet0;
    HEAP32[$55 >> 2] = $152;
    HEAP32[$56 >> 2] = $153;
    __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($54);
    $154 = HEAP32[$55 >> 2] | 0;
    $155 = HEAP32[$56 >> 2] | 0;
    ___resumeException($154 | 0);
   } else {
    HEAP32[$57 >> 2] = 1;
    break;
   }
  } else {
   $142 = HEAP32[$51 >> 2] | 0;
   $143 = HEAP32[$52 >> 2] | 0;
   HEAP32[$22 >> 2] = $0;
   HEAP32[$23 >> 2] = $142;
   HEAP32[$24 >> 2] = $143;
   $144 = HEAP32[$22 >> 2] | 0;
   HEAP32[$21 >> 2] = $144;
   $145 = HEAP32[$21 >> 2] | 0;
   HEAP32[$20 >> 2] = $145;
   $146 = HEAP32[$20 >> 2] | 0;
   HEAP32[$146 >> 2] = 0;
   HEAP32[$146 + 4 >> 2] = 0;
   HEAP32[$146 + 8 >> 2] = 0;
   HEAP32[$19 >> 2] = $145;
   HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
   __THREW__ = 0;
   invoke_viii(8, $144 | 0, HEAP32[$23 >> 2] | 0, HEAP32[$24 >> 2] | 0);
   $150 = __THREW__;
   __THREW__ = 0;
   if ($150 & 1) {
    $152 = ___cxa_find_matching_catch_2() | 0;
    $153 = tempRet0;
    HEAP32[$55 >> 2] = $152;
    HEAP32[$56 >> 2] = $153;
    __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($54);
    $154 = HEAP32[$55 >> 2] | 0;
    $155 = HEAP32[$56 >> 2] | 0;
    ___resumeException($154 | 0);
   } else {
    HEAP32[$57 >> 2] = 1;
    break;
   }
  } while (0);
  __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($54);
  STACKTOP = sp;
  return;
 } while (0);
 $127 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$41 >> 2] = $127;
 HEAP32[$42 >> 2] = tempRet0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($101);
 $129 = 42948;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($73, $129);
 $130 = $73 + 108 | 0;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($130);
 $131 = HEAP32[$41 >> 2] | 0;
 $132 = HEAP32[$42 >> 2] | 0;
 ___resumeException($131 | 0);
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE16__construct_nodeIJNS_4pairIKS3_S9_EEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINSF_ISP_EEEEEEDpOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $167 = 0, $17 = 0, $171 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $3 = sp + 344 | 0;
 $4 = sp + 340 | 0;
 $5 = sp + 336 | 0;
 $6 = sp + 332 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 320 | 0;
 $10 = sp + 316 | 0;
 $11 = sp + 312 | 0;
 $12 = sp + 308 | 0;
 $13 = sp + 304 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 300 | 0;
 $16 = sp + 296 | 0;
 $17 = sp + 292 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 351 | 0;
 $20 = sp + 284 | 0;
 $21 = sp + 280 | 0;
 $22 = sp + 276 | 0;
 $23 = sp + 272 | 0;
 $24 = sp + 268 | 0;
 $25 = sp + 264 | 0;
 $26 = sp + 260 | 0;
 $27 = sp + 256 | 0;
 $28 = sp + 252 | 0;
 $29 = sp + 248 | 0;
 $30 = sp + 244 | 0;
 $31 = sp + 240 | 0;
 $32 = sp + 236 | 0;
 $33 = sp + 232 | 0;
 $34 = sp + 228 | 0;
 $35 = sp + 224 | 0;
 $36 = sp + 220 | 0;
 $37 = sp + 216 | 0;
 $38 = sp + 212 | 0;
 $39 = sp + 208 | 0;
 $40 = sp + 204 | 0;
 $41 = sp + 200 | 0;
 $42 = sp + 196 | 0;
 $43 = sp + 350 | 0;
 $44 = sp + 192 | 0;
 $45 = sp + 188 | 0;
 $46 = sp + 184 | 0;
 $47 = sp + 180 | 0;
 $48 = sp + 176 | 0;
 $49 = sp + 172 | 0;
 $51 = sp + 164 | 0;
 $52 = sp + 160 | 0;
 $54 = sp + 152 | 0;
 $55 = sp + 148 | 0;
 $56 = sp + 144 | 0;
 $57 = sp + 140 | 0;
 $58 = sp + 136 | 0;
 $59 = sp + 132 | 0;
 $60 = sp + 128 | 0;
 $61 = sp + 124 | 0;
 $62 = sp + 120 | 0;
 $63 = sp + 116 | 0;
 $64 = sp + 112 | 0;
 $65 = sp + 108 | 0;
 $66 = sp + 104 | 0;
 $67 = sp + 100 | 0;
 $68 = sp + 96 | 0;
 $69 = sp;
 $70 = sp + 92 | 0;
 $71 = sp + 88 | 0;
 $72 = sp + 349 | 0;
 $73 = sp + 84 | 0;
 $74 = sp + 80 | 0;
 $75 = sp + 76 | 0;
 $76 = sp + 72 | 0;
 $77 = sp + 68 | 0;
 $78 = sp + 64 | 0;
 $79 = sp + 60 | 0;
 $80 = sp + 56 | 0;
 $81 = sp + 52 | 0;
 $82 = sp + 48 | 0;
 $83 = sp + 44 | 0;
 $84 = sp + 40 | 0;
 $85 = sp + 36 | 0;
 $86 = sp + 32 | 0;
 $87 = sp + 28 | 0;
 $88 = sp + 24 | 0;
 $89 = sp + 348 | 0;
 $90 = sp + 16 | 0;
 HEAP32[$86 >> 2] = $1;
 HEAP32[$87 >> 2] = $2;
 HEAP32[$85 >> 2] = HEAP32[$86 >> 2];
 HEAP32[$84 >> 2] = (HEAP32[$85 >> 2] | 0) + 4;
 HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
 HEAP32[$88 >> 2] = HEAP32[$83 >> 2];
 HEAP8[$89 >> 0] = 0;
 HEAP32[$54 >> 2] = HEAP32[$88 >> 2];
 HEAP32[$55 >> 2] = 1;
 $98 = HEAP32[$55 >> 2] | 0;
 HEAP32[$51 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$52 >> 2] = $98;
 HEAP32[sp + 156 >> 2] = 0;
 $100 = HEAP32[$52 >> 2] | 0;
 HEAP32[sp + 168 >> 2] = HEAP32[$51 >> 2];
 if ($100 >>> 0 > 119304647) {
  HEAP32[$46 >> 2] = 55296;
  $102 = ___cxa_allocate_exception(8) | 0;
  $103 = HEAP32[$46 >> 2] | 0;
  HEAP32[$44 >> 2] = $102;
  HEAP32[$45 >> 2] = $103;
  $104 = HEAP32[$44 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $104 | 0, HEAP32[$45 >> 2] | 0);
  $106 = __THREW__;
  __THREW__ = 0;
  if ($106 & 1) {
   $108 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$47 >> 2] = $108;
   HEAP32[$48 >> 2] = tempRet0;
   ___cxa_free_exception($102 | 0);
   ___resumeException(HEAP32[$47 >> 2] | 0);
  } else {
   HEAP32[$104 >> 2] = 48176;
   ___cxa_throw($102 | 0, 42808, 176);
  }
 }
 HEAP32[$49 >> 2] = (HEAP32[$52 >> 2] | 0) * 36;
 $115 = __Znwm(HEAP32[$49 >> 2] | 0) | 0;
 $116 = HEAP32[$88 >> 2] | 0;
 HEAP32[$41 >> 2] = $90;
 HEAP32[$42 >> 2] = $116;
 HEAP8[$43 >> 0] = 0;
 $117 = HEAP32[$41 >> 2] | 0;
 HEAP32[$117 >> 2] = HEAP32[$42 >> 2];
 HEAP8[$117 + 4 >> 0] = HEAP8[$43 >> 0] & 1;
 HEAP32[$38 >> 2] = $0;
 HEAP32[$39 >> 2] = $115;
 HEAP32[$40 >> 2] = $90;
 $123 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$40 >> 2];
 $125 = HEAP32[$37 >> 2] | 0;
 HEAP32[$34 >> 2] = $123;
 HEAP32[$35 >> 2] = $39;
 HEAP32[$36 >> 2] = $125;
 $126 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
 $128 = HEAP32[$33 >> 2] | 0;
 HEAP32[$27 >> 2] = $126;
 HEAP32[$28 >> 2] = $128;
 $129 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$129 >> 2] = HEAP32[HEAP32[$26 >> 2] >> 2];
 HEAP32[$29 >> 2] = HEAP32[$36 >> 2];
 $135 = HEAP32[$29 >> 2] | 0;
 HEAP32[$31 >> 2] = $126 + 4;
 HEAP32[$32 >> 2] = $135;
 $136 = HEAP32[$31 >> 2] | 0;
 HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
 $138 = HEAP32[$30 >> 2] | 0;
 HEAP32[$136 >> 2] = HEAP32[$138 >> 2];
 HEAP32[$136 + 4 >> 2] = HEAP32[$138 + 4 >> 2];
 $139 = HEAP32[$88 >> 2] | 0;
 HEAP32[$25 >> 2] = $0;
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$22 >> 2] = (HEAP32[HEAP32[$23 >> 2] >> 2] | 0) + 16;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 $146 = HEAP32[$21 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$87 >> 2];
 $148 = HEAP32[$20 >> 2] | 0;
 HEAP32[$16 >> 2] = $139;
 HEAP32[$17 >> 2] = $146;
 HEAP32[$18 >> 2] = $148;
 $149 = HEAP32[$16 >> 2] | 0;
 $150 = HEAP32[$17 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
 $152 = HEAP32[$15 >> 2] | 0;
 HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
 HEAP32[$11 >> 2] = $149;
 HEAP32[$12 >> 2] = $150;
 HEAP32[$13 >> 2] = $152;
 $153 = HEAP32[$11 >> 2] | 0;
 $154 = HEAP32[$12 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
 $156 = HEAP32[$10 >> 2] | 0;
 HEAP32[$7 >> 2] = $153;
 HEAP32[$8 >> 2] = $154;
 HEAP32[$9 >> 2] = $156;
 $157 = HEAP32[$8 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEEC2EOSA_($157, HEAP32[$6 >> 2] | 0);
 HEAP32[$5 >> 2] = $0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[$89 >> 0] = 1;
 if (HEAP8[$89 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$82 >> 2] = $0;
 HEAP32[$79 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$80 >> 2] = 0;
 $167 = HEAP32[$79 >> 2] | 0;
 HEAP32[$78 >> 2] = $167;
 HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
 HEAP32[$81 >> 2] = HEAP32[HEAP32[$77 >> 2] >> 2];
 $171 = HEAP32[$80 >> 2] | 0;
 HEAP32[$59 >> 2] = $167;
 HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
 HEAP32[HEAP32[$58 >> 2] >> 2] = $171;
 if (!(HEAP32[$81 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$57 >> 2] = $167;
 HEAP32[$56 >> 2] = (HEAP32[$57 >> 2] | 0) + 4;
 $179 = HEAP32[$81 >> 2] | 0;
 HEAP32[$75 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$76 >> 2] = $179;
 $180 = HEAP32[$75 >> 2] | 0;
 if (HEAP8[$180 + 4 >> 0] & 1) {
  $184 = HEAP32[$180 >> 2] | 0;
  HEAP32[$74 >> 2] = (HEAP32[$76 >> 2] | 0) + 16;
  HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
  $188 = HEAP32[$73 >> 2] | 0;
  HEAP32[$70 >> 2] = $184;
  HEAP32[$71 >> 2] = $188;
  $189 = HEAP32[$70 >> 2] | 0;
  $190 = HEAP32[$71 >> 2] | 0;
  HEAP8[$69 >> 0] = HEAP8[$72 >> 0] | 0;
  HEAP32[$67 >> 2] = $189;
  HEAP32[$68 >> 2] = $190;
  __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev(HEAP32[$68 >> 2] | 0);
 }
 if (!(HEAP32[$76 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $195 = HEAP32[$76 >> 2] | 0;
 HEAP32[$64 >> 2] = HEAP32[$180 >> 2];
 HEAP32[$65 >> 2] = $195;
 HEAP32[$66 >> 2] = 1;
 $197 = HEAP32[$65 >> 2] | 0;
 $198 = HEAP32[$66 >> 2] | 0;
 HEAP32[$61 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$62 >> 2] = $197;
 HEAP32[$63 >> 2] = $198;
 HEAP32[$60 >> 2] = HEAP32[$62 >> 2];
 __ZdlPv(HEAP32[$60 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE16__construct_nodeIJNS_4pairIKS3_SA_EEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINSG_ISQ_EEEEEEDpOT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $167 = 0, $17 = 0, $171 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $195 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $3 = sp + 344 | 0;
 $4 = sp + 340 | 0;
 $5 = sp + 336 | 0;
 $6 = sp + 332 | 0;
 $7 = sp + 328 | 0;
 $8 = sp + 324 | 0;
 $9 = sp + 320 | 0;
 $10 = sp + 316 | 0;
 $11 = sp + 312 | 0;
 $12 = sp + 308 | 0;
 $13 = sp + 304 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 300 | 0;
 $16 = sp + 296 | 0;
 $17 = sp + 292 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 351 | 0;
 $20 = sp + 284 | 0;
 $21 = sp + 280 | 0;
 $22 = sp + 276 | 0;
 $23 = sp + 272 | 0;
 $24 = sp + 268 | 0;
 $25 = sp + 264 | 0;
 $26 = sp + 260 | 0;
 $27 = sp + 256 | 0;
 $28 = sp + 252 | 0;
 $29 = sp + 248 | 0;
 $30 = sp + 244 | 0;
 $31 = sp + 240 | 0;
 $32 = sp + 236 | 0;
 $33 = sp + 232 | 0;
 $34 = sp + 228 | 0;
 $35 = sp + 224 | 0;
 $36 = sp + 220 | 0;
 $37 = sp + 216 | 0;
 $38 = sp + 212 | 0;
 $39 = sp + 208 | 0;
 $40 = sp + 204 | 0;
 $41 = sp + 200 | 0;
 $42 = sp + 196 | 0;
 $43 = sp + 350 | 0;
 $44 = sp + 192 | 0;
 $45 = sp + 188 | 0;
 $46 = sp + 184 | 0;
 $47 = sp + 180 | 0;
 $48 = sp + 176 | 0;
 $49 = sp + 172 | 0;
 $51 = sp + 164 | 0;
 $52 = sp + 160 | 0;
 $54 = sp + 152 | 0;
 $55 = sp + 148 | 0;
 $56 = sp + 144 | 0;
 $57 = sp + 140 | 0;
 $58 = sp + 136 | 0;
 $59 = sp + 132 | 0;
 $60 = sp + 128 | 0;
 $61 = sp + 124 | 0;
 $62 = sp + 120 | 0;
 $63 = sp + 116 | 0;
 $64 = sp + 112 | 0;
 $65 = sp + 108 | 0;
 $66 = sp + 104 | 0;
 $67 = sp + 100 | 0;
 $68 = sp + 96 | 0;
 $69 = sp;
 $70 = sp + 92 | 0;
 $71 = sp + 88 | 0;
 $72 = sp + 349 | 0;
 $73 = sp + 84 | 0;
 $74 = sp + 80 | 0;
 $75 = sp + 76 | 0;
 $76 = sp + 72 | 0;
 $77 = sp + 68 | 0;
 $78 = sp + 64 | 0;
 $79 = sp + 60 | 0;
 $80 = sp + 56 | 0;
 $81 = sp + 52 | 0;
 $82 = sp + 48 | 0;
 $83 = sp + 44 | 0;
 $84 = sp + 40 | 0;
 $85 = sp + 36 | 0;
 $86 = sp + 32 | 0;
 $87 = sp + 28 | 0;
 $88 = sp + 24 | 0;
 $89 = sp + 348 | 0;
 $90 = sp + 16 | 0;
 HEAP32[$86 >> 2] = $1;
 HEAP32[$87 >> 2] = $2;
 HEAP32[$85 >> 2] = HEAP32[$86 >> 2];
 HEAP32[$84 >> 2] = (HEAP32[$85 >> 2] | 0) + 4;
 HEAP32[$83 >> 2] = HEAP32[$84 >> 2];
 HEAP32[$88 >> 2] = HEAP32[$83 >> 2];
 HEAP8[$89 >> 0] = 0;
 HEAP32[$54 >> 2] = HEAP32[$88 >> 2];
 HEAP32[$55 >> 2] = 1;
 $98 = HEAP32[$55 >> 2] | 0;
 HEAP32[$51 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$52 >> 2] = $98;
 HEAP32[sp + 156 >> 2] = 0;
 $100 = HEAP32[$52 >> 2] | 0;
 HEAP32[sp + 168 >> 2] = HEAP32[$51 >> 2];
 if ($100 >>> 0 > 119304647) {
  HEAP32[$46 >> 2] = 55296;
  $102 = ___cxa_allocate_exception(8) | 0;
  $103 = HEAP32[$46 >> 2] | 0;
  HEAP32[$44 >> 2] = $102;
  HEAP32[$45 >> 2] = $103;
  $104 = HEAP32[$44 >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(49, $104 | 0, HEAP32[$45 >> 2] | 0);
  $106 = __THREW__;
  __THREW__ = 0;
  if ($106 & 1) {
   $108 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$47 >> 2] = $108;
   HEAP32[$48 >> 2] = tempRet0;
   ___cxa_free_exception($102 | 0);
   ___resumeException(HEAP32[$47 >> 2] | 0);
  } else {
   HEAP32[$104 >> 2] = 48176;
   ___cxa_throw($102 | 0, 42808, 176);
  }
 }
 HEAP32[$49 >> 2] = (HEAP32[$52 >> 2] | 0) * 36;
 $115 = __Znwm(HEAP32[$49 >> 2] | 0) | 0;
 $116 = HEAP32[$88 >> 2] | 0;
 HEAP32[$41 >> 2] = $90;
 HEAP32[$42 >> 2] = $116;
 HEAP8[$43 >> 0] = 0;
 $117 = HEAP32[$41 >> 2] | 0;
 HEAP32[$117 >> 2] = HEAP32[$42 >> 2];
 HEAP8[$117 + 4 >> 0] = HEAP8[$43 >> 0] & 1;
 HEAP32[$38 >> 2] = $0;
 HEAP32[$39 >> 2] = $115;
 HEAP32[$40 >> 2] = $90;
 $123 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$40 >> 2];
 $125 = HEAP32[$37 >> 2] | 0;
 HEAP32[$34 >> 2] = $123;
 HEAP32[$35 >> 2] = $39;
 HEAP32[$36 >> 2] = $125;
 $126 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
 $128 = HEAP32[$33 >> 2] | 0;
 HEAP32[$27 >> 2] = $126;
 HEAP32[$28 >> 2] = $128;
 $129 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$129 >> 2] = HEAP32[HEAP32[$26 >> 2] >> 2];
 HEAP32[$29 >> 2] = HEAP32[$36 >> 2];
 $135 = HEAP32[$29 >> 2] | 0;
 HEAP32[$31 >> 2] = $126 + 4;
 HEAP32[$32 >> 2] = $135;
 $136 = HEAP32[$31 >> 2] | 0;
 HEAP32[$30 >> 2] = HEAP32[$32 >> 2];
 $138 = HEAP32[$30 >> 2] | 0;
 HEAP32[$136 >> 2] = HEAP32[$138 >> 2];
 HEAP32[$136 + 4 >> 2] = HEAP32[$138 + 4 >> 2];
 $139 = HEAP32[$88 >> 2] | 0;
 HEAP32[$25 >> 2] = $0;
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$22 >> 2] = (HEAP32[HEAP32[$23 >> 2] >> 2] | 0) + 16;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 $146 = HEAP32[$21 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$87 >> 2];
 $148 = HEAP32[$20 >> 2] | 0;
 HEAP32[$16 >> 2] = $139;
 HEAP32[$17 >> 2] = $146;
 HEAP32[$18 >> 2] = $148;
 $149 = HEAP32[$16 >> 2] | 0;
 $150 = HEAP32[$17 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
 $152 = HEAP32[$15 >> 2] | 0;
 HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
 HEAP32[$11 >> 2] = $149;
 HEAP32[$12 >> 2] = $150;
 HEAP32[$13 >> 2] = $152;
 $153 = HEAP32[$11 >> 2] | 0;
 $154 = HEAP32[$12 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
 $156 = HEAP32[$10 >> 2] | 0;
 HEAP32[$7 >> 2] = $153;
 HEAP32[$8 >> 2] = $154;
 HEAP32[$9 >> 2] = $156;
 $157 = HEAP32[$8 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEEC2EOSB_($157, HEAP32[$6 >> 2] | 0);
 HEAP32[$5 >> 2] = $0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
 HEAP8[(HEAP32[$3 >> 2] | 0) + 4 >> 0] = 1;
 HEAP8[$89 >> 0] = 1;
 if (HEAP8[$89 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$82 >> 2] = $0;
 HEAP32[$79 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$80 >> 2] = 0;
 $167 = HEAP32[$79 >> 2] | 0;
 HEAP32[$78 >> 2] = $167;
 HEAP32[$77 >> 2] = HEAP32[$78 >> 2];
 HEAP32[$81 >> 2] = HEAP32[HEAP32[$77 >> 2] >> 2];
 $171 = HEAP32[$80 >> 2] | 0;
 HEAP32[$59 >> 2] = $167;
 HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
 HEAP32[HEAP32[$58 >> 2] >> 2] = $171;
 if (!(HEAP32[$81 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$57 >> 2] = $167;
 HEAP32[$56 >> 2] = (HEAP32[$57 >> 2] | 0) + 4;
 $179 = HEAP32[$81 >> 2] | 0;
 HEAP32[$75 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$76 >> 2] = $179;
 $180 = HEAP32[$75 >> 2] | 0;
 if (HEAP8[$180 + 4 >> 0] & 1) {
  $184 = HEAP32[$180 >> 2] | 0;
  HEAP32[$74 >> 2] = (HEAP32[$76 >> 2] | 0) + 16;
  HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
  $188 = HEAP32[$73 >> 2] | 0;
  HEAP32[$70 >> 2] = $184;
  HEAP32[$71 >> 2] = $188;
  $189 = HEAP32[$70 >> 2] | 0;
  $190 = HEAP32[$71 >> 2] | 0;
  HEAP8[$69 >> 0] = HEAP8[$72 >> 0] | 0;
  HEAP32[$67 >> 2] = $189;
  HEAP32[$68 >> 2] = $190;
  __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev(HEAP32[$68 >> 2] | 0);
 }
 if (!(HEAP32[$76 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $195 = HEAP32[$76 >> 2] | 0;
 HEAP32[$64 >> 2] = HEAP32[$180 >> 2];
 HEAP32[$65 >> 2] = $195;
 HEAP32[$66 >> 2] = 1;
 $197 = HEAP32[$65 >> 2] | 0;
 $198 = HEAP32[$66 >> 2] | 0;
 HEAP32[$61 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$62 >> 2] = $197;
 HEAP32[$63 >> 2] = $198;
 HEAP32[$60 >> 2] = HEAP32[$62 >> 2];
 __ZdlPv(HEAP32[$60 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE10_getOldestEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $110 = 0, $12 = 0, $122 = 0, $13 = 0, $132 = 0, $14 = 0, $146 = 0, $15 = 0, $153 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $22 = 0, $222 = 0, $23 = 0, $234 = 0, $24 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 $2 = sp + 348 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 344 | 0;
 $5 = sp + 340 | 0;
 $6 = sp + 336 | 0;
 $7 = sp + 332 | 0;
 $8 = sp + 328 | 0;
 $9 = sp + 324 | 0;
 $10 = sp + 320 | 0;
 $11 = sp + 316 | 0;
 $12 = sp + 312 | 0;
 $13 = sp + 308 | 0;
 $14 = sp + 304 | 0;
 $15 = sp + 300 | 0;
 $16 = sp + 296 | 0;
 $17 = sp + 292 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 284 | 0;
 $20 = sp + 8 | 0;
 $21 = sp + 280 | 0;
 $22 = sp + 276 | 0;
 $23 = sp + 272 | 0;
 $24 = sp + 268 | 0;
 $25 = sp + 264 | 0;
 $26 = sp + 260 | 0;
 $27 = sp + 256 | 0;
 $28 = sp + 252 | 0;
 $29 = sp + 248 | 0;
 $30 = sp + 244 | 0;
 $31 = sp + 240 | 0;
 $32 = sp + 236 | 0;
 $33 = sp + 232 | 0;
 $34 = sp + 228 | 0;
 $35 = sp + 224 | 0;
 $36 = sp + 220 | 0;
 $37 = sp + 216 | 0;
 $38 = sp + 212 | 0;
 $39 = sp + 208 | 0;
 $40 = sp + 204 | 0;
 $41 = sp + 200 | 0;
 $42 = sp + 196 | 0;
 $43 = sp + 192 | 0;
 $44 = sp + 188 | 0;
 $45 = sp + 184 | 0;
 $46 = sp + 180 | 0;
 $47 = sp + 176 | 0;
 $48 = sp + 172 | 0;
 $49 = sp + 168 | 0;
 $50 = sp + 164 | 0;
 $51 = sp + 160 | 0;
 $52 = sp + 156 | 0;
 $53 = sp + 152 | 0;
 $54 = sp + 148 | 0;
 $55 = sp + 144 | 0;
 $56 = sp + 140 | 0;
 $57 = sp + 136 | 0;
 $58 = sp + 132 | 0;
 $59 = sp + 128 | 0;
 $60 = sp + 124 | 0;
 $61 = sp + 120 | 0;
 $62 = sp + 116 | 0;
 $63 = sp + 112 | 0;
 $64 = sp + 108 | 0;
 $65 = sp + 104 | 0;
 $66 = sp + 100 | 0;
 $67 = sp + 96 | 0;
 $68 = sp + 92 | 0;
 $69 = sp + 88 | 0;
 $70 = sp + 84 | 0;
 $71 = sp + 80 | 0;
 $72 = sp + 76 | 0;
 $73 = sp + 72 | 0;
 $74 = sp + 68 | 0;
 $75 = sp;
 $76 = sp + 64 | 0;
 $77 = sp + 60 | 0;
 $78 = sp + 56 | 0;
 $79 = sp + 52 | 0;
 $80 = sp + 48 | 0;
 $81 = sp + 44 | 0;
 $82 = sp + 40 | 0;
 $83 = sp + 36 | 0;
 $84 = sp + 32 | 0;
 $85 = sp + 28 | 0;
 $86 = sp + 352 | 0;
 $87 = sp + 24 | 0;
 $88 = sp + 20 | 0;
 HEAP32[$85 >> 2] = $0;
 HEAP8[$86 >> 0] = $1 & 1;
 $90 = HEAP32[$85 >> 2] | 0;
 HEAP32[$82 >> 2] = $90;
 HEAP32[$80 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$78 >> 2] = HEAP32[$80 >> 2];
 $94 = HEAP32[HEAP32[$78 >> 2] >> 2] | 0;
 HEAP32[$76 >> 2] = $79;
 HEAP32[$77 >> 2] = $94;
 HEAP32[HEAP32[$76 >> 2] >> 2] = HEAP32[$77 >> 2];
 HEAP32[$83 >> 2] = HEAP32[$79 >> 2];
 HEAP8[$75 >> 0] = HEAP8[$83 >> 0] | 0;
 HEAP8[$75 + 1 >> 0] = HEAP8[$83 + 1 >> 0] | 0;
 HEAP8[$75 + 2 >> 0] = HEAP8[$83 + 2 >> 0] | 0;
 HEAP8[$75 + 3 >> 0] = HEAP8[$83 + 3 >> 0] | 0;
 HEAP32[$74 >> 2] = $81;
 HEAP32[HEAP32[$74 >> 2] >> 2] = HEAP32[$75 >> 2];
 HEAP32[$84 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$10 >> 2] = $90;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
 $103 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0;
 HEAP32[$4 >> 2] = $7;
 HEAP32[$5 >> 2] = $103;
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
 HEAP8[$3 >> 0] = HEAP8[$11 >> 0] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
 HEAP8[$3 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
 HEAP32[$2 >> 2] = $9;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 HEAP32[$87 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$18 >> 2] = $87;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 $110 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$110 >> 2];
 if (HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$14 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2];
  while (1) {
   $122 = HEAP32[$14 >> 2] | 0;
   if (!(HEAP32[HEAP32[$14 >> 2] >> 2] | 0)) break;
   HEAP32[$14 >> 2] = HEAP32[$122 >> 2];
  }
  HEAP32[$15 >> 2] = $122;
 } else {
  while (1) {
   HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
   $132 = HEAP32[$16 >> 2] | 0;
   if (!((HEAP32[$13 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
   HEAP32[$12 >> 2] = $132;
   HEAP32[$16 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$15 >> 2] = HEAP32[$132 + 8 >> 2];
 }
 HEAP32[$110 >> 2] = HEAP32[$15 >> 2];
 while (1) {
  HEAP32[$31 >> 2] = $90;
  HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  $146 = HEAP32[$23 >> 2] | 0;
  HEAP32[$21 >> 2] = $28;
  HEAP32[$22 >> 2] = $146;
  HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[$22 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$28 >> 2];
  HEAP8[$20 >> 0] = HEAP8[$32 >> 0] | 0;
  HEAP8[$20 + 1 >> 0] = HEAP8[$32 + 1 >> 0] | 0;
  HEAP8[$20 + 2 >> 0] = HEAP8[$32 + 2 >> 0] | 0;
  HEAP8[$20 + 3 >> 0] = HEAP8[$32 + 3 >> 0] | 0;
  HEAP32[$19 >> 2] = $30;
  HEAP32[HEAP32[$19 >> 2] >> 2] = HEAP32[$20 >> 2];
  HEAP32[$88 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$37 >> 2] = $87;
  HEAP32[$38 >> 2] = $88;
  $153 = HEAP32[$38 >> 2] | 0;
  HEAP32[$35 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$36 >> 2] = $153;
  $155 = HEAP32[$36 >> 2] | 0;
  HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$34 >> 2] = $155;
  if (!((HEAP32[HEAP32[$33 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$34 >> 2] >> 2] | 0) ^ 1)) break;
  HEAP32[$45 >> 2] = $87;
  HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
  HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
  HEAP32[$42 >> 2] = (HEAP32[HEAP32[$43 >> 2] >> 2] | 0) + 16;
  HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
  do if ((HEAP8[(HEAP32[$39 >> 2] | 0) + 4 >> 0] & 1 | 0) == (HEAP8[$86 >> 0] & 1 | 0)) {
   HEAP32[$52 >> 2] = $84;
   HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
   HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
   HEAP32[$49 >> 2] = (HEAP32[HEAP32[$50 >> 2] >> 2] | 0) + 16;
   HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
   HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
   if ((HEAP8[(HEAP32[$46 >> 2] | 0) + 4 >> 0] & 1 | 0) == (HEAP8[$86 >> 0] & 1 | 0)) {
    HEAP32[$59 >> 2] = $87;
    HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
    HEAP32[$56 >> 2] = (HEAP32[HEAP32[$57 >> 2] >> 2] | 0) + 16;
    HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
    HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
    HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
    $207 = HEAP32[(HEAP32[$53 >> 2] | 0) + 4 + 4 >> 2] | 0;
    HEAP32[$66 >> 2] = $84;
    HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
    HEAP32[$63 >> 2] = (HEAP32[HEAP32[$64 >> 2] >> 2] | 0) + 16;
    HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
    HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
    HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
    if ($207 >>> 0 >= (HEAP32[(HEAP32[$60 >> 2] | 0) + 4 + 4 >> 2] | 0) >>> 0) break;
   };
   HEAP32[$84 >> 2] = HEAP32[$87 >> 2];
  } while (0);
  HEAP32[$73 >> 2] = $87;
  HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
  $222 = HEAP32[$72 >> 2] | 0;
  HEAP32[$71 >> 2] = HEAP32[$222 >> 2];
  if (HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$69 >> 2] = HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2];
   while (1) {
    $234 = HEAP32[$69 >> 2] | 0;
    if (!(HEAP32[HEAP32[$69 >> 2] >> 2] | 0)) break;
    HEAP32[$69 >> 2] = HEAP32[$234 >> 2];
   }
   HEAP32[$70 >> 2] = $234;
  } else {
   while (1) {
    HEAP32[$68 >> 2] = HEAP32[$71 >> 2];
    $244 = HEAP32[$71 >> 2] | 0;
    if (!((HEAP32[$68 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$68 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$67 >> 2] = $244;
    HEAP32[$71 >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$70 >> 2] = HEAP32[$244 + 8 >> 2];
  }
  HEAP32[$222 >> 2] = HEAP32[$70 >> 2];
 }
 STACKTOP = sp;
 return HEAP32[$84 >> 2] | 0;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE10_getOldestEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $110 = 0, $12 = 0, $122 = 0, $13 = 0, $132 = 0, $14 = 0, $146 = 0, $15 = 0, $153 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $22 = 0, $222 = 0, $23 = 0, $234 = 0, $24 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368 | 0;
 $2 = sp + 348 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 344 | 0;
 $5 = sp + 340 | 0;
 $6 = sp + 336 | 0;
 $7 = sp + 332 | 0;
 $8 = sp + 328 | 0;
 $9 = sp + 324 | 0;
 $10 = sp + 320 | 0;
 $11 = sp + 316 | 0;
 $12 = sp + 312 | 0;
 $13 = sp + 308 | 0;
 $14 = sp + 304 | 0;
 $15 = sp + 300 | 0;
 $16 = sp + 296 | 0;
 $17 = sp + 292 | 0;
 $18 = sp + 288 | 0;
 $19 = sp + 284 | 0;
 $20 = sp + 8 | 0;
 $21 = sp + 280 | 0;
 $22 = sp + 276 | 0;
 $23 = sp + 272 | 0;
 $24 = sp + 268 | 0;
 $25 = sp + 264 | 0;
 $26 = sp + 260 | 0;
 $27 = sp + 256 | 0;
 $28 = sp + 252 | 0;
 $29 = sp + 248 | 0;
 $30 = sp + 244 | 0;
 $31 = sp + 240 | 0;
 $32 = sp + 236 | 0;
 $33 = sp + 232 | 0;
 $34 = sp + 228 | 0;
 $35 = sp + 224 | 0;
 $36 = sp + 220 | 0;
 $37 = sp + 216 | 0;
 $38 = sp + 212 | 0;
 $39 = sp + 208 | 0;
 $40 = sp + 204 | 0;
 $41 = sp + 200 | 0;
 $42 = sp + 196 | 0;
 $43 = sp + 192 | 0;
 $44 = sp + 188 | 0;
 $45 = sp + 184 | 0;
 $46 = sp + 180 | 0;
 $47 = sp + 176 | 0;
 $48 = sp + 172 | 0;
 $49 = sp + 168 | 0;
 $50 = sp + 164 | 0;
 $51 = sp + 160 | 0;
 $52 = sp + 156 | 0;
 $53 = sp + 152 | 0;
 $54 = sp + 148 | 0;
 $55 = sp + 144 | 0;
 $56 = sp + 140 | 0;
 $57 = sp + 136 | 0;
 $58 = sp + 132 | 0;
 $59 = sp + 128 | 0;
 $60 = sp + 124 | 0;
 $61 = sp + 120 | 0;
 $62 = sp + 116 | 0;
 $63 = sp + 112 | 0;
 $64 = sp + 108 | 0;
 $65 = sp + 104 | 0;
 $66 = sp + 100 | 0;
 $67 = sp + 96 | 0;
 $68 = sp + 92 | 0;
 $69 = sp + 88 | 0;
 $70 = sp + 84 | 0;
 $71 = sp + 80 | 0;
 $72 = sp + 76 | 0;
 $73 = sp + 72 | 0;
 $74 = sp + 68 | 0;
 $75 = sp;
 $76 = sp + 64 | 0;
 $77 = sp + 60 | 0;
 $78 = sp + 56 | 0;
 $79 = sp + 52 | 0;
 $80 = sp + 48 | 0;
 $81 = sp + 44 | 0;
 $82 = sp + 40 | 0;
 $83 = sp + 36 | 0;
 $84 = sp + 32 | 0;
 $85 = sp + 28 | 0;
 $86 = sp + 352 | 0;
 $87 = sp + 24 | 0;
 $88 = sp + 20 | 0;
 HEAP32[$85 >> 2] = $0;
 HEAP8[$86 >> 0] = $1 & 1;
 $90 = HEAP32[$85 >> 2] | 0;
 HEAP32[$82 >> 2] = $90;
 HEAP32[$80 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$78 >> 2] = HEAP32[$80 >> 2];
 $94 = HEAP32[HEAP32[$78 >> 2] >> 2] | 0;
 HEAP32[$76 >> 2] = $79;
 HEAP32[$77 >> 2] = $94;
 HEAP32[HEAP32[$76 >> 2] >> 2] = HEAP32[$77 >> 2];
 HEAP32[$83 >> 2] = HEAP32[$79 >> 2];
 HEAP8[$75 >> 0] = HEAP8[$83 >> 0] | 0;
 HEAP8[$75 + 1 >> 0] = HEAP8[$83 + 1 >> 0] | 0;
 HEAP8[$75 + 2 >> 0] = HEAP8[$83 + 2 >> 0] | 0;
 HEAP8[$75 + 3 >> 0] = HEAP8[$83 + 3 >> 0] | 0;
 HEAP32[$74 >> 2] = $81;
 HEAP32[HEAP32[$74 >> 2] >> 2] = HEAP32[$75 >> 2];
 HEAP32[$84 >> 2] = HEAP32[$81 >> 2];
 HEAP32[$10 >> 2] = $90;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
 $103 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0;
 HEAP32[$4 >> 2] = $7;
 HEAP32[$5 >> 2] = $103;
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$5 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
 HEAP8[$3 >> 0] = HEAP8[$11 >> 0] | 0;
 HEAP8[$3 + 1 >> 0] = HEAP8[$11 + 1 >> 0] | 0;
 HEAP8[$3 + 2 >> 0] = HEAP8[$11 + 2 >> 0] | 0;
 HEAP8[$3 + 3 >> 0] = HEAP8[$11 + 3 >> 0] | 0;
 HEAP32[$2 >> 2] = $9;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 HEAP32[$87 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$18 >> 2] = $87;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 $110 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$110 >> 2];
 if (HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$14 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 4 >> 2];
  while (1) {
   $122 = HEAP32[$14 >> 2] | 0;
   if (!(HEAP32[HEAP32[$14 >> 2] >> 2] | 0)) break;
   HEAP32[$14 >> 2] = HEAP32[$122 >> 2];
  }
  HEAP32[$15 >> 2] = $122;
 } else {
  while (1) {
   HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
   $132 = HEAP32[$16 >> 2] | 0;
   if (!((HEAP32[$13 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
   HEAP32[$12 >> 2] = $132;
   HEAP32[$16 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$15 >> 2] = HEAP32[$132 + 8 >> 2];
 }
 HEAP32[$110 >> 2] = HEAP32[$15 >> 2];
 while (1) {
  HEAP32[$31 >> 2] = $90;
  HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  $146 = HEAP32[$23 >> 2] | 0;
  HEAP32[$21 >> 2] = $28;
  HEAP32[$22 >> 2] = $146;
  HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[$22 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$28 >> 2];
  HEAP8[$20 >> 0] = HEAP8[$32 >> 0] | 0;
  HEAP8[$20 + 1 >> 0] = HEAP8[$32 + 1 >> 0] | 0;
  HEAP8[$20 + 2 >> 0] = HEAP8[$32 + 2 >> 0] | 0;
  HEAP8[$20 + 3 >> 0] = HEAP8[$32 + 3 >> 0] | 0;
  HEAP32[$19 >> 2] = $30;
  HEAP32[HEAP32[$19 >> 2] >> 2] = HEAP32[$20 >> 2];
  HEAP32[$88 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$37 >> 2] = $87;
  HEAP32[$38 >> 2] = $88;
  $153 = HEAP32[$38 >> 2] | 0;
  HEAP32[$35 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$36 >> 2] = $153;
  $155 = HEAP32[$36 >> 2] | 0;
  HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$34 >> 2] = $155;
  if (!((HEAP32[HEAP32[$33 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$34 >> 2] >> 2] | 0) ^ 1)) break;
  HEAP32[$45 >> 2] = $87;
  HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
  HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
  HEAP32[$42 >> 2] = (HEAP32[HEAP32[$43 >> 2] >> 2] | 0) + 16;
  HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
  HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
  do if ((HEAP8[(HEAP32[$39 >> 2] | 0) + 4 >> 0] & 1 | 0) == (HEAP8[$86 >> 0] & 1 | 0)) {
   HEAP32[$52 >> 2] = $84;
   HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
   HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
   HEAP32[$49 >> 2] = (HEAP32[HEAP32[$50 >> 2] >> 2] | 0) + 16;
   HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
   HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
   if ((HEAP8[(HEAP32[$46 >> 2] | 0) + 4 >> 0] & 1 | 0) == (HEAP8[$86 >> 0] & 1 | 0)) {
    HEAP32[$59 >> 2] = $87;
    HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
    HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
    HEAP32[$56 >> 2] = (HEAP32[HEAP32[$57 >> 2] >> 2] | 0) + 16;
    HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
    HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
    HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
    $207 = HEAP32[(HEAP32[$53 >> 2] | 0) + 4 + 4 >> 2] | 0;
    HEAP32[$66 >> 2] = $84;
    HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
    HEAP32[$64 >> 2] = HEAP32[$65 >> 2];
    HEAP32[$63 >> 2] = (HEAP32[HEAP32[$64 >> 2] >> 2] | 0) + 16;
    HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
    HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
    HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
    if ($207 >>> 0 >= (HEAP32[(HEAP32[$60 >> 2] | 0) + 4 + 4 >> 2] | 0) >>> 0) break;
   };
   HEAP32[$84 >> 2] = HEAP32[$87 >> 2];
  } while (0);
  HEAP32[$73 >> 2] = $87;
  HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
  $222 = HEAP32[$72 >> 2] | 0;
  HEAP32[$71 >> 2] = HEAP32[$222 >> 2];
  if (HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$69 >> 2] = HEAP32[(HEAP32[$71 >> 2] | 0) + 4 >> 2];
   while (1) {
    $234 = HEAP32[$69 >> 2] | 0;
    if (!(HEAP32[HEAP32[$69 >> 2] >> 2] | 0)) break;
    HEAP32[$69 >> 2] = HEAP32[$234 >> 2];
   }
   HEAP32[$70 >> 2] = $234;
  } else {
   while (1) {
    HEAP32[$68 >> 2] = HEAP32[$71 >> 2];
    $244 = HEAP32[$71 >> 2] | 0;
    if (!((HEAP32[$68 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$68 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$67 >> 2] = $244;
    HEAP32[$71 >> 2] = HEAP32[(HEAP32[$67 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$70 >> 2] = HEAP32[$244 + 8 >> 2];
  }
  HEAP32[$222 >> 2] = HEAP32[$70 >> 2];
 }
 STACKTOP = sp;
 return HEAP32[$84 >> 2] | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc | 0) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem | 0) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $100 = 0, $11 = 0, $113 = 0, $12 = 0, $122 = 0, $124 = 0, $128 = 0, $13 = 0, $131 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $151 = 0, $16 = 0, $161 = 0, $17 = 0, $174 = 0, $18 = 0, $19 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $211 = 0, $217 = 0, $22 = 0, $220 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $64 = 0, $7 = 0, $72 = 0, $73 = 0, $79 = 0, $8 = 0, $85 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 196 | 0;
 $3 = sp + 192 | 0;
 $4 = sp + 188 | 0;
 $5 = sp + 184 | 0;
 $6 = sp + 180 | 0;
 $7 = sp + 176 | 0;
 $8 = sp + 172 | 0;
 $9 = sp + 168 | 0;
 $10 = sp + 164 | 0;
 $11 = sp + 160 | 0;
 $12 = sp + 156 | 0;
 $13 = sp + 152 | 0;
 $14 = sp + 148 | 0;
 $15 = sp + 144 | 0;
 $16 = sp + 140 | 0;
 $17 = sp + 136 | 0;
 $18 = sp + 132 | 0;
 $19 = sp + 128 | 0;
 $20 = sp + 124 | 0;
 $21 = sp + 120 | 0;
 $22 = sp + 116 | 0;
 $23 = sp + 112 | 0;
 $24 = sp + 108 | 0;
 $25 = sp + 104 | 0;
 $26 = sp + 100 | 0;
 $27 = sp + 96 | 0;
 $28 = sp + 92 | 0;
 $29 = sp + 88 | 0;
 $30 = sp + 84 | 0;
 $31 = sp + 80 | 0;
 $32 = sp + 76 | 0;
 $33 = sp + 72 | 0;
 $34 = sp + 68 | 0;
 $35 = sp + 64 | 0;
 $36 = sp + 60 | 0;
 $37 = sp + 56 | 0;
 $38 = sp + 52 | 0;
 $39 = sp + 48 | 0;
 $40 = sp + 44 | 0;
 $41 = sp + 40 | 0;
 $42 = sp + 36 | 0;
 $43 = sp + 32 | 0;
 $44 = sp + 200 | 0;
 $45 = sp + 28 | 0;
 $46 = sp + 24 | 0;
 $47 = sp + 20 | 0;
 $48 = sp + 16 | 0;
 $49 = sp + 12 | 0;
 $50 = sp + 8 | 0;
 $51 = sp + 4 | 0;
 $52 = sp;
 HEAP32[$42 >> 2] = $0;
 HEAP32[$43 >> 2] = $1;
 $53 = HEAP32[$42 >> 2] | 0;
 if (!(HEAP32[$53 + 64 >> 2] | 0)) {
  HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
  $236 = HEAP32[$41 >> 2] | 0;
  STACKTOP = sp;
  return $236 | 0;
 }
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($53);
 HEAP32[$40 >> 2] = $53;
 HEAP32[$45 >> 2] = HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2];
 HEAP32[$39 >> 2] = $53;
 HEAP32[$46 >> 2] = HEAP32[(HEAP32[$39 >> 2] | 0) + 28 >> 2];
 $64 = HEAP32[$43 >> 2] | 0;
 if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($64, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) {
  HEAP32[$35 >> 2] = $53;
  if (!(HEAP32[(HEAP32[$35 >> 2] | 0) + 24 >> 2] | 0)) {
   HEAP32[$24 >> 2] = $53;
   HEAP32[$25 >> 2] = $44;
   HEAP32[$26 >> 2] = $44 + 1;
   $72 = HEAP32[$24 >> 2] | 0;
   $73 = HEAP32[$25 >> 2] | 0;
   HEAP32[$72 + 24 >> 2] = $73;
   HEAP32[$72 + 20 >> 2] = $73;
   HEAP32[$72 + 28 >> 2] = HEAP32[$26 >> 2];
  }
  $79 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$43 >> 2] | 0) | 0;
  HEAP32[$23 >> 2] = $53;
  HEAP8[HEAP32[(HEAP32[$23 >> 2] | 0) + 24 >> 2] >> 0] = $79;
  HEAP32[$18 >> 2] = $53;
  HEAP32[$19 >> 2] = 1;
  $85 = (HEAP32[$18 >> 2] | 0) + 24 | 0;
  HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + (HEAP32[$19 >> 2] | 0);
 }
 HEAP32[$8 >> 2] = $53;
 $90 = HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[$5 >> 2] = $53;
 if (($90 | 0) != (HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] | 0)) {
  L13 : do if (HEAP8[$53 + 98 >> 0] & 1) {
   HEAP32[$4 >> 2] = $53;
   $100 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0;
   HEAP32[$3 >> 2] = $53;
   HEAP32[$47 >> 2] = $100 - (HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0);
   HEAP32[$2 >> 2] = $53;
   $113 = _fwrite(HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0, 1, HEAP32[$47 >> 2] | 0, HEAP32[$53 + 64 >> 2] | 0) | 0;
   if (($113 | 0) != (HEAP32[$47 >> 2] | 0)) {
    HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $236 = HEAP32[$41 >> 2] | 0;
    STACKTOP = sp;
    return $236 | 0;
   }
  } else {
   HEAP32[$48 >> 2] = HEAP32[$53 + 32 >> 2];
   while (1) {
    if (!(HEAP32[$53 + 68 >> 2] | 0)) {
     label = 13;
     break;
    }
    $124 = HEAP32[$53 + 68 >> 2] | 0;
    HEAP32[$6 >> 2] = $53;
    $128 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0;
    HEAP32[$7 >> 2] = $53;
    $131 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0;
    $133 = HEAP32[$53 + 32 >> 2] | 0;
    $138 = (HEAP32[$53 + 32 >> 2] | 0) + (HEAP32[$53 + 52 >> 2] | 0) | 0;
    HEAP32[$9 >> 2] = $124;
    HEAP32[$10 >> 2] = $53 + 72;
    HEAP32[$11 >> 2] = $128;
    HEAP32[$12 >> 2] = $131;
    HEAP32[$13 >> 2] = $50;
    HEAP32[$14 >> 2] = $133;
    HEAP32[$15 >> 2] = $138;
    HEAP32[$16 >> 2] = $48;
    $139 = HEAP32[$9 >> 2] | 0;
    HEAP32[$49 >> 2] = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$139 >> 2] | 0) + 12 >> 2] & 15]($139, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
    $151 = HEAP32[$50 >> 2] | 0;
    HEAP32[$17 >> 2] = $53;
    if (($151 | 0) == (HEAP32[(HEAP32[$17 >> 2] | 0) + 20 >> 2] | 0)) {
     label = 15;
     break;
    }
    if ((HEAP32[$49 >> 2] | 0) == 3) {
     HEAP32[$20 >> 2] = $53;
     $161 = HEAP32[(HEAP32[$20 >> 2] | 0) + 24 >> 2] | 0;
     HEAP32[$21 >> 2] = $53;
     HEAP32[$51 >> 2] = $161 - (HEAP32[(HEAP32[$21 >> 2] | 0) + 20 >> 2] | 0);
     HEAP32[$22 >> 2] = $53;
     $174 = _fwrite(HEAP32[(HEAP32[$22 >> 2] | 0) + 20 >> 2] | 0, 1, HEAP32[$51 >> 2] | 0, HEAP32[$53 + 64 >> 2] | 0) | 0;
     if (($174 | 0) != (HEAP32[$51 >> 2] | 0)) {
      label = 18;
      break;
     }
    } else {
     if (!((HEAP32[$49 >> 2] | 0) == 0 | (HEAP32[$49 >> 2] | 0) == 1)) {
      label = 24;
      break;
     }
     HEAP32[$52 >> 2] = (HEAP32[$48 >> 2] | 0) - (HEAP32[$53 + 32 >> 2] | 0);
     $193 = _fwrite(HEAP32[$53 + 32 >> 2] | 0, 1, HEAP32[$52 >> 2] | 0, HEAP32[$53 + 64 >> 2] | 0) | 0;
     if (($193 | 0) != (HEAP32[$52 >> 2] | 0)) {
      label = 21;
      break;
     }
     if ((HEAP32[$49 >> 2] | 0) == 1) {
      $199 = HEAP32[$50 >> 2] | 0;
      HEAP32[$27 >> 2] = $53;
      $202 = HEAP32[(HEAP32[$27 >> 2] | 0) + 24 >> 2] | 0;
      HEAP32[$28 >> 2] = $53;
      HEAP32[$29 >> 2] = $199;
      HEAP32[$30 >> 2] = $202;
      $203 = HEAP32[$28 >> 2] | 0;
      $204 = HEAP32[$29 >> 2] | 0;
      HEAP32[$203 + 24 >> 2] = $204;
      HEAP32[$203 + 20 >> 2] = $204;
      HEAP32[$203 + 28 >> 2] = HEAP32[$30 >> 2];
      HEAP32[$31 >> 2] = $53;
      $211 = HEAP32[(HEAP32[$31 >> 2] | 0) + 28 >> 2] | 0;
      HEAP32[$32 >> 2] = $53;
      $217 = $211 - (HEAP32[(HEAP32[$32 >> 2] | 0) + 20 >> 2] | 0) | 0;
      HEAP32[$33 >> 2] = $53;
      HEAP32[$34 >> 2] = $217;
      $220 = (HEAP32[$33 >> 2] | 0) + 24 | 0;
      HEAP32[$220 >> 2] = (HEAP32[$220 >> 2] | 0) + (HEAP32[$34 >> 2] | 0);
     }
    }
    if ((HEAP32[$49 >> 2] | 0) != 1) break L13;
   }
   if ((label | 0) == 13) {
    $122 = ___cxa_allocate_exception(4) | 0;
    __ZNSt8bad_castC2Ev($122);
    ___cxa_throw($122 | 0, 42840, 182);
   } else if ((label | 0) == 15) {
    HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $236 = HEAP32[$41 >> 2] | 0;
    STACKTOP = sp;
    return $236 | 0;
   } else if ((label | 0) == 18) {
    HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $236 = HEAP32[$41 >> 2] | 0;
    STACKTOP = sp;
    return $236 | 0;
   } else if ((label | 0) == 21) {
    HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $236 = HEAP32[$41 >> 2] | 0;
    STACKTOP = sp;
    return $236 | 0;
   } else if ((label | 0) == 24) {
    HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $236 = HEAP32[$41 >> 2] | 0;
    STACKTOP = sp;
    return $236 | 0;
   }
  } while (0);
  $226 = HEAP32[$45 >> 2] | 0;
  $227 = HEAP32[$46 >> 2] | 0;
  HEAP32[$36 >> 2] = $53;
  HEAP32[$37 >> 2] = $226;
  HEAP32[$38 >> 2] = $227;
  $228 = HEAP32[$36 >> 2] | 0;
  $229 = HEAP32[$37 >> 2] | 0;
  HEAP32[$228 + 24 >> 2] = $229;
  HEAP32[$228 + 20 >> 2] = $229;
  HEAP32[$228 + 28 >> 2] = HEAP32[$38 >> 2];
 }
 HEAP32[$41 >> 2] = __ZNSt3__211char_traitsIcE7not_eofEi(HEAP32[$43 >> 2] | 0) | 0;
 $236 = HEAP32[$41 >> 2] | 0;
 STACKTOP = sp;
 return $236 | 0;
}

function _adler32_z($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $16 = 0, $211 = 0, $3 = 0, $367 = 0, $370 = 0, $387 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $6 = 0, $63 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = (HEAP32[$4 >> 2] | 0) >>> 16 & 65535;
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & 65535;
 $16 = HEAP32[$5 >> 2] | 0;
 if ((HEAP32[$6 >> 2] | 0) == 1) {
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[$16 >> 0] | 0);
  if ((HEAP32[$4 >> 2] | 0) >>> 0 >= 65521) HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - 65521;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= 65521) HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) - 65521;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | HEAP32[$7 >> 2] << 16;
  $387 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $387 | 0;
 }
 if (!$16) {
  HEAP32[$3 >> 2] = 1;
  $387 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $387 | 0;
 }
 if ((HEAP32[$6 >> 2] | 0) >>> 0 < 16) {
  while (1) {
   $39 = HEAP32[$6 >> 2] | 0;
   HEAP32[$6 >> 2] = $39 + -1;
   if (!$39) break;
   $42 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $42 + 1;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[$42 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
  }
  if ((HEAP32[$4 >> 2] | 0) >>> 0 >= 65521) HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - 65521;
  HEAP32[$7 >> 2] = ((HEAP32[$7 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | HEAP32[$7 >> 2] << 16;
  $387 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $387 | 0;
 }
 while (1) {
  $63 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$6 >> 2] | 0) >>> 0 < 5552) break;
  HEAP32[$6 >> 2] = $63 - 5552;
  HEAP32[$8 >> 2] = 347;
  do {
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[HEAP32[$5 >> 2] >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 3 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 4 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 5 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 6 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 7 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 8 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 9 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 10 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 11 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 12 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 13 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 14 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 15 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 16;
   $211 = (HEAP32[$8 >> 2] | 0) + -1 | 0;
   HEAP32[$8 >> 2] = $211;
  } while (($211 | 0) != 0);
  HEAP32[$4 >> 2] = ((HEAP32[$4 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$7 >> 2] = ((HEAP32[$7 >> 2] | 0) >>> 0) % 65521 | 0;
 }
 if ($63 | 0) {
  while (1) {
   if ((HEAP32[$6 >> 2] | 0) >>> 0 < 16) break;
   HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) - 16;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[HEAP32[$5 >> 2] >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 2 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 3 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 4 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 5 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 6 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 7 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 8 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 9 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 10 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 11 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 12 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 13 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 14 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[(HEAP32[$5 >> 2] | 0) + 15 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 16;
  }
  while (1) {
   $367 = HEAP32[$6 >> 2] | 0;
   HEAP32[$6 >> 2] = $367 + -1;
   if (!$367) break;
   $370 = HEAP32[$5 >> 2] | 0;
   HEAP32[$5 >> 2] = $370 + 1;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + (HEAPU8[$370 >> 0] | 0);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
  }
  HEAP32[$4 >> 2] = ((HEAP32[$4 >> 2] | 0) >>> 0) % 65521 | 0;
  HEAP32[$7 >> 2] = ((HEAP32[$7 >> 2] | 0) >>> 0) % 65521 | 0;
 }
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2] | HEAP32[$7 >> 2] << 16;
 $387 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $387 | 0;
}

function __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $136 = 0, $14 = 0, $141 = 0, $143 = 0, $145 = 0, $15 = 0, $153 = 0, $16 = 0, $165 = 0, $17 = 0, $178 = 0, $18 = 0, $19 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $212 = 0, $219 = 0, $22 = 0, $220 = 0, $223 = 0, $226 = 0, $228 = 0, $23 = 0, $239 = 0, $24 = 0, $242 = 0, $244 = 0, $25 = 0, $255 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $2 = sp + 340 | 0;
 $3 = sp + 336 | 0;
 $4 = sp + 332 | 0;
 $6 = sp + 324 | 0;
 $7 = sp + 320 | 0;
 $8 = sp + 316 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 308 | 0;
 $11 = sp + 304 | 0;
 $12 = sp + 300 | 0;
 $13 = sp + 296 | 0;
 $14 = sp + 292 | 0;
 $15 = sp + 288 | 0;
 $16 = sp + 284 | 0;
 $17 = sp + 280 | 0;
 $18 = sp + 276 | 0;
 $19 = sp + 272 | 0;
 $20 = sp + 268 | 0;
 $21 = sp + 264 | 0;
 $22 = sp + 260 | 0;
 $23 = sp + 256 | 0;
 $24 = sp + 252 | 0;
 $25 = sp + 248 | 0;
 $26 = sp + 244 | 0;
 $27 = sp + 240 | 0;
 $28 = sp + 236 | 0;
 $29 = sp + 232 | 0;
 $30 = sp + 228 | 0;
 $31 = sp + 224 | 0;
 $32 = sp + 220 | 0;
 $33 = sp + 216 | 0;
 $34 = sp + 212 | 0;
 $35 = sp + 208 | 0;
 $36 = sp + 204 | 0;
 $37 = sp + 200 | 0;
 $38 = sp + 196 | 0;
 $39 = sp + 192 | 0;
 $40 = sp + 188 | 0;
 $41 = sp + 184 | 0;
 $42 = sp + 180 | 0;
 $43 = sp + 176 | 0;
 $44 = sp + 172 | 0;
 $45 = sp + 168 | 0;
 $46 = sp + 164 | 0;
 $47 = sp + 160 | 0;
 $48 = sp + 156 | 0;
 $49 = sp + 152 | 0;
 $50 = sp + 148 | 0;
 $56 = sp + 124 | 0;
 $57 = sp + 120 | 0;
 $58 = sp + 116 | 0;
 $59 = sp + 112 | 0;
 $61 = sp + 104 | 0;
 $62 = sp + 100 | 0;
 $63 = sp + 96 | 0;
 $64 = sp + 92 | 0;
 $65 = sp + 88 | 0;
 $66 = sp + 84 | 0;
 $67 = sp + 80 | 0;
 $68 = sp + 76 | 0;
 $69 = sp + 72 | 0;
 $70 = sp + 68 | 0;
 $71 = sp + 64 | 0;
 $72 = sp + 60 | 0;
 $73 = sp + 56 | 0;
 $74 = sp + 52 | 0;
 $75 = sp + 48 | 0;
 $76 = sp + 44 | 0;
 $77 = sp + 40 | 0;
 $83 = sp + 16 | 0;
 $84 = sp + 12 | 0;
 $85 = sp + 8 | 0;
 $86 = sp + 4 | 0;
 $87 = sp;
 HEAP32[$86 >> 2] = $0;
 HEAP32[$87 >> 2] = $1;
 $88 = HEAP32[$86 >> 2] | 0;
 HEAP32[$85 >> 2] = $88;
 $89 = HEAP32[$85 >> 2] | 0;
 HEAP32[$84 >> 2] = $89;
 HEAP32[$83 >> 2] = HEAP32[HEAP32[$84 >> 2] >> 2];
 $92 = HEAP32[$83 >> 2] | 0;
 HEAP32[$62 >> 2] = $89;
 HEAP32[$61 >> 2] = HEAP32[HEAP32[$62 >> 2] >> 2];
 $95 = HEAP32[$61 >> 2] | 0;
 HEAP32[$67 >> 2] = $89;
 HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
 $97 = HEAP32[$66 >> 2] | 0;
 HEAP32[$65 >> 2] = $97;
 HEAP32[$64 >> 2] = (HEAP32[$65 >> 2] | 0) + 8;
 HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
 $108 = $95 + ((((HEAP32[HEAP32[$63 >> 2] >> 2] | 0) - (HEAP32[$97 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$69 >> 2] = $89;
 HEAP32[$68 >> 2] = HEAP32[HEAP32[$69 >> 2] >> 2];
 $111 = HEAP32[$68 >> 2] | 0;
 HEAP32[$70 >> 2] = $89;
 $112 = HEAP32[$70 >> 2] | 0;
 $120 = $111 + ((((HEAP32[$112 + 4 >> 2] | 0) - (HEAP32[$112 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$72 >> 2] = $89;
 HEAP32[$71 >> 2] = HEAP32[HEAP32[$72 >> 2] >> 2];
 $123 = HEAP32[$71 >> 2] | 0;
 HEAP32[$77 >> 2] = $89;
 HEAP32[$76 >> 2] = HEAP32[$77 >> 2];
 $125 = HEAP32[$76 >> 2] | 0;
 HEAP32[$75 >> 2] = $125;
 HEAP32[$74 >> 2] = (HEAP32[$75 >> 2] | 0) + 8;
 HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
 $136 = $123 + ((((HEAP32[HEAP32[$73 >> 2] >> 2] | 0) - (HEAP32[$125 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[sp + 36 >> 2] = $89;
 HEAP32[sp + 32 >> 2] = $92;
 HEAP32[sp + 28 >> 2] = $108;
 HEAP32[sp + 24 >> 2] = $120;
 HEAP32[sp + 20 >> 2] = $136;
 HEAP32[$4 >> 2] = $88;
 HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 8;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $141 = HEAP32[$88 >> 2] | 0;
 $143 = HEAP32[$88 + 4 >> 2] | 0;
 $145 = (HEAP32[$87 >> 2] | 0) + 4 | 0;
 HEAP32[sp + 328 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 >> 2] = $141;
 HEAP32[$7 >> 2] = $143;
 HEAP32[$8 >> 2] = $145;
 HEAP32[$9 >> 2] = ((HEAP32[$7 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0) / 8 | 0;
 $153 = HEAP32[$8 >> 2] | 0;
 HEAP32[$153 >> 2] = (HEAP32[$153 >> 2] | 0) + (0 - (HEAP32[$9 >> 2] | 0) << 3);
 if ((HEAP32[$9 >> 2] | 0) > 0) _memcpy(HEAP32[HEAP32[$8 >> 2] >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$9 >> 2] << 3 | 0) | 0;
 $165 = (HEAP32[$87 >> 2] | 0) + 4 | 0;
 HEAP32[$13 >> 2] = $88;
 HEAP32[$14 >> 2] = $165;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
 HEAP32[$10 >> 2] = HEAP32[$14 >> 2];
 HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$11 >> 2] = $15;
 HEAP32[HEAP32[$14 >> 2] >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 $178 = (HEAP32[$87 >> 2] | 0) + 8 | 0;
 HEAP32[$19 >> 2] = $88 + 4;
 HEAP32[$20 >> 2] = $178;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
 HEAP32[$16 >> 2] = HEAP32[$20 >> 2];
 HEAP32[HEAP32[$19 >> 2] >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
 HEAP32[$17 >> 2] = $21;
 HEAP32[HEAP32[$20 >> 2] >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
 HEAP32[$24 >> 2] = $88;
 HEAP32[$23 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 $192 = HEAP32[$22 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$87 >> 2];
 HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 12;
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 $197 = HEAP32[$25 >> 2] | 0;
 HEAP32[$31 >> 2] = $192;
 HEAP32[$32 >> 2] = $197;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$33 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
 HEAP32[$28 >> 2] = HEAP32[$32 >> 2];
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$29 >> 2] = $33;
 HEAP32[HEAP32[$32 >> 2] >> 2] = HEAP32[HEAP32[$29 >> 2] >> 2];
 HEAP32[HEAP32[$87 >> 2] >> 2] = HEAP32[(HEAP32[$87 >> 2] | 0) + 4 >> 2];
 HEAP32[$34 >> 2] = $88;
 $212 = HEAP32[$34 >> 2] | 0;
 $219 = ((HEAP32[$212 + 4 >> 2] | 0) - (HEAP32[$212 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[$58 >> 2] = $88;
 HEAP32[$59 >> 2] = $219;
 $220 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = $220;
 HEAP32[$56 >> 2] = HEAP32[HEAP32[$57 >> 2] >> 2];
 $223 = HEAP32[$56 >> 2] | 0;
 HEAP32[$36 >> 2] = $220;
 HEAP32[$35 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
 $226 = HEAP32[$35 >> 2] | 0;
 HEAP32[$41 >> 2] = $220;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $228 = HEAP32[$40 >> 2] | 0;
 HEAP32[$39 >> 2] = $228;
 HEAP32[$38 >> 2] = (HEAP32[$39 >> 2] | 0) + 8;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 $239 = $226 + ((((HEAP32[HEAP32[$37 >> 2] >> 2] | 0) - (HEAP32[$228 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$43 >> 2] = $220;
 HEAP32[$42 >> 2] = HEAP32[HEAP32[$43 >> 2] >> 2];
 $242 = HEAP32[$42 >> 2] | 0;
 HEAP32[$48 >> 2] = $220;
 HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
 $244 = HEAP32[$47 >> 2] | 0;
 HEAP32[$46 >> 2] = $244;
 HEAP32[$45 >> 2] = (HEAP32[$46 >> 2] | 0) + 8;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 $255 = $242 + ((((HEAP32[HEAP32[$44 >> 2] >> 2] | 0) - (HEAP32[$244 >> 2] | 0) | 0) / 8 | 0) << 3) | 0;
 HEAP32[$50 >> 2] = $220;
 HEAP32[$49 >> 2] = HEAP32[HEAP32[$50 >> 2] >> 2];
 $260 = (HEAP32[$49 >> 2] | 0) + (HEAP32[$59 >> 2] << 3) | 0;
 HEAP32[sp + 144 >> 2] = $220;
 HEAP32[sp + 140 >> 2] = $223;
 HEAP32[sp + 136 >> 2] = $239;
 HEAP32[sp + 132 >> 2] = $255;
 HEAP32[sp + 128 >> 2] = $260;
 HEAP32[sp + 108 >> 2] = $88;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim10FileReaderEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $128 = 0, $13 = 0, $135 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $157 = 0, $16 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp + 320 | 0;
 $4 = sp + 316 | 0;
 $5 = sp + 312 | 0;
 $6 = sp + 308 | 0;
 $7 = sp + 304 | 0;
 $8 = sp + 300 | 0;
 $9 = sp + 296 | 0;
 $10 = sp + 292 | 0;
 $11 = sp + 288 | 0;
 $12 = sp + 284 | 0;
 $13 = sp + 280 | 0;
 $14 = sp + 276 | 0;
 $15 = sp + 272 | 0;
 $16 = sp + 268 | 0;
 $17 = sp + 264 | 0;
 $18 = sp + 260 | 0;
 $19 = sp + 256 | 0;
 $20 = sp + 252 | 0;
 $21 = sp + 248 | 0;
 $22 = sp + 244 | 0;
 $23 = sp + 240 | 0;
 $24 = sp + 236 | 0;
 $25 = sp + 232 | 0;
 $26 = sp + 228 | 0;
 $27 = sp + 224 | 0;
 $28 = sp + 220 | 0;
 $29 = sp + 216 | 0;
 $30 = sp + 212 | 0;
 $31 = sp + 208 | 0;
 $32 = sp + 204 | 0;
 $33 = sp + 200 | 0;
 $34 = sp + 196 | 0;
 $35 = sp + 192 | 0;
 $36 = sp + 188 | 0;
 $37 = sp + 184 | 0;
 $38 = sp + 180 | 0;
 $39 = sp + 176 | 0;
 $40 = sp + 8 | 0;
 $41 = sp;
 $42 = sp + 172 | 0;
 $43 = sp + 168 | 0;
 $44 = sp + 164 | 0;
 $45 = sp + 160 | 0;
 $46 = sp + 156 | 0;
 $47 = sp + 152 | 0;
 $48 = sp + 148 | 0;
 $49 = sp + 144 | 0;
 $50 = sp + 140 | 0;
 $51 = sp + 136 | 0;
 $52 = sp + 132 | 0;
 $53 = sp + 128 | 0;
 $54 = sp + 124 | 0;
 $55 = sp + 120 | 0;
 $56 = sp + 116 | 0;
 $57 = sp + 112 | 0;
 $58 = sp + 108 | 0;
 $59 = sp + 104 | 0;
 $60 = sp + 100 | 0;
 $61 = sp + 96 | 0;
 $62 = sp + 92 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 84 | 0;
 $65 = sp + 80 | 0;
 $66 = sp + 76 | 0;
 $67 = sp + 72 | 0;
 $68 = sp + 68 | 0;
 $69 = sp + 64 | 0;
 $70 = sp + 60 | 0;
 $71 = sp + 56 | 0;
 $72 = sp + 52 | 0;
 $73 = sp + 48 | 0;
 $74 = sp + 44 | 0;
 $75 = sp + 40 | 0;
 $76 = sp + 36 | 0;
 $77 = sp + 32 | 0;
 $78 = sp + 28 | 0;
 $79 = sp + 24 | 0;
 $80 = sp + 325 | 0;
 $81 = sp + 324 | 0;
 HEAP32[$75 >> 2] = $0;
 HEAP32[$76 >> 2] = $1;
 $82 = HEAP32[$75 >> 2] | 0;
 HEAP32[$82 >> 2] = HEAP32[$76 >> 2];
 $84 = HEAP32[$76 >> 2] | 0;
 HEAP32[$73 >> 2] = $77;
 HEAP32[$74 >> 2] = $84;
 HEAP32[$71 >> 2] = HEAP32[$73 >> 2];
 HEAP32[$72 >> 2] = $74;
 $86 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$72 >> 2];
 $88 = HEAP32[$70 >> 2] | 0;
 HEAP32[$68 >> 2] = $86;
 HEAP32[$69 >> 2] = $88;
 $89 = HEAP32[$68 >> 2] | 0;
 HEAP32[$67 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$89 >> 2] = HEAP32[HEAP32[$67 >> 2] >> 2];
 __THREW__ = 0;
 $93 = invoke_ii(79, 16) | 0;
 $94 = __THREW__;
 __THREW__ = 0;
 if ($94 & 1) {
  $154 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$78 >> 2] = $154;
  HEAP32[$79 >> 2] = tempRet0;
  HEAP32[$66 >> 2] = $77;
  HEAP32[$63 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$64 >> 2] = 0;
  $157 = HEAP32[$63 >> 2] | 0;
  HEAP32[$62 >> 2] = $157;
  HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$65 >> 2] = HEAP32[HEAP32[$61 >> 2] >> 2];
  $161 = HEAP32[$64 >> 2] | 0;
  HEAP32[$58 >> 2] = $157;
  HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
  HEAP32[HEAP32[$57 >> 2] >> 2] = $161;
  if (!(HEAP32[$65 >> 2] | 0)) {
   $174 = HEAP32[$78 >> 2] | 0;
   $175 = HEAP32[$79 >> 2] | 0;
   ___resumeException($174 | 0);
  }
  HEAP32[$56 >> 2] = $157;
  HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
  $168 = HEAP32[$65 >> 2] | 0;
  HEAP32[$59 >> 2] = HEAP32[$55 >> 2];
  HEAP32[$60 >> 2] = $168;
  $169 = HEAP32[$60 >> 2] | 0;
  if (!$169) {
   $174 = HEAP32[$78 >> 2] | 0;
   $175 = HEAP32[$79 >> 2] | 0;
   ___resumeException($174 | 0);
  }
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$169 >> 2] | 0) + 8 >> 2] & 255]($169);
  $174 = HEAP32[$78 >> 2] | 0;
  $175 = HEAP32[$79 >> 2] | 0;
  ___resumeException($174 | 0);
 } else {
  $96 = HEAP32[$76 >> 2] | 0;
  HEAP32[$54 >> 2] = $81;
  HEAP8[$40 >> 0] = HEAP8[$81 >> 0] | 0;
  HEAP8[$41 >> 0] = HEAP8[$80 >> 0] | 0;
  HEAP32[$37 >> 2] = $93;
  HEAP32[$38 >> 2] = $96;
  $97 = HEAP32[$37 >> 2] | 0;
  HEAP32[$35 >> 2] = $97;
  HEAP32[$36 >> 2] = 0;
  $98 = HEAP32[$35 >> 2] | 0;
  $99 = HEAP32[$36 >> 2] | 0;
  HEAP32[$33 >> 2] = $98;
  HEAP32[$34 >> 2] = $99;
  $100 = HEAP32[$33 >> 2] | 0;
  HEAP32[$100 >> 2] = 47864;
  HEAP32[$100 + 4 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$98 >> 2] = 47884;
  HEAP32[$98 + 8 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$97 >> 2] = 43648;
  HEAP32[$9 >> 2] = $41;
  $106 = HEAP32[$9 >> 2] | 0;
  HEAP32[$18 >> 2] = $39;
  HEAP32[$19 >> 2] = $38;
  HEAP32[$20 >> 2] = $106;
  $107 = HEAP32[$18 >> 2] | 0;
  HEAP32[$17 >> 2] = HEAP32[$19 >> 2];
  $109 = HEAP32[$17 >> 2] | 0;
  HEAP32[$11 >> 2] = $107;
  HEAP32[$12 >> 2] = $109;
  $110 = HEAP32[$11 >> 2] | 0;
  HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$110 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
  HEAP32[$13 >> 2] = HEAP32[$20 >> 2];
  $115 = HEAP32[$13 >> 2] | 0;
  HEAP32[$15 >> 2] = $107;
  HEAP32[$16 >> 2] = $115;
  HEAP32[$14 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$21 >> 2] = $40;
  $117 = HEAP32[$21 >> 2] | 0;
  HEAP32[$30 >> 2] = $97 + 12;
  HEAP32[$31 >> 2] = $39;
  HEAP32[$32 >> 2] = $117;
  $118 = HEAP32[$30 >> 2] | 0;
  HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
  $120 = HEAP32[$29 >> 2] | 0;
  HEAP32[$23 >> 2] = $118;
  HEAP32[$24 >> 2] = $120;
  $121 = HEAP32[$23 >> 2] | 0;
  HEAP32[$22 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$121 >> 2] = HEAP32[HEAP32[$22 >> 2] >> 2];
  HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
  $125 = HEAP32[$25 >> 2] | 0;
  HEAP32[$27 >> 2] = $118;
  HEAP32[$28 >> 2] = $125;
  HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$82 + 4 >> 2] = $93;
  HEAP32[$7 >> 2] = $77;
  $128 = HEAP32[$7 >> 2] | 0;
  HEAP32[$6 >> 2] = $128;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$4 >> 2] = $128;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
  $135 = HEAP32[$76 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$76 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $135;
  __ZNSt3__210shared_ptrIN3zim10FileReaderEE18__enable_weak_thisEz($82, $vararg_buffer);
  HEAP32[$53 >> 2] = $77;
  HEAP32[$50 >> 2] = HEAP32[$53 >> 2];
  HEAP32[$51 >> 2] = 0;
  $137 = HEAP32[$50 >> 2] | 0;
  HEAP32[$49 >> 2] = $137;
  HEAP32[$48 >> 2] = HEAP32[$49 >> 2];
  HEAP32[$52 >> 2] = HEAP32[HEAP32[$48 >> 2] >> 2];
  $141 = HEAP32[$51 >> 2] | 0;
  HEAP32[$45 >> 2] = $137;
  HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
  HEAP32[HEAP32[$44 >> 2] >> 2] = $141;
  if (!(HEAP32[$52 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$43 >> 2] = $137;
  HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
  $148 = HEAP32[$52 >> 2] | 0;
  HEAP32[$46 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$47 >> 2] = $148;
  $149 = HEAP32[$47 >> 2] | 0;
  if (!$149) {
   STACKTOP = sp;
   return;
  }
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$149 >> 2] | 0) + 8 >> 2] & 255]($149);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__210shared_ptrIN3zim12FileCompoundEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $128 = 0, $13 = 0, $135 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $158 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp + 320 | 0;
 $4 = sp + 316 | 0;
 $5 = sp + 312 | 0;
 $6 = sp + 308 | 0;
 $7 = sp + 304 | 0;
 $8 = sp + 300 | 0;
 $9 = sp + 296 | 0;
 $10 = sp + 292 | 0;
 $11 = sp + 288 | 0;
 $12 = sp + 284 | 0;
 $13 = sp + 280 | 0;
 $14 = sp + 276 | 0;
 $15 = sp + 272 | 0;
 $16 = sp + 268 | 0;
 $17 = sp + 264 | 0;
 $18 = sp + 260 | 0;
 $19 = sp + 256 | 0;
 $20 = sp + 252 | 0;
 $21 = sp + 248 | 0;
 $22 = sp + 244 | 0;
 $23 = sp + 240 | 0;
 $24 = sp + 236 | 0;
 $25 = sp + 232 | 0;
 $26 = sp + 228 | 0;
 $27 = sp + 224 | 0;
 $28 = sp + 220 | 0;
 $29 = sp + 216 | 0;
 $30 = sp + 212 | 0;
 $31 = sp + 208 | 0;
 $32 = sp + 204 | 0;
 $33 = sp + 200 | 0;
 $34 = sp + 196 | 0;
 $35 = sp + 192 | 0;
 $36 = sp + 188 | 0;
 $37 = sp + 184 | 0;
 $38 = sp + 180 | 0;
 $39 = sp + 176 | 0;
 $40 = sp + 172 | 0;
 $41 = sp + 168 | 0;
 $42 = sp + 164 | 0;
 $43 = sp + 160 | 0;
 $44 = sp + 156 | 0;
 $45 = sp + 152 | 0;
 $46 = sp + 148 | 0;
 $47 = sp + 144 | 0;
 $48 = sp + 140 | 0;
 $49 = sp + 136 | 0;
 $50 = sp + 132 | 0;
 $51 = sp + 128 | 0;
 $52 = sp + 8 | 0;
 $53 = sp;
 $54 = sp + 124 | 0;
 $55 = sp + 120 | 0;
 $56 = sp + 116 | 0;
 $57 = sp + 112 | 0;
 $58 = sp + 108 | 0;
 $59 = sp + 104 | 0;
 $60 = sp + 100 | 0;
 $61 = sp + 96 | 0;
 $62 = sp + 92 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 84 | 0;
 $65 = sp + 80 | 0;
 $66 = sp + 76 | 0;
 $67 = sp + 72 | 0;
 $68 = sp + 68 | 0;
 $69 = sp + 64 | 0;
 $70 = sp + 60 | 0;
 $71 = sp + 56 | 0;
 $72 = sp + 52 | 0;
 $73 = sp + 48 | 0;
 $74 = sp + 44 | 0;
 $75 = sp + 40 | 0;
 $76 = sp + 36 | 0;
 $77 = sp + 32 | 0;
 $78 = sp + 28 | 0;
 $79 = sp + 24 | 0;
 $80 = sp + 325 | 0;
 $81 = sp + 324 | 0;
 HEAP32[$75 >> 2] = $0;
 HEAP32[$76 >> 2] = $1;
 $82 = HEAP32[$75 >> 2] | 0;
 HEAP32[$82 >> 2] = HEAP32[$76 >> 2];
 $84 = HEAP32[$76 >> 2] | 0;
 HEAP32[$73 >> 2] = $77;
 HEAP32[$74 >> 2] = $84;
 HEAP32[$71 >> 2] = HEAP32[$73 >> 2];
 HEAP32[$72 >> 2] = $74;
 $86 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$72 >> 2];
 $88 = HEAP32[$70 >> 2] | 0;
 HEAP32[$68 >> 2] = $86;
 HEAP32[$69 >> 2] = $88;
 $89 = HEAP32[$68 >> 2] | 0;
 HEAP32[$67 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$89 >> 2] = HEAP32[HEAP32[$67 >> 2] >> 2];
 __THREW__ = 0;
 $93 = invoke_ii(79, 16) | 0;
 $94 = __THREW__;
 __THREW__ = 0;
 if ($94 & 1) {
  $151 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$78 >> 2] = $151;
  HEAP32[$79 >> 2] = tempRet0;
  HEAP32[$66 >> 2] = $77;
  HEAP32[$63 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$64 >> 2] = 0;
  $154 = HEAP32[$63 >> 2] | 0;
  HEAP32[$62 >> 2] = $154;
  HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$65 >> 2] = HEAP32[HEAP32[$61 >> 2] >> 2];
  $158 = HEAP32[$64 >> 2] | 0;
  HEAP32[$58 >> 2] = $154;
  HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
  HEAP32[HEAP32[$57 >> 2] >> 2] = $158;
  if (!(HEAP32[$65 >> 2] | 0)) {
   $168 = HEAP32[$78 >> 2] | 0;
   $169 = HEAP32[$79 >> 2] | 0;
   ___resumeException($168 | 0);
  }
  HEAP32[$56 >> 2] = $154;
  HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
  $165 = HEAP32[$65 >> 2] | 0;
  HEAP32[$59 >> 2] = HEAP32[$55 >> 2];
  HEAP32[$60 >> 2] = $165;
  $166 = HEAP32[$60 >> 2] | 0;
  if (!$166) {
   $168 = HEAP32[$78 >> 2] | 0;
   $169 = HEAP32[$79 >> 2] | 0;
   ___resumeException($168 | 0);
  }
  __ZN3zim12FileCompoundD2Ev($166);
  __ZdlPv($166);
  $168 = HEAP32[$78 >> 2] | 0;
  $169 = HEAP32[$79 >> 2] | 0;
  ___resumeException($168 | 0);
 } else {
  $96 = HEAP32[$76 >> 2] | 0;
  HEAP32[$54 >> 2] = $81;
  HEAP8[$52 >> 0] = HEAP8[$81 >> 0] | 0;
  HEAP8[$53 >> 0] = HEAP8[$80 >> 0] | 0;
  HEAP32[$49 >> 2] = $93;
  HEAP32[$50 >> 2] = $96;
  $97 = HEAP32[$49 >> 2] | 0;
  HEAP32[$47 >> 2] = $97;
  HEAP32[$48 >> 2] = 0;
  $98 = HEAP32[$47 >> 2] | 0;
  $99 = HEAP32[$48 >> 2] | 0;
  HEAP32[$45 >> 2] = $98;
  HEAP32[$46 >> 2] = $99;
  $100 = HEAP32[$45 >> 2] | 0;
  HEAP32[$100 >> 2] = 47864;
  HEAP32[$100 + 4 >> 2] = HEAP32[$46 >> 2];
  HEAP32[$98 >> 2] = 47884;
  HEAP32[$98 + 8 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$97 >> 2] = 43676;
  HEAP32[$21 >> 2] = $53;
  $106 = HEAP32[$21 >> 2] | 0;
  HEAP32[$30 >> 2] = $51;
  HEAP32[$31 >> 2] = $50;
  HEAP32[$32 >> 2] = $106;
  $107 = HEAP32[$30 >> 2] | 0;
  HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
  $109 = HEAP32[$29 >> 2] | 0;
  HEAP32[$23 >> 2] = $107;
  HEAP32[$24 >> 2] = $109;
  $110 = HEAP32[$23 >> 2] | 0;
  HEAP32[$22 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$110 >> 2] = HEAP32[HEAP32[$22 >> 2] >> 2];
  HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
  $115 = HEAP32[$25 >> 2] | 0;
  HEAP32[$27 >> 2] = $107;
  HEAP32[$28 >> 2] = $115;
  HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$33 >> 2] = $52;
  $117 = HEAP32[$33 >> 2] | 0;
  HEAP32[$42 >> 2] = $97 + 12;
  HEAP32[$43 >> 2] = $51;
  HEAP32[$44 >> 2] = $117;
  $118 = HEAP32[$42 >> 2] | 0;
  HEAP32[$41 >> 2] = HEAP32[$43 >> 2];
  $120 = HEAP32[$41 >> 2] | 0;
  HEAP32[$35 >> 2] = $118;
  HEAP32[$36 >> 2] = $120;
  $121 = HEAP32[$35 >> 2] | 0;
  HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$121 >> 2] = HEAP32[HEAP32[$34 >> 2] >> 2];
  HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
  $125 = HEAP32[$37 >> 2] | 0;
  HEAP32[$39 >> 2] = $118;
  HEAP32[$40 >> 2] = $125;
  HEAP32[$38 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$82 + 4 >> 2] = $93;
  HEAP32[$7 >> 2] = $77;
  $128 = HEAP32[$7 >> 2] | 0;
  HEAP32[$6 >> 2] = $128;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$4 >> 2] = $128;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
  $135 = HEAP32[$76 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$76 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $135;
  __ZNSt3__210shared_ptrIN3zim12FileCompoundEE18__enable_weak_thisEz($82, $vararg_buffer);
  HEAP32[$20 >> 2] = $77;
  HEAP32[$17 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$18 >> 2] = 0;
  $137 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $137;
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$19 >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
  $141 = HEAP32[$18 >> 2] | 0;
  HEAP32[$12 >> 2] = $137;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[HEAP32[$11 >> 2] >> 2] = $141;
  if (!(HEAP32[$19 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$10 >> 2] = $137;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  $148 = HEAP32[$19 >> 2] | 0;
  HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$14 >> 2] = $148;
  $149 = HEAP32[$14 >> 2] | 0;
  if (!$149) {
   STACKTOP = sp;
   return;
  }
  __ZN3zim12FileCompoundD2Ev($149);
  __ZdlPv($149);
  STACKTOP = sp;
  return;
 }
}

function __ZNK3zim10FileReader10sub_readerENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy3 = 0, $$byval_copy4 = 0, $10 = 0, $103 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $12 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $140 = 0, $144 = 0, $15 = 0, $151 = 0, $152 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $8 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $$byval_copy4 = sp + 64 | 0;
 $$byval_copy3 = sp + 56 | 0;
 $4 = sp + 308 | 0;
 $5 = sp + 304 | 0;
 $6 = sp + 300 | 0;
 $7 = sp + 296 | 0;
 $8 = sp + 292 | 0;
 $9 = sp + 288 | 0;
 $10 = sp + 284 | 0;
 $11 = sp + 280 | 0;
 $12 = sp + 276 | 0;
 $13 = sp + 272 | 0;
 $14 = sp + 268 | 0;
 $15 = sp + 264 | 0;
 $16 = sp + 260 | 0;
 $17 = sp + 256 | 0;
 $18 = sp + 252 | 0;
 $19 = sp + 248 | 0;
 $20 = sp + 244 | 0;
 $21 = sp + 240 | 0;
 $22 = sp + 236 | 0;
 $23 = sp + 232 | 0;
 $24 = sp + 228 | 0;
 $25 = sp + 224 | 0;
 $26 = sp + 220 | 0;
 $27 = sp + 216 | 0;
 $28 = sp + 212 | 0;
 $29 = sp + 208 | 0;
 $30 = sp + 204 | 0;
 $31 = sp + 200 | 0;
 $32 = sp + 196 | 0;
 $33 = sp + 192 | 0;
 $34 = sp + 188 | 0;
 $35 = sp + 184 | 0;
 $36 = sp + 180 | 0;
 $37 = sp + 176 | 0;
 $38 = sp + 172 | 0;
 $39 = sp + 168 | 0;
 $40 = sp + 164 | 0;
 $41 = sp + 160 | 0;
 $42 = sp + 156 | 0;
 $43 = sp + 152 | 0;
 $44 = sp + 148 | 0;
 $45 = sp + 144 | 0;
 $46 = sp + 140 | 0;
 $47 = sp + 136 | 0;
 $48 = sp + 132 | 0;
 $49 = sp + 128 | 0;
 $50 = sp + 124 | 0;
 $51 = sp + 120 | 0;
 $52 = sp + 116 | 0;
 $54 = sp + 108 | 0;
 $55 = sp + 104 | 0;
 $56 = sp + 100 | 0;
 $57 = sp + 96 | 0;
 $58 = sp + 92 | 0;
 $59 = sp + 48 | 0;
 $60 = sp + 40 | 0;
 $61 = sp + 32 | 0;
 $62 = sp + 24 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 80 | 0;
 $65 = sp + 16 | 0;
 $66 = sp + 8 | 0;
 $67 = sp + 76 | 0;
 $68 = sp + 72 | 0;
 $69 = sp;
 $70 = sp + 312 | 0;
 HEAP32[$58 >> 2] = $1;
 $71 = HEAP32[$58 >> 2] | 0;
 HEAP32[$59 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$59 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $72 = $71 + 24 | 0;
 HEAP32[$60 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$60 + 4 >> 2] = HEAP32[$72 + 4 >> 2];
 if (!(__ZleIN3zim7zsize_tEEbRKT_S4_($59, $60) | 0)) {
  HEAP32[$61 >> 2] = HEAP32[$59 >> 2];
  HEAP32[$61 + 4 >> 2] = HEAP32[$59 + 4 >> 2];
  HEAP32[$62 >> 2] = HEAP32[$60 >> 2];
  HEAP32[$62 + 4 >> 2] = HEAP32[$60 + 4 >> 2];
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$61 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$61 + 4 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$62 + 4 >> 2];
  __Z15_on_assert_failIN3zim7zsize_tES1_EvPKcS3_S3_T_T0_S3_i(48607, 51100, 48612, $$byval_copy3, $$byval_copy4, 48618, 297);
 }
 $74 = __Znwm(32) | 0;
 HEAP8[$70 >> 0] = 1;
 HEAP32[$56 >> 2] = $64;
 HEAP32[$57 >> 2] = $71 + 4;
 $76 = HEAP32[$56 >> 2] | 0;
 HEAP32[$76 >> 2] = HEAP32[HEAP32[$57 >> 2] >> 2];
 HEAP32[$76 + 4 >> 2] = HEAP32[(HEAP32[$57 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$76 + 4 >> 2] | 0) {
  HEAP32[$55 >> 2] = HEAP32[$76 + 4 >> 2];
  HEAP32[$54 >> 2] = HEAP32[$55 >> 2];
  HEAP32[$51 >> 2] = (HEAP32[$54 >> 2] | 0) + 4;
  $91 = HEAP32[$51 >> 2] | 0;
  HEAP32[$52 >> 2] = 1;
  $92 = HEAP32[$52 >> 2] | 0;
  $93 = HEAP32[$91 >> 2] | 0;
  HEAP32[$91 >> 2] = $93 + $92;
  HEAP32[sp + 112 >> 2] = $93 + $92;
 }
 $96 = $71 + 16 | 0;
 HEAP32[$66 >> 2] = HEAP32[$96 >> 2];
 HEAP32[$66 + 4 >> 2] = HEAP32[$96 + 4 >> 2];
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
 $97 = __ZplIN3zim8offset_tEET_S2_RKS2_($$byval_copy4, $2) | 0;
 $99 = $65;
 HEAP32[$99 >> 2] = $97;
 HEAP32[$99 + 4 >> 2] = tempRet0;
 HEAP32[$69 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$69 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$65 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$65 + 4 >> 2];
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$69 + 4 >> 2];
 invoke_viiii(18, $74 | 0, $64 | 0, $$byval_copy3 | 0, $$byval_copy4 | 0);
 $103 = __THREW__;
 __THREW__ = 0;
 if ($103 & 1) {
  $157 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$67 >> 2] = $157;
  HEAP32[$68 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($64);
  if (!(HEAP8[$70 >> 0] & 1)) {
   $160 = HEAP32[$67 >> 2] | 0;
   $161 = HEAP32[$68 >> 2] | 0;
   ___resumeException($160 | 0);
  }
  __ZdlPv($74);
  $160 = HEAP32[$67 >> 2] | 0;
  $161 = HEAP32[$68 >> 2] | 0;
  ___resumeException($160 | 0);
 }
 HEAP8[$70 >> 0] = 0;
 HEAP32[$49 >> 2] = $63;
 HEAP32[$50 >> 2] = $74;
 HEAP32[$47 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$48 >> 2] = $50;
 $106 = HEAP32[$47 >> 2] | 0;
 HEAP32[$46 >> 2] = HEAP32[$48 >> 2];
 $108 = HEAP32[$46 >> 2] | 0;
 HEAP32[$44 >> 2] = $106;
 HEAP32[$45 >> 2] = $108;
 $109 = HEAP32[$44 >> 2] | 0;
 HEAP32[$43 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$109 >> 2] = HEAP32[HEAP32[$43 >> 2] >> 2];
 HEAP32[$40 >> 2] = $0;
 HEAP32[$41 >> 2] = $63;
 $113 = HEAP32[$40 >> 2] | 0;
 HEAP32[$38 >> 2] = HEAP32[$41 >> 2];
 $115 = HEAP32[$38 >> 2] | 0;
 HEAP32[$37 >> 2] = $115;
 HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$39 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
 HEAP32[$35 >> 2] = $115;
 HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
 HEAP32[HEAP32[$34 >> 2] >> 2] = 0;
 HEAP32[$42 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$33 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$16 >> 2] = HEAP32[$31 >> 2];
 $126 = HEAP32[$16 >> 2] | 0;
 HEAP32[$28 >> 2] = $113;
 HEAP32[$29 >> 2] = $42;
 HEAP32[$30 >> 2] = $126;
 $127 = HEAP32[$28 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
 $129 = HEAP32[$27 >> 2] | 0;
 HEAP32[$18 >> 2] = $127;
 HEAP32[$19 >> 2] = $129;
 $130 = HEAP32[$18 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$130 >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
 HEAP32[$20 >> 2] = HEAP32[$30 >> 2];
 $135 = HEAP32[$20 >> 2] | 0;
 HEAP32[$25 >> 2] = $127;
 HEAP32[$26 >> 2] = $135;
 $136 = HEAP32[$25 >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
 $138 = HEAP32[$24 >> 2] | 0;
 HEAP32[$21 >> 2] = $136;
 HEAP32[$22 >> 2] = $138;
 HEAP32[$23 >> 2] = 0;
 HEAP32[$15 >> 2] = $63;
 HEAP32[$12 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = 0;
 $140 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $140;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$14 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 $144 = HEAP32[$13 >> 2] | 0;
 HEAP32[$7 >> 2] = $140;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = $144;
 if (!(HEAP32[$14 >> 2] | 0)) {
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($64);
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = $140;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 $151 = HEAP32[$14 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$9 >> 2] = $151;
 $152 = HEAP32[$9 >> 2] | 0;
 if (!$152) {
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($64);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$152 >> 2] | 0) + 8 >> 2] & 255]($152);
 __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($64);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim8FileImplEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $110 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $125 = 0, $128 = 0, $13 = 0, $135 = 0, $137 = 0, $14 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $158 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp + 320 | 0;
 $4 = sp + 316 | 0;
 $5 = sp + 312 | 0;
 $6 = sp + 308 | 0;
 $7 = sp + 304 | 0;
 $8 = sp + 300 | 0;
 $9 = sp + 296 | 0;
 $10 = sp + 292 | 0;
 $11 = sp + 288 | 0;
 $12 = sp + 284 | 0;
 $13 = sp + 280 | 0;
 $14 = sp + 276 | 0;
 $15 = sp + 272 | 0;
 $16 = sp + 268 | 0;
 $17 = sp + 264 | 0;
 $18 = sp + 260 | 0;
 $19 = sp + 256 | 0;
 $20 = sp + 252 | 0;
 $21 = sp + 248 | 0;
 $22 = sp + 244 | 0;
 $23 = sp + 240 | 0;
 $24 = sp + 236 | 0;
 $25 = sp + 232 | 0;
 $26 = sp + 228 | 0;
 $27 = sp + 224 | 0;
 $28 = sp + 220 | 0;
 $29 = sp + 216 | 0;
 $30 = sp + 212 | 0;
 $31 = sp + 208 | 0;
 $32 = sp + 204 | 0;
 $33 = sp + 200 | 0;
 $34 = sp + 196 | 0;
 $35 = sp + 192 | 0;
 $36 = sp + 188 | 0;
 $37 = sp + 184 | 0;
 $38 = sp + 180 | 0;
 $39 = sp + 176 | 0;
 $40 = sp + 172 | 0;
 $41 = sp + 168 | 0;
 $42 = sp + 164 | 0;
 $43 = sp + 160 | 0;
 $44 = sp + 156 | 0;
 $45 = sp + 152 | 0;
 $46 = sp + 148 | 0;
 $47 = sp + 144 | 0;
 $48 = sp + 140 | 0;
 $49 = sp + 136 | 0;
 $50 = sp + 132 | 0;
 $51 = sp + 128 | 0;
 $52 = sp + 8 | 0;
 $53 = sp;
 $54 = sp + 124 | 0;
 $55 = sp + 120 | 0;
 $56 = sp + 116 | 0;
 $57 = sp + 112 | 0;
 $58 = sp + 108 | 0;
 $59 = sp + 104 | 0;
 $60 = sp + 100 | 0;
 $61 = sp + 96 | 0;
 $62 = sp + 92 | 0;
 $63 = sp + 88 | 0;
 $64 = sp + 84 | 0;
 $65 = sp + 80 | 0;
 $66 = sp + 76 | 0;
 $67 = sp + 72 | 0;
 $68 = sp + 68 | 0;
 $69 = sp + 64 | 0;
 $70 = sp + 60 | 0;
 $71 = sp + 56 | 0;
 $72 = sp + 52 | 0;
 $73 = sp + 48 | 0;
 $74 = sp + 44 | 0;
 $75 = sp + 40 | 0;
 $76 = sp + 36 | 0;
 $77 = sp + 32 | 0;
 $78 = sp + 28 | 0;
 $79 = sp + 24 | 0;
 $80 = sp + 325 | 0;
 $81 = sp + 324 | 0;
 HEAP32[$75 >> 2] = $0;
 HEAP32[$76 >> 2] = $1;
 $82 = HEAP32[$75 >> 2] | 0;
 HEAP32[$82 >> 2] = HEAP32[$76 >> 2];
 $84 = HEAP32[$76 >> 2] | 0;
 HEAP32[$73 >> 2] = $77;
 HEAP32[$74 >> 2] = $84;
 HEAP32[$71 >> 2] = HEAP32[$73 >> 2];
 HEAP32[$72 >> 2] = $74;
 $86 = HEAP32[$71 >> 2] | 0;
 HEAP32[$70 >> 2] = HEAP32[$72 >> 2];
 $88 = HEAP32[$70 >> 2] | 0;
 HEAP32[$68 >> 2] = $86;
 HEAP32[$69 >> 2] = $88;
 $89 = HEAP32[$68 >> 2] | 0;
 HEAP32[$67 >> 2] = HEAP32[$69 >> 2];
 HEAP32[$89 >> 2] = HEAP32[HEAP32[$67 >> 2] >> 2];
 __THREW__ = 0;
 $93 = invoke_ii(79, 16) | 0;
 $94 = __THREW__;
 __THREW__ = 0;
 if ($94 & 1) {
  $151 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$78 >> 2] = $151;
  HEAP32[$79 >> 2] = tempRet0;
  HEAP32[$66 >> 2] = $77;
  HEAP32[$63 >> 2] = HEAP32[$66 >> 2];
  HEAP32[$64 >> 2] = 0;
  $154 = HEAP32[$63 >> 2] | 0;
  HEAP32[$62 >> 2] = $154;
  HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$65 >> 2] = HEAP32[HEAP32[$61 >> 2] >> 2];
  $158 = HEAP32[$64 >> 2] | 0;
  HEAP32[$58 >> 2] = $154;
  HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
  HEAP32[HEAP32[$57 >> 2] >> 2] = $158;
  if (!(HEAP32[$65 >> 2] | 0)) {
   $168 = HEAP32[$78 >> 2] | 0;
   $169 = HEAP32[$79 >> 2] | 0;
   ___resumeException($168 | 0);
  }
  HEAP32[$56 >> 2] = $154;
  HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
  $165 = HEAP32[$65 >> 2] | 0;
  HEAP32[$59 >> 2] = HEAP32[$55 >> 2];
  HEAP32[$60 >> 2] = $165;
  $166 = HEAP32[$60 >> 2] | 0;
  if (!$166) {
   $168 = HEAP32[$78 >> 2] | 0;
   $169 = HEAP32[$79 >> 2] | 0;
   ___resumeException($168 | 0);
  }
  __ZN3zim8FileImplD2Ev($166);
  __ZdlPv($166);
  $168 = HEAP32[$78 >> 2] | 0;
  $169 = HEAP32[$79 >> 2] | 0;
  ___resumeException($168 | 0);
 } else {
  $96 = HEAP32[$76 >> 2] | 0;
  HEAP32[$54 >> 2] = $81;
  HEAP8[$52 >> 0] = HEAP8[$81 >> 0] | 0;
  HEAP8[$53 >> 0] = HEAP8[$80 >> 0] | 0;
  HEAP32[$49 >> 2] = $93;
  HEAP32[$50 >> 2] = $96;
  $97 = HEAP32[$49 >> 2] | 0;
  HEAP32[$47 >> 2] = $97;
  HEAP32[$48 >> 2] = 0;
  $98 = HEAP32[$47 >> 2] | 0;
  $99 = HEAP32[$48 >> 2] | 0;
  HEAP32[$45 >> 2] = $98;
  HEAP32[$46 >> 2] = $99;
  $100 = HEAP32[$45 >> 2] | 0;
  HEAP32[$100 >> 2] = 47864;
  HEAP32[$100 + 4 >> 2] = HEAP32[$46 >> 2];
  HEAP32[$98 >> 2] = 47884;
  HEAP32[$98 + 8 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$97 >> 2] = 43620;
  HEAP32[$21 >> 2] = $53;
  $106 = HEAP32[$21 >> 2] | 0;
  HEAP32[$30 >> 2] = $51;
  HEAP32[$31 >> 2] = $50;
  HEAP32[$32 >> 2] = $106;
  $107 = HEAP32[$30 >> 2] | 0;
  HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
  $109 = HEAP32[$29 >> 2] | 0;
  HEAP32[$23 >> 2] = $107;
  HEAP32[$24 >> 2] = $109;
  $110 = HEAP32[$23 >> 2] | 0;
  HEAP32[$22 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$110 >> 2] = HEAP32[HEAP32[$22 >> 2] >> 2];
  HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
  $115 = HEAP32[$25 >> 2] | 0;
  HEAP32[$27 >> 2] = $107;
  HEAP32[$28 >> 2] = $115;
  HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$33 >> 2] = $52;
  $117 = HEAP32[$33 >> 2] | 0;
  HEAP32[$42 >> 2] = $97 + 12;
  HEAP32[$43 >> 2] = $51;
  HEAP32[$44 >> 2] = $117;
  $118 = HEAP32[$42 >> 2] | 0;
  HEAP32[$41 >> 2] = HEAP32[$43 >> 2];
  $120 = HEAP32[$41 >> 2] | 0;
  HEAP32[$35 >> 2] = $118;
  HEAP32[$36 >> 2] = $120;
  $121 = HEAP32[$35 >> 2] | 0;
  HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$121 >> 2] = HEAP32[HEAP32[$34 >> 2] >> 2];
  HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
  $125 = HEAP32[$37 >> 2] | 0;
  HEAP32[$39 >> 2] = $118;
  HEAP32[$40 >> 2] = $125;
  HEAP32[$38 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$82 + 4 >> 2] = $93;
  HEAP32[$7 >> 2] = $77;
  $128 = HEAP32[$7 >> 2] | 0;
  HEAP32[$6 >> 2] = $128;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$4 >> 2] = $128;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
  $135 = HEAP32[$76 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = HEAP32[$76 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = $135;
  __ZNSt3__210shared_ptrIN3zim8FileImplEE18__enable_weak_thisEz($82, $vararg_buffer);
  HEAP32[$20 >> 2] = $77;
  HEAP32[$17 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$18 >> 2] = 0;
  $137 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $137;
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$19 >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
  $141 = HEAP32[$18 >> 2] | 0;
  HEAP32[$12 >> 2] = $137;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[HEAP32[$11 >> 2] >> 2] = $141;
  if (!(HEAP32[$19 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$10 >> 2] = $137;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  $148 = HEAP32[$19 >> 2] | 0;
  HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$14 >> 2] = $148;
  $149 = HEAP32[$14 >> 2] | 0;
  if (!$149) {
   STACKTOP = sp;
   return;
  }
  __ZN3zim8FileImplD2Ev($149);
  __ZdlPv($149);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $107 = 0, $11 = 0, $110 = 0, $111 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $13 = 0, $133 = 0, $138 = 0, $14 = 0, $140 = 0, $142 = 0, $149 = 0, $15 = 0, $16 = 0, $160 = 0, $17 = 0, $173 = 0, $18 = 0, $187 = 0, $19 = 0, $192 = 0, $2 = 0, $20 = 0, $207 = 0, $21 = 0, $213 = 0, $214 = 0, $217 = 0, $22 = 0, $220 = 0, $222 = 0, $23 = 0, $232 = 0, $235 = 0, $237 = 0, $24 = 0, $247 = 0, $25 = 0, $252 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $2 = sp + 340 | 0;
 $3 = sp + 336 | 0;
 $4 = sp + 332 | 0;
 $6 = sp + 324 | 0;
 $7 = sp + 320 | 0;
 $8 = sp + 316 | 0;
 $9 = sp + 312 | 0;
 $10 = sp + 308 | 0;
 $11 = sp + 304 | 0;
 $12 = sp + 300 | 0;
 $13 = sp + 296 | 0;
 $14 = sp + 292 | 0;
 $15 = sp + 288 | 0;
 $16 = sp + 284 | 0;
 $17 = sp + 280 | 0;
 $18 = sp + 276 | 0;
 $19 = sp + 272 | 0;
 $20 = sp + 268 | 0;
 $21 = sp + 264 | 0;
 $22 = sp + 260 | 0;
 $23 = sp + 256 | 0;
 $24 = sp + 252 | 0;
 $25 = sp + 248 | 0;
 $26 = sp + 244 | 0;
 $27 = sp + 240 | 0;
 $28 = sp + 236 | 0;
 $29 = sp + 232 | 0;
 $30 = sp + 228 | 0;
 $31 = sp + 224 | 0;
 $32 = sp + 220 | 0;
 $33 = sp + 216 | 0;
 $34 = sp + 212 | 0;
 $35 = sp + 208 | 0;
 $36 = sp + 204 | 0;
 $37 = sp + 200 | 0;
 $38 = sp + 196 | 0;
 $39 = sp + 192 | 0;
 $40 = sp + 188 | 0;
 $41 = sp + 184 | 0;
 $42 = sp + 180 | 0;
 $43 = sp + 176 | 0;
 $44 = sp + 172 | 0;
 $45 = sp + 168 | 0;
 $46 = sp + 164 | 0;
 $47 = sp + 160 | 0;
 $48 = sp + 156 | 0;
 $49 = sp + 152 | 0;
 $50 = sp + 148 | 0;
 $56 = sp + 124 | 0;
 $57 = sp + 120 | 0;
 $58 = sp + 116 | 0;
 $59 = sp + 112 | 0;
 $61 = sp + 104 | 0;
 $62 = sp + 100 | 0;
 $63 = sp + 96 | 0;
 $64 = sp + 92 | 0;
 $65 = sp + 88 | 0;
 $66 = sp + 84 | 0;
 $67 = sp + 80 | 0;
 $68 = sp + 76 | 0;
 $69 = sp + 72 | 0;
 $70 = sp + 68 | 0;
 $71 = sp + 64 | 0;
 $72 = sp + 60 | 0;
 $73 = sp + 56 | 0;
 $74 = sp + 52 | 0;
 $75 = sp + 48 | 0;
 $76 = sp + 44 | 0;
 $77 = sp + 40 | 0;
 $83 = sp + 16 | 0;
 $84 = sp + 12 | 0;
 $85 = sp + 8 | 0;
 $86 = sp + 4 | 0;
 $87 = sp;
 HEAP32[$86 >> 2] = $0;
 HEAP32[$87 >> 2] = $1;
 $88 = HEAP32[$86 >> 2] | 0;
 HEAP32[$85 >> 2] = $88;
 $89 = HEAP32[$85 >> 2] | 0;
 HEAP32[$84 >> 2] = $89;
 HEAP32[$83 >> 2] = HEAP32[HEAP32[$84 >> 2] >> 2];
 $92 = HEAP32[$83 >> 2] | 0;
 HEAP32[$62 >> 2] = $89;
 HEAP32[$61 >> 2] = HEAP32[HEAP32[$62 >> 2] >> 2];
 $95 = HEAP32[$61 >> 2] | 0;
 HEAP32[$67 >> 2] = $89;
 HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
 $97 = HEAP32[$66 >> 2] | 0;
 HEAP32[$65 >> 2] = $97;
 HEAP32[$64 >> 2] = (HEAP32[$65 >> 2] | 0) + 8;
 HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
 $107 = $95 + ((HEAP32[HEAP32[$63 >> 2] >> 2] | 0) - (HEAP32[$97 >> 2] | 0)) | 0;
 HEAP32[$69 >> 2] = $89;
 HEAP32[$68 >> 2] = HEAP32[HEAP32[$69 >> 2] >> 2];
 $110 = HEAP32[$68 >> 2] | 0;
 HEAP32[$70 >> 2] = $89;
 $111 = HEAP32[$70 >> 2] | 0;
 $118 = $110 + ((HEAP32[$111 + 4 >> 2] | 0) - (HEAP32[$111 >> 2] | 0)) | 0;
 HEAP32[$72 >> 2] = $89;
 HEAP32[$71 >> 2] = HEAP32[HEAP32[$72 >> 2] >> 2];
 $121 = HEAP32[$71 >> 2] | 0;
 HEAP32[$77 >> 2] = $89;
 HEAP32[$76 >> 2] = HEAP32[$77 >> 2];
 $123 = HEAP32[$76 >> 2] | 0;
 HEAP32[$75 >> 2] = $123;
 HEAP32[$74 >> 2] = (HEAP32[$75 >> 2] | 0) + 8;
 HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
 $133 = $121 + ((HEAP32[HEAP32[$73 >> 2] >> 2] | 0) - (HEAP32[$123 >> 2] | 0)) | 0;
 HEAP32[sp + 36 >> 2] = $89;
 HEAP32[sp + 32 >> 2] = $92;
 HEAP32[sp + 28 >> 2] = $107;
 HEAP32[sp + 24 >> 2] = $118;
 HEAP32[sp + 20 >> 2] = $133;
 HEAP32[$4 >> 2] = $88;
 HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 8;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $138 = HEAP32[$88 >> 2] | 0;
 $140 = HEAP32[$88 + 4 >> 2] | 0;
 $142 = (HEAP32[$87 >> 2] | 0) + 4 | 0;
 HEAP32[sp + 328 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 >> 2] = $138;
 HEAP32[$7 >> 2] = $140;
 HEAP32[$8 >> 2] = $142;
 HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$6 >> 2] | 0);
 $149 = HEAP32[$8 >> 2] | 0;
 HEAP32[$149 >> 2] = (HEAP32[$149 >> 2] | 0) + (0 - (HEAP32[$9 >> 2] | 0));
 if ((HEAP32[$9 >> 2] | 0) > 0) _memcpy(HEAP32[HEAP32[$8 >> 2] >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
 $160 = (HEAP32[$87 >> 2] | 0) + 4 | 0;
 HEAP32[$13 >> 2] = $88;
 HEAP32[$14 >> 2] = $160;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
 HEAP32[$10 >> 2] = HEAP32[$14 >> 2];
 HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$11 >> 2] = $15;
 HEAP32[HEAP32[$14 >> 2] >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 $173 = (HEAP32[$87 >> 2] | 0) + 8 | 0;
 HEAP32[$19 >> 2] = $88 + 4;
 HEAP32[$20 >> 2] = $173;
 HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
 HEAP32[$16 >> 2] = HEAP32[$20 >> 2];
 HEAP32[HEAP32[$19 >> 2] >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
 HEAP32[$17 >> 2] = $21;
 HEAP32[HEAP32[$20 >> 2] >> 2] = HEAP32[HEAP32[$17 >> 2] >> 2];
 HEAP32[$24 >> 2] = $88;
 HEAP32[$23 >> 2] = (HEAP32[$24 >> 2] | 0) + 8;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 $187 = HEAP32[$22 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$87 >> 2];
 HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 12;
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 $192 = HEAP32[$25 >> 2] | 0;
 HEAP32[$31 >> 2] = $187;
 HEAP32[$32 >> 2] = $192;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$33 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
 HEAP32[$28 >> 2] = HEAP32[$32 >> 2];
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$29 >> 2] = $33;
 HEAP32[HEAP32[$32 >> 2] >> 2] = HEAP32[HEAP32[$29 >> 2] >> 2];
 HEAP32[HEAP32[$87 >> 2] >> 2] = HEAP32[(HEAP32[$87 >> 2] | 0) + 4 >> 2];
 HEAP32[$34 >> 2] = $88;
 $207 = HEAP32[$34 >> 2] | 0;
 $213 = (HEAP32[$207 + 4 >> 2] | 0) - (HEAP32[$207 >> 2] | 0) | 0;
 HEAP32[$58 >> 2] = $88;
 HEAP32[$59 >> 2] = $213;
 $214 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = $214;
 HEAP32[$56 >> 2] = HEAP32[HEAP32[$57 >> 2] >> 2];
 $217 = HEAP32[$56 >> 2] | 0;
 HEAP32[$36 >> 2] = $214;
 HEAP32[$35 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
 $220 = HEAP32[$35 >> 2] | 0;
 HEAP32[$41 >> 2] = $214;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $222 = HEAP32[$40 >> 2] | 0;
 HEAP32[$39 >> 2] = $222;
 HEAP32[$38 >> 2] = (HEAP32[$39 >> 2] | 0) + 8;
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 $232 = $220 + ((HEAP32[HEAP32[$37 >> 2] >> 2] | 0) - (HEAP32[$222 >> 2] | 0)) | 0;
 HEAP32[$43 >> 2] = $214;
 HEAP32[$42 >> 2] = HEAP32[HEAP32[$43 >> 2] >> 2];
 $235 = HEAP32[$42 >> 2] | 0;
 HEAP32[$48 >> 2] = $214;
 HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
 $237 = HEAP32[$47 >> 2] | 0;
 HEAP32[$46 >> 2] = $237;
 HEAP32[$45 >> 2] = (HEAP32[$46 >> 2] | 0) + 8;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 $247 = $235 + ((HEAP32[HEAP32[$44 >> 2] >> 2] | 0) - (HEAP32[$237 >> 2] | 0)) | 0;
 HEAP32[$50 >> 2] = $214;
 HEAP32[$49 >> 2] = HEAP32[HEAP32[$50 >> 2] >> 2];
 $252 = (HEAP32[$49 >> 2] | 0) + (HEAP32[$59 >> 2] | 0) | 0;
 HEAP32[sp + 144 >> 2] = $214;
 HEAP32[sp + 140 >> 2] = $217;
 HEAP32[sp + 136 >> 2] = $232;
 HEAP32[sp + 132 >> 2] = $247;
 HEAP32[sp + 128 >> 2] = $252;
 HEAP32[sp + 108 >> 2] = $88;
 STACKTOP = sp;
 return;
}

function _lzma_code($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $189 = 0, $194 = 0, $199 = 0, $2 = 0, $200 = 0, $206 = 0, $208 = 0, $214 = 0, $219 = 0, $224 = 0, $225 = 0, $231 = 0, $233 = 0, $252 = 0, $298 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $61 = 0, $7 = 0, $72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) {
  if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) label = 3;
 } else label = 3;
 do if ((label | 0) == 3) {
  if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0)) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0) break;
  if (HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) if (!((HEAP32[$4 >> 2] | 0) >>> 0 > 4 ? 1 : (HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 20 >> 2] | 0) == 0)) if (HEAP8[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 56 + (HEAP32[$4 >> 2] | 0) >> 0] & 1) {
   if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 40 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] | 0)) {
    $61 = (HEAP32[$3 >> 2] | 0) + 56 | 0;
    if (!((HEAP32[$61 >> 2] | 0) != 0 | (HEAP32[$61 + 4 >> 2] | 0) != 0)) {
     $72 = (HEAP32[$3 >> 2] | 0) + 64 | 0;
     if (!((HEAP32[$72 >> 2] | 0) != 0 | (HEAP32[$72 + 4 >> 2] | 0) != 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 80 >> 2] | 0)) if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] | 0)) {
      L22 : do switch (HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] | 0) {
      case 0:
       {
        switch (HEAP32[$4 >> 2] | 0) {
        case 4:
         {
          HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 4;
          break L22;
          break;
         }
        case 1:
         {
          HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 1;
          break L22;
          break;
         }
        case 2:
         {
          HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 2;
          break L22;
          break;
         }
        case 3:
         {
          HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 3;
          break L22;
          break;
         }
        default:
         break L22;
        }
        break;
       }
      case 1:
       {
        if ((HEAP32[$4 >> 2] | 0) == 1) if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 52 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) break L22;
        HEAP32[$2 >> 2] = 11;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      case 2:
       {
        if ((HEAP32[$4 >> 2] | 0) == 2) if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 52 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) break L22;
        HEAP32[$2 >> 2] = 11;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      case 3:
       {
        if ((HEAP32[$4 >> 2] | 0) == 3) if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 52 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) break L22;
        HEAP32[$2 >> 2] = 11;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      case 4:
       {
        if ((HEAP32[$4 >> 2] | 0) == 4) if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 52 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0)) break L22;
        HEAP32[$2 >> 2] = 11;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      case 5:
       {
        HEAP32[$2 >> 2] = 1;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      default:
       {
        HEAP32[$2 >> 2] = 11;
        $298 = HEAP32[$2 >> 2] | 0;
        STACKTOP = sp;
        return $298 | 0;
       }
      } while (0);
      HEAP32[$5 >> 2] = 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$7 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 20 >> 2] & 7](HEAP32[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] | 0, HEAP32[HEAP32[$3 >> 2] >> 2] | 0, $5, HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0, $6, HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
      $189 = HEAP32[$3 >> 2] | 0;
      HEAP32[$189 >> 2] = (HEAP32[$189 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
      $194 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
      HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) - (HEAP32[$5 >> 2] | 0);
      $199 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
      $200 = $199;
      $206 = _i64Add(HEAP32[$200 >> 2] | 0, HEAP32[$200 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
      $208 = $199;
      HEAP32[$208 >> 2] = $206;
      HEAP32[$208 + 4 >> 2] = tempRet0;
      $214 = (HEAP32[$3 >> 2] | 0) + 16 | 0;
      HEAP32[$214 >> 2] = (HEAP32[$214 >> 2] | 0) + (HEAP32[$6 >> 2] | 0);
      $219 = (HEAP32[$3 >> 2] | 0) + 20 | 0;
      HEAP32[$219 >> 2] = (HEAP32[$219 >> 2] | 0) - (HEAP32[$6 >> 2] | 0);
      $224 = (HEAP32[$3 >> 2] | 0) + 24 | 0;
      $225 = $224;
      $231 = _i64Add(HEAP32[$225 >> 2] | 0, HEAP32[$225 + 4 >> 2] | 0, HEAP32[$6 >> 2] | 0, 0) | 0;
      $233 = $224;
      HEAP32[$233 >> 2] = $231;
      HEAP32[$233 + 4 >> 2] = tempRet0;
      HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 52 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
      L54 : do switch (HEAP32[$7 >> 2] | 0) {
      case 0:
       {
        $252 = (HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 61 | 0;
        if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$5 >> 2] | 0) == 0)) {
         HEAP8[$252 >> 0] = 0;
         break L54;
        }
        if (HEAP8[$252 >> 0] & 1) {
         HEAP32[$7 >> 2] = 10;
         break L54;
        } else {
         HEAP8[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 61 >> 0] = 1;
         break L54;
        }
        break;
       }
      case 32:
       {
        HEAP8[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 61 >> 0] = 0;
        HEAP32[$7 >> 2] = 0;
        break;
       }
      case 1:
       {
        do if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] | 0) != 1) {
         if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] | 0) == 2) break;
         if ((HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] | 0) == 4) break;
         HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 5;
         label = 52;
         break L54;
        } while (0);
        HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 0;
        label = 52;
        break;
       }
      case 6:
      case 4:
      case 3:
      case 2:
       {
        label = 52;
        break;
       }
      default:
       HEAP32[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 6;
      } while (0);
      if ((label | 0) == 52) HEAP8[(HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0) + 61 >> 0] = 0;
      HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
      $298 = HEAP32[$2 >> 2] | 0;
      STACKTOP = sp;
      return $298 | 0;
     }
    }
   }
   HEAP32[$2 >> 2] = 8;
   $298 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $298 | 0;
  }
 } while (0);
 HEAP32[$2 >> 2] = 11;
 $298 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $298 | 0;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i53 = 0, $$0$i$i55 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$250 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$sink101 = 0, $$sink102 = 0, $$sink103 = 0, $$sroa$067$0 = 0, $$sroa$067$1 = 0, $$sroa$079$0 = 0, $$sroa$079$1 = 0, $$sroa$079$2 = 0, $$sroa$092$0 = 0, $$sroa$092$1 = 0, $$sroa$092$2 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $11 = 0, $110 = 0, $112 = 0, $114 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $43 = 0, $48 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $87 = 0, $9 = 0, $95 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $$byval_copy = sp + 912 | 0;
 $vararg_buffer1 = sp + 904 | 0;
 $6 = sp + 800 | 0;
 $7 = sp + 984 | 0;
 $8 = sp + 400 | 0;
 $9 = sp + 980 | 0;
 $10 = sp + 988 | 0;
 $11 = sp + 976 | 0;
 $12 = sp + 972 | 0;
 $13 = sp + 960 | 0;
 $14 = sp + 948 | 0;
 $15 = sp + 936 | 0;
 $16 = sp + 932 | 0;
 $17 = sp;
 $18 = sp + 928 | 0;
 $19 = sp + 920 | 0;
 $20 = sp + 924 | 0;
 HEAP32[$7 >> 2] = $6;
 HEAPF64[$$byval_copy >> 3] = $5;
 $21 = _snprintf($6, 100, 54568, $$byval_copy) | 0;
 L1 : do if ($21 >>> 0 > 99) {
  __THREW__ = 0;
  $23 = invoke_i(1) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  do if ($24 & 1) {
   $$sroa$079$0 = 0;
   $$sroa$092$0 = 0;
  } else {
   __THREW__ = 0;
   HEAPF64[$vararg_buffer1 >> 3] = $5;
   $26 = invoke_iiiii(23, $7 | 0, $23 | 0, 54568, $vararg_buffer1 | 0) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if ($27 & 1) {
    $$sroa$079$0 = 0;
    $$sroa$092$0 = 0;
   } else {
    $29 = HEAP32[$7 >> 2] | 0;
    if (!$29) {
     __THREW__ = 0;
     invoke_v(5);
     __THREW__ = 0;
     $$sroa$079$0 = 0;
     $$sroa$092$0 = 0;
     break;
    }
    $34 = $29;
    $36 = _malloc($26 << 2) | 0;
    $37 = $36;
    if ($36 | 0) {
     $$0 = $36;
     $$046 = $26;
     $$sroa$079$1 = $37;
     $$sroa$092$1 = $34;
     label = 9;
     break L1;
    }
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $$sroa$079$0 = $37;
    $$sroa$092$0 = $34;
   }
  } while (0);
  $32 = ___cxa_find_matching_catch_2() | 0;
  $$4 = $32;
  $$452 = tempRet0;
  $$sroa$079$2 = $$sroa$079$0;
  $$sroa$092$2 = $$sroa$092$0;
 } else {
  $$0 = $8;
  $$046 = $21;
  $$sroa$079$1 = 0;
  $$sroa$092$1 = 0;
  label = 9;
 } while (0);
 if ((label | 0) == 9) {
  __ZNKSt3__28ios_base6getlocEv($9, $3);
  __THREW__ = 0;
  $40 = invoke_iii(32, $9 | 0, 62400) | 0;
  $41 = __THREW__;
  __THREW__ = 0;
  if ($41 & 1) label = 29; else {
   $43 = HEAP32[$7 >> 2] | 0;
   __THREW__ = 0;
   invoke_iiiii(HEAP32[(HEAP32[$40 >> 2] | 0) + 48 >> 2] | 0, $40 | 0, $43 | 0, $43 + $$046 | 0, $$0 | 0) | 0;
   $48 = __THREW__;
   __THREW__ = 0;
   if ($48 & 1) label = 29; else {
    if (!$$046) $60 = 0; else $60 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$13 + 4 >> 2] = 0;
    HEAP32[$13 + 8 >> 2] = 0;
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    HEAP32[$14 >> 2] = 0;
    HEAP32[$14 + 4 >> 2] = 0;
    HEAP32[$14 + 8 >> 2] = 0;
    $$0$i$i53 = 0;
    while (1) {
     if (($$0$i$i53 | 0) == 3) break;
     HEAP32[$14 + ($$0$i$i53 << 2) >> 2] = 0;
     $$0$i$i53 = $$0$i$i53 + 1 | 0;
    }
    HEAP32[$15 >> 2] = 0;
    HEAP32[$15 + 4 >> 2] = 0;
    HEAP32[$15 + 8 >> 2] = 0;
    $$0$i$i55 = 0;
    while (1) {
     if (($$0$i$i55 | 0) == 3) break;
     HEAP32[$15 + ($$0$i$i55 << 2) >> 2] = 0;
     $$0$i$i55 = $$0$i$i55 + 1 | 0;
    }
    __THREW__ = 0;
    invoke_viiiiiiiiii(4, $2 | 0, $60 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0, $14 | 0, $15 | 0, $16 | 0);
    $61 = __THREW__;
    __THREW__ = 0;
    if ($61 & 1) {
     $114 = ___cxa_find_matching_catch_2() | 0;
     $$1 = $114;
     $$149 = tempRet0;
    } else {
     $63 = HEAP32[$16 >> 2] | 0;
     if (($$046 | 0) > ($63 | 0)) {
      $69 = HEAP8[$15 + 8 + 3 >> 0] | 0;
      $77 = HEAP8[$14 + 8 + 3 >> 0] | 0;
      $$sink101 = $77 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $77 & 255;
      $$sink102 = $63 + 1 + ($$046 - $63 << 1) | 0;
      $$sink103 = $69 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $69 & 255;
     } else {
      $87 = HEAP8[$15 + 8 + 3 >> 0] | 0;
      $95 = HEAP8[$14 + 8 + 3 >> 0] | 0;
      $$sink101 = $95 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $95 & 255;
      $$sink102 = $63 + 2 | 0;
      $$sink103 = $87 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $87 & 255;
     }
     $103 = $$sink102 + $$sink103 + $$sink101 | 0;
     if ($103 >>> 0 > 100) {
      $106 = _malloc($103 << 2) | 0;
      $107 = $106;
      if (!$106) {
       __THREW__ = 0;
       invoke_v(5);
       __THREW__ = 0;
       $110 = ___cxa_find_matching_catch_2() | 0;
       $$047 = $110;
       $$048 = tempRet0;
       $$sroa$067$1 = $107;
      } else {
       $$045 = $106;
       $$sroa$067$0 = $107;
       label = 31;
      }
     } else {
      $$045 = $17;
      $$sroa$067$0 = 0;
      label = 31;
     }
     if ((label | 0) == 31) {
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(2, $$045 | 0, $18 | 0, $19 | 0, HEAP32[$3 + 4 >> 2] | 0, $$0 | 0, $$0 + ($$046 << 2) | 0, $40 | 0, $60 | 0, $10 | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, $13 | 0, $14 | 0, $15 | 0, $63 | 0);
      $121 = __THREW__;
      __THREW__ = 0;
      if (!($121 & 1)) {
       HEAP32[$20 >> 2] = HEAP32[$1 >> 2];
       $124 = HEAP32[$18 >> 2] | 0;
       $125 = HEAP32[$19 >> 2] | 0;
       __THREW__ = 0;
       HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2];
       $126 = invoke_iiiiiii(40, $$byval_copy | 0, $$045 | 0, $124 | 0, $125 | 0, $3 | 0, $4 | 0) | 0;
       $127 = __THREW__;
       __THREW__ = 0;
       if (!($127 & 1)) {
        if ($$sroa$067$0 | 0) _free($$sroa$067$0);
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
        __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
        __ZNSt3__26localeD2Ev($9);
        if ($$sroa$079$1 | 0) _free($$sroa$079$1);
        if ($$sroa$092$1 | 0) _free($$sroa$092$1);
        STACKTOP = sp;
        return $126 | 0;
       }
      }
      $135 = ___cxa_find_matching_catch_2() | 0;
      $$047 = $135;
      $$048 = tempRet0;
      $$sroa$067$1 = $$sroa$067$0;
     }
     if ($$sroa$067$1 | 0) _free($$sroa$067$1);
     $$1 = $$047;
     $$149 = $$048;
    }
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($15);
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
    $$2 = $$1;
    $$250 = $$149;
   }
  }
  if ((label | 0) == 29) {
   $112 = ___cxa_find_matching_catch_2() | 0;
   $$2 = $112;
   $$250 = tempRet0;
  }
  __ZNSt3__26localeD2Ev($9);
  $$4 = $$2;
  $$452 = $$250;
  $$sroa$079$2 = $$sroa$079$1;
  $$sroa$092$2 = $$sroa$092$1;
 }
 if ($$sroa$079$2 | 0) _free($$sroa$079$2);
 if ($$sroa$092$2 | 0) _free($$sroa$092$2);
 ___resumeException($$4 | 0);
 return 0;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = +$5;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$045 = 0, $$046 = 0, $$047 = 0, $$048 = 0, $$1 = 0, $$149 = 0, $$2 = 0, $$250 = 0, $$4 = 0, $$452 = 0, $$byval_copy = 0, $$sink104 = 0, $$sink105 = 0, $$sink106 = 0, $$sroa$070$0 = 0, $$sroa$070$1 = 0, $$sroa$082$0 = 0, $$sroa$082$1 = 0, $$sroa$082$2 = 0, $$sroa$095$0 = 0, $$sroa$095$1 = 0, $$sroa$095$2 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $106 = 0, $108 = 0, $11 = 0, $115 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $42 = 0, $47 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $67 = 0, $7 = 0, $74 = 0, $8 = 0, $83 = 0, $9 = 0, $90 = 0, $98 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $$byval_copy = sp + 336 | 0;
 $vararg_buffer1 = sp + 328 | 0;
 $6 = sp + 224 | 0;
 $7 = sp + 400 | 0;
 $8 = sp + 112 | 0;
 $9 = sp + 396 | 0;
 $10 = sp + 408 | 0;
 $11 = sp + 405 | 0;
 $12 = sp + 404 | 0;
 $13 = sp + 384 | 0;
 $14 = sp + 372 | 0;
 $15 = sp + 360 | 0;
 $16 = sp + 356 | 0;
 $17 = sp;
 $18 = sp + 352 | 0;
 $19 = sp + 344 | 0;
 $20 = sp + 348 | 0;
 HEAP32[$7 >> 2] = $6;
 HEAPF64[$$byval_copy >> 3] = $5;
 $21 = _snprintf($6, 100, 54568, $$byval_copy) | 0;
 L1 : do if ($21 >>> 0 > 99) {
  __THREW__ = 0;
  $23 = invoke_i(1) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  do if ($24 & 1) {
   $$sroa$082$0 = 0;
   $$sroa$095$0 = 0;
  } else {
   __THREW__ = 0;
   HEAPF64[$vararg_buffer1 >> 3] = $5;
   $26 = invoke_iiiii(23, $7 | 0, $23 | 0, 54568, $vararg_buffer1 | 0) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if ($27 & 1) {
    $$sroa$082$0 = 0;
    $$sroa$095$0 = 0;
   } else {
    $29 = HEAP32[$7 >> 2] | 0;
    if (!$29) {
     __THREW__ = 0;
     invoke_v(5);
     __THREW__ = 0;
     $$sroa$082$0 = 0;
     $$sroa$095$0 = 0;
     break;
    }
    $34 = $29;
    $35 = _malloc($26) | 0;
    $36 = $35;
    if ($35 | 0) {
     $$0 = $35;
     $$046 = $26;
     $$sroa$082$1 = $36;
     $$sroa$095$1 = $34;
     label = 9;
     break L1;
    }
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $$sroa$082$0 = $36;
    $$sroa$095$0 = $34;
   }
  } while (0);
  $32 = ___cxa_find_matching_catch_2() | 0;
  $$4 = $32;
  $$452 = tempRet0;
  $$sroa$082$2 = $$sroa$082$0;
  $$sroa$095$2 = $$sroa$095$0;
 } else {
  $$0 = $8;
  $$046 = $21;
  $$sroa$082$1 = 0;
  $$sroa$095$1 = 0;
  label = 9;
 } while (0);
 if ((label | 0) == 9) {
  __ZNKSt3__28ios_base6getlocEv($9, $3);
  __THREW__ = 0;
  $39 = invoke_iii(32, $9 | 0, 62368) | 0;
  $40 = __THREW__;
  __THREW__ = 0;
  if ($40 & 1) label = 29; else {
   $42 = HEAP32[$7 >> 2] | 0;
   __THREW__ = 0;
   invoke_iiiii(HEAP32[(HEAP32[$39 >> 2] | 0) + 32 >> 2] | 0, $39 | 0, $42 | 0, $42 + $$046 | 0, $$0 | 0) | 0;
   $47 = __THREW__;
   __THREW__ = 0;
   if ($47 & 1) label = 29; else {
    if (!$$046) $59 = 0; else $59 = (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) == 45;
    HEAP32[$13 >> 2] = 0;
    HEAP32[$13 + 4 >> 2] = 0;
    HEAP32[$13 + 8 >> 2] = 0;
    $$0$i$i = 0;
    while (1) {
     if (($$0$i$i | 0) == 3) break;
     HEAP32[$13 + ($$0$i$i << 2) >> 2] = 0;
     $$0$i$i = $$0$i$i + 1 | 0;
    }
    HEAP32[$14 >> 2] = 0;
    HEAP32[$14 + 4 >> 2] = 0;
    HEAP32[$14 + 8 >> 2] = 0;
    $$0$i$i55 = 0;
    while (1) {
     if (($$0$i$i55 | 0) == 3) break;
     HEAP32[$14 + ($$0$i$i55 << 2) >> 2] = 0;
     $$0$i$i55 = $$0$i$i55 + 1 | 0;
    }
    HEAP32[$15 >> 2] = 0;
    HEAP32[$15 + 4 >> 2] = 0;
    HEAP32[$15 + 8 >> 2] = 0;
    $$0$i$i58 = 0;
    while (1) {
     if (($$0$i$i58 | 0) == 3) break;
     HEAP32[$15 + ($$0$i$i58 << 2) >> 2] = 0;
     $$0$i$i58 = $$0$i$i58 + 1 | 0;
    }
    __THREW__ = 0;
    invoke_viiiiiiiiii(3, $2 | 0, $59 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0, $14 | 0, $15 | 0, $16 | 0);
    $60 = __THREW__;
    __THREW__ = 0;
    if ($60 & 1) {
     $108 = ___cxa_find_matching_catch_2() | 0;
     $$1 = $108;
     $$149 = tempRet0;
    } else {
     $62 = HEAP32[$16 >> 2] | 0;
     if (($$046 | 0) > ($62 | 0)) {
      $67 = HEAP8[$15 + 11 >> 0] | 0;
      $74 = HEAP8[$14 + 11 >> 0] | 0;
      $$sink104 = $74 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $74 & 255;
      $$sink105 = $62 + 1 + ($$046 - $62 << 1) | 0;
      $$sink106 = $67 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $67 & 255;
     } else {
      $83 = HEAP8[$15 + 11 >> 0] | 0;
      $90 = HEAP8[$14 + 11 >> 0] | 0;
      $$sink104 = $90 << 24 >> 24 < 0 ? HEAP32[$14 + 4 >> 2] | 0 : $90 & 255;
      $$sink105 = $62 + 2 | 0;
      $$sink106 = $83 << 24 >> 24 < 0 ? HEAP32[$15 + 4 >> 2] | 0 : $83 & 255;
     }
     $98 = $$sink105 + $$sink106 + $$sink104 | 0;
     if ($98 >>> 0 > 100) {
      $100 = _malloc($98) | 0;
      $101 = $100;
      if (!$100) {
       __THREW__ = 0;
       invoke_v(5);
       __THREW__ = 0;
       $104 = ___cxa_find_matching_catch_2() | 0;
       $$047 = $104;
       $$048 = tempRet0;
       $$sroa$070$1 = $101;
      } else {
       $$045 = $100;
       $$sroa$070$0 = $101;
       label = 31;
      }
     } else {
      $$045 = $17;
      $$sroa$070$0 = 0;
      label = 31;
     }
     if ((label | 0) == 31) {
      __THREW__ = 0;
      invoke_viiiiiiiiiiiiiii(1, $$045 | 0, $18 | 0, $19 | 0, HEAP32[$3 + 4 >> 2] | 0, $$0 | 0, $$0 + $$046 | 0, $39 | 0, $59 | 0, $10 | 0, HEAP8[$11 >> 0] | 0, HEAP8[$12 >> 0] | 0, $13 | 0, $14 | 0, $15 | 0, $62 | 0);
      $115 = __THREW__;
      __THREW__ = 0;
      if (!($115 & 1)) {
       HEAP32[$20 >> 2] = HEAP32[$1 >> 2];
       $118 = HEAP32[$18 >> 2] | 0;
       $119 = HEAP32[$19 >> 2] | 0;
       __THREW__ = 0;
       HEAP32[$$byval_copy >> 2] = HEAP32[$20 >> 2];
       $120 = invoke_iiiiiii(39, $$byval_copy | 0, $$045 | 0, $118 | 0, $119 | 0, $3 | 0, $4 | 0) | 0;
       $121 = __THREW__;
       __THREW__ = 0;
       if (!($121 & 1)) {
        if ($$sroa$070$0 | 0) _free($$sroa$070$0);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
        __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
        __ZNSt3__26localeD2Ev($9);
        if ($$sroa$082$1 | 0) _free($$sroa$082$1);
        if ($$sroa$095$1 | 0) _free($$sroa$095$1);
        STACKTOP = sp;
        return $120 | 0;
       }
      }
      $129 = ___cxa_find_matching_catch_2() | 0;
      $$047 = $129;
      $$048 = tempRet0;
      $$sroa$070$1 = $$sroa$070$0;
     }
     if ($$sroa$070$1 | 0) _free($$sroa$070$1);
     $$1 = $$047;
     $$149 = $$048;
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
    $$2 = $$1;
    $$250 = $$149;
   }
  }
  if ((label | 0) == 29) {
   $106 = ___cxa_find_matching_catch_2() | 0;
   $$2 = $106;
   $$250 = tempRet0;
  }
  __ZNSt3__26localeD2Ev($9);
  $$4 = $$2;
  $$452 = $$250;
  $$sroa$082$2 = $$sroa$082$1;
  $$sroa$095$2 = $$sroa$095$1;
 }
 if ($$sroa$082$2 | 0) _free($$sroa$082$2);
 if ($$sroa$095$2 | 0) _free($$sroa$095$2);
 ___resumeException($$4 | 0);
 return 0;
}

function _lzma2_decode($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $144 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $195 = 0, $217 = 0, $32 = 0, $41 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
 L1 : while (1) {
  if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) != 6) {
   label = 42;
   break;
  }
  switch (HEAP32[HEAP32[$11 >> 2] >> 2] | 0) {
  case 0:
   {
    HEAP32[$12 >> 2] = HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >> 0];
    $32 = HEAP32[$9 >> 2] | 0;
    HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 1;
    if (!(HEAP32[$12 >> 2] | 0)) {
     label = 6;
     break L1;
    }
    $41 = HEAP32[$11 >> 2] | 0;
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= 224 | (HEAP32[$12 >> 2] | 0) == 1) {
     HEAP8[$41 + 36 >> 0] = 1;
     HEAP8[(HEAP32[$11 >> 2] | 0) + 37 >> 0] = 1;
    } else if (HEAP8[$41 + 37 >> 0] & 1) {
     label = 10;
     break L1;
    }
    $50 = HEAP32[$12 >> 2] | 0;
    do if ((HEAP32[$12 >> 2] | 0) >>> 0 >= 128) {
     HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] = ($50 & 31) << 16;
     HEAP32[HEAP32[$11 >> 2] >> 2] = 1;
     $59 = (HEAP32[$11 >> 2] | 0) + 36 | 0;
     if ((HEAP32[$12 >> 2] | 0) >>> 0 >= 192) {
      HEAP8[$59 >> 0] = 0;
      HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] = 5;
      break;
     }
     if (HEAP8[$59 >> 0] & 1) {
      label = 15;
      break L1;
     }
     HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] = 6;
     if ((HEAP32[$12 >> 2] | 0) >>> 0 >= 160) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 + 8 >> 2] & 127](HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[$11 >> 2] | 0) + 40 | 0);
    } else {
     if ($50 >>> 0 > 2) {
      label = 19;
      break L1;
     }
     HEAP32[HEAP32[$11 >> 2] >> 2] = 3;
     HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] = 7;
    } while (0);
    if (HEAP8[(HEAP32[$11 >> 2] | 0) + 37 >> 0] & 1) {
     label = 22;
     break L1;
    }
    break;
   }
  case 1:
   {
    $88 = HEAP32[$8 >> 2] | 0;
    $89 = HEAP32[$9 >> 2] | 0;
    $90 = HEAP32[$89 >> 2] | 0;
    HEAP32[$89 >> 2] = $90 + 1;
    $97 = (HEAP32[$11 >> 2] | 0) + 28 | 0;
    HEAP32[$97 >> 2] = (HEAP32[$97 >> 2] | 0) + ((HEAPU8[$88 + $90 >> 0] | 0) << 8);
    HEAP32[HEAP32[$11 >> 2] >> 2] = 2;
    break;
   }
  case 2:
   {
    $101 = HEAP32[$8 >> 2] | 0;
    $102 = HEAP32[$9 >> 2] | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    HEAP32[$102 >> 2] = $103 + 1;
    $110 = (HEAP32[$11 >> 2] | 0) + 28 | 0;
    HEAP32[$110 >> 2] = (HEAP32[$110 >> 2] | 0) + ((HEAPU8[$101 + $103 >> 0] | 0) + 1);
    HEAP32[HEAP32[$11 >> 2] >> 2] = 3;
    FUNCTION_TABLE_viii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 + 12 >> 2] & 63](HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0, HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0, 0);
    break;
   }
  case 3:
   {
    $124 = HEAP32[$8 >> 2] | 0;
    $125 = HEAP32[$9 >> 2] | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    HEAP32[$125 >> 2] = $126 + 1;
    HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] = (HEAPU8[$124 + $126 >> 0] | 0) << 8;
    HEAP32[HEAP32[$11 >> 2] >> 2] = 4;
    break;
   }
  case 4:
   {
    $135 = HEAP32[$8 >> 2] | 0;
    $136 = HEAP32[$9 >> 2] | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    HEAP32[$136 >> 2] = $137 + 1;
    $144 = (HEAP32[$11 >> 2] | 0) + 32 | 0;
    HEAP32[$144 >> 2] = (HEAP32[$144 >> 2] | 0) + ((HEAPU8[$135 + $137 >> 0] | 0) + 1);
    HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
    break;
   }
  case 5:
   {
    $152 = (HEAP32[$11 >> 2] | 0) + 40 | 0;
    $153 = HEAP32[$8 >> 2] | 0;
    $154 = HEAP32[$9 >> 2] | 0;
    $155 = HEAP32[$154 >> 2] | 0;
    HEAP32[$154 >> 2] = $155 + 1;
    if (_lzma_lzma_lclppb_decode($152, HEAP8[$153 + $155 >> 0] | 0) | 0) {
     label = 28;
     break L1;
    }
    FUNCTION_TABLE_vii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 + 8 >> 2] & 127](HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[$11 >> 2] | 0) + 40 | 0);
    HEAP32[HEAP32[$11 >> 2] >> 2] = 6;
    break;
   }
  case 6:
   {
    HEAP32[$13 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
    HEAP32[$14 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 + 4 >> 2] & 31](HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
    HEAP32[$15 >> 2] = (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) - (HEAP32[$13 >> 2] | 0);
    if ((HEAP32[$15 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] | 0) >>> 0) {
     label = 31;
     break L1;
    }
    $195 = (HEAP32[$11 >> 2] | 0) + 32 | 0;
    HEAP32[$195 >> 2] = (HEAP32[$195 >> 2] | 0) - (HEAP32[$15 >> 2] | 0);
    if ((HEAP32[$14 >> 2] | 0) != 1) {
     label = 33;
     break L1;
    }
    if (HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] | 0) {
     label = 35;
     break L1;
    }
    HEAP32[HEAP32[$11 >> 2] >> 2] = 0;
    break;
   }
  case 7:
   {
    _dict_write(HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, (HEAP32[$11 >> 2] | 0) + 32 | 0);
    if (HEAP32[(HEAP32[$11 >> 2] | 0) + 32 >> 2] | 0) {
     label = 38;
     break L1;
    }
    HEAP32[HEAP32[$11 >> 2] >> 2] = 0;
    break;
   }
  default:
   {
    label = 40;
    break L1;
   }
  }
 }
 switch (label | 0) {
 case 6:
  {
   HEAP32[$5 >> 2] = 1;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 10:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 15:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 19:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 22:
  {
   HEAP8[(HEAP32[$11 >> 2] | 0) + 37 >> 0] = 0;
   _dict_reset(HEAP32[$7 >> 2] | 0);
   HEAP32[$5 >> 2] = 0;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 28:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 31:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 33:
  {
   HEAP32[$5 >> 2] = HEAP32[$14 >> 2];
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 35:
  {
   HEAP32[$5 >> 2] = 9;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 38:
  {
   HEAP32[$5 >> 2] = 0;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 40:
  {
   HEAP32[$5 >> 2] = 11;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 case 42:
  {
   HEAP32[$5 >> 2] = 0;
   $217 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $217 | 0;
  }
 }
 return 0;
}

function __ZN3zim8FileImpl5findxERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $102 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $132 = 0, $136 = 0, $139 = 0, $14 = 0, $15 = 0, $157 = 0, $16 = 0, $164 = 0, $17 = 0, $174 = 0, $177 = 0, $18 = 0, $19 = 0, $195 = 0, $199 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $209 = 0, $21 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $3 = sp + 308 | 0;
 $4 = sp + 304 | 0;
 $5 = sp + 300 | 0;
 $6 = sp + 296 | 0;
 $7 = sp + 292 | 0;
 $8 = sp + 288 | 0;
 $9 = sp + 284 | 0;
 $10 = sp + 280 | 0;
 $11 = sp + 276 | 0;
 $12 = sp + 272 | 0;
 $13 = sp + 268 | 0;
 $14 = sp + 264 | 0;
 $15 = sp + 260 | 0;
 $16 = sp + 256 | 0;
 $17 = sp + 252 | 0;
 $18 = sp + 248 | 0;
 $19 = sp + 244 | 0;
 $20 = sp + 240 | 0;
 $21 = sp + 236 | 0;
 $22 = sp + 232 | 0;
 $23 = sp + 228 | 0;
 $24 = sp + 224 | 0;
 $25 = sp + 220 | 0;
 $26 = sp + 216 | 0;
 $27 = sp + 212 | 0;
 $28 = sp + 208 | 0;
 $29 = sp + 204 | 0;
 $30 = sp + 200 | 0;
 $31 = sp + 196 | 0;
 $32 = sp + 192 | 0;
 $33 = sp + 188 | 0;
 $34 = sp + 184 | 0;
 $35 = sp + 180 | 0;
 $36 = sp + 176 | 0;
 $37 = sp + 172 | 0;
 $38 = sp + 168 | 0;
 $39 = sp + 164 | 0;
 $40 = sp + 160 | 0;
 $41 = sp + 156 | 0;
 $42 = sp + 152 | 0;
 $43 = sp + 148 | 0;
 $44 = sp + 144 | 0;
 $45 = sp + 140 | 0;
 $46 = sp + 136 | 0;
 $47 = sp + 132 | 0;
 $48 = sp + 128 | 0;
 $49 = sp + 124 | 0;
 $50 = sp + 120 | 0;
 $51 = sp + 116 | 0;
 $52 = sp + 112 | 0;
 $53 = sp + 108 | 0;
 $54 = sp + 104 | 0;
 $55 = sp + 100 | 0;
 $56 = sp + 96 | 0;
 $57 = sp + 92 | 0;
 $58 = sp + 88 | 0;
 $59 = sp + 84 | 0;
 $60 = sp + 80 | 0;
 $61 = sp + 76 | 0;
 $62 = sp + 72 | 0;
 $63 = sp + 68 | 0;
 $64 = sp + 64 | 0;
 $65 = sp + 60 | 0;
 $66 = sp + 56 | 0;
 $67 = sp + 52 | 0;
 $68 = sp + 48 | 0;
 $69 = sp + 44 | 0;
 $70 = sp + 40 | 0;
 $71 = sp + 36 | 0;
 $72 = sp + 32 | 0;
 $73 = sp + 28 | 0;
 $74 = sp + 24 | 0;
 $75 = sp + 312 | 0;
 $76 = sp + 20 | 0;
 $77 = sp + 8 | 0;
 $78 = sp + 4 | 0;
 $79 = sp;
 HEAP32[$72 >> 2] = $1;
 HEAP32[$73 >> 2] = $2;
 $80 = HEAP32[$72 >> 2] | 0;
 HEAP32[$74 >> 2] = 0;
 HEAP32[$70 >> 2] = HEAP32[$73 >> 2];
 HEAP32[$71 >> 2] = 0;
 HEAP32[$69 >> 2] = HEAP32[$70 >> 2];
 HEAP32[$68 >> 2] = HEAP32[$69 >> 2];
 $84 = HEAP32[$68 >> 2] | 0;
 HEAP32[$67 >> 2] = $84;
 HEAP32[$66 >> 2] = HEAP32[$67 >> 2];
 HEAP32[$65 >> 2] = HEAP32[$66 >> 2];
 if (HEAPU8[(HEAP32[$65 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$59 >> 2] = $84;
  HEAP32[$58 >> 2] = HEAP32[$59 >> 2];
  HEAP32[$57 >> 2] = HEAP32[$58 >> 2];
  $102 = HEAP32[HEAP32[$57 >> 2] >> 2] | 0;
 } else {
  HEAP32[$64 >> 2] = $84;
  HEAP32[$63 >> 2] = HEAP32[$64 >> 2];
  HEAP32[$62 >> 2] = HEAP32[$63 >> 2];
  HEAP32[$61 >> 2] = HEAP32[$62 >> 2];
  HEAP32[$60 >> 2] = HEAP32[$61 >> 2];
  $102 = HEAP32[$60 >> 2] | 0;
 }
 HEAP32[$56 >> 2] = $102;
 if ((HEAP8[(HEAP32[$56 >> 2] | 0) + (HEAP32[$71 >> 2] | 0) >> 0] | 0) == 47) HEAP32[$74 >> 2] = 1;
 HEAP32[$55 >> 2] = HEAP32[$73 >> 2];
 $110 = HEAP32[$55 >> 2] | 0;
 HEAP32[$54 >> 2] = $110;
 HEAP32[$53 >> 2] = HEAP32[$54 >> 2];
 HEAP32[$52 >> 2] = HEAP32[$53 >> 2];
 if (HEAPU8[(HEAP32[$52 >> 2] | 0) + 11 >> 0] & 128 | 0) {
  HEAP32[$48 >> 2] = $110;
  HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
  HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
  $132 = HEAP32[(HEAP32[$46 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$51 >> 2] = $110;
  HEAP32[$50 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
  $132 = HEAPU8[(HEAP32[$49 >> 2] | 0) + 11 >> 0] | 0;
 }
 if ($132 >>> 0 >= (2 + (HEAP32[$74 >> 2] | 0) | 0) >>> 0) {
  $136 = 1 + (HEAP32[$74 >> 2] | 0) | 0;
  HEAP32[$38 >> 2] = HEAP32[$73 >> 2];
  HEAP32[$39 >> 2] = $136;
  HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
  $139 = HEAP32[$36 >> 2] | 0;
  HEAP32[$35 >> 2] = $139;
  HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  if (HEAPU8[(HEAP32[$33 >> 2] | 0) + 11 >> 0] & 128 | 0) {
   HEAP32[$27 >> 2] = $139;
   HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
   HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
   $157 = HEAP32[HEAP32[$25 >> 2] >> 2] | 0;
  } else {
   HEAP32[$32 >> 2] = $139;
   HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
   HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
   HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
   $157 = HEAP32[$28 >> 2] | 0;
  }
  HEAP32[$24 >> 2] = $157;
  if ((HEAP8[(HEAP32[$24 >> 2] | 0) + (HEAP32[$39 >> 2] | 0) >> 0] | 0) == 47) {
   $174 = HEAP32[$74 >> 2] | 0;
   HEAP32[$22 >> 2] = HEAP32[$73 >> 2];
   HEAP32[$23 >> 2] = $174;
   HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
   $177 = HEAP32[$20 >> 2] | 0;
   HEAP32[$19 >> 2] = $177;
   HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
   if (HEAPU8[(HEAP32[$17 >> 2] | 0) + 11 >> 0] & 128 | 0) {
    HEAP32[$11 >> 2] = $177;
    HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
    $195 = HEAP32[HEAP32[$9 >> 2] >> 2] | 0;
   } else {
    HEAP32[$16 >> 2] = $177;
    HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
    HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
    $195 = HEAP32[$12 >> 2] | 0;
   }
   HEAP32[$8 >> 2] = $195;
   $199 = HEAP8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$23 >> 2] | 0) >> 0] | 0;
   $202 = 2 + (HEAP32[$74 >> 2] | 0) | 0;
   HEAP32[$43 >> 2] = HEAP32[$73 >> 2];
   HEAP32[$44 >> 2] = $202;
   HEAP32[$45 >> 2] = -1;
   $203 = HEAP32[$43 >> 2] | 0;
   $204 = HEAP32[$44 >> 2] | 0;
   $205 = HEAP32[$45 >> 2] | 0;
   HEAP32[$42 >> 2] = $203;
   HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
   HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($77, $203, $204, $205, HEAP32[$40 >> 2] | 0);
   __THREW__ = 0;
   invoke_viiii(27, $0 | 0, $80 | 0, $199 | 0, $77 | 0);
   $209 = __THREW__;
   __THREW__ = 0;
   if ($209 & 1) {
    $211 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$78 >> 2] = $211;
    HEAP32[$79 >> 2] = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($77);
    ___resumeException(HEAP32[$78 >> 2] | 0);
   }
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($77);
   STACKTOP = sp;
   return;
  }
 }
 HEAP8[$75 >> 0] = 0;
 __ZN3zim15article_index_tC2Ej($76, 0);
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $75;
 HEAP32[$7 >> 2] = $76;
 $164 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
 HEAP8[$164 >> 0] = HEAP8[HEAP32[$4 >> 2] >> 0] & 1;
 HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$164 + 4 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $107 = 0, $11 = 0, $113 = 0, $119 = 0, $12 = 0, $122 = 0, $128 = 0, $13 = 0, $139 = 0, $14 = 0, $142 = 0, $148 = 0, $15 = 0, $151 = 0, $158 = 0, $16 = 0, $161 = 0, $167 = 0, $169 = 0, $17 = 0, $175 = 0, $18 = 0, $181 = 0, $183 = 0, $185 = 0, $188 = 0, $19 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $212 = 0, $215 = 0, $22 = 0, $221 = 0, $223 = 0, $228 = 0, $229 = 0, $23 = 0, $235 = 0, $24 = 0, $241 = 0, $243 = 0, $246 = 0, $25 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $1 = sp + 140 | 0;
 $2 = sp + 136 | 0;
 $3 = sp + 132 | 0;
 $4 = sp + 128 | 0;
 $5 = sp + 124 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 116 | 0;
 $8 = sp + 112 | 0;
 $9 = sp + 108 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 100 | 0;
 $12 = sp + 96 | 0;
 $13 = sp + 92 | 0;
 $14 = sp + 88 | 0;
 $15 = sp + 84 | 0;
 $16 = sp + 80 | 0;
 $17 = sp + 76 | 0;
 $18 = sp + 72 | 0;
 $19 = sp + 68 | 0;
 $20 = sp + 64 | 0;
 $21 = sp + 60 | 0;
 $22 = sp + 56 | 0;
 $23 = sp + 52 | 0;
 $24 = sp + 48 | 0;
 $25 = sp + 44 | 0;
 $26 = sp + 40 | 0;
 $27 = sp + 36 | 0;
 $28 = sp + 32 | 0;
 $29 = sp + 28 | 0;
 $30 = sp + 24 | 0;
 $31 = sp;
 $32 = sp + 16 | 0;
 $33 = sp + 144 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 8 | 0;
 HEAP32[$27 >> 2] = $0;
 $36 = HEAP32[$27 >> 2] | 0;
 if (!(HEAP32[$36 + 64 >> 2] | 0)) {
  HEAP32[$26 >> 2] = 0;
  $254 = HEAP32[$26 >> 2] | 0;
  STACKTOP = sp;
  return $254 | 0;
 }
 if (!(HEAP32[$36 + 68 >> 2] | 0)) {
  $43 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($43);
  ___cxa_throw($43 | 0, 42840, 182);
 }
 if (HEAP32[$36 + 92 >> 2] & 16 | 0) {
  HEAP32[$25 >> 2] = $36;
  $50 = HEAP32[(HEAP32[$25 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$24 >> 2] = $36;
  if (($50 | 0) != (HEAP32[(HEAP32[$24 >> 2] | 0) + 20 >> 2] | 0)) {
   $57 = HEAP32[(HEAP32[$36 >> 2] | 0) + 52 >> 2] | 0;
   $58 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   $59 = FUNCTION_TABLE_iii[$57 & 63]($36, $58) | 0;
   if (($59 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    HEAP32[$26 >> 2] = -1;
    $254 = HEAP32[$26 >> 2] | 0;
    STACKTOP = sp;
    return $254 | 0;
   }
  }
  do {
   $66 = HEAP32[$36 + 32 >> 2] | 0;
   $71 = (HEAP32[$36 + 32 >> 2] | 0) + (HEAP32[$36 + 52 >> 2] | 0) | 0;
   HEAP32[$19 >> 2] = HEAP32[$36 + 68 >> 2];
   HEAP32[$20 >> 2] = $36 + 72;
   HEAP32[$21 >> 2] = $66;
   HEAP32[$22 >> 2] = $71;
   HEAP32[$23 >> 2] = $29;
   $72 = HEAP32[$19 >> 2] | 0;
   HEAP32[$28 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 31]($72, HEAP32[$20 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$22 >> 2] | 0, HEAP32[$23 >> 2] | 0) | 0;
   HEAP32[$30 >> 2] = (HEAP32[$29 >> 2] | 0) - (HEAP32[$36 + 32 >> 2] | 0);
   $92 = _fwrite(HEAP32[$36 + 32 >> 2] | 0, 1, HEAP32[$30 >> 2] | 0, HEAP32[$36 + 64 >> 2] | 0) | 0;
   if (($92 | 0) != (HEAP32[$30 >> 2] | 0)) {
    label = 11;
    break;
   }
  } while ((HEAP32[$28 >> 2] | 0) == 1);
  if ((label | 0) == 11) {
   HEAP32[$26 >> 2] = -1;
   $254 = HEAP32[$26 >> 2] | 0;
   STACKTOP = sp;
   return $254 | 0;
  }
  if ((HEAP32[$28 >> 2] | 0) == 2) {
   HEAP32[$26 >> 2] = -1;
   $254 = HEAP32[$26 >> 2] | 0;
   STACKTOP = sp;
   return $254 | 0;
  }
  if (_fflush(HEAP32[$36 + 64 >> 2] | 0) | 0) {
   HEAP32[$26 >> 2] = -1;
   $254 = HEAP32[$26 >> 2] | 0;
   STACKTOP = sp;
   return $254 | 0;
  }
 } else if (HEAP32[$36 + 92 >> 2] & 8 | 0) {
  $107 = $36 + 80 | 0;
  HEAP32[$32 >> 2] = HEAP32[$107 >> 2];
  HEAP32[$32 + 4 >> 2] = HEAP32[$107 + 4 >> 2];
  HEAP8[$33 >> 0] = 0;
  do if (HEAP8[$36 + 98 >> 0] & 1) {
   HEAP32[$18 >> 2] = $36;
   $113 = HEAP32[(HEAP32[$18 >> 2] | 0) + 16 >> 2] | 0;
   HEAP32[$8 >> 2] = $36;
   $119 = $113 - (HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) | 0;
   $122 = $31;
   HEAP32[$122 >> 2] = $119;
   HEAP32[$122 + 4 >> 2] = (($119 | 0) < 0) << 31 >> 31;
  } else {
   HEAP32[$1 >> 2] = HEAP32[$36 + 68 >> 2];
   $128 = HEAP32[$1 >> 2] | 0;
   HEAP32[$34 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$128 >> 2] | 0) + 24 >> 2] & 127]($128) | 0;
   $139 = (HEAP32[$36 + 40 >> 2] | 0) - (HEAP32[$36 + 36 >> 2] | 0) | 0;
   $142 = $31;
   HEAP32[$142 >> 2] = $139;
   HEAP32[$142 + 4 >> 2] = (($139 | 0) < 0) << 31 >> 31;
   if ((HEAP32[$34 >> 2] | 0) > 0) {
    $148 = HEAP32[$34 >> 2] | 0;
    HEAP32[$2 >> 2] = $36;
    $151 = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0;
    HEAP32[$3 >> 2] = $36;
    $158 = Math_imul($148, $151 - (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) | 0) | 0;
    $161 = $31;
    $167 = _i64Add(HEAP32[$161 >> 2] | 0, HEAP32[$161 + 4 >> 2] | 0, $158 | 0, (($158 | 0) < 0) << 31 >> 31 | 0) | 0;
    $169 = $31;
    HEAP32[$169 >> 2] = $167;
    HEAP32[$169 + 4 >> 2] = tempRet0;
    break;
   }
   HEAP32[$4 >> 2] = $36;
   $175 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0;
   HEAP32[$5 >> 2] = $36;
   if (($175 | 0) != (HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0)) {
    $181 = HEAP32[$36 + 68 >> 2] | 0;
    $183 = HEAP32[$36 + 32 >> 2] | 0;
    $185 = HEAP32[$36 + 36 >> 2] | 0;
    HEAP32[$6 >> 2] = $36;
    $188 = HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0;
    HEAP32[$7 >> 2] = $36;
    $194 = $188 - (HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0) | 0;
    HEAP32[$9 >> 2] = $181;
    HEAP32[$10 >> 2] = $32;
    HEAP32[$11 >> 2] = $183;
    HEAP32[$12 >> 2] = $185;
    HEAP32[$13 >> 2] = $194;
    $195 = HEAP32[$9 >> 2] | 0;
    HEAP32[$35 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$195 >> 2] | 0) + 32 >> 2] & 31]($195, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0) | 0;
    $212 = (HEAP32[$36 + 36 >> 2] | 0) - (HEAP32[$36 + 32 >> 2] | 0) - (HEAP32[$35 >> 2] | 0) | 0;
    $215 = $31;
    $221 = _i64Add(HEAP32[$215 >> 2] | 0, HEAP32[$215 + 4 >> 2] | 0, $212 | 0, (($212 | 0) < 0) << 31 >> 31 | 0) | 0;
    $223 = $31;
    HEAP32[$223 >> 2] = $221;
    HEAP32[$223 + 4 >> 2] = tempRet0;
    HEAP8[$33 >> 0] = 1;
   }
  } while (0);
  $228 = HEAP32[$36 + 64 >> 2] | 0;
  $229 = $31;
  $235 = _i64Subtract(0, 0, HEAP32[$229 >> 2] | 0, HEAP32[$229 + 4 >> 2] | 0) | 0;
  if (___fseeko($228, $235, 1) | 0) {
   HEAP32[$26 >> 2] = -1;
   $254 = HEAP32[$26 >> 2] | 0;
   STACKTOP = sp;
   return $254 | 0;
  }
  if (HEAP8[$33 >> 0] & 1) {
   $241 = $36 + 72 | 0;
   HEAP32[$241 >> 2] = HEAP32[$32 >> 2];
   HEAP32[$241 + 4 >> 2] = HEAP32[$32 + 4 >> 2];
  }
  $243 = HEAP32[$36 + 32 >> 2] | 0;
  HEAP32[$36 + 40 >> 2] = $243;
  HEAP32[$36 + 36 >> 2] = $243;
  HEAP32[$14 >> 2] = $36;
  HEAP32[$15 >> 2] = 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$17 >> 2] = 0;
  $246 = HEAP32[$14 >> 2] | 0;
  HEAP32[$246 + 8 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$246 + 12 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$246 + 16 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$36 + 92 >> 2] = 0;
 }
 HEAP32[$26 >> 2] = 0;
 $254 = HEAP32[$26 >> 2] | 0;
 STACKTOP = sp;
 return $254 | 0;
}

function __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i108 = 0, $$0$i$i112 = 0, $$0$ph = 0, $$0101 = 0, $$0103 = 0, $$0106 = 0, $$07$i$i = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1102 = 0, $$1104 = 0, $$196 = 0, $$198 = 0, $$2 = 0, $$2105 = 0, $$3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $126 = 0, $129 = 0, $130 = 0, $132 = 0, $135 = 0, $136 = 0, $138 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $93 = 0, $99 = 0, $spec$select = 0;
 HEAP32[$2 >> 2] = $0;
 $16 = $13 + 8 + 3 | 0;
 $17 = $13 + 4 | 0;
 $19 = $12 + 8 + 3 | 0;
 $20 = $12 + 4 | 0;
 $22 = ($3 & 512 | 0) == 0;
 $23 = ($14 | 0) > 0;
 $24 = $11 + 11 | 0;
 $25 = $11 + 4 | 0;
 $$0106 = 0;
 $$099 = $4;
 while (1) {
  if (($$0106 | 0) == 4) break;
  L4 : do switch (HEAP8[$8 + $$0106 >> 0] | 0) {
  case 0:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $$2 = $$099;
    break;
   }
  case 1:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 63]($6, 32) | 0;
    $41 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $41 + 4;
    HEAP32[$41 >> 2] = $40;
    $$2 = $$099;
    break;
   }
  case 3:
   {
    $43 = HEAP8[$16 >> 0] | 0;
    $44 = $43 << 24 >> 24 < 0;
    if (!(($44 ? HEAP32[$17 >> 2] | 0 : $43 & 255) | 0)) $$2 = $$099; else {
     $51 = HEAP32[($44 ? HEAP32[$13 >> 2] | 0 : $13) >> 2] | 0;
     $52 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $52 + 4;
     HEAP32[$52 >> 2] = $51;
     $$2 = $$099;
    }
    break;
   }
  case 2:
   {
    $54 = HEAP8[$19 >> 0] | 0;
    $55 = $54 << 24 >> 24 < 0;
    $58 = $55 ? HEAP32[$20 >> 2] | 0 : $54 & 255;
    if ($22 | ($58 | 0) == 0) $$2 = $$099; else {
     $61 = $55 ? HEAP32[$12 >> 2] | 0 : $12;
     $62 = $61 + ($58 << 2) | 0;
     $63 = HEAP32[$2 >> 2] | 0;
     $$0$i$i112 = $63;
     $64 = $61;
     while (1) {
      if (($64 | 0) == ($62 | 0)) break;
      HEAP32[$$0$i$i112 >> 2] = HEAP32[$64 >> 2];
      $$0$i$i112 = $$0$i$i112 + 4 | 0;
      $64 = $64 + 4 | 0;
     }
     HEAP32[$2 >> 2] = $63 + ($58 << 2);
     $$2 = $$099;
    }
    break;
   }
  case 4:
   {
    $69 = HEAP32[$2 >> 2] | 0;
    $spec$select = $7 ? $$099 + 4 | 0 : $$099;
    $$0103 = $spec$select;
    while (1) {
     if ($$0103 >>> 0 >= $5 >>> 0) break;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] & 63]($6, 2048, HEAP32[$$0103 >> 2] | 0) | 0)) break;
     $$0103 = $$0103 + 4 | 0;
    }
    if ($23) {
     $$0101 = $14;
     $$1104 = $$0103;
     while (1) {
      $79 = ($$0101 | 0) > 0;
      if (!($$1104 >>> 0 > $spec$select >>> 0 & $79)) break;
      $81 = $$1104 + -4 | 0;
      $82 = HEAP32[$81 >> 2] | 0;
      $83 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $83 + 4;
      HEAP32[$83 >> 2] = $82;
      $$0101 = $$0101 + -1 | 0;
      $$1104 = $81;
     }
     if ($79) $93 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 63]($6, 48) | 0; else $93 = 0;
     $$1102 = $$0101;
     $92 = HEAP32[$2 >> 2] | 0;
     while (1) {
      $91 = $92 + 4 | 0;
      if (($$1102 | 0) <= 0) break;
      HEAP32[$92 >> 2] = $93;
      $$1102 = $$1102 + -1 | 0;
      $92 = $91;
     }
     HEAP32[$2 >> 2] = $91;
     HEAP32[$92 >> 2] = $9;
     $$2105 = $$1104;
    } else $$2105 = $$0103;
    if (($$2105 | 0) == ($spec$select | 0)) {
     $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 44 >> 2] & 63]($6, 48) | 0;
     $100 = HEAP32[$2 >> 2] | 0;
     $101 = $100 + 4 | 0;
     HEAP32[$2 >> 2] = $101;
     HEAP32[$100 >> 2] = $99;
     $135 = $101;
    } else {
     $102 = HEAP8[$24 >> 0] | 0;
     $103 = $102 << 24 >> 24 < 0;
     if (!(($103 ? HEAP32[$25 >> 2] | 0 : $102 & 255) | 0)) $$0$ph = -1; else $$0$ph = HEAP8[($103 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0;
     $$0 = $$0$ph;
     $$095 = 0;
     $$097 = 0;
     $$3 = $$2105;
     while (1) {
      if (($$3 | 0) == ($spec$select | 0)) break;
      $114 = HEAP32[$2 >> 2] | 0;
      if (($$097 | 0) == ($$0 | 0)) {
       $115 = $114 + 4 | 0;
       HEAP32[$2 >> 2] = $115;
       HEAP32[$114 >> 2] = $10;
       $116 = $$095 + 1 | 0;
       $117 = HEAP8[$24 >> 0] | 0;
       $118 = $117 << 24 >> 24 < 0;
       if ($116 >>> 0 < ($118 ? HEAP32[$25 >> 2] | 0 : $117 & 255) >>> 0) {
        $126 = HEAP8[($118 ? HEAP32[$11 >> 2] | 0 : $11) + $116 >> 0] | 0;
        $$1 = $126 << 24 >> 24 == 127 ? -1 : $126 << 24 >> 24;
        $$196 = $116;
        $$198 = 0;
        $132 = $115;
       } else {
        $$1 = $$097;
        $$196 = $116;
        $$198 = 0;
        $132 = $115;
       }
      } else {
       $$1 = $$0;
       $$196 = $$095;
       $$198 = $$097;
       $132 = $114;
      }
      $129 = $$3 + -4 | 0;
      $130 = HEAP32[$129 >> 2] | 0;
      HEAP32[$2 >> 2] = $132 + 4;
      HEAP32[$132 >> 2] = $130;
      $$0 = $$1;
      $$095 = $$196;
      $$097 = $$198 + 1 | 0;
      $$3 = $129;
     }
     $135 = HEAP32[$2 >> 2] | 0;
    }
    if (($69 | 0) == ($135 | 0)) $$2 = $spec$select; else {
     $$0$i$i108 = $135;
     $$07$i$i = $69;
     while (1) {
      $136 = $$0$i$i108 + -4 | 0;
      if ($$07$i$i >>> 0 >= $136 >>> 0) {
       $$2 = $spec$select;
       break L4;
      }
      $138 = HEAP32[$$07$i$i >> 2] | 0;
      HEAP32[$$07$i$i >> 2] = HEAP32[$136 >> 2];
      HEAP32[$136 >> 2] = $138;
      $$0$i$i108 = $136;
      $$07$i$i = $$07$i$i + 4 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$099;
  } while (0);
  $$0106 = $$0106 + 1 | 0;
  $$099 = $$2;
 }
 $26 = HEAP8[$16 >> 0] | 0;
 $27 = $26 << 24 >> 24 < 0;
 $30 = $27 ? HEAP32[$17 >> 2] | 0 : $26 & 255;
 if ($30 >>> 0 > 1) {
  $142 = HEAP32[$13 >> 2] | 0;
  $144 = $27 ? $142 + 4 | 0 : $17;
  $146 = ($27 ? $142 : $13) + ($30 << 2) | 0;
  $147 = HEAP32[$2 >> 2] | 0;
  $150 = $146 - $144 | 0;
  $$0$i$i = $147;
  $151 = $144;
  while (1) {
   if (($151 | 0) == ($146 | 0)) break;
   HEAP32[$$0$i$i >> 2] = HEAP32[$151 >> 2];
   $$0$i$i = $$0$i$i + 4 | 0;
   $151 = $151 + 4 | 0;
  }
  HEAP32[$2 >> 2] = $147 + ($150 >>> 2 << 2);
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$1 >> 2] = $0;
 }
 return;
}

function __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i25 = 0, $$0$i$i$i$i40 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i31 = 0, $$0$i$i2$i$i46 = 0, $$0$i$i36 = 0, $$0$in = 0, $$023 = 0, $$023$in = 0, $$2 = 0, $107 = 0, $108 = 0, $111 = 0, $113 = 0, $123 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $151 = 0, $163 = 0, $166 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $49 = 0, $5 = 0, $52 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $76 = 0, $79 = 0, $8 = 0, $91 = 0, $94 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0;
 do if (!$5) $180 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $180 = 1;
   break;
  } else {
   $180 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 14;
   break;
  } else if ($180) {
   $181 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($180) label = 16; else {
  $181 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $37 = HEAP32[$0 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  $49 = $$0$i$i & 255;
  if ($49 << 24 >> 24 > -1) {
   $52 = $3 + 8 | 0;
   if (HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $64 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3, $49, 0) | 0) << 24 >> 24;
    $65 = HEAP32[$0 >> 2] | 0;
    $66 = $65 + 12 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (($67 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 40 >> 2] & 127]($65) | 0; else {
     HEAP32[$66 >> 2] = $67 + 1;
     __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0;
    }
    $$0$in = $64;
    $$023$in = $4;
    $182 = $181;
    $91 = $181;
    while (1) {
     $$0 = $$0$in + -48 | 0;
     $$023 = $$023$in + -1 | 0;
     $76 = HEAP32[$0 >> 2] | 0;
     do if (!$76) $108 = 1; else {
      $79 = HEAP32[$76 + 12 >> 2] | 0;
      if (($79 | 0) == (HEAP32[$76 + 16 >> 2] | 0)) $$0$i$i$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$76 >> 2] | 0) + 36 >> 2] & 127]($76) | 0; else $$0$i$i$i$i25 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$79 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i25, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$0 >> 2] = 0;
       $108 = 1;
       break;
      } else {
       $108 = (HEAP32[$0 >> 2] | 0) == 0;
       break;
      }
     } while (0);
     if (!$91) {
      $107 = 1;
      $163 = $182;
      $183 = 0;
     } else {
      $94 = HEAP32[$91 + 12 >> 2] | 0;
      if (($94 | 0) == (HEAP32[$91 + 16 >> 2] | 0)) $$0$i$i2$i$i31 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] & 127]($91) | 0; else $$0$i$i2$i$i31 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$94 >> 0] | 0) | 0;
      if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i31, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
       HEAP32[$1 >> 2] = 0;
       $107 = 1;
       $163 = 0;
       $183 = 0;
      } else {
       $107 = 0;
       $163 = $182;
       $183 = $91;
      }
     }
     $111 = HEAP32[$0 >> 2] | 0;
     if (!(($$023$in | 0) > 1 & ($108 ^ $107))) break;
     $113 = HEAP32[$111 + 12 >> 2] | 0;
     if (($113 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) $$0$i$i36 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 127]($111) | 0; else $$0$i$i36 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$113 >> 0] | 0) | 0;
     $123 = $$0$i$i36 & 255;
     if ($123 << 24 >> 24 <= -1) {
      $$2 = $$0;
      break L22;
     }
     if (!(HEAP16[(HEAP32[$52 >> 2] | 0) + ($$0$i$i36 << 24 >> 24 << 1) >> 1] & 2048)) {
      $$2 = $$0;
      break L22;
     }
     $137 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 63]($3, $123, 0) | 0) << 24 >> 24) | 0;
     $138 = HEAP32[$0 >> 2] | 0;
     $139 = $138 + 12 | 0;
     $140 = HEAP32[$139 >> 2] | 0;
     if (($140 | 0) == (HEAP32[$138 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$138 >> 2] | 0) + 40 >> 2] & 127]($138) | 0; else {
      HEAP32[$139 >> 2] = $140 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$140 >> 0] | 0) | 0;
     }
     $$0$in = $137;
     $$023$in = $$023;
     $182 = $163;
     $91 = $183;
    }
    do if (!$111) $184 = 1; else {
     $151 = HEAP32[$111 + 12 >> 2] | 0;
     if (($151 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) $$0$i$i$i$i40 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 36 >> 2] & 127]($111) | 0; else $$0$i$i$i$i40 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$151 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i40, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$0 >> 2] = 0;
      $184 = 1;
      break;
     } else {
      $184 = (HEAP32[$0 >> 2] | 0) == 0;
      break;
     }
    } while (0);
    do if (!$163) label = 63; else {
     $166 = HEAP32[$163 + 12 >> 2] | 0;
     if (($166 | 0) == (HEAP32[$163 + 16 >> 2] | 0)) $$0$i$i2$i$i46 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$163 >> 2] | 0) + 36 >> 2] & 127]($163) | 0; else $$0$i$i2$i$i46 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$166 >> 0] | 0) | 0;
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i46, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
      HEAP32[$1 >> 2] = 0;
      label = 63;
      break;
     } else if ($184) {
      $$2 = $$0;
      break L22;
     } else break;
    } while (0);
    if ((label | 0) == 63) if (!$184) {
     $$2 = $$0;
     break;
    }
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
    $$2 = $$0;
    break;
   }
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
  $$2 = 0;
 } while (0);
 return $$2 | 0;
}

function __ZN3zim10envMemSizeEPKcj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $11 = 0, $12 = 0, $125 = 0, $127 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $142 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $87 = 0, $88 = 0, $9 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $2 = sp + 336 | 0;
 $3 = sp + 332 | 0;
 $4 = sp + 328 | 0;
 $5 = sp + 324 | 0;
 $6 = sp + 320 | 0;
 $7 = sp + 316 | 0;
 $8 = sp + 312 | 0;
 $9 = sp + 308 | 0;
 $10 = sp + 304 | 0;
 $11 = sp + 300 | 0;
 $12 = sp + 296 | 0;
 $15 = sp + 284 | 0;
 $16 = sp + 280 | 0;
 $17 = sp + 276 | 0;
 $18 = sp + 272 | 0;
 $20 = sp + 268 | 0;
 $21 = sp + 264 | 0;
 $24 = sp + 256 | 0;
 $25 = sp + 252 | 0;
 $26 = sp + 248 | 0;
 $27 = sp + 244 | 0;
 $28 = sp + 240 | 0;
 $29 = sp + 236 | 0;
 $31 = sp + 232 | 0;
 $32 = sp + 228 | 0;
 $33 = sp + 224 | 0;
 $34 = sp + 220 | 0;
 $35 = sp + 216 | 0;
 $36 = sp + 212 | 0;
 $37 = sp + 208 | 0;
 $38 = sp + 204 | 0;
 $39 = sp + 200 | 0;
 $41 = sp + 192 | 0;
 $42 = sp + 188 | 0;
 $43 = sp + 184 | 0;
 $44 = sp + 180 | 0;
 $45 = sp + 176 | 0;
 $46 = sp + 172 | 0;
 $47 = sp + 168 | 0;
 $48 = sp + 164 | 0;
 $49 = sp + 340 | 0;
 $50 = sp + 24 | 0;
 $51 = sp + 12 | 0;
 $52 = sp + 8 | 0;
 $53 = sp + 4 | 0;
 HEAP32[$46 >> 2] = $0;
 HEAP32[$47 >> 2] = $1;
 HEAP32[$48 >> 2] = _getenv(HEAP32[$46 >> 2] | 0) | 0;
 if (!(HEAP32[$48 >> 2] | 0)) {
  $150 = HEAP32[$47 >> 2] | 0;
  STACKTOP = sp;
  return $150 | 0;
 }
 HEAP8[$49 >> 0] = 0;
 $58 = HEAP32[$48 >> 2] | 0;
 HEAP32[$44 >> 2] = $51;
 HEAP32[$45 >> 2] = $58;
 $59 = HEAP32[$44 >> 2] | 0;
 HEAP32[$43 >> 2] = $59;
 $60 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $60;
 $61 = HEAP32[$42 >> 2] | 0;
 HEAP32[$61 >> 2] = 0;
 HEAP32[$61 + 4 >> 2] = 0;
 HEAP32[$61 + 8 >> 2] = 0;
 HEAP32[$41 >> 2] = $60;
 HEAP32[sp + 196 >> 2] = HEAP32[$41 >> 2];
 $63 = HEAP32[$45 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($59, $63, __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$45 >> 2] | 0) | 0);
 HEAP32[$35 >> 2] = $50;
 HEAP32[$36 >> 2] = $51;
 HEAP32[$37 >> 2] = 8;
 $66 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = $66 + 60;
 $68 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $68;
 HEAP32[HEAP32[$33 >> 2] >> 2] = 44548;
 HEAP32[$68 >> 2] = 44532;
 HEAP32[$66 >> 2] = 43416;
 HEAP32[$66 + 60 >> 2] = 43436;
 HEAP32[$4 >> 2] = $66;
 HEAP32[$5 >> 2] = 43448;
 HEAP32[$6 >> 2] = $66 + 8;
 $73 = HEAP32[$4 >> 2] | 0;
 $74 = HEAP32[$5 >> 2] | 0;
 HEAP32[$73 >> 2] = HEAP32[$74 >> 2];
 HEAP32[$73 + (HEAP32[(HEAP32[$73 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$74 + 4 >> 2];
 HEAP32[$73 + 4 >> 2] = 0;
 $87 = HEAP32[$6 >> 2] | 0;
 HEAP32[$2 >> 2] = $73 + (HEAP32[(HEAP32[$73 >> 2] | 0) + -12 >> 2] | 0);
 HEAP32[$3 >> 2] = $87;
 $88 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__28ios_base4initEPv($88, HEAP32[$3 >> 2] | 0);
 HEAP32[$88 + 72 >> 2] = 0;
 HEAP32[$88 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$66 >> 2] = 43416;
 HEAP32[$66 + 60 >> 2] = 43436;
 $95 = HEAP32[$36 >> 2] | 0;
 $97 = HEAP32[$37 >> 2] | 8;
 HEAP32[$27 >> 2] = $66 + 8;
 HEAP32[$28 >> 2] = $95;
 HEAP32[$29 >> 2] = $97;
 $98 = HEAP32[$27 >> 2] | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($98);
 HEAP32[$98 >> 2] = 43308;
 $99 = $98 + 32 | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[sp + 260 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$20 >> 2] = $99;
 HEAP32[$21 >> 2] = sp + 341;
 $104 = HEAP32[$20 >> 2] | 0;
 $105 = HEAP32[$21 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 342 >> 0] | 0;
 HEAP32[$17 >> 2] = $104;
 HEAP32[$18 >> 2] = $105;
 $106 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = $106;
 $107 = HEAP32[$16 >> 2] | 0;
 HEAP32[$107 >> 2] = 0;
 HEAP32[$107 + 4 >> 2] = 0;
 HEAP32[$107 + 8 >> 2] = 0;
 HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
 $109 = HEAP32[$12 >> 2] | 0;
 HEAP32[sp + 288 >> 2] = $106;
 HEAP32[$15 >> 2] = $109;
 HEAP32[sp + 292 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$9 >> 2] = $104;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] << 2) >> 2] = 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP32[$98 + 44 >> 2] = 0;
 HEAP32[$98 + 48 >> 2] = HEAP32[$29 >> 2];
 __THREW__ = 0;
 invoke_vii(63, $98 | 0, HEAP32[$28 >> 2] | 0);
 $125 = __THREW__;
 __THREW__ = 0;
 if ($125 & 1) {
  $127 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$31 >> 2] = $127;
  HEAP32[$32 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($99);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($98);
  $130 = HEAP32[$32 >> 2] | 0;
  HEAP32[$38 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$39 >> 2] = $130;
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($66, 43448);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($66 + 60 | 0);
  $134 = HEAP32[$39 >> 2] | 0;
  HEAP32[$52 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$53 >> 2] = $134;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
  $151 = HEAP32[$52 >> 2] | 0;
  $152 = HEAP32[$53 >> 2] | 0;
  ___resumeException($151 | 0);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($51);
 __THREW__ = 0;
 $135 = invoke_iii(42, $50 | 0, $47 | 0) | 0;
 $136 = __THREW__;
 __THREW__ = 0;
 if (!($136 & 1)) {
  __THREW__ = 0;
  invoke_iii(43, $135 | 0, $49 | 0) | 0;
  $138 = __THREW__;
  __THREW__ = 0;
  if (!($138 & 1)) {
   switch (HEAP8[$49 >> 0] | 0) {
   case 75:
   case 107:
    {
     HEAP32[$47 >> 2] = HEAP32[$47 >> 2] << 10;
     break;
    }
   case 77:
   case 109:
    {
     HEAP32[$47 >> 2] = HEAP32[$47 >> 2] << 20;
     break;
    }
   case 71:
   case 103:
    {
     HEAP32[$47 >> 2] = HEAP32[$47 >> 2] << 30;
     break;
    }
   default:
    {}
   }
   __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
   $150 = HEAP32[$47 >> 2] | 0;
   STACKTOP = sp;
   return $150 | 0;
  }
 }
 $142 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$52 >> 2] = $142;
 HEAP32[$53 >> 2] = tempRet0;
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
 $151 = HEAP32[$52 >> 2] | 0;
 $152 = HEAP32[$53 >> 2] | 0;
 ___resumeException($151 | 0);
 return 0;
}
function __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i106 = 0, $$0$i$i113 = 0, $$0$ph = 0, $$0101 = 0, $$0104 = 0, $$07$i$i = 0, $$093 = 0, $$095 = 0, $$097 = 0, $$099 = 0, $$1 = 0, $$1100 = 0, $$1102 = 0, $$194 = 0, $$196 = 0, $$2 = 0, $$2103 = 0, $$3 = 0, $$pn = 0, $$pn$pn = 0, $$sroa$08$0$i = 0, $$sroa$08$0$i112 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $92 = 0, $94 = 0, $spec$select = 0;
 HEAP32[$2 >> 2] = $0;
 $15 = $13 + 11 | 0;
 $16 = $13 + 4 | 0;
 $17 = $12 + 11 | 0;
 $18 = $12 + 4 | 0;
 $20 = ($3 & 512 | 0) == 0;
 $21 = $6 + 8 | 0;
 $22 = ($14 | 0) > 0;
 $23 = $11 + 11 | 0;
 $24 = $11 + 4 | 0;
 $$0104 = 0;
 $$097 = $4;
 while (1) {
  if (($$0104 | 0) == 4) break;
  L4 : do switch (HEAP8[$8 + $$0104 >> 0] | 0) {
  case 0:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $$2 = $$097;
    break;
   }
  case 1:
   {
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    $39 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6, 32) | 0;
    $40 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $40 + 1;
    HEAP8[$40 >> 0] = $39;
    $$2 = $$097;
    break;
   }
  case 3:
   {
    $42 = HEAP8[$15 >> 0] | 0;
    $43 = $42 << 24 >> 24 < 0;
    if (!(($43 ? HEAP32[$16 >> 2] | 0 : $42 & 255) | 0)) $$2 = $$097; else {
     $50 = HEAP8[($43 ? HEAP32[$13 >> 2] | 0 : $13) >> 0] | 0;
     $51 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $51 + 1;
     HEAP8[$51 >> 0] = $50;
     $$2 = $$097;
    }
    break;
   }
  case 2:
   {
    $53 = HEAP8[$17 >> 0] | 0;
    $54 = $53 << 24 >> 24 < 0;
    $57 = $54 ? HEAP32[$18 >> 2] | 0 : $53 & 255;
    if ($20 | ($57 | 0) == 0) $$2 = $$097; else {
     $60 = $54 ? HEAP32[$12 >> 2] | 0 : $12;
     $61 = $60 + $57 | 0;
     $$0$i$i113 = HEAP32[$2 >> 2] | 0;
     $$sroa$08$0$i112 = $60;
     while (1) {
      if (($$sroa$08$0$i112 | 0) == ($61 | 0)) break;
      HEAP8[$$0$i$i113 >> 0] = HEAP8[$$sroa$08$0$i112 >> 0] | 0;
      $$0$i$i113 = $$0$i$i113 + 1 | 0;
      $$sroa$08$0$i112 = $$sroa$08$0$i112 + 1 | 0;
     }
     HEAP32[$2 >> 2] = $$0$i$i113;
     $$2 = $$097;
    }
    break;
   }
  case 4:
   {
    $67 = HEAP32[$2 >> 2] | 0;
    $spec$select = $7 ? $$097 + 1 | 0 : $$097;
    $$0101 = $spec$select;
    while (1) {
     if ($$0101 >>> 0 >= $5 >>> 0) break;
     $70 = HEAP8[$$0101 >> 0] | 0;
     if ($70 << 24 >> 24 <= -1) break;
     if (!(HEAP16[(HEAP32[$21 >> 2] | 0) + ($70 << 24 >> 24 << 1) >> 1] & 2048)) break;
     $$0101 = $$0101 + 1 | 0;
    }
    if ($22) {
     $$099 = $14;
     $$1102 = $$0101;
     while (1) {
      $80 = ($$099 | 0) > 0;
      if (!($$1102 >>> 0 > $spec$select >>> 0 & $80)) break;
      $82 = $$1102 + -1 | 0;
      $83 = HEAP8[$82 >> 0] | 0;
      $84 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $84 + 1;
      HEAP8[$84 >> 0] = $83;
      $$099 = $$099 + -1 | 0;
      $$1102 = $82;
     }
     if ($80) $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6, 48) | 0; else $94 = 0;
     $$1100 = $$099;
     while (1) {
      $92 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $92 + 1;
      if (($$1100 | 0) <= 0) break;
      HEAP8[$92 >> 0] = $94;
      $$1100 = $$1100 + -1 | 0;
     }
     HEAP8[$92 >> 0] = $9;
     $$2103 = $$1102;
    } else $$2103 = $$0101;
    L36 : do if (($$2103 | 0) == ($spec$select | 0)) {
     $100 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 63]($6, 48) | 0;
     $101 = HEAP32[$2 >> 2] | 0;
     HEAP32[$2 >> 2] = $101 + 1;
     HEAP8[$101 >> 0] = $100;
    } else {
     $103 = HEAP8[$23 >> 0] | 0;
     $104 = $103 << 24 >> 24 < 0;
     if (!(($104 ? HEAP32[$24 >> 2] | 0 : $103 & 255) | 0)) $$0$ph = -1; else $$0$ph = HEAP8[($104 ? HEAP32[$11 >> 2] | 0 : $11) >> 0] | 0;
     $$0 = $$0$ph;
     $$093 = 0;
     $$095 = 0;
     $$3 = $$2103;
     while (1) {
      if (($$3 | 0) == ($spec$select | 0)) break L36;
      if (($$095 | 0) == ($$0 | 0)) {
       $115 = HEAP32[$2 >> 2] | 0;
       HEAP32[$2 >> 2] = $115 + 1;
       HEAP8[$115 >> 0] = $10;
       $117 = $$093 + 1 | 0;
       $118 = HEAP8[$23 >> 0] | 0;
       $119 = $118 << 24 >> 24 < 0;
       if ($117 >>> 0 < ($119 ? HEAP32[$24 >> 2] | 0 : $118 & 255) >>> 0) {
        $127 = HEAP8[($119 ? HEAP32[$11 >> 2] | 0 : $11) + $117 >> 0] | 0;
        $$1 = $127 << 24 >> 24 == 127 ? -1 : $127 << 24 >> 24;
        $$194 = $117;
        $$196 = 0;
       } else {
        $$1 = $$095;
        $$194 = $117;
        $$196 = 0;
       }
      } else {
       $$1 = $$0;
       $$194 = $$093;
       $$196 = $$095;
      }
      $130 = $$3 + -1 | 0;
      $131 = HEAP8[$130 >> 0] | 0;
      $132 = HEAP32[$2 >> 2] | 0;
      HEAP32[$2 >> 2] = $132 + 1;
      HEAP8[$132 >> 0] = $131;
      $$0 = $$1;
      $$093 = $$194;
      $$095 = $$196 + 1 | 0;
      $$3 = $130;
     }
    } while (0);
    $135 = HEAP32[$2 >> 2] | 0;
    if (($67 | 0) == ($135 | 0)) $$2 = $spec$select; else {
     $$0$i$i106 = $135;
     $$07$i$i = $67;
     while (1) {
      $137 = $$0$i$i106 + -1 | 0;
      if ($$07$i$i >>> 0 >= $137 >>> 0) {
       $$2 = $spec$select;
       break L4;
      }
      $139 = HEAP8[$$07$i$i >> 0] | 0;
      HEAP8[$$07$i$i >> 0] = HEAP8[$137 >> 0] | 0;
      HEAP8[$137 >> 0] = $139;
      $$0$i$i106 = $137;
      $$07$i$i = $$07$i$i + 1 | 0;
     }
    }
    break;
   }
  default:
   $$2 = $$097;
  } while (0);
  $$0104 = $$0104 + 1 | 0;
  $$097 = $$2;
 }
 $25 = HEAP8[$15 >> 0] | 0;
 $26 = $25 << 24 >> 24 < 0;
 $29 = $26 ? HEAP32[$16 >> 2] | 0 : $25 & 255;
 if ($29 >>> 0 > 1) {
  $$pn = $26 ? HEAP32[$13 >> 2] | 0 : $13;
  $144 = $$pn + $29 | 0;
  $$0$i$i = HEAP32[$2 >> 2] | 0;
  $$pn$pn = $$pn;
  while (1) {
   $$sroa$08$0$i = $$pn$pn + 1 | 0;
   if (($$sroa$08$0$i | 0) == ($144 | 0)) break;
   HEAP8[$$0$i$i >> 0] = HEAP8[$$sroa$08$0$i >> 0] | 0;
   $$0$i$i = $$0$i$i + 1 | 0;
   $$pn$pn = $$sroa$08$0$i;
  }
  HEAP32[$2 >> 2] = $$0$i$i;
 }
 switch (($3 & 176) << 24 >> 24) {
 case 32:
  {
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   break;
  }
 case 16:
  break;
 default:
  HEAP32[$1 >> 2] = $0;
 }
 return;
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33859 = 0, $$361 = 0, $$byval_copy = 0, $$pre56 = 0, $$sroa$0$0$copyload = 0, $$sroa$043$0 = 0, $$sroa$043$1 = 0, $10 = 0, $104 = 0, $105 = 0, $11 = 0, $113 = 0, $117 = 0, $119 = 0, $12 = 0, $122 = 0, $124 = 0, $126 = 0, $13 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $7 = 0, $77 = 0, $8 = 0, $80 = 0, $87 = 0, $88 = 0, $9 = 0, $94 = 0, $97 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 $$byval_copy = sp + 512 | 0;
 $vararg_buffer = sp + 552 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 568 | 0;
 $9 = sp + 564 | 0;
 $10 = sp + 560 | 0;
 $11 = sp + 576 | 0;
 $12 = sp + 556 | 0;
 $13 = sp;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 191;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 __THREW__ = 0;
 $17 = invoke_iii(32, $10 | 0, 62400) | 0;
 $18 = __THREW__;
 __THREW__ = 0;
 if ($18 & 1) {
  $43 = ___cxa_find_matching_catch_2() | 0;
  $$234 = $43;
  $$237 = tempRet0;
 } else {
  HEAP8[$11 >> 0] = 0;
  HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
  $22 = HEAP32[$4 + 4 >> 2] | 0;
  __THREW__ = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
  $23 = invoke_iiiiiiiiiiii(2, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $22 | 0, $5 | 0, $11 | 0, $17 | 0, $8 | 0, $9 | 0, $7 + 400 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  L4 : do if ($24 & 1) label = 9; else {
   L6 : do if ($23) {
    __THREW__ = 0;
    invoke_iiiii(HEAP32[(HEAP32[$17 >> 2] | 0) + 48 >> 2] | 0, $17 | 0, 54462, 54472, $$byval_copy | 0) | 0;
    $29 = __THREW__;
    __THREW__ = 0;
    if ($29 & 1) {
     $47 = ___cxa_find_matching_catch_2() | 0;
     $$032 = $47;
     $$035 = tempRet0;
    } else {
     $31 = HEAP32[$9 >> 2] | 0;
     $32 = HEAP32[$8 >> 2] | 0;
     $33 = $31 - $32 | 0;
     $35 = $32;
     $36 = $31;
     if (($33 | 0) > 392) {
      $39 = _malloc(($33 >>> 2) + 2 | 0) | 0;
      $40 = $39;
      if (!$39) {
       __THREW__ = 0;
       invoke_v(5);
       __THREW__ = 0;
       $$sroa$043$0 = $40;
      } else {
       $$031 = $39;
       $$sroa$043$1 = $40;
       label = 14;
      }
     } else {
      $$031 = $13;
      $$sroa$043$1 = 0;
      label = 14;
     }
     do if ((label | 0) == 14) {
      if (!(HEAP8[$11 >> 0] | 0)) $$1 = $$031; else {
       HEAP8[$$031 >> 0] = 45;
       $$1 = $$031 + 1 | 0;
      }
      $56 = $$byval_copy + 40 | 0;
      $57 = $$byval_copy;
      $$0 = $35;
      $$2 = $$1;
      $59 = $36;
      while (1) {
       if ($$0 >>> 0 >= $59 >>> 0) break;
       $62 = HEAP32[$$0 >> 2] | 0;
       $$0$i = $$byval_copy;
       while (1) {
        if (($$0$i | 0) == ($56 | 0)) {
         $$0$lcssa$i = $56;
         break;
        }
        if ((HEAP32[$$0$i >> 2] | 0) == ($62 | 0)) {
         $$0$lcssa$i = $$0$i;
         break;
        }
        $$0$i = $$0$i + 4 | 0;
       }
       HEAP8[$$2 >> 0] = HEAP8[54462 + ($$0$lcssa$i - $57 >> 2) >> 0] | 0;
       $$0 = $$0 + 4 | 0;
       $$2 = $$2 + 1 | 0;
       $59 = HEAP32[$9 >> 2] | 0;
      }
      HEAP8[$$2 >> 0] = 0;
      HEAP32[$vararg_buffer >> 2] = $6;
      if ((_sscanf($13, 54347, $vararg_buffer) | 0) != 1) {
       __THREW__ = 0;
       invoke_vi(192, 54351);
       __THREW__ = 0;
       $$sroa$043$0 = $$sroa$043$1;
       break;
      }
      if ($$sroa$043$1 | 0) _free($$sroa$043$1);
      break L6;
     } while (0);
     $49 = ___cxa_find_matching_catch_2() | 0;
     $50 = tempRet0;
     if ($$sroa$043$0 | 0) _free($$sroa$043$0);
     $$032 = $49;
     $$035 = $50;
    }
    $$133 = $$032;
    $$136 = $$035;
    break L4;
   } while (0);
   $77 = HEAP32[$1 >> 2] | 0;
   do if (!$77) $126 = 1; else {
    $80 = HEAP32[$77 + 12 >> 2] | 0;
    if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $87 = invoke_ii(HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] | 0, $77 | 0) | 0;
     $88 = __THREW__;
     __THREW__ = 0;
     if ($88 & 1) {
      label = 9;
      break L4;
     } else $$0$i$i$i$i = $87;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $126 = 1;
     break;
    } else {
     $126 = (HEAP32[$1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $94 = HEAP32[$2 >> 2] | 0;
   do if (!$94) label = 42; else {
    $97 = HEAP32[$94 + 12 >> 2] | 0;
    if (($97 | 0) == (HEAP32[$94 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $104 = invoke_ii(HEAP32[(HEAP32[$94 >> 2] | 0) + 36 >> 2] | 0, $94 | 0) | 0;
     $105 = __THREW__;
     __THREW__ = 0;
     if ($105 & 1) {
      label = 9;
      break L4;
     } else $$0$i$i2$i$i = $104;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$97 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 42;
     break;
    } else if ($126) break; else {
     label = 44;
     break;
    }
   } while (0);
   if ((label | 0) == 42) if ($126) label = 44;
   if ((label | 0) == 44) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
   $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
   __ZNSt3__26localeD2Ev($10);
   $113 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   if ($113 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $113 | 0);
    $117 = __THREW__;
    __THREW__ = 0;
    if ($117 & 1) {
     $119 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($119);
    }
   }
   STACKTOP = sp;
   return $$sroa$0$0$copyload | 0;
  } while (0);
  if ((label | 0) == 9) {
   $45 = ___cxa_find_matching_catch_2() | 0;
   $$133 = $45;
   $$136 = tempRet0;
  }
  $$234 = $$133;
  $$237 = $$136;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre56 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if (!$$pre56) {
  $$33859 = $$237;
  $$361 = $$234;
 } else {
  __THREW__ = 0;
  invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $$pre56 | 0);
  $122 = __THREW__;
  __THREW__ = 0;
  if ($122 & 1) {
   $124 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($124);
  } else {
   $$33859 = $$237;
   $$361 = $$234;
  }
 }
 ___resumeException($$361 | 0);
 return 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$0$lcssa$i = 0, $$031 = 0, $$032 = 0, $$035 = 0, $$1 = 0, $$133 = 0, $$136 = 0, $$2 = 0, $$234 = 0, $$237 = 0, $$33860 = 0, $$362 = 0, $$byval_copy = 0, $$pre57 = 0, $$sroa$0$0$copyload = 0, $$sroa$044$0 = 0, $$sroa$044$1 = 0, $10 = 0, $102 = 0, $103 = 0, $11 = 0, $111 = 0, $115 = 0, $117 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $13 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $7 = 0, $75 = 0, $78 = 0, $8 = 0, $85 = 0, $86 = 0, $9 = 0, $92 = 0, $95 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $$byval_copy = sp + 240 | 0;
 $vararg_buffer = sp + 216 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 232 | 0;
 $9 = sp + 228 | 0;
 $10 = sp + 224 | 0;
 $11 = sp + 250 | 0;
 $12 = sp + 220 | 0;
 $13 = sp;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 191;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 __THREW__ = 0;
 $17 = invoke_iii(32, $10 | 0, 62368) | 0;
 $18 = __THREW__;
 __THREW__ = 0;
 if ($18 & 1) {
  $42 = ___cxa_find_matching_catch_2() | 0;
  $$234 = $42;
  $$237 = tempRet0;
 } else {
  HEAP8[$11 >> 0] = 0;
  HEAP32[$12 >> 2] = HEAP32[$2 >> 2];
  $22 = HEAP32[$4 + 4 >> 2] | 0;
  __THREW__ = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
  $23 = invoke_iiiiiiiiiiii(1, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $22 | 0, $5 | 0, $11 | 0, $17 | 0, $8 | 0, $9 | 0, $7 + 100 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  L4 : do if ($24 & 1) label = 9; else {
   L6 : do if ($23) {
    __THREW__ = 0;
    invoke_iiiii(HEAP32[(HEAP32[$17 >> 2] | 0) + 32 >> 2] | 0, $17 | 0, 54336, 54346, $$byval_copy | 0) | 0;
    $29 = __THREW__;
    __THREW__ = 0;
    if ($29 & 1) {
     $46 = ___cxa_find_matching_catch_2() | 0;
     $$032 = $46;
     $$035 = tempRet0;
    } else {
     $31 = HEAP32[$9 >> 2] | 0;
     $32 = HEAP32[$8 >> 2] | 0;
     $33 = $31 - $32 | 0;
     $35 = $32;
     $36 = $31;
     if (($33 | 0) > 98) {
      $38 = _malloc($33 + 2 | 0) | 0;
      $39 = $38;
      if (!$38) {
       __THREW__ = 0;
       invoke_v(5);
       __THREW__ = 0;
       $$sroa$044$0 = $39;
      } else {
       $$031 = $38;
       $$sroa$044$1 = $39;
       label = 14;
      }
     } else {
      $$031 = $13;
      $$sroa$044$1 = 0;
      label = 14;
     }
     do if ((label | 0) == 14) {
      if (!(HEAP8[$11 >> 0] | 0)) $$1 = $$031; else {
       HEAP8[$$031 >> 0] = 45;
       $$1 = $$031 + 1 | 0;
      }
      $55 = $$byval_copy + 10 | 0;
      $56 = $$byval_copy;
      $$0 = $35;
      $$2 = $$1;
      $58 = $36;
      while (1) {
       if ($$0 >>> 0 >= $58 >>> 0) break;
       $61 = HEAP8[$$0 >> 0] | 0;
       $$0$i = $$byval_copy;
       while (1) {
        if (($$0$i | 0) == ($55 | 0)) {
         $$0$lcssa$i = $55;
         break;
        }
        if ((HEAP8[$$0$i >> 0] | 0) == $61 << 24 >> 24) {
         $$0$lcssa$i = $$0$i;
         break;
        }
        $$0$i = $$0$i + 1 | 0;
       }
       HEAP8[$$2 >> 0] = HEAP8[54336 + ($$0$lcssa$i - $56) >> 0] | 0;
       $$0 = $$0 + 1 | 0;
       $$2 = $$2 + 1 | 0;
       $58 = HEAP32[$9 >> 2] | 0;
      }
      HEAP8[$$2 >> 0] = 0;
      HEAP32[$vararg_buffer >> 2] = $6;
      if ((_sscanf($13, 54347, $vararg_buffer) | 0) != 1) {
       __THREW__ = 0;
       invoke_vi(192, 54351);
       __THREW__ = 0;
       $$sroa$044$0 = $$sroa$044$1;
       break;
      }
      if ($$sroa$044$1 | 0) _free($$sroa$044$1);
      break L6;
     } while (0);
     $48 = ___cxa_find_matching_catch_2() | 0;
     $49 = tempRet0;
     if ($$sroa$044$0 | 0) _free($$sroa$044$0);
     $$032 = $48;
     $$035 = $49;
    }
    $$133 = $$032;
    $$136 = $$035;
    break L4;
   } while (0);
   $75 = HEAP32[$1 >> 2] | 0;
   do if (!$75) $124 = 1; else {
    $78 = HEAP32[$75 + 12 >> 2] | 0;
    if (($78 | 0) == (HEAP32[$75 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $85 = invoke_ii(HEAP32[(HEAP32[$75 >> 2] | 0) + 36 >> 2] | 0, $75 | 0) | 0;
     $86 = __THREW__;
     __THREW__ = 0;
     if ($86 & 1) {
      label = 9;
      break L4;
     } else $$0$i$i$i$i = $85;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$78 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $124 = 1;
     break;
    } else {
     $124 = (HEAP32[$1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $92 = HEAP32[$2 >> 2] | 0;
   do if (!$92) label = 42; else {
    $95 = HEAP32[$92 + 12 >> 2] | 0;
    if (($95 | 0) == (HEAP32[$92 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $102 = invoke_ii(HEAP32[(HEAP32[$92 >> 2] | 0) + 36 >> 2] | 0, $92 | 0) | 0;
     $103 = __THREW__;
     __THREW__ = 0;
     if ($103 & 1) {
      label = 9;
      break L4;
     } else $$0$i$i2$i$i = $102;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$95 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 42;
     break;
    } else if ($124) break; else {
     label = 44;
     break;
    }
   } while (0);
   if ((label | 0) == 42) if ($124) label = 44;
   if ((label | 0) == 44) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
   $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
   __ZNSt3__26localeD2Ev($10);
   $111 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   if ($111 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $111 | 0);
    $115 = __THREW__;
    __THREW__ = 0;
    if ($115 & 1) {
     $117 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($117);
    }
   }
   STACKTOP = sp;
   return $$sroa$0$0$copyload | 0;
  } while (0);
  if ((label | 0) == 9) {
   $44 = ___cxa_find_matching_catch_2() | 0;
   $$133 = $44;
   $$136 = tempRet0;
  }
  $$234 = $$133;
  $$237 = $$136;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre57 = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if (!$$pre57) {
  $$33860 = $$237;
  $$362 = $$234;
 } else {
  __THREW__ = 0;
  invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $$pre57 | 0);
  $120 = __THREW__;
  __THREW__ = 0;
  if ($120 & 1) {
   $122 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($122);
  } else {
   $$33860 = $$237;
   $$362 = $$234;
  }
 }
 ___resumeException($$362 | 0);
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXsr27__is_exactly_input_iteratorIT_EE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $117 = 0, $12 = 0, $126 = 0, $127 = 0, $13 = 0, $135 = 0, $139 = 0, $14 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $152 = 0, $156 = 0, $16 = 0, $169 = 0, $17 = 0, $173 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $186 = 0, $188 = 0, $19 = 0, $192 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $7 = 0, $73 = 0, $74 = 0, $8 = 0, $80 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $3 = sp + 168 | 0;
 $4 = sp + 164 | 0;
 $5 = sp + 160 | 0;
 $6 = sp + 156 | 0;
 $7 = sp + 152 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 140 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 132 | 0;
 $13 = sp + 128 | 0;
 $14 = sp + 124 | 0;
 $15 = sp + 120 | 0;
 $16 = sp + 116 | 0;
 $17 = sp + 112 | 0;
 $18 = sp + 108 | 0;
 $19 = sp + 104 | 0;
 $20 = sp + 100 | 0;
 $21 = sp + 96 | 0;
 $22 = sp + 92 | 0;
 $23 = sp + 88 | 0;
 $24 = sp + 84 | 0;
 $25 = sp + 80 | 0;
 $26 = sp + 76 | 0;
 $27 = sp + 72 | 0;
 $28 = sp + 68 | 0;
 $29 = sp + 64 | 0;
 $30 = sp + 60 | 0;
 $31 = sp + 56 | 0;
 $32 = sp + 52 | 0;
 $33 = sp + 48 | 0;
 $34 = sp + 44 | 0;
 $35 = sp + 40 | 0;
 $36 = sp + 36 | 0;
 $37 = sp + 32 | 0;
 $38 = sp + 28 | 0;
 $39 = sp + 24 | 0;
 $40 = sp + 20 | 0;
 $41 = sp + 16 | 0;
 $42 = sp + 12 | 0;
 $43 = sp + 8 | 0;
 $44 = sp + 4 | 0;
 $45 = sp;
 HEAP32[$43 >> 2] = $0;
 $46 = HEAP32[$43 >> 2] | 0;
 HEAP32[$40 >> 2] = $46;
 HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$38 >> 2];
 HEAP32[$42 >> 2] = 0;
 while (1) {
  if ((HEAP32[$42 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$41 >> 2] | 0) + (HEAP32[$42 >> 2] << 2) >> 2] = 0;
  HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
 }
 while (1) {
  HEAP32[$36 >> 2] = $1;
  HEAP32[$37 >> 2] = $2;
  $58 = HEAP32[$37 >> 2] | 0;
  HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$35 >> 2] = $58;
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  $60 = HEAP32[$33 >> 2] | 0;
  if (HEAP32[$60 >> 2] | 0) {
   HEAP32[$32 >> 2] = HEAP32[$60 >> 2];
   $64 = HEAP32[$32 >> 2] | 0;
   if ((HEAP32[$64 + 12 >> 2] | 0) == (HEAP32[$64 + 16 >> 2] | 0)) {
    __THREW__ = 0;
    $73 = invoke_ii(HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] | 0, $64 | 0) | 0;
    $74 = __THREW__;
    __THREW__ = 0;
    if ($74 & 1) break;
    HEAP32[$31 >> 2] = $73;
   } else HEAP32[$31 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[$64 + 12 >> 2] >> 0] | 0) | 0;
   $80 = HEAP32[$31 >> 2] | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($80, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$60 >> 2] = 0;
  }
  $85 = (HEAP32[$60 >> 2] | 0) == 0 & 1;
  HEAP32[$30 >> 2] = HEAP32[$35 >> 2];
  $87 = HEAP32[$30 >> 2] | 0;
  if (HEAP32[$87 >> 2] | 0) {
   HEAP32[$29 >> 2] = HEAP32[$87 >> 2];
   $91 = HEAP32[$29 >> 2] | 0;
   if ((HEAP32[$91 + 12 >> 2] | 0) == (HEAP32[$91 + 16 >> 2] | 0)) {
    __THREW__ = 0;
    $100 = invoke_ii(HEAP32[(HEAP32[$91 >> 2] | 0) + 36 >> 2] | 0, $91 | 0) | 0;
    $101 = __THREW__;
    __THREW__ = 0;
    if ($101 & 1) break;
    HEAP32[$28 >> 2] = $100;
   } else HEAP32[$28 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[$91 + 12 >> 2] >> 0] | 0) | 0;
   $107 = HEAP32[$28 >> 2] | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($107, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$87 >> 2] = 0;
  }
  if (!(($85 | 0) == ((HEAP32[$87 >> 2] | 0) == 0 | 0) ^ 1)) {
   label = 33;
   break;
  }
  HEAP32[$27 >> 2] = $1;
  HEAP32[$26 >> 2] = HEAP32[HEAP32[$27 >> 2] >> 2];
  $117 = HEAP32[$26 >> 2] | 0;
  if ((HEAP32[$117 + 12 >> 2] | 0) == (HEAP32[$117 + 16 >> 2] | 0)) {
   __THREW__ = 0;
   $126 = invoke_ii(HEAP32[(HEAP32[$117 >> 2] | 0) + 36 >> 2] | 0, $117 | 0) | 0;
   $127 = __THREW__;
   __THREW__ = 0;
   if ($127 & 1) break;
   HEAP32[$25 >> 2] = $126;
  } else HEAP32[$25 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[$117 + 12 >> 2] >> 0] | 0) | 0;
  __THREW__ = 0;
  invoke_vii(47, $46 | 0, HEAP32[$25 >> 2] & 255 | 0);
  $135 = __THREW__;
  __THREW__ = 0;
  if ($135 & 1) break;
  HEAP32[$24 >> 2] = $1;
  HEAP32[$23 >> 2] = HEAP32[HEAP32[$24 >> 2] >> 2];
  $139 = HEAP32[$23 >> 2] | 0;
  if ((HEAP32[$139 + 12 >> 2] | 0) == (HEAP32[$139 + 16 >> 2] | 0)) {
   __THREW__ = 0;
   $148 = invoke_ii(HEAP32[(HEAP32[$139 >> 2] | 0) + 40 >> 2] | 0, $139 | 0) | 0;
   $149 = __THREW__;
   __THREW__ = 0;
   if ($149 & 1) break;
   HEAP32[$22 >> 2] = $148;
  } else {
   $151 = $139 + 12 | 0;
   $152 = HEAP32[$151 >> 2] | 0;
   HEAP32[$151 >> 2] = $152 + 1;
   HEAP32[$22 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$152 >> 0] | 0) | 0;
  }
 }
 if ((label | 0) == 33) {
  STACKTOP = sp;
  return;
 }
 $156 = ___cxa_find_matching_catch_3(0) | 0;
 HEAP32[$44 >> 2] = $156;
 HEAP32[$45 >> 2] = tempRet0;
 ___cxa_begin_catch(HEAP32[$44 >> 2] | 0) | 0;
 HEAP32[$21 >> 2] = $46;
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 if ((HEAPU8[(HEAP32[$19 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$18 >> 2] = $46;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  $169 = HEAP32[$16 >> 2] | 0;
  HEAP32[$15 >> 2] = $46;
  HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $173 = HEAP32[HEAP32[$13 >> 2] >> 2] | 0;
  HEAP32[$12 >> 2] = $46;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
  $179 = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] & 2147483647;
  HEAP32[$7 >> 2] = $169;
  HEAP32[$8 >> 2] = $173;
  HEAP32[$9 >> 2] = $179;
  $181 = HEAP32[$8 >> 2] | 0;
  $182 = HEAP32[$9 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = $181;
  HEAP32[$6 >> 2] = $182;
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  __ZdlPv(HEAP32[$3 >> 2] | 0);
 }
 __THREW__ = 0;
 invoke_v(4);
 __THREW__ = 0;
 $186 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$44 >> 2] = $186;
 HEAP32[$45 >> 2] = tempRet0;
 __THREW__ = 0;
 invoke_v(3);
 $188 = __THREW__;
 __THREW__ = 0;
 if ($188 & 1) {
  $192 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($192);
 } else ___resumeException(HEAP32[$44 >> 2] | 0);
}

function __ZN3zim8FileImpl21getNamespaceEndOffsetEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $126 = 0, $13 = 0, $130 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $85 = 0, $89 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $$byval_copy = sp + 256 | 0;
 $2 = sp + 252 | 0;
 $3 = sp + 248 | 0;
 $4 = sp + 244 | 0;
 $5 = sp + 240 | 0;
 $6 = sp + 236 | 0;
 $7 = sp + 232 | 0;
 $8 = sp + 228 | 0;
 $9 = sp + 224 | 0;
 $10 = sp + 220 | 0;
 $11 = sp + 216 | 0;
 $12 = sp + 212 | 0;
 $13 = sp + 208 | 0;
 $14 = sp + 204 | 0;
 $15 = sp + 200 | 0;
 $16 = sp + 196 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 192 | 0;
 $19 = sp + 188 | 0;
 $20 = sp + 32 | 0;
 $21 = sp + 184 | 0;
 $22 = sp + 24 | 0;
 $23 = sp + 180 | 0;
 $24 = sp + 176 | 0;
 $25 = sp + 172 | 0;
 $26 = sp + 168 | 0;
 $27 = sp + 164 | 0;
 $28 = sp + 160 | 0;
 $29 = sp + 156 | 0;
 $30 = sp + 152 | 0;
 $31 = sp + 148 | 0;
 $32 = sp + 144 | 0;
 $33 = sp + 140 | 0;
 $34 = sp + 136 | 0;
 $35 = sp + 132 | 0;
 $36 = sp + 16 | 0;
 $37 = sp + 128 | 0;
 $38 = sp + 124 | 0;
 $39 = sp + 8 | 0;
 $40 = sp + 120 | 0;
 $41 = sp;
 $42 = sp + 116 | 0;
 $43 = sp + 112 | 0;
 $44 = sp + 108 | 0;
 $45 = sp + 104 | 0;
 $46 = sp + 100 | 0;
 $47 = sp + 96 | 0;
 $48 = sp + 260 | 0;
 $49 = sp + 92 | 0;
 $50 = sp + 88 | 0;
 $51 = sp + 84 | 0;
 $52 = sp + 80 | 0;
 $53 = sp + 76 | 0;
 $54 = sp + 72 | 0;
 $55 = sp + 68 | 0;
 $56 = sp + 64 | 0;
 $57 = sp + 56 | 0;
 $58 = sp + 48 | 0;
 $59 = sp + 44 | 0;
 HEAP32[$47 >> 2] = $0;
 HEAP8[$48 >> 0] = $1;
 $60 = HEAP32[$47 >> 2] | 0;
 _pthread_mutex_lock($60 + 328 | 0) | 0;
 HEAP32[$43 >> 2] = $60 + 316;
 HEAP32[$44 >> 2] = $48;
 HEAP32[$45 >> 2] = __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE4findIcEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEERKT_(HEAP32[$43 >> 2] | 0, HEAP32[$44 >> 2] | 0) | 0;
 HEAP8[$41 >> 0] = HEAP8[$45 >> 0] | 0;
 HEAP8[$41 + 1 >> 0] = HEAP8[$45 + 1 >> 0] | 0;
 HEAP8[$41 + 2 >> 0] = HEAP8[$45 + 2 >> 0] | 0;
 HEAP8[$41 + 3 >> 0] = HEAP8[$45 + 3 >> 0] | 0;
 HEAP32[$40 >> 2] = $42;
 HEAP32[HEAP32[$40 >> 2] >> 2] = HEAP32[$41 >> 2];
 HEAP32[$50 >> 2] = HEAP32[$42 >> 2];
 HEAP8[$39 >> 0] = HEAP8[$50 >> 0] | 0;
 HEAP8[$39 + 1 >> 0] = HEAP8[$50 + 1 >> 0] | 0;
 HEAP8[$39 + 2 >> 0] = HEAP8[$50 + 2 >> 0] | 0;
 HEAP8[$39 + 3 >> 0] = HEAP8[$50 + 3 >> 0] | 0;
 HEAP32[$37 >> 2] = $49;
 $68 = HEAP32[$37 >> 2] | 0;
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 HEAP8[$36 >> 0] = HEAP8[$38 >> 0] | 0;
 HEAP8[$36 + 1 >> 0] = HEAP8[$38 + 1 >> 0] | 0;
 HEAP8[$36 + 2 >> 0] = HEAP8[$38 + 2 >> 0] | 0;
 HEAP8[$36 + 3 >> 0] = HEAP8[$38 + 3 >> 0] | 0;
 HEAP32[$35 >> 2] = $68;
 HEAP32[HEAP32[$35 >> 2] >> 2] = HEAP32[$36 >> 2];
 HEAP32[$33 >> 2] = $60 + 316;
 HEAP32[$31 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$28 >> 2] = (HEAP32[$29 >> 2] | 0) + 4;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 $79 = HEAP32[$25 >> 2] | 0;
 HEAP32[$23 >> 2] = $30;
 HEAP32[$24 >> 2] = $79;
 HEAP32[HEAP32[$23 >> 2] >> 2] = HEAP32[$24 >> 2];
 HEAP32[$34 >> 2] = HEAP32[$30 >> 2];
 HEAP8[$22 >> 0] = HEAP8[$34 >> 0] | 0;
 HEAP8[$22 + 1 >> 0] = HEAP8[$34 + 1 >> 0] | 0;
 HEAP8[$22 + 2 >> 0] = HEAP8[$34 + 2 >> 0] | 0;
 HEAP8[$22 + 3 >> 0] = HEAP8[$34 + 3 >> 0] | 0;
 HEAP32[$21 >> 2] = $32;
 HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[$22 >> 2];
 HEAP32[$52 >> 2] = HEAP32[$32 >> 2];
 HEAP8[$20 >> 0] = HEAP8[$52 >> 0] | 0;
 HEAP8[$20 + 1 >> 0] = HEAP8[$52 + 1 >> 0] | 0;
 HEAP8[$20 + 2 >> 0] = HEAP8[$52 + 2 >> 0] | 0;
 HEAP8[$20 + 3 >> 0] = HEAP8[$52 + 3 >> 0] | 0;
 HEAP32[$18 >> 2] = $51;
 $85 = HEAP32[$18 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP8[$17 >> 0] = HEAP8[$19 >> 0] | 0;
 HEAP8[$17 + 1 >> 0] = HEAP8[$19 + 1 >> 0] | 0;
 HEAP8[$17 + 2 >> 0] = HEAP8[$19 + 2 >> 0] | 0;
 HEAP8[$17 + 3 >> 0] = HEAP8[$19 + 3 >> 0] | 0;
 HEAP32[$16 >> 2] = $85;
 HEAP32[HEAP32[$16 >> 2] >> 2] = HEAP32[$17 >> 2];
 HEAP32[$14 >> 2] = $49;
 HEAP32[$15 >> 2] = $51;
 $89 = HEAP32[$15 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$13 >> 2] = $89;
 $91 = HEAP32[$13 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$11 >> 2] = $91;
 if ((HEAP32[HEAP32[$10 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$11 >> 2] >> 2] | 0) ^ 1) {
  HEAP32[$9 >> 2] = $49;
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + 16;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$46 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
  _pthread_mutex_unlock($60 + 328 | 0) | 0;
  $137 = HEAP32[$46 >> 2] | 0;
  STACKTOP = sp;
  return $137 | 0;
 }
 _pthread_mutex_unlock($60 + 328 | 0) | 0;
 HEAP32[$53 >> 2] = 0;
 HEAP32[$55 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv($60) | 0;
 HEAP32[$54 >> 2] = __ZNK12REAL_TYPEDEFIjEcvjEv($55) | 0;
 while (1) {
  if (((HEAP32[$54 >> 2] | 0) - (HEAP32[$53 >> 2] | 0) | 0) >>> 0 <= 1) break;
  HEAP32[$56 >> 2] = (HEAP32[$53 >> 2] | 0) + ((((HEAP32[$54 >> 2] | 0) - (HEAP32[$53 >> 2] | 0) | 0) >>> 0) / 2 | 0);
  __ZN3zim15article_index_tC2Ej($58, HEAP32[$56 >> 2] | 0);
  HEAP32[$$byval_copy >> 2] = HEAP32[$58 >> 2];
  __ZN3zim8FileImpl9getDirentENS_15article_index_tE($57, $60, $$byval_copy);
  HEAP32[$2 >> 2] = $57;
  $126 = (__ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0) << 24 >> 24;
  $130 = HEAP32[$56 >> 2] | 0;
  if (($126 | 0) > (HEAP8[$48 >> 0] | 0)) HEAP32[$54 >> 2] = $130; else HEAP32[$53 >> 2] = $130;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($57);
 }
 _pthread_mutex_lock($60 + 328 | 0) | 0;
 __ZN3zim15article_index_tC2Ej($59, HEAP32[$54 >> 2] | 0);
 HEAP32[(__ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEEixERS7_($60 + 316 | 0, $48) | 0) >> 2] = HEAP32[$59 >> 2];
 _pthread_mutex_unlock($60 + 328 | 0) | 0;
 __ZN3zim15article_index_tC2Ej($46, HEAP32[$54 >> 2] | 0);
 $137 = HEAP32[$46 >> 2] | 0;
 STACKTOP = sp;
 return $137 | 0;
}

function __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i27 = 0, $$0$i$i$i$i41 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i33 = 0, $$0$i$i2$i$i47 = 0, $$0$i$i38 = 0, $$0$in = 0, $$025 = 0, $$025$in = 0, $$2 = 0, $102 = 0, $103 = 0, $106 = 0, $108 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $142 = 0, $154 = 0, $157 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $71 = 0, $74 = 0, $8 = 0, $86 = 0, $89 = 0, label = 0;
 $5 = HEAP32[$0 >> 2] | 0;
 do if (!$5) $171 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$0 >> 2] = 0;
   $171 = 1;
   break;
  } else {
   $171 = (HEAP32[$0 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$1 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   label = 14;
   break;
  } else if ($171) {
   $172 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($171) label = 16; else {
  $172 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 6;
  $$2 = 0;
 } else if ((label | 0) == 17) {
  $37 = HEAP32[$0 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 63]($3, 2048, $$0$i$i) | 0)) {
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4;
   $$2 = 0;
   break;
  }
  $59 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 63]($3, $$0$i$i, 0) | 0) << 24 >> 24;
  $60 = HEAP32[$0 >> 2] | 0;
  $61 = $60 + 12 | 0;
  $62 = HEAP32[$61 >> 2] | 0;
  if (($62 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 40 >> 2] & 127]($60) | 0; else {
   HEAP32[$61 >> 2] = $62 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$62 >> 2] | 0) | 0;
  }
  $$0$in = $59;
  $$025$in = $4;
  $173 = $172;
  $86 = $172;
  while (1) {
   $$0 = $$0$in + -48 | 0;
   $$025 = $$025$in + -1 | 0;
   $71 = HEAP32[$0 >> 2] | 0;
   do if (!$71) $103 = 1; else {
    $74 = HEAP32[$71 + 12 >> 2] | 0;
    if (($74 | 0) == (HEAP32[$71 + 16 >> 2] | 0)) $$0$i$i$i$i27 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$71 >> 2] | 0) + 36 >> 2] & 127]($71) | 0; else $$0$i$i$i$i27 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$74 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i27, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$0 >> 2] = 0;
     $103 = 1;
     break;
    } else {
     $103 = (HEAP32[$0 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   if (!$86) {
    $102 = 1;
    $154 = $173;
    $174 = 0;
   } else {
    $89 = HEAP32[$86 + 12 >> 2] | 0;
    if (($89 | 0) == (HEAP32[$86 + 16 >> 2] | 0)) $$0$i$i2$i$i33 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] & 127]($86) | 0; else $$0$i$i2$i$i33 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$89 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i33, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $102 = 1;
     $154 = 0;
     $174 = 0;
    } else {
     $102 = 0;
     $154 = $173;
     $174 = $86;
    }
   }
   $106 = HEAP32[$0 >> 2] | 0;
   if (!(($$025$in | 0) > 1 & ($103 ^ $102))) break;
   $108 = HEAP32[$106 + 12 >> 2] | 0;
   if (($108 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i38 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$108 >> 2] | 0) | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 63]($3, 2048, $$0$i$i38) | 0)) {
    $$2 = $$0;
    break L22;
   }
   $128 = ($$0 * 10 | 0) + ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 63]($3, $$0$i$i38, 0) | 0) << 24 >> 24) | 0;
   $129 = HEAP32[$0 >> 2] | 0;
   $130 = $129 + 12 | 0;
   $131 = HEAP32[$130 >> 2] | 0;
   if (($131 | 0) == (HEAP32[$129 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$129 >> 2] | 0) + 40 >> 2] & 127]($129) | 0; else {
    HEAP32[$130 >> 2] = $131 + 4;
    __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$131 >> 2] | 0) | 0;
   }
   $$0$in = $128;
   $$025$in = $$025;
   $173 = $154;
   $86 = $174;
  }
  do if (!$106) $175 = 1; else {
   $142 = HEAP32[$106 + 12 >> 2] | 0;
   if (($142 | 0) == (HEAP32[$106 + 16 >> 2] | 0)) $$0$i$i$i$i41 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$106 >> 2] | 0) + 36 >> 2] & 127]($106) | 0; else $$0$i$i$i$i41 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$142 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i41, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$0 >> 2] = 0;
    $175 = 1;
    break;
   } else {
    $175 = (HEAP32[$0 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$154) label = 61; else {
   $157 = HEAP32[$154 + 12 >> 2] | 0;
   if (($157 | 0) == (HEAP32[$154 + 16 >> 2] | 0)) $$0$i$i2$i$i47 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$154 >> 2] | 0) + 36 >> 2] & 127]($154) | 0; else $$0$i$i2$i$i47 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$157 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i47, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    label = 61;
    break;
   } else if ($175) {
    $$2 = $$0;
    break L22;
   } else break;
  } while (0);
  if ((label | 0) == 61) if (!$175) {
   $$2 = $$0;
   break;
  }
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 2;
  $$2 = $$0;
 } while (0);
 return $$2 | 0;
}

function _block_decode($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $113 = 0, $12 = 0, $122 = 0, $13 = 0, $132 = 0, $14 = 0, $141 = 0, $146 = 0, $15 = 0, $151 = 0, $157 = 0, $16 = 0, $162 = 0, $167 = 0, $17 = 0, $18 = 0, $189 = 0, $19 = 0, $190 = 0, $196 = 0, $198 = 0, $20 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $270 = 0, $62 = 0, $76 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $9 = sp + 64 | 0;
 $10 = sp + 60 | 0;
 $11 = sp + 56 | 0;
 $12 = sp + 52 | 0;
 $13 = sp + 48 | 0;
 $14 = sp + 44 | 0;
 $15 = sp + 40 | 0;
 $16 = sp + 36 | 0;
 $17 = sp + 32 | 0;
 $18 = sp + 28 | 0;
 $19 = sp + 24 | 0;
 $20 = sp + 20 | 0;
 $21 = sp + 16 | 0;
 $22 = sp + 12 | 0;
 $23 = sp + 8 | 0;
 $24 = sp + 4 | 0;
 $25 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
 switch (HEAP32[HEAP32[$19 >> 2] >> 2] | 0) {
 case 0:
  {
   label = 2;
   break;
  }
 case 1:
  {
   label = 13;
   break;
  }
 case 2:
  break;
 default:
  {
   HEAP32[$9 >> 2] = 11;
   $270 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $270 | 0;
  }
 }
 do if ((label | 0) == 2) {
  HEAP32[$20 >> 2] = HEAP32[HEAP32[$13 >> 2] >> 2];
  HEAP32[$21 >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
  HEAP32[$22 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[$19 >> 2] | 0) + 8 + 20 >> 2] & 7](HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
  HEAP32[$23 >> 2] = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) - (HEAP32[$20 >> 2] | 0);
  HEAP32[$24 >> 2] = (HEAP32[HEAP32[$16 >> 2] >> 2] | 0) - (HEAP32[$21 >> 2] | 0);
  $62 = (HEAP32[$19 >> 2] | 0) + 80 | 0;
  if (!(_update_size((HEAP32[$19 >> 2] | 0) + 64 | 0, HEAP32[$23 >> 2] | 0, 0, HEAP32[$62 >> 2] | 0, HEAP32[$62 + 4 >> 2] | 0) | 0)) {
   $76 = (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 24 | 0;
   if (!(_update_size((HEAP32[$19 >> 2] | 0) + 72 | 0, HEAP32[$24 >> 2] | 0, 0, HEAP32[$76 >> 2] | 0, HEAP32[$76 + 4 >> 2] | 0) | 0)) {
    if (!(HEAP8[(HEAP32[$19 >> 2] | 0) + 200 >> 0] & 1)) _lzma_check_update((HEAP32[$19 >> 2] | 0) + 96 | 0, HEAP32[(HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] | 0, (HEAP32[$15 >> 2] | 0) + (HEAP32[$21 >> 2] | 0) | 0, HEAP32[$24 >> 2] | 0);
    if ((HEAP32[$22 >> 2] | 0) != 1) {
     HEAP32[$9 >> 2] = HEAP32[$22 >> 2];
     $270 = HEAP32[$9 >> 2] | 0;
     STACKTOP = sp;
     return $270 | 0;
    }
    $103 = (HEAP32[$19 >> 2] | 0) + 64 | 0;
    $113 = (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 16 | 0;
    if (_is_size_valid(HEAP32[$103 >> 2] | 0, HEAP32[$103 + 4 >> 2] | 0, HEAP32[$113 >> 2] | 0, HEAP32[$113 + 4 >> 2] | 0) | 0) {
     $122 = (HEAP32[$19 >> 2] | 0) + 72 | 0;
     $132 = (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 24 | 0;
     if (_is_size_valid(HEAP32[$122 >> 2] | 0, HEAP32[$122 + 4 >> 2] | 0, HEAP32[$132 >> 2] | 0, HEAP32[$132 + 4 >> 2] | 0) | 0) {
      $141 = (HEAP32[$19 >> 2] | 0) + 64 | 0;
      $146 = HEAP32[$141 + 4 >> 2] | 0;
      $151 = (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 16 | 0;
      HEAP32[$151 >> 2] = HEAP32[$141 >> 2];
      HEAP32[$151 + 4 >> 2] = $146;
      $157 = (HEAP32[$19 >> 2] | 0) + 72 | 0;
      $162 = HEAP32[$157 + 4 >> 2] | 0;
      $167 = (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 24 | 0;
      HEAP32[$167 >> 2] = HEAP32[$157 >> 2];
      HEAP32[$167 + 4 >> 2] = $162;
      HEAP32[HEAP32[$19 >> 2] >> 2] = 1;
      label = 13;
      break;
     }
    }
    HEAP32[$9 >> 2] = 9;
    $270 = HEAP32[$9 >> 2] | 0;
    STACKTOP = sp;
    return $270 | 0;
   }
  }
  HEAP32[$9 >> 2] = 9;
  $270 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $270 | 0;
 } while (0);
 do if ((label | 0) == 13) {
  while (1) {
   if (!(0 ? 1 : (HEAP32[(HEAP32[$19 >> 2] | 0) + 64 >> 2] & 3 | 0) != 0)) {
    label = 20;
    break;
   }
   if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$14 >> 2] | 0) >>> 0) {
    label = 16;
    break;
   }
   $189 = (HEAP32[$19 >> 2] | 0) + 64 | 0;
   $190 = $189;
   $196 = _i64Add(HEAP32[$190 >> 2] | 0, HEAP32[$190 + 4 >> 2] | 0, 1, 0) | 0;
   $198 = $189;
   HEAP32[$198 >> 2] = $196;
   HEAP32[$198 + 4 >> 2] = tempRet0;
   $202 = HEAP32[$12 >> 2] | 0;
   $203 = HEAP32[$13 >> 2] | 0;
   $204 = HEAP32[$203 >> 2] | 0;
   HEAP32[$203 >> 2] = $204 + 1;
   if (HEAPU8[$202 + $204 >> 0] | 0 | 0) {
    label = 18;
    break;
   }
  }
  if ((label | 0) == 16) {
   HEAP32[$9 >> 2] = 0;
   $270 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $270 | 0;
  } else if ((label | 0) == 18) {
   HEAP32[$9 >> 2] = 9;
   $270 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $270 | 0;
  } else if ((label | 0) == 20) {
   if (!(HEAP32[(HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] | 0)) {
    HEAP32[$9 >> 2] = 1;
    $270 = HEAP32[$9 >> 2] | 0;
    STACKTOP = sp;
    return $270 | 0;
   }
   if (!(HEAP8[(HEAP32[$19 >> 2] | 0) + 200 >> 0] & 1)) _lzma_check_finish((HEAP32[$19 >> 2] | 0) + 96 | 0, HEAP32[(HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] | 0);
   HEAP32[HEAP32[$19 >> 2] >> 2] = 2;
   break;
  }
 } while (0);
 HEAP32[$25 >> 2] = _lzma_check_size(HEAP32[(HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] | 0) | 0;
 _lzma_bufcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 36 | 0, (HEAP32[$19 >> 2] | 0) + 88 | 0, HEAP32[$25 >> 2] | 0) | 0;
 if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 88 >> 2] | 0) >>> 0 < (HEAP32[$25 >> 2] | 0) >>> 0) {
  HEAP32[$9 >> 2] = 0;
  $270 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $270 | 0;
 }
 if (!(HEAP8[(HEAP32[$19 >> 2] | 0) + 200 >> 0] & 1)) if ((_lzma_check_is_supported(HEAP32[(HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 8 >> 2] | 0) | 0) & 255 | 0) if (_memcmp((HEAP32[(HEAP32[$19 >> 2] | 0) + 56 >> 2] | 0) + 36 | 0, (HEAP32[$19 >> 2] | 0) + 96 | 0, HEAP32[$25 >> 2] | 0) | 0) {
  HEAP32[$9 >> 2] = 9;
  $270 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $270 | 0;
 }
 HEAP32[$9 >> 2] = 1;
 $270 = HEAP32[$9 >> 2] | 0;
 STACKTOP = sp;
 return $270 | 0;
}

function __ZN3zim8envValueEPKcj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $11 = 0, $12 = 0, $124 = 0, $126 = 0, $129 = 0, $133 = 0, $134 = 0, $136 = 0, $138 = 0, $139 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $62 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $86 = 0, $87 = 0, $9 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $2 = sp + 336 | 0;
 $3 = sp + 332 | 0;
 $4 = sp + 328 | 0;
 $5 = sp + 324 | 0;
 $6 = sp + 320 | 0;
 $7 = sp + 316 | 0;
 $8 = sp + 312 | 0;
 $9 = sp + 308 | 0;
 $10 = sp + 304 | 0;
 $11 = sp + 300 | 0;
 $12 = sp + 296 | 0;
 $15 = sp + 284 | 0;
 $16 = sp + 280 | 0;
 $17 = sp + 276 | 0;
 $18 = sp + 272 | 0;
 $20 = sp + 268 | 0;
 $21 = sp + 264 | 0;
 $24 = sp + 256 | 0;
 $25 = sp + 252 | 0;
 $26 = sp + 248 | 0;
 $27 = sp + 244 | 0;
 $28 = sp + 240 | 0;
 $29 = sp + 236 | 0;
 $31 = sp + 232 | 0;
 $32 = sp + 228 | 0;
 $33 = sp + 224 | 0;
 $34 = sp + 220 | 0;
 $35 = sp + 216 | 0;
 $36 = sp + 212 | 0;
 $37 = sp + 208 | 0;
 $38 = sp + 204 | 0;
 $39 = sp + 200 | 0;
 $41 = sp + 192 | 0;
 $42 = sp + 188 | 0;
 $43 = sp + 184 | 0;
 $44 = sp + 180 | 0;
 $45 = sp + 176 | 0;
 $46 = sp + 172 | 0;
 $47 = sp + 168 | 0;
 $48 = sp + 164 | 0;
 $49 = sp + 24 | 0;
 $50 = sp + 12 | 0;
 $51 = sp + 8 | 0;
 $52 = sp + 4 | 0;
 HEAP32[$46 >> 2] = $0;
 HEAP32[$47 >> 2] = $1;
 HEAP32[$48 >> 2] = _getenv(HEAP32[$46 >> 2] | 0) | 0;
 if (!(HEAP32[$48 >> 2] | 0)) {
  $138 = HEAP32[$47 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 $57 = HEAP32[$48 >> 2] | 0;
 HEAP32[$44 >> 2] = $50;
 HEAP32[$45 >> 2] = $57;
 $58 = HEAP32[$44 >> 2] | 0;
 HEAP32[$43 >> 2] = $58;
 $59 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $59;
 $60 = HEAP32[$42 >> 2] | 0;
 HEAP32[$60 >> 2] = 0;
 HEAP32[$60 + 4 >> 2] = 0;
 HEAP32[$60 + 8 >> 2] = 0;
 HEAP32[$41 >> 2] = $59;
 HEAP32[sp + 196 >> 2] = HEAP32[$41 >> 2];
 $62 = HEAP32[$45 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($58, $62, __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$45 >> 2] | 0) | 0);
 HEAP32[$35 >> 2] = $49;
 HEAP32[$36 >> 2] = $50;
 HEAP32[$37 >> 2] = 8;
 $65 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = $65 + 60;
 $67 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $67;
 HEAP32[HEAP32[$33 >> 2] >> 2] = 44548;
 HEAP32[$67 >> 2] = 44532;
 HEAP32[$65 >> 2] = 43416;
 HEAP32[$65 + 60 >> 2] = 43436;
 HEAP32[$4 >> 2] = $65;
 HEAP32[$5 >> 2] = 43448;
 HEAP32[$6 >> 2] = $65 + 8;
 $72 = HEAP32[$4 >> 2] | 0;
 $73 = HEAP32[$5 >> 2] | 0;
 HEAP32[$72 >> 2] = HEAP32[$73 >> 2];
 HEAP32[$72 + (HEAP32[(HEAP32[$72 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$73 + 4 >> 2];
 HEAP32[$72 + 4 >> 2] = 0;
 $86 = HEAP32[$6 >> 2] | 0;
 HEAP32[$2 >> 2] = $72 + (HEAP32[(HEAP32[$72 >> 2] | 0) + -12 >> 2] | 0);
 HEAP32[$3 >> 2] = $86;
 $87 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__28ios_base4initEPv($87, HEAP32[$3 >> 2] | 0);
 HEAP32[$87 + 72 >> 2] = 0;
 HEAP32[$87 + 76 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP32[$65 >> 2] = 43416;
 HEAP32[$65 + 60 >> 2] = 43436;
 $94 = HEAP32[$36 >> 2] | 0;
 $96 = HEAP32[$37 >> 2] | 8;
 HEAP32[$27 >> 2] = $65 + 8;
 HEAP32[$28 >> 2] = $94;
 HEAP32[$29 >> 2] = $96;
 $97 = HEAP32[$27 >> 2] | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($97);
 HEAP32[$97 >> 2] = 43308;
 $98 = $97 + 32 | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[sp + 260 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$20 >> 2] = $98;
 HEAP32[$21 >> 2] = sp + 340;
 $103 = HEAP32[$20 >> 2] | 0;
 $104 = HEAP32[$21 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 341 >> 0] | 0;
 HEAP32[$17 >> 2] = $103;
 HEAP32[$18 >> 2] = $104;
 $105 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = $105;
 $106 = HEAP32[$16 >> 2] | 0;
 HEAP32[$106 >> 2] = 0;
 HEAP32[$106 + 4 >> 2] = 0;
 HEAP32[$106 + 8 >> 2] = 0;
 HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
 $108 = HEAP32[$12 >> 2] | 0;
 HEAP32[sp + 288 >> 2] = $105;
 HEAP32[$15 >> 2] = $108;
 HEAP32[sp + 292 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$9 >> 2] = $103;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] << 2) >> 2] = 0;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP32[$97 + 44 >> 2] = 0;
 HEAP32[$97 + 48 >> 2] = HEAP32[$29 >> 2];
 __THREW__ = 0;
 invoke_vii(63, $97 | 0, HEAP32[$28 >> 2] | 0);
 $124 = __THREW__;
 __THREW__ = 0;
 if ($124 & 1) {
  $126 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$31 >> 2] = $126;
  HEAP32[$32 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($98);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($97);
  $129 = HEAP32[$32 >> 2] | 0;
  HEAP32[$38 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$39 >> 2] = $129;
  __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($65, 43448);
  __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($65 + 60 | 0);
  $133 = HEAP32[$39 >> 2] | 0;
  HEAP32[$51 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$52 >> 2] = $133;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($50);
  $139 = HEAP32[$51 >> 2] | 0;
  $140 = HEAP32[$52 >> 2] | 0;
  ___resumeException($139 | 0);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($50);
 __THREW__ = 0;
 invoke_iii(42, $49 | 0, $47 | 0) | 0;
 $134 = __THREW__;
 __THREW__ = 0;
 if ($134 & 1) {
  $136 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$51 >> 2] = $136;
  HEAP32[$52 >> 2] = tempRet0;
  __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
  $139 = HEAP32[$51 >> 2] | 0;
  $140 = HEAP32[$52 >> 2] | 0;
  ___resumeException($139 | 0);
 } else {
  __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
  $138 = HEAP32[$47 >> 2] | 0;
  STACKTOP = sp;
  return $138 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE30__emplace_hint_unique_key_argsIS3_JNS_4pairIKS3_S9_EEEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEENS_21__tree_const_iteratorISA_SQ_lEERKT_DpOT0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $81 = 0, $89 = 0, $90 = 0, $94 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $$byval_copy = sp + 200 | 0;
 $4 = sp + 196 | 0;
 $5 = sp + 192 | 0;
 $6 = sp + 188 | 0;
 $7 = sp + 184 | 0;
 $8 = sp + 180 | 0;
 $10 = sp + 172 | 0;
 $12 = sp + 164 | 0;
 $13 = sp + 160 | 0;
 $14 = sp + 156 | 0;
 $16 = sp + 148 | 0;
 $18 = sp + 144 | 0;
 $19 = sp + 140 | 0;
 $21 = sp + 136 | 0;
 $22 = sp + 132 | 0;
 $23 = sp + 128 | 0;
 $24 = sp + 124 | 0;
 $25 = sp + 120 | 0;
 $26 = sp + 116 | 0;
 $27 = sp + 112 | 0;
 $28 = sp + 108 | 0;
 $29 = sp + 104 | 0;
 $30 = sp + 100 | 0;
 $31 = sp + 96 | 0;
 $32 = sp + 92 | 0;
 $33 = sp + 88 | 0;
 $34 = sp + 84 | 0;
 $35 = sp + 80 | 0;
 $36 = sp + 76 | 0;
 $37 = sp + 72 | 0;
 $38 = sp + 68 | 0;
 $39 = sp + 64 | 0;
 $40 = sp + 60 | 0;
 $41 = sp + 56 | 0;
 $42 = sp + 52 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 44 | 0;
 $45 = sp + 40 | 0;
 $46 = sp + 36 | 0;
 $47 = sp + 32 | 0;
 $49 = sp + 24 | 0;
 $50 = sp + 20 | 0;
 $51 = sp + 16 | 0;
 $52 = sp + 4 | 0;
 HEAP32[$44 >> 2] = $0;
 HEAP32[$45 >> 2] = $2;
 HEAP32[$46 >> 2] = $3;
 $53 = HEAP32[$44 >> 2] | 0;
 HEAP32[$50 >> 2] = HEAP32[$1 >> 2];
 $54 = HEAP32[$45 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$50 >> 2];
 HEAP32[$49 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SK_EElEERPNS_15__tree_end_nodeISM_EESN_RKT_($53, $$byval_copy, $47, sp + 28 | 0, $54) | 0;
 HEAP32[$51 >> 2] = HEAP32[HEAP32[$49 >> 2] >> 2];
 if (HEAP32[HEAP32[$49 >> 2] >> 2] | 0) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAP32[$42 >> 2] = HEAP32[$46 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE16__construct_nodeIJNS_4pairIKS3_S9_EEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINSF_ISP_EEEEEEDpOT_($52, $53, HEAP32[$42 >> 2] | 0);
 $63 = HEAP32[$47 >> 2] | 0;
 $64 = HEAP32[$49 >> 2] | 0;
 HEAP32[$39 >> 2] = $52;
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSM_SM_($53, $63, $64, HEAP32[HEAP32[$37 >> 2] >> 2] | 0);
 HEAP32[$35 >> 2] = $52;
 $69 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = $69;
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$36 >> 2] = HEAP32[HEAP32[$33 >> 2] >> 2];
 HEAP32[$32 >> 2] = $69;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[HEAP32[$31 >> 2] >> 2] = 0;
 HEAP32[$51 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$30 >> 2] = $52;
 HEAP32[$27 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = 0;
 $77 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = $77;
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$29 >> 2] = HEAP32[HEAP32[$25 >> 2] >> 2];
 $81 = HEAP32[$28 >> 2] | 0;
 HEAP32[$7 >> 2] = $77;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = $81;
 if (!(HEAP32[$29 >> 2] | 0)) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAP32[$5 >> 2] = $77;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $89 = HEAP32[$29 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$24 >> 2] = $89;
 $90 = HEAP32[$23 >> 2] | 0;
 if (HEAP8[$90 + 4 >> 0] & 1) {
  $94 = HEAP32[$90 >> 2] | 0;
  HEAP32[$22 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  $98 = HEAP32[$21 >> 2] | 0;
  HEAP32[$18 >> 2] = $94;
  HEAP32[$19 >> 2] = $98;
  $99 = HEAP32[$18 >> 2] | 0;
  $100 = HEAP32[$19 >> 2] | 0;
  HEAP8[sp >> 0] = HEAP8[sp + 204 >> 0] | 0;
  HEAP32[sp + 152 >> 2] = $99;
  HEAP32[$16 >> 2] = $100;
  __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev(HEAP32[$16 >> 2] | 0);
 }
 if (!(HEAP32[$24 >> 2] | 0)) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 $105 = HEAP32[$24 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$13 >> 2] = $105;
 HEAP32[$14 >> 2] = 1;
 $107 = HEAP32[$13 >> 2] | 0;
 $108 = HEAP32[$14 >> 2] | 0;
 HEAP32[sp + 176 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = $107;
 HEAP32[sp + 168 >> 2] = $108;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 __ZdlPv(HEAP32[$8 >> 2] | 0);
 $111 = HEAP32[$51 >> 2] | 0;
 HEAP32[$40 >> 2] = $43;
 HEAP32[$41 >> 2] = $111;
 $112 = HEAP32[$40 >> 2] | 0;
 $113 = HEAP32[$41 >> 2] | 0;
 HEAP32[$112 >> 2] = $113;
 $114 = HEAP32[$43 >> 2] | 0;
 STACKTOP = sp;
 return $114 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE30__emplace_hint_unique_key_argsIS3_JNS_4pairIKS3_SA_EEEEENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEENS_21__tree_const_iteratorISB_SR_lEERKT_DpOT0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $105 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $63 = 0, $64 = 0, $69 = 0, $7 = 0, $77 = 0, $8 = 0, $81 = 0, $89 = 0, $90 = 0, $94 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $$byval_copy = sp + 200 | 0;
 $4 = sp + 196 | 0;
 $5 = sp + 192 | 0;
 $6 = sp + 188 | 0;
 $7 = sp + 184 | 0;
 $8 = sp + 180 | 0;
 $10 = sp + 172 | 0;
 $12 = sp + 164 | 0;
 $13 = sp + 160 | 0;
 $14 = sp + 156 | 0;
 $16 = sp + 148 | 0;
 $18 = sp + 144 | 0;
 $19 = sp + 140 | 0;
 $21 = sp + 136 | 0;
 $22 = sp + 132 | 0;
 $23 = sp + 128 | 0;
 $24 = sp + 124 | 0;
 $25 = sp + 120 | 0;
 $26 = sp + 116 | 0;
 $27 = sp + 112 | 0;
 $28 = sp + 108 | 0;
 $29 = sp + 104 | 0;
 $30 = sp + 100 | 0;
 $31 = sp + 96 | 0;
 $32 = sp + 92 | 0;
 $33 = sp + 88 | 0;
 $34 = sp + 84 | 0;
 $35 = sp + 80 | 0;
 $36 = sp + 76 | 0;
 $37 = sp + 72 | 0;
 $38 = sp + 68 | 0;
 $39 = sp + 64 | 0;
 $40 = sp + 60 | 0;
 $41 = sp + 56 | 0;
 $42 = sp + 52 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 44 | 0;
 $45 = sp + 40 | 0;
 $46 = sp + 36 | 0;
 $47 = sp + 32 | 0;
 $49 = sp + 24 | 0;
 $50 = sp + 20 | 0;
 $51 = sp + 16 | 0;
 $52 = sp + 4 | 0;
 HEAP32[$44 >> 2] = $0;
 HEAP32[$45 >> 2] = $2;
 HEAP32[$46 >> 2] = $3;
 $53 = HEAP32[$44 >> 2] | 0;
 HEAP32[$50 >> 2] = HEAP32[$1 >> 2];
 $54 = HEAP32[$45 >> 2] | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$50 >> 2];
 HEAP32[$49 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_SL_EElEERPNS_15__tree_end_nodeISN_EESO_RKT_($53, $$byval_copy, $47, sp + 28 | 0, $54) | 0;
 HEAP32[$51 >> 2] = HEAP32[HEAP32[$49 >> 2] >> 2];
 if (HEAP32[HEAP32[$49 >> 2] >> 2] | 0) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAP32[$42 >> 2] = HEAP32[$46 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE16__construct_nodeIJNS_4pairIKS3_SA_EEEEENS_10unique_ptrINS_11__tree_nodeISB_PvEENS_22__tree_node_destructorINSG_ISQ_EEEEEEDpOT_($52, $53, HEAP32[$42 >> 2] | 0);
 $63 = HEAP32[$47 >> 2] | 0;
 $64 = HEAP32[$49 >> 2] | 0;
 HEAP32[$39 >> 2] = $52;
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSN_SN_($53, $63, $64, HEAP32[HEAP32[$37 >> 2] >> 2] | 0);
 HEAP32[$35 >> 2] = $52;
 $69 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = $69;
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$36 >> 2] = HEAP32[HEAP32[$33 >> 2] >> 2];
 HEAP32[$32 >> 2] = $69;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[HEAP32[$31 >> 2] >> 2] = 0;
 HEAP32[$51 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$30 >> 2] = $52;
 HEAP32[$27 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = 0;
 $77 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = $77;
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$29 >> 2] = HEAP32[HEAP32[$25 >> 2] >> 2];
 $81 = HEAP32[$28 >> 2] | 0;
 HEAP32[$7 >> 2] = $77;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = $81;
 if (!(HEAP32[$29 >> 2] | 0)) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 HEAP32[$5 >> 2] = $77;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $89 = HEAP32[$29 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$24 >> 2] = $89;
 $90 = HEAP32[$23 >> 2] | 0;
 if (HEAP8[$90 + 4 >> 0] & 1) {
  $94 = HEAP32[$90 >> 2] | 0;
  HEAP32[$22 >> 2] = (HEAP32[$24 >> 2] | 0) + 16;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  $98 = HEAP32[$21 >> 2] | 0;
  HEAP32[$18 >> 2] = $94;
  HEAP32[$19 >> 2] = $98;
  $99 = HEAP32[$18 >> 2] | 0;
  $100 = HEAP32[$19 >> 2] | 0;
  HEAP8[sp >> 0] = HEAP8[sp + 204 >> 0] | 0;
  HEAP32[sp + 152 >> 2] = $99;
  HEAP32[$16 >> 2] = $100;
  __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev(HEAP32[$16 >> 2] | 0);
 }
 if (!(HEAP32[$24 >> 2] | 0)) {
  $111 = HEAP32[$51 >> 2] | 0;
  HEAP32[$40 >> 2] = $43;
  HEAP32[$41 >> 2] = $111;
  $112 = HEAP32[$40 >> 2] | 0;
  $113 = HEAP32[$41 >> 2] | 0;
  HEAP32[$112 >> 2] = $113;
  $114 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $114 | 0;
 }
 $105 = HEAP32[$24 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$13 >> 2] = $105;
 HEAP32[$14 >> 2] = 1;
 $107 = HEAP32[$13 >> 2] | 0;
 $108 = HEAP32[$14 >> 2] | 0;
 HEAP32[sp + 176 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = $107;
 HEAP32[sp + 168 >> 2] = $108;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 __ZdlPv(HEAP32[$8 >> 2] | 0);
 $111 = HEAP32[$51 >> 2] | 0;
 HEAP32[$40 >> 2] = $43;
 HEAP32[$41 >> 2] = $111;
 $112 = HEAP32[$40 >> 2] | 0;
 $113 = HEAP32[$41 >> 2] | 0;
 HEAP32[$112 >> 2] = $113;
 $114 = HEAP32[$43 >> 2] | 0;
 STACKTOP = sp;
 return $114 | 0;
}

function _crc32_big($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $100 = 0, $126 = 0, $152 = 0, $178 = 0, $204 = 0, $230 = 0, $260 = 0, $291 = 0, $292 = 0, $3 = 0, $303 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $74 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = ((HEAP32[$3 >> 2] | 0) >>> 24 & 255) + ((HEAP32[$3 >> 2] | 0) >>> 8 & 65280) + ((HEAP32[$3 >> 2] & 65280) << 8) + ((HEAP32[$3 >> 2] & 255) << 24);
 HEAP32[$6 >> 2] = ~HEAP32[$6 >> 2];
 while (1) {
  if (!(HEAP32[$5 >> 2] | 0)) break;
  if (!(HEAP32[$4 >> 2] & 3)) break;
  $32 = (HEAP32[$6 >> 2] | 0) >>> 24;
  $33 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $33 + 1;
  HEAP32[$6 >> 2] = HEAP32[26720 + (($32 ^ (HEAPU8[$33 >> 0] | 0)) << 2) >> 2] ^ HEAP32[$6 >> 2] << 8;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
 }
 HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < 32) break;
  $48 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $48 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$48 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $74 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $74 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$74 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $100 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $100 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$100 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $126 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $126 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$126 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $152 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $152 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$152 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $178 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $178 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$178 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $204 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $204 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$204 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $230 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $230 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$230 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 32;
 }
 while (1) {
  $260 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < 4) break;
  HEAP32[$7 >> 2] = $260 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$260 >> 2];
  HEAP32[$6 >> 2] = HEAP32[26720 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[27744 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[28768 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[29792 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 4;
 }
 HEAP32[$4 >> 2] = $260;
 if (!(HEAP32[$5 >> 2] | 0)) {
  $305 = HEAP32[$6 >> 2] | 0;
  $306 = ~$305;
  HEAP32[$6 >> 2] = $306;
  $307 = HEAP32[$6 >> 2] | 0;
  $308 = $307 >>> 24;
  $309 = $308 & 255;
  $310 = HEAP32[$6 >> 2] | 0;
  $311 = $310 >>> 8;
  $312 = $311 & 65280;
  $313 = $309 + $312 | 0;
  $314 = HEAP32[$6 >> 2] | 0;
  $315 = $314 & 65280;
  $316 = $315 << 8;
  $317 = $313 + $316 | 0;
  $318 = HEAP32[$6 >> 2] | 0;
  $319 = $318 & 255;
  $320 = $319 << 24;
  $321 = $317 + $320 | 0;
  STACKTOP = sp;
  return $321 | 0;
 }
 do {
  $291 = (HEAP32[$6 >> 2] | 0) >>> 24;
  $292 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $292 + 1;
  HEAP32[$6 >> 2] = HEAP32[26720 + (($291 ^ (HEAPU8[$292 >> 0] | 0)) << 2) >> 2] ^ HEAP32[$6 >> 2] << 8;
  $303 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
  HEAP32[$5 >> 2] = $303;
 } while (($303 | 0) != 0);
 $305 = HEAP32[$6 >> 2] | 0;
 $306 = ~$305;
 HEAP32[$6 >> 2] = $306;
 $307 = HEAP32[$6 >> 2] | 0;
 $308 = $307 >>> 24;
 $309 = $308 & 255;
 $310 = HEAP32[$6 >> 2] | 0;
 $311 = $310 >>> 8;
 $312 = $311 & 65280;
 $313 = $309 + $312 | 0;
 $314 = HEAP32[$6 >> 2] | 0;
 $315 = $314 & 65280;
 $316 = $315 << 8;
 $317 = $313 + $316 | 0;
 $318 = HEAP32[$6 >> 2] | 0;
 $319 = $318 & 255;
 $320 = $319 << 24;
 $321 = $317 + $320 | 0;
 STACKTOP = sp;
 return $321 | 0;
}

function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1271 = 0, $$1271$be = 0, $$1271$ph = 0, $$1274 = 0, $$1274$be = 0, $$1274$ph = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $139 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge3 = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $3 & -8;
 $5 = $0 + $4 | 0;
 $6 = HEAP32[15178] | 0;
 $8 = $3 & 3;
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) _abort();
 $11 = $5 + 4 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 if (!($12 & 1)) _abort();
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0;
   return $$2 | 0;
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) if (($4 - $1 | 0) >>> 0 <= HEAP32[15294] << 1 >>> 0) {
   $$2 = $0;
   return $$2 | 0;
  }
  $$2 = 0;
  return $$2 | 0;
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0;
  if ($24 >>> 0 <= 15) {
   $$2 = $0;
   return $$2 | 0;
  }
  $26 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$26 + 4 >> 2] = $24 | 3;
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
  _dispose_chunk($26, $24);
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[15180] | 0) == ($5 | 0)) {
  $37 = (HEAP32[15177] | 0) + $4 | 0;
  $39 = $37 - $1 | 0;
  $40 = $0 + $1 | 0;
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$40 + 4 >> 2] = $39 | 1;
  HEAP32[15180] = $40;
  HEAP32[15177] = $39;
  $$2 = $0;
  return $$2 | 0;
 }
 if ((HEAP32[15179] | 0) == ($5 | 0)) {
  $49 = (HEAP32[15176] | 0) + $4 | 0;
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0;
   return $$2 | 0;
  }
  $51 = $49 - $1 | 0;
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0;
   $54 = $0 + $49 | 0;
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
   HEAP32[$53 + 4 >> 2] = $51 | 1;
   HEAP32[$54 >> 2] = $51;
   $60 = $54 + 4 | 0;
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2;
   $storemerge = $53;
   $storemerge3 = $51;
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2;
   $67 = $0 + $49 + 4 | 0;
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1;
   $storemerge = 0;
   $storemerge3 = 0;
  }
  HEAP32[15176] = $storemerge3;
  HEAP32[15179] = $storemerge;
  $$2 = $0;
  return $$2 | 0;
 }
 if ($12 & 2 | 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $73 = ($12 & -8) + $4 | 0;
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0;
  return $$2 | 0;
 }
 $75 = $73 - $1 | 0;
 $76 = $12 >>> 3;
 L49 : do if ($12 >>> 0 < 256) {
  $79 = HEAP32[$5 + 8 >> 2] | 0;
  $81 = HEAP32[$5 + 12 >> 2] | 0;
  $83 = 60736 + ($76 << 1 << 2) | 0;
  if (($79 | 0) != ($83 | 0)) {
   if ($6 >>> 0 > $79 >>> 0) _abort();
   if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) _abort();
  }
  if (($81 | 0) == ($79 | 0)) {
   HEAP32[15174] = HEAP32[15174] & ~(1 << $76);
   break;
  }
  if (($81 | 0) == ($83 | 0)) $$pre$phiZ2D = $81 + 8 | 0; else {
   if ($6 >>> 0 > $81 >>> 0) _abort();
   $96 = $81 + 8 | 0;
   if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) $$pre$phiZ2D = $96; else _abort();
  }
  HEAP32[$79 + 12 >> 2] = $81;
  HEAP32[$$pre$phiZ2D >> 2] = $79;
 } else {
  $101 = HEAP32[$5 + 24 >> 2] | 0;
  $103 = HEAP32[$5 + 12 >> 2] | 0;
  do if (($103 | 0) == ($5 | 0)) {
   $114 = $5 + 16 | 0;
   $115 = $114 + 4 | 0;
   $116 = HEAP32[$115 >> 2] | 0;
   if (!$116) {
    $118 = HEAP32[$114 >> 2] | 0;
    if (!$118) {
     $$3 = 0;
     break;
    } else {
     $$1271$ph = $118;
     $$1274$ph = $114;
    }
   } else {
    $$1271$ph = $116;
    $$1274$ph = $115;
   }
   $$1271 = $$1271$ph;
   $$1274 = $$1274$ph;
   while (1) {
    $120 = $$1271 + 20 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (!$121) {
     $123 = $$1271 + 16 | 0;
     $124 = HEAP32[$123 >> 2] | 0;
     if (!$124) break; else {
      $$1271$be = $124;
      $$1274$be = $123;
     }
    } else {
     $$1271$be = $121;
     $$1274$be = $120;
    }
    $$1271 = $$1271$be;
    $$1274 = $$1274$be;
   }
   if ($6 >>> 0 > $$1274 >>> 0) _abort(); else {
    HEAP32[$$1274 >> 2] = 0;
    $$3 = $$1271;
    break;
   }
  } else {
   $106 = HEAP32[$5 + 8 >> 2] | 0;
   if ($6 >>> 0 > $106 >>> 0) _abort();
   $108 = $106 + 12 | 0;
   if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) _abort();
   $111 = $103 + 8 | 0;
   if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$108 >> 2] = $103;
    HEAP32[$111 >> 2] = $106;
    $$3 = $103;
    break;
   } else _abort();
  } while (0);
  if ($101 | 0) {
   $129 = HEAP32[$5 + 28 >> 2] | 0;
   $130 = 61e3 + ($129 << 2) | 0;
   do if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
    HEAP32[$130 >> 2] = $$3;
    if (!$$3) {
     HEAP32[15175] = HEAP32[15175] & ~(1 << $129);
     break L49;
    }
   } else if ((HEAP32[15178] | 0) >>> 0 > $101 >>> 0) _abort(); else {
    $139 = $101 + 16 | 0;
    HEAP32[((HEAP32[$139 >> 2] | 0) == ($5 | 0) ? $139 : $101 + 20 | 0) >> 2] = $$3;
    if (!$$3) break L49; else break;
   } while (0);
   $144 = HEAP32[15178] | 0;
   if ($144 >>> 0 > $$3 >>> 0) _abort();
   HEAP32[$$3 + 24 >> 2] = $101;
   $147 = $5 + 16 | 0;
   $148 = HEAP32[$147 >> 2] | 0;
   do if ($148 | 0) if ($144 >>> 0 > $148 >>> 0) _abort(); else {
    HEAP32[$$3 + 16 >> 2] = $148;
    HEAP32[$148 + 24 >> 2] = $$3;
    break;
   } while (0);
   $154 = HEAP32[$147 + 4 >> 2] | 0;
   if ($154 | 0) if ((HEAP32[15178] | 0) >>> 0 > $154 >>> 0) _abort(); else {
    HEAP32[$$3 + 20 >> 2] = $154;
    HEAP32[$154 + 24 >> 2] = $$3;
    break;
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $3 & 1 | $73 | 2;
  $165 = $0 + $73 + 4 | 0;
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1;
  $$2 = $0;
  return $$2 | 0;
 } else {
  $168 = $0 + $1 | 0;
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2;
  HEAP32[$168 + 4 >> 2] = $75 | 3;
  $175 = $0 + $73 + 4 | 0;
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1;
  _dispose_chunk($168, $75);
  $$2 = $0;
  return $$2 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIcJRKNS_21piecewise_construct_tENS_5tupleIJRKcEEENSG_IJEEEEEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $108 = 0, $11 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $6 = sp + 224 | 0;
 $7 = sp + 220 | 0;
 $8 = sp + 216 | 0;
 $9 = sp + 212 | 0;
 $10 = sp + 208 | 0;
 $11 = sp + 204 | 0;
 $12 = sp + 200 | 0;
 $13 = sp + 196 | 0;
 $14 = sp + 192 | 0;
 $15 = sp + 188 | 0;
 $16 = sp + 184 | 0;
 $17 = sp + 180 | 0;
 $18 = sp + 176 | 0;
 $19 = sp + 172 | 0;
 $20 = sp + 168 | 0;
 $21 = sp + 164 | 0;
 $22 = sp + 160 | 0;
 $23 = sp + 156 | 0;
 $24 = sp + 152 | 0;
 $25 = sp + 148 | 0;
 $26 = sp + 144 | 0;
 $27 = sp + 140 | 0;
 $28 = sp + 136 | 0;
 $29 = sp;
 $30 = sp + 132 | 0;
 $31 = sp + 128 | 0;
 $32 = sp + 229 | 0;
 $33 = sp + 124 | 0;
 $34 = sp + 120 | 0;
 $35 = sp + 116 | 0;
 $36 = sp + 112 | 0;
 $37 = sp + 108 | 0;
 $38 = sp + 104 | 0;
 $39 = sp + 100 | 0;
 $40 = sp + 96 | 0;
 $41 = sp + 92 | 0;
 $42 = sp + 88 | 0;
 $43 = sp + 84 | 0;
 $44 = sp + 80 | 0;
 $45 = sp + 76 | 0;
 $46 = sp + 72 | 0;
 $47 = sp + 68 | 0;
 $48 = sp + 64 | 0;
 $49 = sp + 60 | 0;
 $50 = sp + 56 | 0;
 $51 = sp + 52 | 0;
 $52 = sp + 48 | 0;
 $53 = sp + 44 | 0;
 $54 = sp + 40 | 0;
 $55 = sp + 36 | 0;
 $56 = sp + 32 | 0;
 $57 = sp + 28 | 0;
 $58 = sp + 24 | 0;
 $59 = sp + 20 | 0;
 $60 = sp + 228 | 0;
 $61 = sp + 8 | 0;
 $62 = sp + 4 | 0;
 HEAP32[$52 >> 2] = $1;
 HEAP32[$53 >> 2] = $2;
 HEAP32[$54 >> 2] = $3;
 HEAP32[$55 >> 2] = $4;
 HEAP32[$56 >> 2] = $5;
 $63 = HEAP32[$52 >> 2] | 0;
 HEAP32[$58 >> 2] = __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE12__find_equalIcEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_($63, $57, HEAP32[$53 >> 2] | 0) | 0;
 HEAP32[$59 >> 2] = HEAP32[HEAP32[$58 >> 2] >> 2];
 HEAP8[$60 >> 0] = 0;
 if (!(HEAP32[HEAP32[$58 >> 2] >> 2] | 0)) {
  HEAP32[$51 >> 2] = HEAP32[$54 >> 2];
  $72 = HEAP32[$51 >> 2] | 0;
  HEAP32[$43 >> 2] = HEAP32[$55 >> 2];
  $74 = HEAP32[$43 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$56 >> 2];
  __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKcEEENSG_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS4_PvEENS_22__tree_node_destructorINS9_ISO_EEEEEEDpOT_($61, $63, $72, $74, HEAP32[$15 >> 2] | 0);
  $77 = HEAP32[$57 >> 2] | 0;
  $78 = HEAP32[$58 >> 2] | 0;
  HEAP32[$8 >> 2] = $61;
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_($63, $77, $78, HEAP32[HEAP32[$6 >> 2] >> 2] | 0);
  HEAP32[$13 >> 2] = $61;
  $83 = HEAP32[$13 >> 2] | 0;
  HEAP32[$12 >> 2] = $83;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$14 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  HEAP32[$10 >> 2] = $83;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[HEAP32[$9 >> 2] >> 2] = 0;
  HEAP32[$59 >> 2] = HEAP32[$14 >> 2];
  HEAP8[$60 >> 0] = 1;
  HEAP32[$42 >> 2] = $61;
  HEAP32[$39 >> 2] = HEAP32[$42 >> 2];
  HEAP32[$40 >> 2] = 0;
  $91 = HEAP32[$39 >> 2] | 0;
  HEAP32[$38 >> 2] = $91;
  HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$41 >> 2] = HEAP32[HEAP32[$37 >> 2] >> 2];
  $95 = HEAP32[$40 >> 2] | 0;
  HEAP32[$19 >> 2] = $91;
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  HEAP32[HEAP32[$18 >> 2] >> 2] = $95;
  if (HEAP32[$41 >> 2] | 0) {
   HEAP32[$17 >> 2] = $91;
   HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 4;
   $103 = HEAP32[$41 >> 2] | 0;
   HEAP32[$35 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$36 >> 2] = $103;
   $104 = HEAP32[$35 >> 2] | 0;
   if (HEAP8[$104 + 4 >> 0] & 1) {
    $108 = HEAP32[$104 >> 2] | 0;
    HEAP32[$34 >> 2] = (HEAP32[$36 >> 2] | 0) + 16;
    HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
    $112 = HEAP32[$33 >> 2] | 0;
    HEAP32[$30 >> 2] = $108;
    HEAP32[$31 >> 2] = $112;
    $113 = HEAP32[$30 >> 2] | 0;
    $114 = HEAP32[$31 >> 2] | 0;
    HEAP8[$29 >> 0] = HEAP8[$32 >> 0] | 0;
    HEAP32[$27 >> 2] = $113;
    HEAP32[$28 >> 2] = $114;
   }
   if (HEAP32[$36 >> 2] | 0) {
    $118 = HEAP32[$36 >> 2] | 0;
    HEAP32[$24 >> 2] = HEAP32[$104 >> 2];
    HEAP32[$25 >> 2] = $118;
    HEAP32[$26 >> 2] = 1;
    $120 = HEAP32[$25 >> 2] | 0;
    $121 = HEAP32[$26 >> 2] | 0;
    HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
    HEAP32[$22 >> 2] = $120;
    HEAP32[$23 >> 2] = $121;
    HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
    __ZdlPv(HEAP32[$20 >> 2] | 0);
   }
  }
 }
 $124 = HEAP32[$59 >> 2] | 0;
 HEAP32[$44 >> 2] = $62;
 HEAP32[$45 >> 2] = $124;
 HEAP32[HEAP32[$44 >> 2] >> 2] = HEAP32[$45 >> 2];
 HEAP32[$48 >> 2] = $0;
 HEAP32[$49 >> 2] = $62;
 HEAP32[$50 >> 2] = $60;
 $127 = HEAP32[$48 >> 2] | 0;
 HEAP32[$47 >> 2] = HEAP32[$49 >> 2];
 HEAP32[$127 >> 2] = HEAP32[HEAP32[$47 >> 2] >> 2];
 HEAP32[$46 >> 2] = HEAP32[$50 >> 2];
 HEAP8[$127 + 4 >> 0] = HEAP8[HEAP32[$46 >> 2] >> 0] & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i95 = 0, $$07$i$i = 0, $$07$i$i94 = 0, $$081 = 0, $$082 = 0, $$086 = 0, $$1 = 0, $$183 = 0, $$187 = 0, $$pre$phiZ2D = 0, $$sink99$index = 0, $$sink99$index4 = 0, $101 = 0, $105 = 0, $107 = 0, $119 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $132 = 0, $14 = 0, $16 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62400) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62408) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 $13 = $7 + 11 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $16 = $7 + 4 | 0;
 L1 : do if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0, $8 | 0, $0 | 0, $2 | 0, $3 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  if ($24 & 1) {
   $30 = ___cxa_find_matching_catch_2() | 0;
   $$sink99$index = $30;
   $$sink99$index4 = tempRet0;
   label = 34;
   break;
  } else {
   $27 = $0;
   $29 = $3 + ($2 - $27 << 2) | 0;
   HEAP32[$5 >> 2] = $29;
   $$pre$phiZ2D = $27;
   $132 = $29;
   label = 33;
   break;
  }
 } else {
  HEAP32[$5 >> 2] = $3;
  $32 = HEAP8[$0 >> 0] | 0;
  switch ($32 << 24 >> 24) {
  case 43:
  case 45:
   {
    __THREW__ = 0;
    $36 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, $32 | 0) | 0;
    $37 = __THREW__;
    __THREW__ = 0;
    if (!($37 & 1)) {
     $40 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $40 + 4;
     HEAP32[$40 >> 2] = $36;
     $$086 = $0 + 1 | 0;
     label = 9;
    }
    break;
   }
  default:
   {
    $$086 = $0;
    label = 9;
   }
  }
  L10 : do if ((label | 0) == 9) {
   L12 : do if (($2 - $$086 | 0) > 1) if ((HEAP8[$$086 >> 0] | 0) == 48) {
    $50 = $$086 + 1 | 0;
    switch (HEAP8[$50 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      $$187 = $$086;
      break L12;
     }
    }
    __THREW__ = 0;
    $55 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, 48) | 0;
    $56 = __THREW__;
    __THREW__ = 0;
    if ($56 & 1) break L10;
    $58 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $58 + 4;
    HEAP32[$58 >> 2] = $55;
    __THREW__ = 0;
    $64 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$50 >> 0] | 0) | 0;
    $65 = __THREW__;
    __THREW__ = 0;
    if ($65 & 1) break L10;
    $68 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $68 + 4;
    HEAP32[$68 >> 2] = $64;
    $$187 = $$086 + 2 | 0;
   } else $$187 = $$086; else $$187 = $$086; while (0);
   L19 : do if (($$187 | 0) != ($2 | 0)) {
    $$0$i$i = $2;
    $$07$i$i = $$187;
    while (1) {
     $71 = $$0$i$i + -1 | 0;
     if ($$07$i$i >>> 0 >= $71 >>> 0) break L19;
     $73 = HEAP8[$$07$i$i >> 0] | 0;
     HEAP8[$$07$i$i >> 0] = HEAP8[$71 >> 0] | 0;
     HEAP8[$71 >> 0] = $73;
     $$0$i$i = $71;
     $$07$i$i = $$07$i$i + 1 | 0;
    }
   } while (0);
   __THREW__ = 0;
   $79 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0;
   $80 = __THREW__;
   __THREW__ = 0;
   if ($80 & 1) {
    $94 = ___cxa_find_matching_catch_2() | 0;
    $$sink99$index = $94;
    $$sink99$index4 = tempRet0;
    label = 34;
    break L1;
   }
   $$0 = $$187;
   $$081 = 0;
   $$082 = 0;
   while (1) {
    if ($$0 >>> 0 >= $2 >>> 0) break;
    $101 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$081 >> 0] | 0;
    if ($101 << 24 >> 24 != 0 & ($$082 | 0) == ($101 << 24 >> 24 | 0)) {
     $105 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $105 + 4;
     HEAP32[$105 >> 2] = $79;
     $107 = HEAP8[$13 >> 0] | 0;
     $$1 = $$081 + ($$081 >>> 0 < (($107 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $107 & 255) + -1 | 0) >>> 0 & 1) | 0;
     $$183 = 0;
    } else {
     $$1 = $$081;
     $$183 = $$082;
    }
    __THREW__ = 0;
    $119 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 44 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0;
    $120 = __THREW__;
    __THREW__ = 0;
    if ($120 & 1) {
     label = 31;
     break;
    }
    $122 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $122 + 4;
    HEAP32[$122 >> 2] = $119;
    $$0 = $$0 + 1 | 0;
    $$081 = $$1;
    $$082 = $$183 + 1 | 0;
   }
   if ((label | 0) == 31) {
    $126 = ___cxa_find_matching_catch_2() | 0;
    $$sink99$index = $126;
    $$sink99$index4 = tempRet0;
    label = 34;
    break L1;
   }
   $84 = $0;
   $86 = $3 + ($$187 - $84 << 2) | 0;
   $87 = HEAP32[$5 >> 2] | 0;
   if (($86 | 0) == ($87 | 0)) {
    $$pre$phiZ2D = $84;
    $132 = $86;
    label = 33;
    break L1;
   }
   $$0$i$i95 = $87;
   $$07$i$i94 = $86;
   while (1) {
    $89 = $$0$i$i95 + -4 | 0;
    if ($$07$i$i94 >>> 0 >= $89 >>> 0) break;
    $91 = HEAP32[$$07$i$i94 >> 2] | 0;
    HEAP32[$$07$i$i94 >> 2] = HEAP32[$89 >> 2];
    HEAP32[$89 >> 2] = $91;
    $$0$i$i95 = $89;
    $$07$i$i94 = $$07$i$i94 + 4 | 0;
   }
   $$pre$phiZ2D = $84;
   $132 = HEAP32[$5 >> 2] | 0;
   label = 33;
   break L1;
  } while (0);
  $42 = ___cxa_find_matching_catch_2() | 0;
  $$sink99$index = $42;
  $$sink99$index4 = tempRet0;
  label = 34;
 } while (0);
 if ((label | 0) == 33) {
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $132 : $3 + ($1 - $$pre$phiZ2D << 2) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 34) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink99$index | 0);
 }
}

function __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$236 = 0, $$33746 = 0, $$348 = 0, $$byval_copy = 0, $$pre = 0, $$sink49$index = 0, $$sink49$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $101 = 0, $105 = 0, $107 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $58 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $84 = 0, $9 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy = sp + 424 | 0;
 $7 = sp;
 $8 = sp + 416 | 0;
 $9 = sp + 408 | 0;
 $10 = sp + 400 | 0;
 $11 = sp + 428 | 0;
 $12 = sp + 404 | 0;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 191;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 __THREW__ = 0;
 $16 = invoke_iii(32, $10 | 0, 62400) | 0;
 $17 = __THREW__;
 __THREW__ = 0;
 if ($17 & 1) {
  $42 = ___cxa_find_matching_catch_2() | 0;
  $$2 = $42;
  $$236 = tempRet0;
 } else {
  HEAP8[$11 >> 0] = 0;
  $19 = HEAP32[$2 >> 2] | 0;
  HEAP32[$12 >> 2] = $19;
  $21 = HEAP32[$4 + 4 >> 2] | 0;
  $22 = $19;
  __THREW__ = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
  $23 = invoke_iiiiiiiiiiii(2, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $21 | 0, $5 | 0, $11 | 0, $16 | 0, $8 | 0, $9 | 0, $7 + 400 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  L4 : do if ($24 & 1) label = 11; else {
   if ($23) {
    $27 = $6 + 8 + 3 | 0;
    if ((HEAP8[$27 >> 0] | 0) < 0) {
     $30 = HEAP32[$6 >> 2] | 0;
     HEAP32[$$byval_copy >> 2] = 0;
     __ZNSt3__211char_traitsIwE6assignERwRKw($30, $$byval_copy);
     HEAP32[$6 + 4 >> 2] = 0;
    } else {
     HEAP32[$$byval_copy >> 2] = 0;
     __ZNSt3__211char_traitsIwE6assignERwRKw($6, $$byval_copy);
     HEAP8[$27 >> 0] = 0;
    }
    if (HEAP8[$11 >> 0] | 0) {
     __THREW__ = 0;
     $37 = invoke_iii(HEAP32[(HEAP32[$16 >> 2] | 0) + 44 >> 2] | 0, $16 | 0, 45) | 0;
     $38 = __THREW__;
     __THREW__ = 0;
     if ($38 & 1) {
      label = 11;
      break;
     }
     __THREW__ = 0;
     invoke_vii(89, $6 | 0, $37 | 0);
     $40 = __THREW__;
     __THREW__ = 0;
     if ($40 & 1) {
      label = 11;
      break;
     }
    }
    __THREW__ = 0;
    $49 = invoke_iii(HEAP32[(HEAP32[$16 >> 2] | 0) + 44 >> 2] | 0, $16 | 0, 48) | 0;
    $50 = __THREW__;
    __THREW__ = 0;
    if ($50 & 1) {
     $58 = ___cxa_find_matching_catch_2() | 0;
     $$sink49$index = $58;
     $$sink49$index3 = tempRet0;
     break;
    }
    $53 = HEAP32[$9 >> 2] | 0;
    $54 = $53 + -4 | 0;
    $$0 = HEAP32[$8 >> 2] | 0;
    while (1) {
     if ($$0 >>> 0 >= $54 >>> 0) break;
     if ((HEAP32[$$0 >> 2] | 0) != ($49 | 0)) break;
     $$0 = $$0 + 4 | 0;
    }
    __THREW__ = 0;
    invoke_iiii(51, $6 | 0, $$0 | 0, $53 | 0) | 0;
    $61 = __THREW__;
    __THREW__ = 0;
    if ($61 & 1) {
     $63 = ___cxa_find_matching_catch_2() | 0;
     $$sink49$index = $63;
     $$sink49$index3 = tempRet0;
     break;
    }
   }
   $65 = HEAP32[$1 >> 2] | 0;
   do if (!$65) $116 = 1; else {
    $68 = HEAP32[$65 + 12 >> 2] | 0;
    if (($68 | 0) == (HEAP32[$65 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $75 = invoke_ii(HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] | 0, $65 | 0) | 0;
     $76 = __THREW__;
     __THREW__ = 0;
     if ($76 & 1) {
      label = 11;
      break L4;
     } else $$0$i$i$i$i = $75;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$68 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $116 = 1;
     break;
    } else {
     $116 = (HEAP32[$1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$19) label = 33; else {
    $84 = HEAP32[$22 + 12 >> 2] | 0;
    if (($84 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $92 = invoke_ii(HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] | 0, $22 | 0) | 0;
     $93 = __THREW__;
     __THREW__ = 0;
     if ($93 & 1) {
      label = 11;
      break L4;
     } else $$0$i$i2$i$i = $92;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$84 >> 2] | 0) | 0;
    if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 33;
     break;
    } else if ($116) break; else {
     label = 35;
     break;
    }
   } while (0);
   if ((label | 0) == 33) if ($116) label = 35;
   if ((label | 0) == 35) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
   $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
   __ZNSt3__26localeD2Ev($10);
   $101 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   if ($101 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $101 | 0);
    $105 = __THREW__;
    __THREW__ = 0;
    if ($105 & 1) {
     $107 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($107);
    }
   }
   STACKTOP = sp;
   return $$sroa$0$0$copyload | 0;
  } while (0);
  if ((label | 0) == 11) {
   $44 = ___cxa_find_matching_catch_2() | 0;
   $$sink49$index = $44;
   $$sink49$index3 = tempRet0;
  }
  $$2 = $$sink49$index;
  $$236 = $$sink49$index3;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if (!$$pre) {
  $$33746 = $$236;
  $$348 = $$2;
 } else {
  __THREW__ = 0;
  invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $$pre | 0);
  $112 = __THREW__;
  __THREW__ = 0;
  if ($112 & 1) {
   $114 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($114);
  } else {
   $$33746 = $$236;
   $$348 = $$2;
  }
 }
 ___resumeException($$348 | 0);
 return 0;
}

function __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i2$i$i = 0, $$2 = 0, $$233 = 0, $$33443 = 0, $$345 = 0, $$byval_copy = 0, $$pre = 0, $$sink46$index = 0, $$sink46$index3 = 0, $$sroa$0$0$copyload = 0, $10 = 0, $100 = 0, $104 = 0, $106 = 0, $11 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $57 = 0, $60 = 0, $62 = 0, $64 = 0, $67 = 0, $7 = 0, $74 = 0, $75 = 0, $8 = 0, $83 = 0, $9 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp + 120 | 0;
 $7 = sp;
 $8 = sp + 112 | 0;
 $9 = sp + 108 | 0;
 $10 = sp + 100 | 0;
 $11 = sp + 124 | 0;
 $12 = sp + 104 | 0;
 HEAP32[$8 >> 2] = $7;
 HEAP32[$8 + 4 >> 2] = 191;
 __ZNKSt3__28ios_base6getlocEv($10, $4);
 __THREW__ = 0;
 $16 = invoke_iii(32, $10 | 0, 62368) | 0;
 $17 = __THREW__;
 __THREW__ = 0;
 if ($17 & 1) {
  $41 = ___cxa_find_matching_catch_2() | 0;
  $$2 = $41;
  $$233 = tempRet0;
 } else {
  HEAP8[$11 >> 0] = 0;
  $19 = HEAP32[$2 >> 2] | 0;
  HEAP32[$12 >> 2] = $19;
  $21 = HEAP32[$4 + 4 >> 2] | 0;
  $22 = $19;
  __THREW__ = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
  $23 = invoke_iiiiiiiiiiii(1, $1 | 0, $$byval_copy | 0, $3 | 0, $10 | 0, $21 | 0, $5 | 0, $11 | 0, $16 | 0, $8 | 0, $9 | 0, $7 + 100 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  L4 : do if ($24 & 1) label = 11; else {
   if ($23) {
    $26 = $6 + 11 | 0;
    if ((HEAP8[$26 >> 0] | 0) < 0) {
     $29 = HEAP32[$6 >> 2] | 0;
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($29, $$byval_copy);
     HEAP32[$6 + 4 >> 2] = 0;
    } else {
     HEAP8[$$byval_copy >> 0] = 0;
     __ZNSt3__211char_traitsIcE6assignERcRKc($6, $$byval_copy);
     HEAP8[$26 >> 0] = 0;
    }
    if (HEAP8[$11 >> 0] | 0) {
     __THREW__ = 0;
     $36 = invoke_iii(HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] | 0, $16 | 0, 45) | 0;
     $37 = __THREW__;
     __THREW__ = 0;
     if ($37 & 1) {
      label = 11;
      break;
     }
     __THREW__ = 0;
     invoke_vii(47, $6 | 0, $36 | 0);
     $39 = __THREW__;
     __THREW__ = 0;
     if ($39 & 1) {
      label = 11;
      break;
     }
    }
    __THREW__ = 0;
    $48 = invoke_iii(HEAP32[(HEAP32[$16 >> 2] | 0) + 28 >> 2] | 0, $16 | 0, 48) | 0;
    $49 = __THREW__;
    __THREW__ = 0;
    if ($49 & 1) {
     $57 = ___cxa_find_matching_catch_2() | 0;
     $$sink46$index = $57;
     $$sink46$index3 = tempRet0;
     break;
    }
    $52 = HEAP32[$9 >> 2] | 0;
    $53 = $52 + -1 | 0;
    $$0 = HEAP32[$8 >> 2] | 0;
    while (1) {
     if ($$0 >>> 0 >= $53 >>> 0) break;
     if ((HEAP8[$$0 >> 0] | 0) != $48 << 24 >> 24) break;
     $$0 = $$0 + 1 | 0;
    }
    __THREW__ = 0;
    invoke_iiii(50, $6 | 0, $$0 | 0, $52 | 0) | 0;
    $60 = __THREW__;
    __THREW__ = 0;
    if ($60 & 1) {
     $62 = ___cxa_find_matching_catch_2() | 0;
     $$sink46$index = $62;
     $$sink46$index3 = tempRet0;
     break;
    }
   }
   $64 = HEAP32[$1 >> 2] | 0;
   do if (!$64) $115 = 1; else {
    $67 = HEAP32[$64 + 12 >> 2] | 0;
    if (($67 | 0) == (HEAP32[$64 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $74 = invoke_ii(HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] | 0, $64 | 0) | 0;
     $75 = __THREW__;
     __THREW__ = 0;
     if ($75 & 1) {
      label = 11;
      break L4;
     } else $$0$i$i$i$i = $74;
    } else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$67 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$1 >> 2] = 0;
     $115 = 1;
     break;
    } else {
     $115 = (HEAP32[$1 >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$19) label = 33; else {
    $83 = HEAP32[$22 + 12 >> 2] | 0;
    if (($83 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) {
     __THREW__ = 0;
     $91 = invoke_ii(HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] | 0, $22 | 0) | 0;
     $92 = __THREW__;
     __THREW__ = 0;
     if ($92 & 1) {
      label = 11;
      break L4;
     } else $$0$i$i2$i$i = $91;
    } else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$83 >> 0] | 0) | 0;
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
     HEAP32[$2 >> 2] = 0;
     label = 33;
     break;
    } else if ($115) break; else {
     label = 35;
     break;
    }
   } while (0);
   if ((label | 0) == 33) if ($115) label = 35;
   if ((label | 0) == 35) HEAP32[$5 >> 2] = HEAP32[$5 >> 2] | 2;
   $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
   __ZNSt3__26localeD2Ev($10);
   $100 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 >> 2] = 0;
   if ($100 | 0) {
    __THREW__ = 0;
    invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $100 | 0);
    $104 = __THREW__;
    __THREW__ = 0;
    if ($104 & 1) {
     $106 = ___cxa_find_matching_catch_3(0) | 0;
     ___clang_call_terminate($106);
    }
   }
   STACKTOP = sp;
   return $$sroa$0$0$copyload | 0;
  } while (0);
  if ((label | 0) == 11) {
   $43 = ___cxa_find_matching_catch_2() | 0;
   $$sink46$index = $43;
   $$sink46$index3 = tempRet0;
  }
  $$2 = $$sink46$index;
  $$233 = $$sink46$index3;
 }
 __ZNSt3__26localeD2Ev($10);
 $$pre = HEAP32[$8 >> 2] | 0;
 HEAP32[$8 >> 2] = 0;
 if (!$$pre) {
  $$33443 = $$233;
  $$345 = $$2;
 } else {
  __THREW__ = 0;
  invoke_vi(HEAP32[$8 + 4 >> 2] | 0, $$pre | 0);
  $111 = __THREW__;
  __THREW__ = 0;
  if ($111 & 1) {
   $113 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($113);
  } else {
   $$33443 = $$233;
   $$345 = $$2;
  }
 }
 ___resumeException($$345 | 0);
 return 0;
}

function __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i92 = 0, $$07$i$i = 0, $$07$i$i91 = 0, $$078 = 0, $$079 = 0, $$083 = 0, $$1 = 0, $$180 = 0, $$184 = 0, $$pre$phiZ2D = 0, $$sink97$index = 0, $$sink97$index4 = 0, $101 = 0, $105 = 0, $107 = 0, $119 = 0, $120 = 0, $122 = 0, $126 = 0, $13 = 0, $132 = 0, $14 = 0, $16 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $50 = 0, $55 = 0, $56 = 0, $58 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $91 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $7 = sp;
 $8 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62368) | 0;
 $9 = __ZNKSt3__26locale9use_facetERNS0_2idE($6, 62384) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] & 127]($7, $9);
 $13 = $7 + 11 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $16 = $7 + 4 | 0;
 L1 : do if (!(($14 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $14 & 255) | 0)) {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$8 >> 2] | 0) + 32 >> 2] | 0, $8 | 0, $0 | 0, $2 | 0, $3 | 0) | 0;
  $24 = __THREW__;
  __THREW__ = 0;
  if ($24 & 1) {
   $30 = ___cxa_find_matching_catch_2() | 0;
   $$sink97$index = $30;
   $$sink97$index4 = tempRet0;
   label = 34;
   break;
  } else {
   $27 = $0;
   $29 = $3 + ($2 - $27) | 0;
   HEAP32[$5 >> 2] = $29;
   $$pre$phiZ2D = $27;
   $132 = $29;
   label = 33;
   break;
  }
 } else {
  HEAP32[$5 >> 2] = $3;
  $32 = HEAP8[$0 >> 0] | 0;
  switch ($32 << 24 >> 24) {
  case 43:
  case 45:
   {
    __THREW__ = 0;
    $36 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, $32 | 0) | 0;
    $37 = __THREW__;
    __THREW__ = 0;
    if (!($37 & 1)) {
     $40 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $40 + 1;
     HEAP8[$40 >> 0] = $36;
     $$083 = $0 + 1 | 0;
     label = 9;
    }
    break;
   }
  default:
   {
    $$083 = $0;
    label = 9;
   }
  }
  L10 : do if ((label | 0) == 9) {
   L12 : do if (($2 - $$083 | 0) > 1) if ((HEAP8[$$083 >> 0] | 0) == 48) {
    $50 = $$083 + 1 | 0;
    switch (HEAP8[$50 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      $$184 = $$083;
      break L12;
     }
    }
    __THREW__ = 0;
    $55 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, 48) | 0;
    $56 = __THREW__;
    __THREW__ = 0;
    if ($56 & 1) break L10;
    $58 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $58 + 1;
    HEAP8[$58 >> 0] = $55;
    __THREW__ = 0;
    $64 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$50 >> 0] | 0) | 0;
    $65 = __THREW__;
    __THREW__ = 0;
    if ($65 & 1) break L10;
    $68 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $68 + 1;
    HEAP8[$68 >> 0] = $64;
    $$184 = $$083 + 2 | 0;
   } else $$184 = $$083; else $$184 = $$083; while (0);
   L19 : do if (($$184 | 0) != ($2 | 0)) {
    $$0$i$i = $2;
    $$07$i$i = $$184;
    while (1) {
     $71 = $$0$i$i + -1 | 0;
     if ($$07$i$i >>> 0 >= $71 >>> 0) break L19;
     $73 = HEAP8[$$07$i$i >> 0] | 0;
     HEAP8[$$07$i$i >> 0] = HEAP8[$71 >> 0] | 0;
     HEAP8[$71 >> 0] = $73;
     $$0$i$i = $71;
     $$07$i$i = $$07$i$i + 1 | 0;
    }
   } while (0);
   __THREW__ = 0;
   $79 = invoke_ii(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0, $9 | 0) | 0;
   $80 = __THREW__;
   __THREW__ = 0;
   if ($80 & 1) {
    $94 = ___cxa_find_matching_catch_2() | 0;
    $$sink97$index = $94;
    $$sink97$index4 = tempRet0;
    label = 34;
    break L1;
   }
   $$0 = $$184;
   $$078 = 0;
   $$079 = 0;
   while (1) {
    if ($$0 >>> 0 >= $2 >>> 0) break;
    $101 = HEAP8[((HEAP8[$13 >> 0] | 0) < 0 ? HEAP32[$7 >> 2] | 0 : $7) + $$078 >> 0] | 0;
    if ($101 << 24 >> 24 != 0 & ($$079 | 0) == ($101 << 24 >> 24 | 0)) {
     $105 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $105 + 1;
     HEAP8[$105 >> 0] = $79;
     $107 = HEAP8[$13 >> 0] | 0;
     $$1 = $$078 + ($$078 >>> 0 < (($107 << 24 >> 24 < 0 ? HEAP32[$16 >> 2] | 0 : $107 & 255) + -1 | 0) >>> 0 & 1) | 0;
     $$180 = 0;
    } else {
     $$1 = $$078;
     $$180 = $$079;
    }
    __THREW__ = 0;
    $119 = invoke_iii(HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0, $8 | 0, HEAP8[$$0 >> 0] | 0) | 0;
    $120 = __THREW__;
    __THREW__ = 0;
    if ($120 & 1) {
     label = 31;
     break;
    }
    $122 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $122 + 1;
    HEAP8[$122 >> 0] = $119;
    $$0 = $$0 + 1 | 0;
    $$078 = $$1;
    $$079 = $$180 + 1 | 0;
   }
   if ((label | 0) == 31) {
    $126 = ___cxa_find_matching_catch_2() | 0;
    $$sink97$index = $126;
    $$sink97$index4 = tempRet0;
    label = 34;
    break L1;
   }
   $84 = $0;
   $86 = $3 + ($$184 - $84) | 0;
   $87 = HEAP32[$5 >> 2] | 0;
   if (($86 | 0) == ($87 | 0)) {
    $$pre$phiZ2D = $84;
    $132 = $86;
    label = 33;
    break L1;
   }
   $$0$i$i92 = $87;
   $$07$i$i91 = $86;
   while (1) {
    $89 = $$0$i$i92 + -1 | 0;
    if ($$07$i$i91 >>> 0 >= $89 >>> 0) break;
    $91 = HEAP8[$$07$i$i91 >> 0] | 0;
    HEAP8[$$07$i$i91 >> 0] = HEAP8[$89 >> 0] | 0;
    HEAP8[$89 >> 0] = $91;
    $$0$i$i92 = $89;
    $$07$i$i91 = $$07$i$i91 + 1 | 0;
   }
   $$pre$phiZ2D = $84;
   $132 = HEAP32[$5 >> 2] | 0;
   label = 33;
   break L1;
  } while (0);
  $42 = ___cxa_find_matching_catch_2() | 0;
  $$sink97$index = $42;
  $$sink97$index4 = tempRet0;
  label = 34;
 } while (0);
 if ((label | 0) == 33) {
  HEAP32[$4 >> 2] = ($1 | 0) == ($2 | 0) ? $132 : $3 + ($1 - $$pre$phiZ2D) | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 34) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
  ___resumeException($$sink97$index | 0);
 }
}

function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $103 = 0, $119 = 0, $12 = 0, $127 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $64 = 0, $73 = 0, $80 = 0, $86 = 0, $94 = 0, $trunc = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0102 = -149;
   $$0103 = 24;
   label = 4;
   break;
  }
 case 1:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 case 2:
  {
   $$0102 = -1074;
   $$0103 = 53;
   label = 4;
   break;
  }
 default:
  $$0111 = 0.0;
 }
 L4 : do if ((label | 0) == 4) {
  $3 = $0 + 4 | 0;
  $4 = $0 + 100 | 0;
  do {
   $5 = HEAP32[$3 >> 2] | 0;
   if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $5 + 1;
    $12 = HEAPU8[$5 >> 0] | 0;
   } else $12 = ___shgetc($0) | 0;
  } while ((_isspace($12) | 0) != 0);
  L13 : do switch ($12 | 0) {
  case 43:
  case 45:
   {
    $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0;
    $19 = HEAP32[$3 >> 2] | 0;
    if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $19 + 1;
     $$0 = HEAPU8[$19 >> 0] | 0;
     $$0110 = $18;
     break L13;
    } else {
     $$0 = ___shgetc($0) | 0;
     $$0110 = $18;
     break L13;
    }
    break;
   }
  default:
   {
    $$0 = $12;
    $$0110 = 1;
   }
  } while (0);
  $$0104122 = 0;
  $$1123 = $$0;
  while (1) {
   if (($$1123 | 32 | 0) != (HEAP8[52182 + $$0104122 >> 0] | 0)) {
    $$1$lcssa = $$1123;
    $trunc = $$0104122;
    break;
   }
   do if ($$0104122 >>> 0 < 7) {
    $32 = HEAP32[$3 >> 2] | 0;
    if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $32 + 1;
     $$2 = HEAPU8[$32 >> 0] | 0;
     break;
    } else {
     $$2 = ___shgetc($0) | 0;
     break;
    }
   } else $$2 = $$1123; while (0);
   $$0104122 = $$0104122 + 1 | 0;
   if ($$0104122 >>> 0 >= 8) {
    $$1$lcssa = $$2;
    $trunc = 8;
    break;
   } else $$1123 = $$2;
  }
  L29 : do switch ($trunc & 2147483647 | 0) {
  case 8:
   break;
  case 3:
   {
    label = 23;
    break;
   }
  default:
   {
    $42 = ($2 | 0) != 0;
    if ($42 & $trunc >>> 0 > 3) if (($trunc | 0) == 8) break L29; else {
     label = 23;
     break L29;
    }
    L34 : do if (!$trunc) {
     $$2106120 = 0;
     $$3121 = $$1$lcssa;
     while (1) {
      if (($$3121 | 32 | 0) != (HEAP8[52235 + $$2106120 >> 0] | 0)) {
       $$3107 = $$2106120;
       $$5 = $$3121;
       break L34;
      }
      do if ($$2106120 >>> 0 < 2) {
       $64 = HEAP32[$3 >> 2] | 0;
       if ($64 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $64 + 1;
        $$4 = HEAPU8[$64 >> 0] | 0;
        break;
       } else {
        $$4 = ___shgetc($0) | 0;
        break;
       }
      } else $$4 = $$3121; while (0);
      $$2106120 = $$2106120 + 1 | 0;
      if ($$2106120 >>> 0 >= 3) {
       $$3107 = 3;
       $$5 = $$4;
       break;
      } else $$3121 = $$4;
     }
    } else {
     $$3107 = $trunc;
     $$5 = $$1$lcssa;
    } while (0);
    switch ($$3107 | 0) {
    case 3:
     {
      $73 = HEAP32[$3 >> 2] | 0;
      if ($73 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $73 + 1;
       $80 = HEAPU8[$73 >> 0] | 0;
      } else $80 = ___shgetc($0) | 0;
      if (($80 | 0) != 40) {
       if (!(HEAP32[$4 >> 2] | 0)) {
        $$0111 = nan;
        break L4;
       }
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while (1) {
       $86 = HEAP32[$3 >> 2] | 0;
       if ($86 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $86 + 1;
        $94 = HEAPU8[$86 >> 0] | 0;
       } else $94 = ___shgetc($0) | 0;
       if (!(($94 + -48 | 0) >>> 0 < 10 | ($94 + -65 | 0) >>> 0 < 26)) if (!(($94 | 0) == 95 | ($94 + -97 | 0) >>> 0 < 26)) break;
       $$4108 = $$4108 + 1 | 0;
      }
      if (($94 | 0) == 41) {
       $$0111 = nan;
       break L4;
      }
      $103 = (HEAP32[$4 >> 2] | 0) == 0;
      if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      if (!$42) {
       HEAP32[(___errno_location() | 0) >> 2] = 22;
       ___shlim($0, 0);
       $$0111 = 0.0;
       break L4;
      }
      if (!$$4108) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while (1) {
       $$in = $$in + -1 | 0;
       if (!$103) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
       if (!$$in) {
        $$0111 = nan;
        break L4;
       }
      }
      break;
     }
    case 0:
     {
      if (($$5 | 0) == 48) {
       $119 = HEAP32[$3 >> 2] | 0;
       if ($119 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
        HEAP32[$3 >> 2] = $119 + 1;
        $127 = HEAPU8[$119 >> 0] | 0;
       } else $127 = ___shgetc($0) | 0;
       if (($127 | 32 | 0) == 120) {
        $$0111 = +_hexfloat($0, $$0103, $$0102, $$0110, $2);
        break L4;
       }
       if (!(HEAP32[$4 >> 2] | 0)) $$6 = 48; else {
        HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
        $$6 = 48;
       }
      } else $$6 = $$5;
      $$0111 = +_decfloat($0, $$6, $$0103, $$0102, $$0110, $2);
      break L4;
      break;
     }
    default:
     {
      if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
      HEAP32[(___errno_location() | 0) >> 2] = 22;
      ___shlim($0, 0);
      $$0111 = 0.0;
      break L4;
     }
    }
   }
  } while (0);
  if ((label | 0) == 23) {
   $45 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (($2 | 0) != 0 & $trunc >>> 0 > 3) {
    $$1105118 = $trunc;
    do {
     if (!$45) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
     $$1105118 = $$1105118 + -1 | 0;
    } while ($$1105118 >>> 0 > 3);
   }
  }
  $$0111 = +($$0110 | 0) * inf;
 } while (0);
 return +$$0111;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE25__emplace_unique_key_argsIS3_JS3_RS8_EEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEEbEERKT_DpOT0_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $103 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $78 = 0, $8 = 0, $86 = 0, $9 = 0, $90 = 0, $98 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $5 = sp + 216 | 0;
 $6 = sp + 212 | 0;
 $7 = sp + 208 | 0;
 $8 = sp + 204 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp + 192 | 0;
 $12 = sp + 188 | 0;
 $13 = sp + 184 | 0;
 $14 = sp + 180 | 0;
 $15 = sp + 176 | 0;
 $16 = sp + 172 | 0;
 $17 = sp + 168 | 0;
 $18 = sp + 164 | 0;
 $19 = sp + 160 | 0;
 $20 = sp + 156 | 0;
 $21 = sp + 152 | 0;
 $22 = sp + 148 | 0;
 $23 = sp + 144 | 0;
 $24 = sp + 140 | 0;
 $25 = sp + 136 | 0;
 $26 = sp + 132 | 0;
 $27 = sp;
 $28 = sp + 128 | 0;
 $29 = sp + 124 | 0;
 $30 = sp + 221 | 0;
 $31 = sp + 120 | 0;
 $32 = sp + 116 | 0;
 $33 = sp + 112 | 0;
 $34 = sp + 108 | 0;
 $35 = sp + 104 | 0;
 $36 = sp + 100 | 0;
 $37 = sp + 96 | 0;
 $38 = sp + 92 | 0;
 $39 = sp + 88 | 0;
 $40 = sp + 84 | 0;
 $41 = sp + 80 | 0;
 $42 = sp + 76 | 0;
 $43 = sp + 72 | 0;
 $44 = sp + 68 | 0;
 $45 = sp + 64 | 0;
 $46 = sp + 60 | 0;
 $47 = sp + 56 | 0;
 $48 = sp + 52 | 0;
 $49 = sp + 48 | 0;
 $50 = sp + 44 | 0;
 $51 = sp + 40 | 0;
 $52 = sp + 36 | 0;
 $53 = sp + 32 | 0;
 $54 = sp + 28 | 0;
 $55 = sp + 24 | 0;
 $56 = sp + 20 | 0;
 $57 = sp + 220 | 0;
 $58 = sp + 8 | 0;
 $59 = sp + 4 | 0;
 HEAP32[$50 >> 2] = $1;
 HEAP32[$51 >> 2] = $2;
 HEAP32[$52 >> 2] = $3;
 HEAP32[$53 >> 2] = $4;
 $60 = HEAP32[$50 >> 2] | 0;
 HEAP32[$55 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISK_EERKT_($60, $54, HEAP32[$51 >> 2] | 0) | 0;
 HEAP32[$56 >> 2] = HEAP32[HEAP32[$55 >> 2] >> 2];
 HEAP8[$57 >> 0] = 0;
 if (!(HEAP32[HEAP32[$55 >> 2] >> 2] | 0)) {
  HEAP32[$49 >> 2] = HEAP32[$52 >> 2];
  $69 = HEAP32[$49 >> 2] | 0;
  HEAP32[$41 >> 2] = HEAP32[$53 >> 2];
  __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE16__construct_nodeIJS3_RS8_EEENS_10unique_ptrINS_11__tree_nodeIS9_PvEENS_22__tree_node_destructorINSD_ISL_EEEEEEDpOT_($58, $60, $69, HEAP32[$41 >> 2] | 0);
  $72 = HEAP32[$54 >> 2] | 0;
  $73 = HEAP32[$55 >> 2] | 0;
  HEAP32[$13 >> 2] = $58;
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSK_SK_($60, $72, $73, HEAP32[HEAP32[$11 >> 2] >> 2] | 0);
  HEAP32[$9 >> 2] = $58;
  $78 = HEAP32[$9 >> 2] | 0;
  HEAP32[$8 >> 2] = $78;
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$10 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
  HEAP32[$6 >> 2] = $78;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[HEAP32[$5 >> 2] >> 2] = 0;
  HEAP32[$56 >> 2] = HEAP32[$10 >> 2];
  HEAP8[$57 >> 0] = 1;
  HEAP32[$40 >> 2] = $58;
  HEAP32[$37 >> 2] = HEAP32[$40 >> 2];
  HEAP32[$38 >> 2] = 0;
  $86 = HEAP32[$37 >> 2] | 0;
  HEAP32[$36 >> 2] = $86;
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$39 >> 2] = HEAP32[HEAP32[$35 >> 2] >> 2];
  $90 = HEAP32[$38 >> 2] | 0;
  HEAP32[$17 >> 2] = $86;
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP32[HEAP32[$16 >> 2] >> 2] = $90;
  if (HEAP32[$39 >> 2] | 0) {
   HEAP32[$15 >> 2] = $86;
   HEAP32[$14 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
   $98 = HEAP32[$39 >> 2] | 0;
   HEAP32[$33 >> 2] = HEAP32[$14 >> 2];
   HEAP32[$34 >> 2] = $98;
   $99 = HEAP32[$33 >> 2] | 0;
   if (HEAP8[$99 + 4 >> 0] & 1) {
    $103 = HEAP32[$99 >> 2] | 0;
    HEAP32[$32 >> 2] = (HEAP32[$34 >> 2] | 0) + 16;
    HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
    $107 = HEAP32[$31 >> 2] | 0;
    HEAP32[$28 >> 2] = $103;
    HEAP32[$29 >> 2] = $107;
    $108 = HEAP32[$28 >> 2] | 0;
    $109 = HEAP32[$29 >> 2] | 0;
    HEAP8[$27 >> 0] = HEAP8[$30 >> 0] | 0;
    HEAP32[$25 >> 2] = $108;
    HEAP32[$26 >> 2] = $109;
   }
   if (HEAP32[$34 >> 2] | 0) {
    $113 = HEAP32[$34 >> 2] | 0;
    HEAP32[$22 >> 2] = HEAP32[$99 >> 2];
    HEAP32[$23 >> 2] = $113;
    HEAP32[$24 >> 2] = 1;
    $115 = HEAP32[$23 >> 2] | 0;
    $116 = HEAP32[$24 >> 2] | 0;
    HEAP32[$19 >> 2] = HEAP32[$22 >> 2];
    HEAP32[$20 >> 2] = $115;
    HEAP32[$21 >> 2] = $116;
    HEAP32[$18 >> 2] = HEAP32[$20 >> 2];
    __ZdlPv(HEAP32[$18 >> 2] | 0);
   }
  }
 }
 $119 = HEAP32[$56 >> 2] | 0;
 HEAP32[$42 >> 2] = $59;
 HEAP32[$43 >> 2] = $119;
 HEAP32[HEAP32[$42 >> 2] >> 2] = HEAP32[$43 >> 2];
 HEAP32[$46 >> 2] = $0;
 HEAP32[$47 >> 2] = $59;
 HEAP32[$48 >> 2] = $57;
 $122 = HEAP32[$46 >> 2] | 0;
 HEAP32[$45 >> 2] = HEAP32[$47 >> 2];
 HEAP32[$122 >> 2] = HEAP32[HEAP32[$45 >> 2] >> 2];
 HEAP32[$44 >> 2] = HEAP32[$48 >> 2];
 HEAP8[$122 + 4 >> 0] = HEAP8[HEAP32[$44 >> 2] >> 0] & 1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i38 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$sink61 = 0, $$sink62 = 0, $$sink63 = 0, $$sroa$051$0 = 0, $$sroa$051$1 = 0, $10 = 0, $101 = 0, $103 = 0, $105 = 0, $107 = 0, $11 = 0, $112 = 0, $116 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $32 = 0, $36 = 0, $37 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy = sp + 464 | 0;
 $6 = sp + 460 | 0;
 $7 = sp + 468 | 0;
 $8 = sp + 456 | 0;
 $9 = sp + 452 | 0;
 $10 = sp + 440 | 0;
 $11 = sp + 428 | 0;
 $12 = sp + 416 | 0;
 $13 = sp + 412 | 0;
 $14 = sp;
 $15 = sp + 408 | 0;
 $16 = sp + 404 | 0;
 $17 = sp + 400 | 0;
 __ZNKSt3__28ios_base6getlocEv($6, $3);
 __THREW__ = 0;
 $18 = invoke_iii(32, $6 | 0, 62400) | 0;
 $19 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($19 & 1) {
  $103 = ___cxa_find_matching_catch_2() | 0;
  $$3 = $103;
  $$335 = tempRet0;
 } else {
  $22 = $5 + 8 + 3 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  $24 = $23 << 24 >> 24 < 0;
  $25 = $5 + 4 | 0;
  do if (!(($24 ? HEAP32[$25 >> 2] | 0 : $23 & 255) | 0)) $46 = 0; else {
   $32 = HEAP32[($24 ? HEAP32[$5 >> 2] | 0 : $5) >> 2] | 0;
   __THREW__ = 0;
   $36 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 44 >> 2] | 0, $18 | 0, 45) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if ($37 & 1) {
    $105 = ___cxa_find_matching_catch_2() | 0;
    $$3 = $105;
    $$335 = tempRet0;
    break L1;
   } else {
    $46 = ($32 | 0) == ($36 | 0);
    break;
   }
  } while (0);
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  $$0$i$i36 = 0;
  while (1) {
   if (($$0$i$i36 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i36 << 2) >> 2] = 0;
   $$0$i$i36 = $$0$i$i36 + 1 | 0;
  }
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAP32[$12 + 8 >> 2] = 0;
  $$0$i$i38 = 0;
  while (1) {
   if (($$0$i$i38 | 0) == 3) break;
   HEAP32[$12 + ($$0$i$i38 << 2) >> 2] = 0;
   $$0$i$i38 = $$0$i$i38 + 1 | 0;
  }
  __THREW__ = 0;
  invoke_viiiiiiiiii(4, $2 | 0, $46 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0);
  $47 = __THREW__;
  __THREW__ = 0;
  if ($47 & 1) {
   $107 = ___cxa_find_matching_catch_2() | 0;
   $$1 = $107;
   $$133 = tempRet0;
  } else {
   $49 = HEAP8[$22 >> 0] | 0;
   $50 = $49 << 24 >> 24 < 0;
   $53 = $50 ? HEAP32[$25 >> 2] | 0 : $49 & 255;
   $54 = HEAP32[$13 >> 2] | 0;
   if (($53 | 0) > ($54 | 0)) {
    $60 = HEAP8[$12 + 8 + 3 >> 0] | 0;
    $68 = HEAP8[$11 + 8 + 3 >> 0] | 0;
    $$sink61 = $68 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $68 & 255;
    $$sink62 = $54 + 1 + ($53 - $54 << 1) | 0;
    $$sink63 = $60 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $60 & 255;
   } else {
    $78 = HEAP8[$12 + 8 + 3 >> 0] | 0;
    $86 = HEAP8[$11 + 8 + 3 >> 0] | 0;
    $$sink61 = $86 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $86 & 255;
    $$sink62 = $54 + 2 | 0;
    $$sink63 = $78 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $78 & 255;
   }
   $94 = $$sink62 + $$sink63 + $$sink61 | 0;
   if ($94 >>> 0 > 100) {
    $97 = _malloc($94 << 2) | 0;
    $98 = $97;
    if (!$97) {
     __THREW__ = 0;
     invoke_v(5);
     __THREW__ = 0;
     $101 = ___cxa_find_matching_catch_2() | 0;
     $$0 = $101;
     $$032 = tempRet0;
     $$sroa$051$1 = $98;
    } else {
     $$031 = $97;
     $$sroa$051$0 = $98;
     label = 24;
    }
   } else {
    $$031 = $14;
    $$sroa$051$0 = 0;
    label = 24;
   }
   if ((label | 0) == 24) {
    $112 = $50 ? HEAP32[$5 >> 2] | 0 : $5;
    __THREW__ = 0;
    invoke_viiiiiiiiiiiiiii(2, $$031 | 0, $15 | 0, $16 | 0, HEAP32[$3 + 4 >> 2] | 0, $112 | 0, $112 + ($53 << 2) | 0, $18 | 0, $46 | 0, $7 | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, $10 | 0, $11 | 0, $12 | 0, $54 | 0);
    $116 = __THREW__;
    __THREW__ = 0;
    if (!($116 & 1)) {
     HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
     $119 = HEAP32[$15 >> 2] | 0;
     $120 = HEAP32[$16 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2];
     $121 = invoke_iiiiiii(40, $$byval_copy | 0, $$031 | 0, $119 | 0, $120 | 0, $3 | 0, $4 | 0) | 0;
     $122 = __THREW__;
     __THREW__ = 0;
     if (!($122 & 1)) {
      if ($$sroa$051$0 | 0) _free($$sroa$051$0);
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__26localeD2Ev($6);
      STACKTOP = sp;
      return $121 | 0;
     }
    }
    $126 = ___cxa_find_matching_catch_2() | 0;
    $$0 = $126;
    $$032 = tempRet0;
    $$sroa$051$1 = $$sroa$051$0;
   }
   if ($$sroa$051$1 | 0) _free($$sroa$051$1);
   $$1 = $$0;
   $$133 = $$032;
  }
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($12);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($11);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $$3 = $$1;
  $$335 = $$133;
 } while (0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3 | 0);
 return 0;
}

function __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $104 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $12 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $71 = 0, $8 = 0, $82 = 0, $84 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $2 = sp + 232 | 0;
 $3 = sp + 228 | 0;
 $4 = sp + 224 | 0;
 $5 = sp + 220 | 0;
 $6 = sp + 216 | 0;
 $7 = sp + 212 | 0;
 $8 = sp + 208 | 0;
 $9 = sp + 204 | 0;
 $10 = sp + 200 | 0;
 $11 = sp + 196 | 0;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 184 | 0;
 $16 = sp + 180 | 0;
 $17 = sp + 176 | 0;
 $18 = sp + 172 | 0;
 $19 = sp + 241 | 0;
 $20 = sp + 168 | 0;
 $21 = sp + 164 | 0;
 $22 = sp + 160 | 0;
 $23 = sp + 156 | 0;
 $24 = sp + 152 | 0;
 $25 = sp + 148 | 0;
 $26 = sp + 144 | 0;
 $27 = sp + 140 | 0;
 $28 = sp + 136 | 0;
 $29 = sp + 132 | 0;
 $30 = sp + 128 | 0;
 $31 = sp + 124 | 0;
 $32 = sp + 120 | 0;
 $33 = sp + 116 | 0;
 $34 = sp + 8 | 0;
 $35 = sp + 112 | 0;
 $36 = sp + 108 | 0;
 $37 = sp + 104 | 0;
 $38 = sp + 100 | 0;
 $39 = sp + 240 | 0;
 $40 = sp + 96 | 0;
 $41 = sp + 92 | 0;
 $42 = sp + 88 | 0;
 $43 = sp + 84 | 0;
 $44 = sp + 80 | 0;
 $45 = sp + 76 | 0;
 $46 = sp + 72 | 0;
 $47 = sp + 68 | 0;
 $48 = sp + 64 | 0;
 $49 = sp + 60 | 0;
 $50 = sp + 56 | 0;
 $51 = sp + 52 | 0;
 $52 = sp + 48 | 0;
 $53 = sp + 44 | 0;
 $54 = sp + 40 | 0;
 $55 = sp + 36 | 0;
 $56 = sp;
 $57 = sp + 32 | 0;
 $58 = sp + 28 | 0;
 $59 = sp + 239 | 0;
 $60 = sp + 24 | 0;
 $61 = sp + 20 | 0;
 $62 = sp + 238 | 0;
 $63 = sp + 237 | 0;
 $64 = sp + 236 | 0;
 HEAP32[$61 >> 2] = $1;
 $65 = HEAP32[$61 >> 2] | 0;
 if (HEAP32[$65 + 48 >> 2] & 16 | 0) {
  $71 = HEAP32[$65 + 44 >> 2] | 0;
  HEAP32[$60 >> 2] = $65;
  if ($71 >>> 0 < (HEAP32[(HEAP32[$60 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
   HEAP32[$26 >> 2] = $65;
   HEAP32[$65 + 44 >> 2] = HEAP32[(HEAP32[$26 >> 2] | 0) + 24 >> 2];
  }
  HEAP32[$6 >> 2] = $65;
  $82 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0;
  $84 = HEAP32[$65 + 44 >> 2] | 0;
  HEAP32[$5 >> 2] = $65 + 32;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$15 >> 2] = $0;
  HEAP32[$16 >> 2] = $82;
  HEAP32[$17 >> 2] = $84;
  HEAP32[$18 >> 2] = $62;
  $89 = HEAP32[$15 >> 2] | 0;
  $90 = HEAP32[$18 >> 2] | 0;
  HEAP8[$14 >> 0] = HEAP8[$19 >> 0] | 0;
  HEAP32[$12 >> 2] = $89;
  HEAP32[$13 >> 2] = $90;
  $91 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $91;
  $92 = HEAP32[$11 >> 2] | 0;
  HEAP32[$92 >> 2] = 0;
  HEAP32[$92 + 4 >> 2] = 0;
  HEAP32[$92 + 8 >> 2] = 0;
  HEAP32[$7 >> 2] = HEAP32[$13 >> 2];
  $94 = HEAP32[$7 >> 2] | 0;
  HEAP32[$9 >> 2] = $91;
  HEAP32[$10 >> 2] = $94;
  HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($89, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 if (HEAP32[$65 + 48 >> 2] & 8 | 0) {
  HEAP32[$20 >> 2] = $65;
  $104 = HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[$21 >> 2] = $65;
  $107 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$25 >> 2] = $65 + 32;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$35 >> 2] = $0;
  HEAP32[$36 >> 2] = $104;
  HEAP32[$37 >> 2] = $107;
  HEAP32[$38 >> 2] = $63;
  $112 = HEAP32[$35 >> 2] | 0;
  $113 = HEAP32[$38 >> 2] | 0;
  HEAP8[$34 >> 0] = HEAP8[$39 >> 0] | 0;
  HEAP32[$32 >> 2] = $112;
  HEAP32[$33 >> 2] = $113;
  $114 = HEAP32[$32 >> 2] | 0;
  HEAP32[$31 >> 2] = $114;
  $115 = HEAP32[$31 >> 2] | 0;
  HEAP32[$115 >> 2] = 0;
  HEAP32[$115 + 4 >> 2] = 0;
  HEAP32[$115 + 8 >> 2] = 0;
  HEAP32[$27 >> 2] = HEAP32[$33 >> 2];
  $117 = HEAP32[$27 >> 2] | 0;
  HEAP32[$29 >> 2] = $114;
  HEAP32[$30 >> 2] = $117;
  HEAP32[$28 >> 2] = HEAP32[$30 >> 2];
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($112, HEAP32[$36 >> 2] | 0, HEAP32[$37 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 HEAP32[$43 >> 2] = $65 + 32;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$57 >> 2] = $0;
 HEAP32[$58 >> 2] = $64;
 $125 = HEAP32[$57 >> 2] | 0;
 $126 = HEAP32[$58 >> 2] | 0;
 HEAP8[$56 >> 0] = HEAP8[$59 >> 0] | 0;
 HEAP32[$54 >> 2] = $125;
 HEAP32[$55 >> 2] = $126;
 $127 = HEAP32[$54 >> 2] | 0;
 HEAP32[$53 >> 2] = $127;
 $128 = HEAP32[$53 >> 2] | 0;
 HEAP32[$128 >> 2] = 0;
 HEAP32[$128 + 4 >> 2] = 0;
 HEAP32[$128 + 8 >> 2] = 0;
 HEAP32[$49 >> 2] = HEAP32[$55 >> 2];
 $130 = HEAP32[$49 >> 2] | 0;
 HEAP32[$51 >> 2] = $127;
 HEAP32[$52 >> 2] = $130;
 HEAP32[$50 >> 2] = HEAP32[$52 >> 2];
 HEAP32[$46 >> 2] = $125;
 HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$48 >> 2] = 0;
 while (1) {
  if ((HEAP32[$48 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$47 >> 2] | 0) + (HEAP32[$48 >> 2] << 2) >> 2] = 0;
  HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i36 = 0, $$0$i$i39 = 0, $$031 = 0, $$032 = 0, $$1 = 0, $$133 = 0, $$3 = 0, $$335 = 0, $$byval_copy = 0, $$sink62 = 0, $$sink63 = 0, $$sink64 = 0, $$sroa$052$0 = 0, $$sroa$052$1 = 0, $10 = 0, $101 = 0, $106 = 0, $11 = 0, $110 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $35 = 0, $36 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $58 = 0, $6 = 0, $65 = 0, $7 = 0, $74 = 0, $8 = 0, $81 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $95 = 0, $97 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 156 | 0;
 $6 = sp + 152 | 0;
 $7 = sp + 164 | 0;
 $8 = sp + 161 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 140 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 116 | 0;
 $13 = sp + 112 | 0;
 $14 = sp;
 $15 = sp + 108 | 0;
 $16 = sp + 104 | 0;
 $17 = sp + 100 | 0;
 __ZNKSt3__28ios_base6getlocEv($6, $3);
 __THREW__ = 0;
 $18 = invoke_iii(32, $6 | 0, 62368) | 0;
 $19 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($19 & 1) {
  $97 = ___cxa_find_matching_catch_2() | 0;
  $$3 = $97;
  $$335 = tempRet0;
 } else {
  $21 = $5 + 11 | 0;
  $22 = HEAP8[$21 >> 0] | 0;
  $23 = $22 << 24 >> 24 < 0;
  $24 = $5 + 4 | 0;
  do if (!(($23 ? HEAP32[$24 >> 2] | 0 : $22 & 255) | 0)) $45 = 0; else {
   $31 = HEAP8[($23 ? HEAP32[$5 >> 2] | 0 : $5) >> 0] | 0;
   __THREW__ = 0;
   $35 = invoke_iii(HEAP32[(HEAP32[$18 >> 2] | 0) + 28 >> 2] | 0, $18 | 0, 45) | 0;
   $36 = __THREW__;
   __THREW__ = 0;
   if ($36 & 1) {
    $99 = ___cxa_find_matching_catch_2() | 0;
    $$3 = $99;
    $$335 = tempRet0;
    break L1;
   } else {
    $45 = $31 << 24 >> 24 == $35 << 24 >> 24;
    break;
   }
  } while (0);
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  $$0$i$i = 0;
  while (1) {
   if (($$0$i$i | 0) == 3) break;
   HEAP32[$10 + ($$0$i$i << 2) >> 2] = 0;
   $$0$i$i = $$0$i$i + 1 | 0;
  }
  HEAP32[$11 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  $$0$i$i36 = 0;
  while (1) {
   if (($$0$i$i36 | 0) == 3) break;
   HEAP32[$11 + ($$0$i$i36 << 2) >> 2] = 0;
   $$0$i$i36 = $$0$i$i36 + 1 | 0;
  }
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAP32[$12 + 8 >> 2] = 0;
  $$0$i$i39 = 0;
  while (1) {
   if (($$0$i$i39 | 0) == 3) break;
   HEAP32[$12 + ($$0$i$i39 << 2) >> 2] = 0;
   $$0$i$i39 = $$0$i$i39 + 1 | 0;
  }
  __THREW__ = 0;
  invoke_viiiiiiiiii(3, $2 | 0, $45 | 0, $6 | 0, $7 | 0, $8 | 0, $9 | 0, $10 | 0, $11 | 0, $12 | 0, $13 | 0);
  $46 = __THREW__;
  __THREW__ = 0;
  if ($46 & 1) {
   $101 = ___cxa_find_matching_catch_2() | 0;
   $$1 = $101;
   $$133 = tempRet0;
  } else {
   $48 = HEAP8[$21 >> 0] | 0;
   $49 = $48 << 24 >> 24 < 0;
   $52 = $49 ? HEAP32[$24 >> 2] | 0 : $48 & 255;
   $53 = HEAP32[$13 >> 2] | 0;
   if (($52 | 0) > ($53 | 0)) {
    $58 = HEAP8[$12 + 11 >> 0] | 0;
    $65 = HEAP8[$11 + 11 >> 0] | 0;
    $$sink62 = $65 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $65 & 255;
    $$sink63 = $53 + 1 + ($52 - $53 << 1) | 0;
    $$sink64 = $58 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $58 & 255;
   } else {
    $74 = HEAP8[$12 + 11 >> 0] | 0;
    $81 = HEAP8[$11 + 11 >> 0] | 0;
    $$sink62 = $81 << 24 >> 24 < 0 ? HEAP32[$11 + 4 >> 2] | 0 : $81 & 255;
    $$sink63 = $53 + 2 | 0;
    $$sink64 = $74 << 24 >> 24 < 0 ? HEAP32[$12 + 4 >> 2] | 0 : $74 & 255;
   }
   $89 = $$sink63 + $$sink64 + $$sink62 | 0;
   if ($89 >>> 0 > 100) {
    $91 = _malloc($89) | 0;
    $92 = $91;
    if (!$91) {
     __THREW__ = 0;
     invoke_v(5);
     __THREW__ = 0;
     $95 = ___cxa_find_matching_catch_2() | 0;
     $$0 = $95;
     $$032 = tempRet0;
     $$sroa$052$1 = $92;
    } else {
     $$031 = $91;
     $$sroa$052$0 = $92;
     label = 24;
    }
   } else {
    $$031 = $14;
    $$sroa$052$0 = 0;
    label = 24;
   }
   if ((label | 0) == 24) {
    $106 = $49 ? HEAP32[$5 >> 2] | 0 : $5;
    __THREW__ = 0;
    invoke_viiiiiiiiiiiiiii(1, $$031 | 0, $15 | 0, $16 | 0, HEAP32[$3 + 4 >> 2] | 0, $106 | 0, $106 + $52 | 0, $18 | 0, $45 | 0, $7 | 0, HEAP8[$8 >> 0] | 0, HEAP8[$9 >> 0] | 0, $10 | 0, $11 | 0, $12 | 0, $53 | 0);
    $110 = __THREW__;
    __THREW__ = 0;
    if (!($110 & 1)) {
     HEAP32[$17 >> 2] = HEAP32[$1 >> 2];
     $113 = HEAP32[$15 >> 2] | 0;
     $114 = HEAP32[$16 >> 2] | 0;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2];
     $115 = invoke_iiiiiii(39, $$byval_copy | 0, $$031 | 0, $113 | 0, $114 | 0, $3 | 0, $4 | 0) | 0;
     $116 = __THREW__;
     __THREW__ = 0;
     if (!($116 & 1)) {
      if ($$sroa$052$0 | 0) _free($$sroa$052$0);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
      __ZNSt3__26localeD2Ev($6);
      STACKTOP = sp;
      return $115 | 0;
     }
    }
    $120 = ___cxa_find_matching_catch_2() | 0;
    $$0 = $120;
    $$032 = tempRet0;
    $$sroa$052$1 = $$sroa$052$0;
   }
   if ($$sroa$052$1 | 0) _free($$sroa$052$1);
   $$1 = $$0;
   $$133 = $$032;
  }
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($12);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($11);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
  $$3 = $$1;
  $$335 = $$133;
 } while (0);
 __ZNSt3__26localeD2Ev($6);
 ___resumeException($$3 | 0);
 return 0;
}

function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $98 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $4 = HEAP32[tempDoublePtr >> 2] | 0;
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $8 = $6 & 2047;
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0;
 $14 = tempRet0;
 L1 : do if (($13 | 0) == 0 & ($14 | 0) == 0) label = 3; else {
  $18 = ___DOUBLE_BITS_97($1) | 0;
  $20 = tempRet0 & 2147483647;
  if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) label = 3; else {
   $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
   $30 = tempRet0;
   if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
   if (!$8) {
    $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $42 = tempRet0;
    if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
     $$073100 = 0;
     $49 = $41;
     $50 = $42;
     while (1) {
      $48 = $$073100 + -1 | 0;
      $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0;
      $50 = tempRet0;
      if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
       $$073$lcssa = $48;
       break;
      } else $$073100 = $48;
     }
    } else $$073$lcssa = 0;
    $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0;
    $$174 = $$073$lcssa;
    $87 = $59;
    $88 = tempRet0;
   } else {
    $$174 = $8;
    $87 = $2;
    $88 = $3 & 1048575 | 1048576;
   }
   if (!$11) {
    $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0;
    $65 = tempRet0;
    if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
     $$07194 = 0;
     $72 = $64;
     $73 = $65;
     while (1) {
      $71 = $$07194 + -1 | 0;
      $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0;
      $73 = tempRet0;
      if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
       $$071$lcssa = $71;
       break;
      } else $$07194 = $71;
     }
    } else $$071$lcssa = 0;
    $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0;
    $$172 = $$071$lcssa;
    $89 = $82;
    $90 = tempRet0;
   } else {
    $$172 = $11;
    $89 = $4;
    $90 = $5 & 1048575 | 1048576;
   }
   $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0;
   $92 = tempRet0;
   $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295;
   L25 : do if (($$174 | 0) > ($$172 | 0)) {
    $$27585 = $$174;
    $100 = $92;
    $158 = $97;
    $159 = $87;
    $160 = $88;
    $98 = $91;
    while (1) {
     if ($158) if (($98 | 0) == 0 & ($100 | 0) == 0) break; else {
      $104 = $98;
      $105 = $100;
     } else {
      $104 = $159;
      $105 = $160;
     }
     $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0;
     $107 = tempRet0;
     $108 = $$27585 + -1 | 0;
     $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0;
     $111 = tempRet0;
     $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295;
     if (($108 | 0) > ($$172 | 0)) {
      $$27585 = $108;
      $100 = $111;
      $158 = $116;
      $159 = $106;
      $160 = $107;
      $98 = $110;
     } else {
      $$275$lcssa = $108;
      $$lcssa = $116;
      $117 = $110;
      $119 = $111;
      $156 = $106;
      $157 = $107;
      break L25;
     }
    }
    $$070 = $0 * 0.0;
    break L1;
   } else {
    $$275$lcssa = $$174;
    $$lcssa = $97;
    $117 = $91;
    $119 = $92;
    $156 = $87;
    $157 = $88;
   } while (0);
   if ($$lcssa) if (($117 | 0) == 0 & ($119 | 0) == 0) {
    $$070 = $0 * 0.0;
    break;
   } else {
    $123 = $119;
    $125 = $117;
   } else {
    $123 = $157;
    $125 = $156;
   }
   if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
    $$37682 = $$275$lcssa;
    $130 = $125;
    $131 = $123;
    while (1) {
     $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0;
     $133 = tempRet0;
     $134 = $$37682 + -1 | 0;
     if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
      $$37682 = $134;
      $130 = $132;
      $131 = $133;
     } else {
      $$376$lcssa = $134;
      $141 = $132;
      $142 = $133;
      break;
     }
    }
   } else {
    $$376$lcssa = $$275$lcssa;
    $141 = $125;
    $142 = $123;
   }
   if (($$376$lcssa | 0) > 0) {
    $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0;
    $144 = tempRet0;
    $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0;
    $153 = $144 | tempRet0;
    $155 = $143 | $145;
   } else {
    $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0;
    $153 = tempRet0;
    $155 = $150;
   }
   HEAP32[tempDoublePtr >> 2] = $155;
   HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12;
   $$070 = +HEAPF64[tempDoublePtr >> 3];
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1;
  $$070 = $27 / $27;
 }
 return +$$070;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $101 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $127 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $54 = 0, $6 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $8 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 196 | 0;
 $4 = sp + 188 | 0;
 $5 = sp + 184 | 0;
 $6 = sp + 180 | 0;
 $7 = sp + 176 | 0;
 $8 = sp + 172 | 0;
 $9 = sp + 168 | 0;
 $11 = sp + 164 | 0;
 $12 = sp + 160 | 0;
 $13 = sp + 156 | 0;
 $14 = sp + 152 | 0;
 $16 = sp + 148 | 0;
 $17 = sp + 144 | 0;
 $18 = sp + 140 | 0;
 $20 = sp + 132 | 0;
 $21 = sp + 128 | 0;
 $22 = sp + 124 | 0;
 $23 = sp + 120 | 0;
 $24 = sp;
 $25 = sp + 116 | 0;
 $26 = sp + 112 | 0;
 $28 = sp + 108 | 0;
 $29 = sp + 104 | 0;
 $30 = sp + 100 | 0;
 $31 = sp + 96 | 0;
 $32 = sp + 92 | 0;
 $33 = sp + 88 | 0;
 $34 = sp + 84 | 0;
 $35 = sp + 80 | 0;
 $36 = sp + 76 | 0;
 $37 = sp + 72 | 0;
 $38 = sp + 68 | 0;
 $39 = sp + 64 | 0;
 $40 = sp + 60 | 0;
 $41 = sp + 56 | 0;
 $42 = sp + 52 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 44 | 0;
 $45 = sp + 40 | 0;
 $46 = sp + 20 | 0;
 $47 = sp + 16 | 0;
 $48 = sp + 12 | 0;
 HEAP32[$43 >> 2] = $0;
 HEAP32[$44 >> 2] = $1;
 $49 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $49;
 HEAP32[$41 >> 2] = (HEAP32[$42 >> 2] | 0) + 8;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$45 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$39 >> 2] = $49;
 $54 = HEAP32[$39 >> 2] | 0;
 $62 = (((HEAP32[$54 + 4 >> 2] | 0) - (HEAP32[$54 >> 2] | 0) | 0) / 12 | 0) + 1 | 0;
 HEAP32[$34 >> 2] = $49;
 HEAP32[$35 >> 2] = $62;
 $63 = HEAP32[$34 >> 2] | 0;
 HEAP32[$36 >> 2] = __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($63) | 0;
 if ((HEAP32[$35 >> 2] | 0) >>> 0 > (HEAP32[$36 >> 2] | 0) >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 HEAP32[$32 >> 2] = $63;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 $69 = HEAP32[$31 >> 2] | 0;
 HEAP32[$30 >> 2] = $69;
 HEAP32[$29 >> 2] = (HEAP32[$30 >> 2] | 0) + 8;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$37 >> 2] = ((HEAP32[HEAP32[$28 >> 2] >> 2] | 0) - (HEAP32[$69 >> 2] | 0) | 0) / 12 | 0;
 if ((HEAP32[$37 >> 2] | 0) >>> 0 >= (((HEAP32[$36 >> 2] | 0) >>> 0) / 2 | 0) >>> 0) HEAP32[$33 >> 2] = HEAP32[$36 >> 2]; else {
  HEAP32[$38 >> 2] = HEAP32[$37 >> 2] << 1;
  HEAP32[$25 >> 2] = $38;
  HEAP32[$26 >> 2] = $35;
  $87 = HEAP32[$25 >> 2] | 0;
  $88 = HEAP32[$26 >> 2] | 0;
  HEAP8[$24 >> 0] = HEAP8[sp + 200 >> 0] | 0;
  HEAP32[$22 >> 2] = $87;
  HEAP32[$23 >> 2] = $88;
  $89 = HEAP32[$22 >> 2] | 0;
  $90 = HEAP32[$23 >> 2] | 0;
  HEAP32[sp + 136 >> 2] = $24;
  HEAP32[$20 >> 2] = $89;
  HEAP32[$21 >> 2] = $90;
  HEAP32[$33 >> 2] = HEAP32[((HEAP32[HEAP32[$20 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$21 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$23 >> 2] | 0 : HEAP32[$22 >> 2] | 0) >> 2];
 }
 $100 = HEAP32[$33 >> 2] | 0;
 HEAP32[$18 >> 2] = $49;
 $101 = HEAP32[$18 >> 2] | 0;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($46, $100, ((HEAP32[$101 + 4 >> 2] | 0) - (HEAP32[$101 >> 2] | 0) | 0) / 12 | 0, HEAP32[$45 >> 2] | 0);
 $110 = HEAP32[$45 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$46 + 8 >> 2];
 $113 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$44 >> 2];
 $115 = HEAP32[$16 >> 2] | 0;
 HEAP32[$12 >> 2] = $110;
 HEAP32[$13 >> 2] = $113;
 HEAP32[$14 >> 2] = $115;
 $116 = HEAP32[$12 >> 2] | 0;
 $117 = HEAP32[$13 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$14 >> 2];
 $119 = HEAP32[$11 >> 2] | 0;
 HEAP8[sp + 8 >> 0] = HEAP8[sp + 201 >> 0] | 0;
 HEAP32[$7 >> 2] = $116;
 HEAP32[$8 >> 2] = $117;
 HEAP32[$9 >> 2] = $119;
 $120 = HEAP32[$7 >> 2] | 0;
 $121 = HEAP32[$8 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 $123 = HEAP32[$6 >> 2] | 0;
 HEAP32[sp + 192 >> 2] = $120;
 HEAP32[$4 >> 2] = $121;
 HEAP32[$5 >> 2] = $123;
 $124 = HEAP32[$4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
 __THREW__ = 0;
 invoke_vii(55, $124 | 0, HEAP32[$2 >> 2] | 0);
 $127 = __THREW__;
 __THREW__ = 0;
 if ($127 & 1) {
  $134 = ___cxa_find_matching_catch_2() | 0;
  $135 = tempRet0;
  HEAP32[$47 >> 2] = $134;
  HEAP32[$48 >> 2] = $135;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  $136 = HEAP32[$47 >> 2] | 0;
  $137 = HEAP32[$48 >> 2] | 0;
  ___resumeException($136 | 0);
 }
 $129 = $46 + 8 | 0;
 HEAP32[$129 >> 2] = (HEAP32[$129 >> 2] | 0) + 12;
 __THREW__ = 0;
 invoke_vii(56, $49 | 0, $46 | 0);
 $132 = __THREW__;
 __THREW__ = 0;
 if ($132 & 1) {
  $134 = ___cxa_find_matching_catch_2() | 0;
  $135 = tempRet0;
  HEAP32[$47 >> 2] = $134;
  HEAP32[$48 >> 2] = $135;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  $136 = HEAP32[$47 >> 2] | 0;
  $137 = HEAP32[$48 >> 2] | 0;
  ___resumeException($136 | 0);
 } else {
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
  STACKTOP = sp;
  return;
 }
}

function _simple_code($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $9 = 0, $91 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 68 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 48 | 0;
 $16 = sp + 44 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 36 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 28 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 20 | 0;
 $23 = sp + 16 | 0;
 $24 = sp + 12 | 0;
 $25 = sp + 8 | 0;
 $26 = sp + 4 | 0;
 $27 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
 if ((HEAP32[$18 >> 2] | 0) == 1) {
  HEAP32[$9 >> 2] = 8;
  $226 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $226 | 0;
 }
 if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] | 0) >>> 0) {
  _lzma_bufcpy((HEAP32[$19 >> 2] | 0) + 80 | 0, (HEAP32[$19 >> 2] | 0) + 68 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
  if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = 0;
   $226 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $226 | 0;
  }
  if (HEAP8[(HEAP32[$19 >> 2] | 0) + 48 >> 0] & 1) {
   HEAP32[$9 >> 2] = 1;
   $226 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $226 | 0;
  }
 }
 HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] = 0;
 HEAP32[$20 >> 2] = (HEAP32[$17 >> 2] | 0) - (HEAP32[HEAP32[$16 >> 2] >> 2] | 0);
 HEAP32[$21 >> 2] = (HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] | 0) - (HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0);
 do if ((HEAP32[$21 >> 2] | 0) == 0 ? 1 : (HEAP32[$20 >> 2] | 0) >>> 0 > (HEAP32[$21 >> 2] | 0) >>> 0) {
  HEAP32[$22 >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
  _memcpy((HEAP32[$15 >> 2] | 0) + (HEAP32[HEAP32[$16 >> 2] >> 2] | 0) | 0, (HEAP32[$19 >> 2] | 0) + 80 + (HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) | 0, HEAP32[$21 >> 2] | 0) | 0;
  $91 = HEAP32[$16 >> 2] | 0;
  HEAP32[$91 >> 2] = (HEAP32[$91 >> 2] | 0) + (HEAP32[$21 >> 2] | 0);
  HEAP32[$23 >> 2] = _copy_or_code(HEAP32[$19 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
  if (HEAP32[$23 >> 2] | 0) {
   HEAP32[$9 >> 2] = HEAP32[$23 >> 2];
   $226 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $226 | 0;
  }
  HEAP32[$24 >> 2] = (HEAP32[HEAP32[$16 >> 2] >> 2] | 0) - (HEAP32[$22 >> 2] | 0);
  HEAP32[$25 >> 2] = _call_filter(HEAP32[$19 >> 2] | 0, (HEAP32[$15 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) | 0, HEAP32[$24 >> 2] | 0) | 0;
  HEAP32[$26 >> 2] = (HEAP32[$24 >> 2] | 0) - (HEAP32[$25 >> 2] | 0);
  HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] = 0;
  HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] = HEAP32[$26 >> 2];
  if (HEAP8[(HEAP32[$19 >> 2] | 0) + 48 >> 0] & 1) {
   HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] = 0;
   break;
  }
  if ((HEAP32[$26 >> 2] | 0) >>> 0 > 0) {
   $134 = HEAP32[$16 >> 2] | 0;
   HEAP32[$134 >> 2] = (HEAP32[$134 >> 2] | 0) - (HEAP32[$26 >> 2] | 0);
   _memcpy((HEAP32[$19 >> 2] | 0) + 80 | 0, (HEAP32[$15 >> 2] | 0) + (HEAP32[HEAP32[$16 >> 2] >> 2] | 0) | 0, HEAP32[$26 >> 2] | 0) | 0;
  }
 } else if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) >>> 0 > 0) {
  _memmove((HEAP32[$19 >> 2] | 0) + 80 | 0, (HEAP32[$19 >> 2] | 0) + 80 + (HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) | 0, HEAP32[$21 >> 2] | 0) | 0;
  $161 = (HEAP32[$19 >> 2] | 0) + 76 | 0;
  HEAP32[$161 >> 2] = (HEAP32[$161 >> 2] | 0) - (HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0);
  HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] = 0;
 } while (0);
 if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] | 0) >>> 0 > 0) {
  HEAP32[$27 >> 2] = _copy_or_code(HEAP32[$19 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 80 | 0, (HEAP32[$19 >> 2] | 0) + 76 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 64 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
  if (HEAP32[$27 >> 2] | 0) {
   HEAP32[$9 >> 2] = HEAP32[$27 >> 2];
   $226 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $226 | 0;
  }
  $193 = _call_filter(HEAP32[$19 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 80 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] = $193;
  if (HEAP8[(HEAP32[$19 >> 2] | 0) + 48 >> 0] & 1) HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] = HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2];
  _lzma_bufcpy((HEAP32[$19 >> 2] | 0) + 80 | 0, (HEAP32[$19 >> 2] | 0) + 68 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 72 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
 }
 if (HEAP8[(HEAP32[$19 >> 2] | 0) + 48 >> 0] & 1) if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 68 >> 2] | 0) == (HEAP32[(HEAP32[$19 >> 2] | 0) + 76 >> 2] | 0)) {
  HEAP32[$9 >> 2] = 1;
  $226 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $226 | 0;
 }
 HEAP32[$9 >> 2] = 0;
 $226 = HEAP32[$9 >> 2] | 0;
 STACKTOP = sp;
 return $226 | 0;
}

function _lzma_decoder_reset($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $215 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $80 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28300 >> 2] = (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2]) - 1;
 _literal_init_701(HEAP32[$4 >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] | 0);
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28304 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28308 >> 2] = (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2]) - 1;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28280 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28284 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28288 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28292 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28296 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28300 >> 2] = (1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2]) - 1;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28268 >> 2] = -1;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28268 + 4 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28268 + 8 >> 2] = 5;
 HEAP32[$6 >> 2] = 0;
 while (1) {
  if ((HEAP32[$6 >> 2] | 0) >>> 0 >= 12) break;
  HEAP32[$7 >> 2] = 0;
  while (1) {
   $80 = HEAP32[$4 >> 2] | 0;
   if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$4 >> 2] | 0) + 28300 >> 2] | 0) >>> 0) break;
   HEAP16[$80 + 24576 + (HEAP32[$6 >> 2] << 5) + (HEAP32[$7 >> 2] << 1) >> 1] = 1024;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 25056 + (HEAP32[$6 >> 2] << 5) + (HEAP32[$7 >> 2] << 1) >> 1] = 1024;
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
  }
  HEAP16[$80 + 24960 + (HEAP32[$6 >> 2] << 1) >> 1] = 1024;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 24984 + (HEAP32[$6 >> 2] << 1) >> 1] = 1024;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 25008 + (HEAP32[$6 >> 2] << 1) >> 1] = 1024;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 25032 + (HEAP32[$6 >> 2] << 1) >> 1] = 1024;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 HEAP32[$8 >> 2] = 0;
 while (1) {
  if ((HEAP32[$8 >> 2] | 0) >>> 0 >= 4) break;
  HEAP32[$9 >> 2] = 0;
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) >>> 0 >= 64) break;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 25440 + (HEAP32[$8 >> 2] << 7) + (HEAP32[$9 >> 2] << 1) >> 1] = 1024;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
  }
  HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
 }
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if ((HEAP32[$10 >> 2] | 0) >>> 0 >= 114) break;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 25952 + (HEAP32[$10 >> 2] << 1) >> 1] = 1024;
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
 }
 HEAP32[$11 >> 2] = 0;
 while (1) {
  if ((HEAP32[$11 >> 2] | 0) >>> 0 >= 16) break;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 26180 + (HEAP32[$11 >> 2] << 1) >> 1] = 1024;
  HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 1;
 }
 HEAP32[$12 >> 2] = 1 << HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2];
 HEAP16[(HEAP32[$4 >> 2] | 0) + 26212 >> 1] = 1024;
 HEAP16[(HEAP32[$4 >> 2] | 0) + 26212 + 2 >> 1] = 1024;
 HEAP16[(HEAP32[$4 >> 2] | 0) + 27240 >> 1] = 1024;
 HEAP16[(HEAP32[$4 >> 2] | 0) + 27240 + 2 >> 1] = 1024;
 HEAP32[$13 >> 2] = 0;
 while (1) {
  if ((HEAP32[$13 >> 2] | 0) >>> 0 >= (HEAP32[$12 >> 2] | 0) >>> 0) break;
  HEAP32[$14 >> 2] = 0;
  while (1) {
   if ((HEAP32[$14 >> 2] | 0) >>> 0 >= 8) break;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 26212 + 4 + (HEAP32[$13 >> 2] << 4) + (HEAP32[$14 >> 2] << 1) >> 1] = 1024;
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
  }
  HEAP32[$15 >> 2] = 0;
  while (1) {
   if ((HEAP32[$15 >> 2] | 0) >>> 0 >= 8) break;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 26212 + 260 + (HEAP32[$13 >> 2] << 4) + (HEAP32[$15 >> 2] << 1) >> 1] = 1024;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
  }
  HEAP32[$16 >> 2] = 0;
  while (1) {
   if ((HEAP32[$16 >> 2] | 0) >>> 0 >= 8) break;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 27240 + 4 + (HEAP32[$13 >> 2] << 4) + (HEAP32[$16 >> 2] << 1) >> 1] = 1024;
   HEAP32[$16 >> 2] = (HEAP32[$16 >> 2] | 0) + 1;
  }
  HEAP32[$17 >> 2] = 0;
  while (1) {
   if ((HEAP32[$17 >> 2] | 0) >>> 0 >= 8) break;
   HEAP16[(HEAP32[$4 >> 2] | 0) + 27240 + 260 + (HEAP32[$13 >> 2] << 4) + (HEAP32[$17 >> 2] << 1) >> 1] = 1024;
   HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
  }
  HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
 }
 HEAP32[$18 >> 2] = 0;
 while (1) {
  if ((HEAP32[$18 >> 2] | 0) >>> 0 >= 256) break;
  HEAP16[(HEAP32[$4 >> 2] | 0) + 26212 + 516 + (HEAP32[$18 >> 2] << 1) >> 1] = 1024;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
 }
 HEAP32[$19 >> 2] = 0;
 while (1) {
  $215 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$19 >> 2] | 0) >>> 0 >= 256) break;
  HEAP16[$215 + 27240 + 516 + (HEAP32[$19 >> 2] << 1) >> 1] = 1024;
  HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
 }
 HEAP32[$215 + 28320 >> 2] = 1;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28324 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28328 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28332 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28336 >> 2] = 0;
 HEAP32[(HEAP32[$4 >> 2] | 0) + 28340 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK3zim6Reader17get_clusterBufferENS_8offset_tENS_7zsize_tENS_15CompressionTypeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $$byval_copy7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $7 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy7 = sp + 72 | 0;
 $$byval_copy = sp + 56 | 0;
 $5 = sp + 116 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 108 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 92 | 0;
 $14 = sp + 88 | 0;
 $15 = sp + 84 | 0;
 $16 = sp + 32 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 16 | 0;
 $19 = sp + 8 | 0;
 $20 = sp;
 $21 = sp + 80 | 0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $4;
 $22 = HEAP32[$7 >> 2] | 0;
 $25 = HEAP32[(HEAP32[$22 >> 2] | 0) + 20 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$11 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2];
 HEAP32[$$byval_copy7 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 FUNCTION_TABLE_viiii[$25 & 31]($9, $22, $$byval_copy, $$byval_copy7);
 __ZN3zim7zsize_tC2Ey($12, 0, 0);
 HEAP32[$15 >> 2] = 0;
 L1 : do switch (HEAP32[$8 >> 2] | 0) {
 case 4:
  {
   HEAP32[$6 >> 2] = $9;
   $30 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0;
   $33 = HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] | 0;
   __THREW__ = 0;
   invoke_viii(16, $16 | 0, 0, 0);
   $34 = __THREW__;
   __THREW__ = 0;
   if (!($34 & 1)) {
    __THREW__ = 0;
    HEAP32[$$byval_copy7 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
    $36 = invoke_iii($33 | 0, $30 | 0, $$byval_copy7 | 0) | 0;
    $37 = __THREW__;
    __THREW__ = 0;
    if (!($37 & 1)) {
     HEAP32[$17 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$17 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     __THREW__ = 0;
     HEAP32[$$byval_copy7 >> 2] = HEAP32[$17 >> 2];
     HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
     $39 = invoke_iiii(42, $36 | 0, $$byval_copy7 | 0, $12 | 0) | 0;
     $40 = __THREW__;
     __THREW__ = 0;
     if (!($40 & 1)) {
      HEAP32[$15 >> 2] = $39;
      label = 14;
     }
    }
   }
   break;
  }
 case 2:
  {
   HEAP32[$5 >> 2] = $9;
   $43 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
   $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 8 >> 2] | 0;
   __THREW__ = 0;
   invoke_viii(16, $18 | 0, 0, 0);
   $47 = __THREW__;
   __THREW__ = 0;
   if (!($47 & 1)) {
    __THREW__ = 0;
    HEAP32[$$byval_copy7 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
    $49 = invoke_iii($46 | 0, $43 | 0, $$byval_copy7 | 0) | 0;
    $50 = __THREW__;
    __THREW__ = 0;
    if (!($50 & 1)) {
     HEAP32[$19 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$19 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
     __THREW__ = 0;
     HEAP32[$$byval_copy7 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
     $52 = invoke_iiii(43, $49 | 0, $$byval_copy7 | 0, $12 | 0) | 0;
     $53 = __THREW__;
     __THREW__ = 0;
     if (!($53 & 1)) {
      HEAP32[$15 >> 2] = $52;
      label = 14;
     }
    }
   }
   break;
  }
 default:
  {
   $55 = ___cxa_allocate_exception(8) | 0;
   __THREW__ = 0;
   invoke_vii(49, $55 | 0, 50146);
   $56 = __THREW__;
   __THREW__ = 0;
   if (!($56 & 1)) {
    __THREW__ = 0;
    invoke_viii(11, $55 | 0, 42776, 176);
    __THREW__ = 0;
    break L1;
   }
   HEAP32[$13 >> 2] = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$14 >> 2] = tempRet0;
   ___cxa_free_exception($55 | 0);
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($9);
   $71 = HEAP32[$13 >> 2] | 0;
   $72 = HEAP32[$14 >> 2] | 0;
   ___resumeException($71 | 0);
  }
 } while (0);
 do if ((label | 0) == 14) {
  __THREW__ = 0;
  $61 = invoke_ii(79, 32) | 0;
  $62 = __THREW__;
  __THREW__ = 0;
  if (!($62 & 1)) {
   $64 = HEAP32[$15 >> 2] | 0;
   HEAP32[$20 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$20 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
   __THREW__ = 0;
   HEAP32[$$byval_copy7 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy7 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
   invoke_viii(12, $61 | 0, $64 | 0, $$byval_copy7 | 0);
   $65 = __THREW__;
   __THREW__ = 0;
   if ($65 & 1) {
    $69 = ___cxa_find_matching_catch_2() | 0;
    HEAP32[$13 >> 2] = $69;
    HEAP32[$14 >> 2] = tempRet0;
    __ZdlPv($61);
    __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($9);
    $71 = HEAP32[$13 >> 2] | 0;
    $72 = HEAP32[$14 >> 2] | 0;
    ___resumeException($71 | 0);
   } else {
    HEAP32[$21 >> 2] = 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy7 >> 2] = HEAP32[$21 >> 2];
    invoke_viii(21, $0 | 0, $61 | 0, $$byval_copy7 | 0);
    $67 = __THREW__;
    __THREW__ = 0;
    if ($67 & 1) break;
    __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($9);
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
 $27 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$13 >> 2] = $27;
 HEAP32[$14 >> 2] = tempRet0;
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($9);
 $71 = HEAP32[$13 >> 2] | 0;
 $72 = HEAP32[$14 >> 2] | 0;
 ___resumeException($71 | 0);
}

function __ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i33 = 0, $$0$i29 = 0, $$016$i = 0, $$017$i = 0, $$019$i = 0, $$020$i = 0, $$2 = 0, $$224 = 0, $10 = 0, $102 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $38 = 0, $39 = 0, $45 = 0, $51 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $86 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi46$index = 0, $lpad$phi46$index3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $6 = sp + 216 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 212 | 0;
 $9 = sp + 208 | 0;
 $10 = sp + 200 | 0;
 $11 = sp;
 $12 = sp + 192 | 0;
 $13 = sp + 188 | 0;
 $14 = sp + 176 | 0;
 $15 = sp + 168 | 0;
 $16 = sp + 160 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$14 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$14 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 HEAP32[$15 + 4 >> 2] = 0;
 HEAP32[$15 >> 2] = 47200;
 $22 = HEAP8[$5 + 8 + 3 >> 0] | 0;
 $23 = $22 << 24 >> 24 < 0;
 $28 = $23 ? HEAP32[$5 >> 2] | 0 : $5;
 $30 = $28 + (($23 ? HEAP32[$5 + 4 >> 2] | 0 : $22 & 255) << 2) | 0;
 $31 = $7 + 32 | 0;
 $$016$i = $28;
 $$017$i = 0;
 L5 : while (1) {
  if (!(($$017$i | 0) != 2 & $$016$i >>> 0 < $30 >>> 0)) {
   label = 14;
   break;
  }
  HEAP32[$9 >> 2] = $$016$i;
  __THREW__ = 0;
  $38 = invoke_iiiiiiiii(HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] | 0, $15 | 0, $6 | 0, $$016$i | 0, $30 | 0, $9 | 0, $7 | 0, $31 | 0, $8 | 0) | 0;
  $39 = __THREW__;
  __THREW__ = 0;
  if ($39 & 1) {
   label = 16;
   break;
  }
  if (($38 | 0) == 2 ? 1 : (HEAP32[$9 >> 2] | 0) == ($$016$i | 0)) {
   label = 9;
   break;
  }
  $$0$i29 = $7;
  while (1) {
   if ($$0$i29 >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) break;
   __THREW__ = 0;
   invoke_vii(47, $14 | 0, HEAP8[$$0$i29 >> 0] | 0);
   $51 = __THREW__;
   __THREW__ = 0;
   if ($51 & 1) {
    label = 15;
    break L5;
   }
   $$0$i29 = $$0$i29 + 1 | 0;
  }
  $$016$i = HEAP32[$9 >> 2] | 0;
  $$017$i = $38;
 }
 if ((label | 0) == 9) {
  __THREW__ = 0;
  invoke_vi(192, 54113);
  __THREW__ = 0;
  $45 = ___cxa_find_matching_catch_2() | 0;
  $lpad$phi46$index = $45;
  $lpad$phi46$index3 = tempRet0;
  label = 17;
 } else if ((label | 0) == 14) {
  __ZNSt3__26locale5facetD2Ev($15);
  $62 = (HEAP8[$14 + 11 >> 0] | 0) < 0 ? HEAP32[$14 >> 2] | 0 : $14;
  $63 = _catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, $62) | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $$0$i$i33 = 0;
  while (1) {
   if (($$0$i$i33 | 0) == 3) break;
   HEAP32[$0 + ($$0$i$i33 << 2) >> 2] = 0;
   $$0$i$i33 = $$0$i$i33 + 1 | 0;
  }
  HEAP32[$16 + 4 >> 2] = 0;
  HEAP32[$16 >> 2] = 47248;
  $72 = $62 + (_strlen($63) | 0) | 0;
  $73 = $72;
  $74 = $11 + 128 | 0;
  $$019$i = $62;
  $$020$i = 0;
  L21 : while (1) {
   if (!(($$020$i | 0) != 2 & $$019$i >>> 0 < $72 >>> 0)) {
    label = 30;
    break;
   }
   HEAP32[$13 >> 2] = $$019$i;
   __THREW__ = 0;
   $86 = invoke_iiiiiiiii(HEAP32[(HEAP32[$16 >> 2] | 0) + 16 >> 2] | 0, $16 | 0, $10 | 0, $$019$i | 0, (($73 - $$019$i | 0) > 32 ? $$019$i + 32 | 0 : $72) | 0, $13 | 0, $11 | 0, $74 | 0, $12 | 0) | 0;
   $87 = __THREW__;
   __THREW__ = 0;
   if ($87 & 1) {
    label = 32;
    break;
   }
   if (($86 | 0) == 2 ? 1 : (HEAP32[$13 >> 2] | 0) == ($$019$i | 0)) {
    label = 25;
    break;
   }
   $$0$i = $11;
   while (1) {
    if ($$0$i >>> 0 >= (HEAP32[$12 >> 2] | 0) >>> 0) break;
    __THREW__ = 0;
    invoke_vii(89, $0 | 0, HEAP32[$$0$i >> 2] | 0);
    $99 = __THREW__;
    __THREW__ = 0;
    if ($99 & 1) {
     label = 31;
     break L21;
    }
    $$0$i = $$0$i + 4 | 0;
   }
   $$019$i = HEAP32[$13 >> 2] | 0;
   $$020$i = $86;
  }
  if ((label | 0) == 25) {
   __THREW__ = 0;
   invoke_vi(192, 54113);
   __THREW__ = 0;
   $93 = ___cxa_find_matching_catch_2() | 0;
   $lpad$phi$index = $93;
   $lpad$phi$index10 = tempRet0;
  } else if ((label | 0) == 30) {
   __ZNSt3__26locale5facetD2Ev($16);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
   STACKTOP = sp;
   return;
  } else if ((label | 0) == 31) {
   $102 = ___cxa_find_matching_catch_2() | 0;
   $lpad$phi$index = $102;
   $lpad$phi$index10 = tempRet0;
  } else if ((label | 0) == 32) {
   $104 = ___cxa_find_matching_catch_2() | 0;
   $lpad$phi$index = $104;
   $lpad$phi$index10 = tempRet0;
  }
  __ZNSt3__26locale5facetD2Ev($16);
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0);
  $$2 = $lpad$phi$index;
  $$224 = $lpad$phi$index10;
 } else if ((label | 0) == 15) {
  $64 = ___cxa_find_matching_catch_2() | 0;
  $lpad$phi46$index = $64;
  $lpad$phi46$index3 = tempRet0;
  label = 17;
 } else if ((label | 0) == 16) {
  $66 = ___cxa_find_matching_catch_2() | 0;
  $lpad$phi46$index = $66;
  $lpad$phi46$index3 = tempRet0;
  label = 17;
 }
 if ((label | 0) == 17) {
  __ZNSt3__26locale5facetD2Ev($15);
  $$2 = $lpad$phi46$index;
  $$224 = $lpad$phi46$index3;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 ___resumeException($$2 | 0);
}

function _ia64_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $100 = 0, $106 = 0, $11 = 0, $112 = 0, $118 = 0, $12 = 0, $124 = 0, $127 = 0, $13 = 0, $133 = 0, $136 = 0, $14 = 0, $15 = 0, $156 = 0, $16 = 0, $163 = 0, $164 = 0, $17 = 0, $170 = 0, $172 = 0, $179 = 0, $18 = 0, $180 = 0, $186 = 0, $188 = 0, $19 = 0, $195 = 0, $196 = 0, $20 = 0, $202 = 0, $205 = 0, $21 = 0, $212 = 0, $213 = 0, $217 = 0, $22 = 0, $224 = 0, $226 = 0, $233 = 0, $234 = 0, $240 = 0, $248 = 0, $48 = 0, $6 = 0, $65 = 0, $67 = 0, $7 = 0, $73 = 0, $75 = 0, $8 = 0, $81 = 0, $88 = 0, $9 = 0, $90 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 64 | 0;
 $9 = sp + 60 | 0;
 $10 = sp + 56 | 0;
 $11 = sp + 52 | 0;
 $12 = sp + 48 | 0;
 $13 = sp + 44 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 36 | 0;
 $16 = sp + 32 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 28 | 0;
 $19 = sp;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 HEAP32[sp + 72 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP8[$7 >> 0] = $2 & 1;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if (((HEAP32[$10 >> 2] | 0) + 16 | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) break;
  HEAP32[$11 >> 2] = (HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) & 31;
  HEAP32[$12 >> 2] = HEAP32[13952 + (HEAP32[$11 >> 2] << 2) >> 2];
  HEAP32[$13 >> 2] = 5;
  HEAP32[$14 >> 2] = 0;
  while (1) {
   if ((HEAP32[$14 >> 2] | 0) >>> 0 >= 3) break;
   L7 : do if ((HEAP32[$12 >> 2] | 0) >>> (HEAP32[$14 >> 2] | 0) & 1 | 0) {
    HEAP32[$15 >> 2] = (HEAP32[$13 >> 2] | 0) >>> 3;
    HEAP32[$16 >> 2] = HEAP32[$13 >> 2] & 7;
    $48 = $17;
    HEAP32[$48 >> 2] = 0;
    HEAP32[$48 + 4 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    while (1) {
     if ((HEAP32[$18 >> 2] | 0) >>> 0 >= 6) break;
     $65 = _bitshift64Shl(HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + (HEAP32[$18 >> 2] | 0) + (HEAP32[$15 >> 2] | 0)) >> 0] | 0 | 0, 0, HEAP32[$18 >> 2] << 3 | 0) | 0;
     $67 = $17;
     $73 = _i64Add(HEAP32[$67 >> 2] | 0, HEAP32[$67 + 4 >> 2] | 0, $65 | 0, tempRet0 | 0) | 0;
     $75 = $17;
     HEAP32[$75 >> 2] = $73;
     HEAP32[$75 + 4 >> 2] = tempRet0;
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
    }
    $81 = $17;
    $88 = _bitshift64Lshr(HEAP32[$81 >> 2] | 0, HEAP32[$81 + 4 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
    $90 = $19;
    HEAP32[$90 >> 2] = $88;
    HEAP32[$90 + 4 >> 2] = tempRet0;
    $94 = $19;
    $100 = _bitshift64Lshr(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, 37) | 0;
    if (($100 & 15 | 0) == 5 & 0 == 0) {
     $106 = $19;
     $112 = _bitshift64Lshr(HEAP32[$106 >> 2] | 0, HEAP32[$106 + 4 >> 2] | 0, 9) | 0;
     if (($112 & 7 | 0) == 0 & 0 == 0) {
      $118 = $19;
      $124 = _bitshift64Lshr(HEAP32[$118 >> 2] | 0, HEAP32[$118 + 4 >> 2] | 0, 13) | 0;
      HEAP32[$20 >> 2] = $124 & 1048575;
      $127 = $19;
      $133 = _bitshift64Lshr(HEAP32[$127 >> 2] | 0, HEAP32[$127 + 4 >> 2] | 0, 36) | 0;
      $136 = _bitshift64Shl($133 & 1 | 0, 0, 20) | 0;
      HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | $136;
      HEAP32[$20 >> 2] = HEAP32[$20 >> 2] << 4;
      if (HEAP8[$7 >> 0] & 1) HEAP32[$21 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + (HEAP32[$20 >> 2] | 0); else HEAP32[$21 >> 2] = (HEAP32[$20 >> 2] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0));
      HEAP32[$21 >> 2] = (HEAP32[$21 >> 2] | 0) >>> 4;
      $156 = $19;
      $163 = HEAP32[$156 + 4 >> 2] & -18;
      $164 = $19;
      HEAP32[$164 >> 2] = HEAP32[$156 >> 2] & 8191;
      HEAP32[$164 + 4 >> 2] = $163;
      $170 = _bitshift64Shl(HEAP32[$21 >> 2] & 1048575 | 0, 0, 13) | 0;
      $172 = $19;
      $179 = HEAP32[$172 + 4 >> 2] | tempRet0;
      $180 = $19;
      HEAP32[$180 >> 2] = HEAP32[$172 >> 2] | $170;
      HEAP32[$180 + 4 >> 2] = $179;
      $186 = _bitshift64Shl(HEAP32[$21 >> 2] & 1048576 | 0, 0, 16) | 0;
      $188 = $19;
      $195 = HEAP32[$188 + 4 >> 2] | tempRet0;
      $196 = $19;
      HEAP32[$196 >> 2] = HEAP32[$188 >> 2] | $186;
      HEAP32[$196 + 4 >> 2] = $195;
      $202 = (1 << HEAP32[$16 >> 2]) - 1 | 0;
      $205 = $17;
      $212 = HEAP32[$205 + 4 >> 2] & (($202 | 0) < 0) << 31 >> 31;
      $213 = $17;
      HEAP32[$213 >> 2] = HEAP32[$205 >> 2] & $202;
      HEAP32[$213 + 4 >> 2] = $212;
      $217 = $19;
      $224 = _bitshift64Shl(HEAP32[$217 >> 2] | 0, HEAP32[$217 + 4 >> 2] | 0, HEAP32[$16 >> 2] | 0) | 0;
      $226 = $17;
      $233 = HEAP32[$226 + 4 >> 2] | tempRet0;
      $234 = $17;
      HEAP32[$234 >> 2] = HEAP32[$226 >> 2] | $224;
      HEAP32[$234 + 4 >> 2] = $233;
      HEAP32[$22 >> 2] = 0;
      while (1) {
       if ((HEAP32[$22 >> 2] | 0) >>> 0 >= 6) break L7;
       $240 = $17;
       $248 = _bitshift64Lshr(HEAP32[$240 >> 2] | 0, HEAP32[$240 + 4 >> 2] | 0, HEAP32[$22 >> 2] << 3 | 0) | 0;
       HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + (HEAP32[$22 >> 2] | 0) + (HEAP32[$15 >> 2] | 0)) >> 0] = $248;
       HEAP32[$22 >> 2] = (HEAP32[$22 >> 2] | 0) + 1;
      }
     }
    }
   } while (0);
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 41;
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 16;
 }
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE6getptrERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $73 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $2 = sp + 228 | 0;
 $3 = sp + 224 | 0;
 $4 = sp + 220 | 0;
 $5 = sp + 216 | 0;
 $6 = sp + 212 | 0;
 $7 = sp + 208 | 0;
 $8 = sp + 204 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp + 192 | 0;
 $12 = sp + 188 | 0;
 $13 = sp + 184 | 0;
 $14 = sp + 180 | 0;
 $15 = sp + 176 | 0;
 $16 = sp + 172 | 0;
 $17 = sp + 168 | 0;
 $18 = sp + 164 | 0;
 $19 = sp + 160 | 0;
 $20 = sp + 156 | 0;
 $21 = sp + 152 | 0;
 $22 = sp + 148 | 0;
 $23 = sp + 144 | 0;
 $24 = sp + 140 | 0;
 $25 = sp + 136 | 0;
 $26 = sp + 132 | 0;
 $27 = sp + 128 | 0;
 $28 = sp + 124 | 0;
 $29 = sp + 120 | 0;
 $30 = sp + 116 | 0;
 $31 = sp + 112 | 0;
 $32 = sp + 108 | 0;
 $33 = sp + 104 | 0;
 $34 = sp + 100 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 96 | 0;
 $37 = sp + 92 | 0;
 $38 = sp + 88 | 0;
 $39 = sp + 84 | 0;
 $40 = sp + 80 | 0;
 $41 = sp + 76 | 0;
 $42 = sp + 72 | 0;
 $43 = sp + 68 | 0;
 $44 = sp + 64 | 0;
 $45 = sp + 60 | 0;
 $46 = sp + 56 | 0;
 $47 = sp + 52 | 0;
 $48 = sp + 48 | 0;
 $49 = sp;
 $50 = sp + 44 | 0;
 $51 = sp + 40 | 0;
 $52 = sp + 36 | 0;
 $53 = sp + 32 | 0;
 $54 = sp + 28 | 0;
 $55 = sp + 24 | 0;
 $56 = sp + 20 | 0;
 $57 = sp + 16 | 0;
 $58 = sp + 12 | 0;
 HEAP32[$55 >> 2] = $0;
 HEAP32[$56 >> 2] = $1;
 $59 = HEAP32[$55 >> 2] | 0;
 $60 = HEAP32[$56 >> 2] | 0;
 HEAP32[$51 >> 2] = $59;
 HEAP32[$52 >> 2] = $60;
 HEAP32[$53 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE4findIS3_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_(HEAP32[$51 >> 2] | 0, HEAP32[$52 >> 2] | 0) | 0;
 HEAP8[$49 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$49 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 HEAP8[$49 + 2 >> 0] = HEAP8[$53 + 2 >> 0] | 0;
 HEAP8[$49 + 3 >> 0] = HEAP8[$53 + 3 >> 0] | 0;
 HEAP32[$48 >> 2] = $50;
 HEAP32[HEAP32[$48 >> 2] >> 2] = HEAP32[$49 >> 2];
 HEAP32[$57 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$46 >> 2] = $59;
 HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$42 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$41 >> 2] = (HEAP32[$42 >> 2] | 0) + 4;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 $73 = HEAP32[$38 >> 2] | 0;
 HEAP32[$36 >> 2] = $43;
 HEAP32[$37 >> 2] = $73;
 HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$37 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$43 >> 2];
 HEAP8[$35 >> 0] = HEAP8[$47 >> 0] | 0;
 HEAP8[$35 + 1 >> 0] = HEAP8[$47 + 1 >> 0] | 0;
 HEAP8[$35 + 2 >> 0] = HEAP8[$47 + 2 >> 0] | 0;
 HEAP8[$35 + 3 >> 0] = HEAP8[$47 + 3 >> 0] | 0;
 HEAP32[$34 >> 2] = $45;
 HEAP32[HEAP32[$34 >> 2] >> 2] = HEAP32[$35 >> 2];
 HEAP32[$58 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$25 >> 2] = $57;
 HEAP32[$26 >> 2] = $58;
 $80 = HEAP32[$26 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$24 >> 2] = $80;
 if ((HEAP32[HEAP32[$23 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$24 >> 2] >> 2] | 0)) {
  HEAP32[$54 >> 2] = 0;
  $131 = HEAP32[$54 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $86 = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($59) | 0;
 HEAP32[$8 >> 2] = $57;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 16;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] = $86;
 HEAP32[$15 >> 2] = $57;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) + 16;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 if (!(HEAP8[(HEAP32[$9 >> 2] | 0) + 4 >> 0] & 1)) {
  HEAP32[$22 >> 2] = $57;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$19 >> 2] = (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) + 16;
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP8[(HEAP32[$16 >> 2] | 0) + 4 >> 0] = 1;
  __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_makeLooserEv($59);
 }
 HEAP32[$33 >> 2] = $57;
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$30 >> 2] = (HEAP32[HEAP32[$31 >> 2] >> 2] | 0) + 16;
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$54 >> 2] = (HEAP32[$27 >> 2] | 0) + 4 + 8;
 $131 = HEAP32[$54 >> 2] | 0;
 STACKTOP = sp;
 return $131 | 0;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE6getptrERKS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $73 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $2 = sp + 228 | 0;
 $3 = sp + 224 | 0;
 $4 = sp + 220 | 0;
 $5 = sp + 216 | 0;
 $6 = sp + 212 | 0;
 $7 = sp + 208 | 0;
 $8 = sp + 204 | 0;
 $9 = sp + 200 | 0;
 $10 = sp + 196 | 0;
 $11 = sp + 192 | 0;
 $12 = sp + 188 | 0;
 $13 = sp + 184 | 0;
 $14 = sp + 180 | 0;
 $15 = sp + 176 | 0;
 $16 = sp + 172 | 0;
 $17 = sp + 168 | 0;
 $18 = sp + 164 | 0;
 $19 = sp + 160 | 0;
 $20 = sp + 156 | 0;
 $21 = sp + 152 | 0;
 $22 = sp + 148 | 0;
 $23 = sp + 144 | 0;
 $24 = sp + 140 | 0;
 $25 = sp + 136 | 0;
 $26 = sp + 132 | 0;
 $27 = sp + 128 | 0;
 $28 = sp + 124 | 0;
 $29 = sp + 120 | 0;
 $30 = sp + 116 | 0;
 $31 = sp + 112 | 0;
 $32 = sp + 108 | 0;
 $33 = sp + 104 | 0;
 $34 = sp + 100 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 96 | 0;
 $37 = sp + 92 | 0;
 $38 = sp + 88 | 0;
 $39 = sp + 84 | 0;
 $40 = sp + 80 | 0;
 $41 = sp + 76 | 0;
 $42 = sp + 72 | 0;
 $43 = sp + 68 | 0;
 $44 = sp + 64 | 0;
 $45 = sp + 60 | 0;
 $46 = sp + 56 | 0;
 $47 = sp + 52 | 0;
 $48 = sp + 48 | 0;
 $49 = sp;
 $50 = sp + 44 | 0;
 $51 = sp + 40 | 0;
 $52 = sp + 36 | 0;
 $53 = sp + 32 | 0;
 $54 = sp + 28 | 0;
 $55 = sp + 24 | 0;
 $56 = sp + 20 | 0;
 $57 = sp + 16 | 0;
 $58 = sp + 12 | 0;
 HEAP32[$55 >> 2] = $0;
 HEAP32[$56 >> 2] = $1;
 $59 = HEAP32[$55 >> 2] | 0;
 $60 = HEAP32[$56 >> 2] | 0;
 HEAP32[$51 >> 2] = $59;
 HEAP32[$52 >> 2] = $60;
 HEAP32[$53 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE4findIS3_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_(HEAP32[$51 >> 2] | 0, HEAP32[$52 >> 2] | 0) | 0;
 HEAP8[$49 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$49 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 HEAP8[$49 + 2 >> 0] = HEAP8[$53 + 2 >> 0] | 0;
 HEAP8[$49 + 3 >> 0] = HEAP8[$53 + 3 >> 0] | 0;
 HEAP32[$48 >> 2] = $50;
 HEAP32[HEAP32[$48 >> 2] >> 2] = HEAP32[$49 >> 2];
 HEAP32[$57 >> 2] = HEAP32[$50 >> 2];
 HEAP32[$46 >> 2] = $59;
 HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$42 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$41 >> 2] = (HEAP32[$42 >> 2] | 0) + 4;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 $73 = HEAP32[$38 >> 2] | 0;
 HEAP32[$36 >> 2] = $43;
 HEAP32[$37 >> 2] = $73;
 HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$37 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$43 >> 2];
 HEAP8[$35 >> 0] = HEAP8[$47 >> 0] | 0;
 HEAP8[$35 + 1 >> 0] = HEAP8[$47 + 1 >> 0] | 0;
 HEAP8[$35 + 2 >> 0] = HEAP8[$47 + 2 >> 0] | 0;
 HEAP8[$35 + 3 >> 0] = HEAP8[$47 + 3 >> 0] | 0;
 HEAP32[$34 >> 2] = $45;
 HEAP32[HEAP32[$34 >> 2] >> 2] = HEAP32[$35 >> 2];
 HEAP32[$58 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$25 >> 2] = $57;
 HEAP32[$26 >> 2] = $58;
 $80 = HEAP32[$26 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$24 >> 2] = $80;
 if ((HEAP32[HEAP32[$23 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$24 >> 2] >> 2] | 0)) {
  HEAP32[$54 >> 2] = 0;
  $131 = HEAP32[$54 >> 2] | 0;
  STACKTOP = sp;
  return $131 | 0;
 }
 $86 = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($59) | 0;
 HEAP32[$8 >> 2] = $57;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 16;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 + 4 >> 2] = $86;
 HEAP32[$15 >> 2] = $57;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) + 16;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 if (!(HEAP8[(HEAP32[$9 >> 2] | 0) + 4 >> 0] & 1)) {
  HEAP32[$22 >> 2] = $57;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$19 >> 2] = (HEAP32[HEAP32[$20 >> 2] >> 2] | 0) + 16;
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP8[(HEAP32[$16 >> 2] | 0) + 4 >> 0] = 1;
  __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_makeLooserEv($59);
 }
 HEAP32[$33 >> 2] = $57;
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$30 >> 2] = (HEAP32[HEAP32[$31 >> 2] >> 2] | 0) + 16;
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$54 >> 2] = (HEAP32[$27 >> 2] | 0) + 4 + 8;
 $131 = HEAP32[$54 >> 2] | 0;
 STACKTOP = sp;
 return $131 | 0;
}

function _crc32_little($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $112 = 0, $138 = 0, $164 = 0, $17 = 0, $18 = 0, $190 = 0, $216 = 0, $246 = 0, $276 = 0, $277 = 0, $289 = 0, $291 = 0, $292 = 0, $293 = 0, $3 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $60 = 0, $7 = 0, $86 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$6 >> 2] = ~HEAP32[$6 >> 2];
 while (1) {
  if (!(HEAP32[$5 >> 2] | 0)) break;
  if (!(HEAP32[$4 >> 2] & 3)) break;
  $17 = HEAP32[$6 >> 2] | 0;
  $18 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $18 + 1;
  HEAP32[$6 >> 2] = HEAP32[22624 + ((($17 ^ (HEAPU8[$18 >> 0] | 0)) & 255) << 2) >> 2] ^ (HEAP32[$6 >> 2] | 0) >>> 8;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
 }
 HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < 32) break;
  $34 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $34 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$34 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $60 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $60 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$60 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $86 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $86 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$86 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $112 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $112 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$112 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $138 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $138 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$138 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $164 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $164 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$164 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $190 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $190 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$190 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  $216 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $216 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$216 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 32;
 }
 while (1) {
  $246 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$5 >> 2] | 0) >>> 0 < 4) break;
  HEAP32[$7 >> 2] = $246 + 4;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[$246 >> 2];
  HEAP32[$6 >> 2] = HEAP32[25696 + ((HEAP32[$6 >> 2] & 255) << 2) >> 2] ^ HEAP32[24672 + (((HEAP32[$6 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[23648 + (((HEAP32[$6 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[22624 + ((HEAP32[$6 >> 2] | 0) >>> 24 << 2) >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) - 4;
 }
 HEAP32[$4 >> 2] = $246;
 if (!(HEAP32[$5 >> 2] | 0)) {
  $291 = HEAP32[$6 >> 2] | 0;
  $292 = ~$291;
  HEAP32[$6 >> 2] = $292;
  $293 = HEAP32[$6 >> 2] | 0;
  STACKTOP = sp;
  return $293 | 0;
 }
 do {
  $276 = HEAP32[$6 >> 2] | 0;
  $277 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $277 + 1;
  HEAP32[$6 >> 2] = HEAP32[22624 + ((($276 ^ (HEAPU8[$277 >> 0] | 0)) & 255) << 2) >> 2] ^ (HEAP32[$6 >> 2] | 0) >>> 8;
  $289 = (HEAP32[$5 >> 2] | 0) + -1 | 0;
  HEAP32[$5 >> 2] = $289;
 } while (($289 | 0) != 0);
 $291 = HEAP32[$6 >> 2] | 0;
 $292 = ~$291;
 HEAP32[$6 >> 2] = $292;
 $293 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $293 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $113 = 0, $115 = 0, $119 = 0, $12 = 0, $122 = 0, $126 = 0, $128 = 0, $13 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $74 = 0, $8 = 0, $81 = 0, $84 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $3 = sp + 212 | 0;
 $4 = sp + 208 | 0;
 $5 = sp + 204 | 0;
 $6 = sp + 200 | 0;
 $7 = sp + 196 | 0;
 $8 = sp + 192 | 0;
 $9 = sp + 188 | 0;
 $10 = sp + 184 | 0;
 $11 = sp + 180 | 0;
 $12 = sp + 176 | 0;
 $13 = sp + 172 | 0;
 $14 = sp + 168 | 0;
 $15 = sp + 164 | 0;
 $16 = sp + 160 | 0;
 $17 = sp + 156 | 0;
 $18 = sp + 152 | 0;
 $19 = sp + 148 | 0;
 $20 = sp + 144 | 0;
 $21 = sp + 140 | 0;
 $22 = sp + 136 | 0;
 $23 = sp + 132 | 0;
 $24 = sp + 128 | 0;
 $25 = sp + 124 | 0;
 $26 = sp + 120 | 0;
 $27 = sp + 116 | 0;
 $28 = sp + 112 | 0;
 $29 = sp + 108 | 0;
 $30 = sp + 104 | 0;
 $31 = sp + 100 | 0;
 $32 = sp + 96 | 0;
 $33 = sp + 92 | 0;
 $34 = sp + 88 | 0;
 $35 = sp + 84 | 0;
 $37 = sp + 76 | 0;
 $39 = sp + 72 | 0;
 $41 = sp + 68 | 0;
 $42 = sp + 64 | 0;
 $43 = sp + 60 | 0;
 $44 = sp + 56 | 0;
 $45 = sp + 52 | 0;
 $46 = sp + 48 | 0;
 $47 = sp + 44 | 0;
 $49 = sp + 40 | 0;
 $50 = sp + 36 | 0;
 $52 = sp + 32 | 0;
 $53 = sp + 28 | 0;
 $54 = sp + 24 | 0;
 $55 = sp + 20 | 0;
 $56 = sp + 16 | 0;
 $57 = sp + 12 | 0;
 $58 = sp + 216 | 0;
 HEAP32[$52 >> 2] = $0;
 HEAP32[$53 >> 2] = $1;
 HEAP32[$54 >> 2] = $2;
 $59 = HEAP32[$52 >> 2] | 0;
 $61 = HEAP32[$54 >> 2] | 0;
 HEAP32[$49 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$50 >> 2] = $61;
 $62 = HEAP32[$49 >> 2] | 0;
 $63 = HEAP32[$50 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 217 >> 0] | 0;
 HEAP32[$46 >> 2] = $62;
 HEAP32[$47 >> 2] = $63;
 HEAP32[$55 >> 2] = (HEAP32[$47 >> 2] | 0) - (HEAP32[$46 >> 2] | 0);
 $69 = HEAP32[$55 >> 2] | 0;
 HEAP32[$44 >> 2] = $59;
 HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$39 >> 2] = HEAP32[$41 >> 2];
 $74 = HEAP32[$39 >> 2] | 0;
 HEAP8[sp + 8 >> 0] = HEAP8[sp + 218 >> 0] | 0;
 HEAP32[$37 >> 2] = $74;
 HEAP32[sp + 80 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$45 >> 2] = -1;
 if ($69 >>> 0 > ((HEAP32[$45 >> 2] | 0) - 16 | 0) >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($59);
 $81 = HEAP32[$55 >> 2] | 0;
 if ((HEAP32[$55 >> 2] | 0) >>> 0 < 11) {
  HEAP32[$34 >> 2] = $59;
  HEAP32[$35 >> 2] = $81;
  $84 = HEAP32[$35 >> 2] & 255;
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
  HEAP8[(HEAP32[$32 >> 2] | 0) + 11 >> 0] = $84;
  HEAP32[$12 >> 2] = $59;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$56 >> 2] = HEAP32[$8 >> 2];
 } else {
  HEAP32[$4 >> 2] = $81;
  if ((HEAP32[$4 >> 2] | 0) >>> 0 < 11) $101 = 11; else {
   HEAP32[$3 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   $101 = (HEAP32[$3 >> 2] | 0) + 15 & -16;
  }
  HEAP32[$57 >> 2] = $101 - 1;
  HEAP32[$7 >> 2] = $59;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $106 = (HEAP32[$57 >> 2] | 0) + 1 | 0;
  HEAP32[$18 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$19 >> 2] = $106;
  $108 = HEAP32[$19 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = $108;
  HEAP32[$17 >> 2] = 0;
  HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$56 >> 2] = __Znwm(HEAP32[$13 >> 2] | 0) | 0;
  $113 = HEAP32[$56 >> 2] | 0;
  HEAP32[$22 >> 2] = $59;
  HEAP32[$23 >> 2] = $113;
  $115 = HEAP32[$23 >> 2] | 0;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[HEAP32[$20 >> 2] >> 2] = $115;
  $119 = (HEAP32[$57 >> 2] | 0) + 1 | 0;
  HEAP32[$26 >> 2] = $59;
  HEAP32[$27 >> 2] = $119;
  $122 = HEAP32[$27 >> 2] | -2147483648;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[(HEAP32[$24 >> 2] | 0) + 8 >> 2] = $122;
  $126 = HEAP32[$55 >> 2] | 0;
  HEAP32[$30 >> 2] = $59;
  HEAP32[$31 >> 2] = $126;
  $128 = HEAP32[$31 >> 2] | 0;
  HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
  HEAP32[(HEAP32[$28 >> 2] | 0) + 4 >> 2] = $128;
 }
 while (1) {
  $135 = HEAP32[$56 >> 2] | 0;
  if ((HEAP32[$53 >> 2] | 0) == (HEAP32[$54 >> 2] | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($135, HEAP32[$53 >> 2] | 0);
  HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + 1;
  HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) + 1;
 }
 HEAP8[$58 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($135, $58);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $110 = 0, $114 = 0, $12 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $60 = 0, $66 = 0, $67 = 0, $7 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $81 = 0, $85 = 0, $9 = 0, $95 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $1 = sp + 192 | 0;
 $2 = sp + 188 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 180 | 0;
 $5 = sp + 176 | 0;
 $6 = sp + 172 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 164 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = sp + 148 | 0;
 $13 = sp + 144 | 0;
 $14 = sp + 140 | 0;
 $15 = sp + 136 | 0;
 $16 = sp + 132 | 0;
 $17 = sp + 128 | 0;
 $18 = sp + 124 | 0;
 $19 = sp + 120 | 0;
 $20 = sp + 116 | 0;
 $21 = sp + 112 | 0;
 $22 = sp + 108 | 0;
 $23 = sp + 104 | 0;
 $24 = sp + 100 | 0;
 $25 = sp + 96 | 0;
 $26 = sp + 92 | 0;
 $27 = sp + 88 | 0;
 $28 = sp + 84 | 0;
 $29 = sp + 80 | 0;
 $30 = sp + 76 | 0;
 $31 = sp + 72 | 0;
 $32 = sp + 68 | 0;
 $33 = sp + 64 | 0;
 $34 = sp + 60 | 0;
 $35 = sp + 56 | 0;
 $36 = sp + 52 | 0;
 $37 = sp + 48 | 0;
 $38 = sp + 44 | 0;
 $39 = sp + 40 | 0;
 $40 = sp + 36 | 0;
 $41 = sp + 32 | 0;
 $42 = sp + 28 | 0;
 $43 = sp + 24 | 0;
 $44 = sp + 16 | 0;
 $45 = sp + 8 | 0;
 $46 = sp + 4 | 0;
 $47 = sp;
 HEAP32[$42 >> 2] = $0;
 $48 = HEAP32[$42 >> 2] | 0;
 HEAP32[$43 >> 2] = 0;
 if (!(HEAP32[$48 + 64 >> 2] | 0)) {
  $128 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 HEAP32[$43 >> 2] = $48;
 $53 = HEAP32[$48 + 64 >> 2] | 0;
 HEAP32[$45 >> 2] = 88;
 HEAP32[$39 >> 2] = $44;
 HEAP32[$40 >> 2] = $53;
 HEAP32[$41 >> 2] = $45;
 $54 = HEAP32[$39 >> 2] | 0;
 HEAP32[$38 >> 2] = HEAP32[$41 >> 2];
 $56 = HEAP32[$38 >> 2] | 0;
 HEAP32[$35 >> 2] = $54;
 HEAP32[$36 >> 2] = $40;
 HEAP32[$37 >> 2] = $56;
 $57 = HEAP32[$35 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
 $59 = HEAP32[$34 >> 2] | 0;
 HEAP32[$28 >> 2] = $57;
 HEAP32[$29 >> 2] = $59;
 $60 = HEAP32[$28 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$60 >> 2] = HEAP32[HEAP32[$27 >> 2] >> 2];
 HEAP32[$30 >> 2] = HEAP32[$37 >> 2];
 $66 = HEAP32[$30 >> 2] | 0;
 HEAP32[$32 >> 2] = $57 + 4;
 HEAP32[$33 >> 2] = $66;
 $67 = HEAP32[$32 >> 2] | 0;
 HEAP32[$31 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$67 >> 2] = HEAP32[HEAP32[$31 >> 2] >> 2];
 __THREW__ = 0;
 $74 = invoke_ii(HEAP32[(HEAP32[$48 >> 2] | 0) + 24 >> 2] | 0, $48 | 0) | 0;
 $75 = __THREW__;
 __THREW__ = 0;
 if ($75 & 1) {
  $78 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$46 >> 2] = $78;
  HEAP32[$47 >> 2] = tempRet0;
  HEAP32[$16 >> 2] = $44;
  HEAP32[$13 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$14 >> 2] = 0;
  $81 = HEAP32[$13 >> 2] | 0;
  HEAP32[$12 >> 2] = $81;
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$15 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  $85 = HEAP32[$14 >> 2] | 0;
  HEAP32[$10 >> 2] = $81;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[HEAP32[$9 >> 2] >> 2] = $85;
  if (!(HEAP32[$15 >> 2] | 0)) {
   $129 = HEAP32[$46 >> 2] | 0;
   $130 = HEAP32[$47 >> 2] | 0;
   ___resumeException($129 | 0);
  }
  HEAP32[$8 >> 2] = $81;
  HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
  __THREW__ = 0;
  invoke_ii(HEAP32[HEAP32[$7 >> 2] >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
  $95 = __THREW__;
  __THREW__ = 0;
  if ($95 & 1) {
   $97 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($97);
  } else {
   $129 = HEAP32[$46 >> 2] | 0;
   $130 = HEAP32[$47 >> 2] | 0;
   ___resumeException($129 | 0);
  }
 }
 if ($74 | 0) HEAP32[$43 >> 2] = 0;
 HEAP32[$5 >> 2] = $44;
 $99 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $99;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$2 >> 2] = $99;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[HEAP32[$1 >> 2] >> 2] = 0;
 if (!(_fclose(HEAP32[$6 >> 2] | 0) | 0)) HEAP32[$48 + 64 >> 2] = 0; else HEAP32[$43 >> 2] = 0;
 HEAP32[$26 >> 2] = $44;
 HEAP32[$23 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$24 >> 2] = 0;
 $110 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $110;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$25 >> 2] = HEAP32[HEAP32[$21 >> 2] >> 2];
 $114 = HEAP32[$24 >> 2] | 0;
 HEAP32[$20 >> 2] = $110;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[HEAP32[$19 >> 2] >> 2] = $114;
 if (!(HEAP32[$25 >> 2] | 0)) {
  $128 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 HEAP32[$18 >> 2] = $110;
 HEAP32[$17 >> 2] = (HEAP32[$18 >> 2] | 0) + 4;
 __THREW__ = 0;
 invoke_ii(HEAP32[HEAP32[$17 >> 2] >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0;
 $124 = __THREW__;
 __THREW__ = 0;
 if ($124 & 1) {
  $126 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($126);
 } else {
  $128 = HEAP32[$43 >> 2] | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 return 0;
}

function __ZNSt3__210shared_ptrIKN3zim6ReaderEEC2IS3_NS_14default_deleteIS3_EEEEONS_10unique_ptrIT_T0_EENS_9enable_ifIXaaaantsr19is_lvalue_referenceISA_EE5valuentsr8is_arrayIS9_EE5valuesr14is_convertibleINSB_7pointerEPS3_EE5valueENS4_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $105 = 0, $11 = 0, $112 = 0, $117 = 0, $119 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $68 = 0, $7 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $95 = 0, $97 = 0, $98 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer = sp + 16 | 0;
 $4 = sp + 236 | 0;
 $5 = sp + 232 | 0;
 $7 = sp + 224 | 0;
 $8 = sp + 220 | 0;
 $9 = sp + 216 | 0;
 $10 = sp + 212 | 0;
 $11 = sp + 208 | 0;
 $14 = sp + 196 | 0;
 $15 = sp + 192 | 0;
 $16 = sp + 188 | 0;
 $17 = sp + 184 | 0;
 $18 = sp + 180 | 0;
 $19 = sp + 176 | 0;
 $20 = sp + 172 | 0;
 $21 = sp + 168 | 0;
 $22 = sp + 164 | 0;
 $23 = sp + 160 | 0;
 $26 = sp + 148 | 0;
 $27 = sp + 144 | 0;
 $28 = sp + 140 | 0;
 $29 = sp + 136 | 0;
 $30 = sp + 132 | 0;
 $31 = sp + 128 | 0;
 $32 = sp + 124 | 0;
 $33 = sp + 120 | 0;
 $34 = sp + 116 | 0;
 $35 = sp + 112 | 0;
 $36 = sp + 108 | 0;
 $37 = sp + 104 | 0;
 $38 = sp + 8 | 0;
 $39 = sp;
 $40 = sp + 100 | 0;
 $41 = sp + 96 | 0;
 $42 = sp + 92 | 0;
 $43 = sp + 88 | 0;
 $44 = sp + 84 | 0;
 $45 = sp + 80 | 0;
 $46 = sp + 76 | 0;
 $47 = sp + 72 | 0;
 $48 = sp + 68 | 0;
 $49 = sp + 64 | 0;
 $50 = sp + 60 | 0;
 $51 = sp + 56 | 0;
 $52 = sp + 52 | 0;
 $53 = sp + 48 | 0;
 $55 = sp + 40 | 0;
 $56 = sp + 36 | 0;
 $57 = sp + 32 | 0;
 $58 = sp + 28 | 0;
 $59 = sp + 24 | 0;
 $61 = sp + 244 | 0;
 HEAP32[$58 >> 2] = $0;
 HEAP32[$59 >> 2] = $1;
 $62 = HEAP32[$58 >> 2] | 0;
 HEAP32[$57 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$56 >> 2] = HEAP32[$57 >> 2];
 HEAP32[$55 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$62 >> 2] = HEAP32[HEAP32[$55 >> 2] >> 2];
 $68 = __Znwm(16) | 0;
 HEAP32[$48 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
 $73 = HEAP32[HEAP32[$46 >> 2] >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[sp + 240 >> 2] = HEAP32[$4 >> 2];
 HEAP32[sp + 228 >> 2] = $61;
 HEAP8[$38 >> 0] = HEAP8[$61 >> 0] | 0;
 HEAP8[$39 >> 0] = HEAP8[sp + 245 >> 0] | 0;
 HEAP32[$35 >> 2] = $68;
 HEAP32[$36 >> 2] = $73;
 $77 = HEAP32[$35 >> 2] | 0;
 HEAP32[$33 >> 2] = $77;
 HEAP32[$34 >> 2] = 0;
 $78 = HEAP32[$33 >> 2] | 0;
 $79 = HEAP32[$34 >> 2] | 0;
 HEAP32[$31 >> 2] = $78;
 HEAP32[$32 >> 2] = $79;
 $80 = HEAP32[$31 >> 2] | 0;
 HEAP32[$80 >> 2] = 47864;
 HEAP32[$80 + 4 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$78 >> 2] = 47884;
 HEAP32[$78 + 8 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$77 >> 2] = 43496;
 HEAP32[$7 >> 2] = $39;
 $86 = HEAP32[$7 >> 2] | 0;
 HEAP32[$16 >> 2] = $37;
 HEAP32[$17 >> 2] = $36;
 HEAP32[$18 >> 2] = $86;
 $87 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $89 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $87;
 HEAP32[$10 >> 2] = $89;
 $90 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$90 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $95 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 200 >> 2] = $87;
 HEAP32[$14 >> 2] = $95;
 HEAP32[sp + 204 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$19 >> 2] = $38;
 $97 = HEAP32[$19 >> 2] | 0;
 HEAP32[$28 >> 2] = $77 + 12;
 HEAP32[$29 >> 2] = $37;
 HEAP32[$30 >> 2] = $97;
 $98 = HEAP32[$28 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
 $100 = HEAP32[$27 >> 2] | 0;
 HEAP32[$21 >> 2] = $98;
 HEAP32[$22 >> 2] = $100;
 $101 = HEAP32[$21 >> 2] | 0;
 HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$101 >> 2] = HEAP32[HEAP32[$20 >> 2] >> 2];
 HEAP32[$23 >> 2] = HEAP32[$30 >> 2];
 $105 = HEAP32[$23 >> 2] | 0;
 HEAP32[sp + 152 >> 2] = $98;
 HEAP32[$26 >> 2] = $105;
 HEAP32[sp + 156 >> 2] = HEAP32[$26 >> 2];
 HEAP32[$62 + 4 >> 2] = $68;
 HEAP32[$42 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $112 = HEAP32[HEAP32[$40 >> 2] >> 2] | 0;
 HEAP32[$45 >> 2] = HEAP32[$59 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
 $117 = HEAP32[HEAP32[$43 >> 2] >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $112;
 HEAP32[$vararg_buffer + 4 >> 2] = $117;
 __ZNSt3__210shared_ptrIKN3zim6ReaderEE18__enable_weak_thisEz($62, $vararg_buffer);
 HEAP32[$53 >> 2] = HEAP32[$59 >> 2];
 $119 = HEAP32[$53 >> 2] | 0;
 HEAP32[$52 >> 2] = $119;
 HEAP32[$51 >> 2] = HEAP32[$52 >> 2];
 HEAP32[sp + 44 >> 2] = HEAP32[HEAP32[$51 >> 2] >> 2];
 HEAP32[$50 >> 2] = $119;
 HEAP32[$49 >> 2] = HEAP32[$50 >> 2];
 HEAP32[HEAP32[$49 >> 2] >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE20__equal_range_uniqueIS3_EENS_4pairINS_21__tree_const_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEESN_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $110 = 0, $113 = 0, $116 = 0, $12 = 0, $122 = 0, $125 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $3 = sp + 196 | 0;
 $4 = sp + 192 | 0;
 $5 = sp + 188 | 0;
 $6 = sp + 184 | 0;
 $7 = sp + 180 | 0;
 $8 = sp + 176 | 0;
 $9 = sp + 172 | 0;
 $10 = sp + 168 | 0;
 $11 = sp + 164 | 0;
 $12 = sp + 160 | 0;
 $13 = sp + 156 | 0;
 $14 = sp + 152 | 0;
 $15 = sp + 148 | 0;
 $16 = sp + 144 | 0;
 $17 = sp + 140 | 0;
 $18 = sp + 136 | 0;
 $19 = sp + 132 | 0;
 $20 = sp + 128 | 0;
 $21 = sp + 124 | 0;
 $22 = sp + 120 | 0;
 $23 = sp + 116 | 0;
 $24 = sp + 112 | 0;
 $25 = sp + 108 | 0;
 $26 = sp + 104 | 0;
 $27 = sp + 100 | 0;
 $28 = sp + 96 | 0;
 $29 = sp + 92 | 0;
 $30 = sp + 88 | 0;
 $31 = sp + 84 | 0;
 $32 = sp + 80 | 0;
 $33 = sp + 76 | 0;
 $34 = sp + 72 | 0;
 $35 = sp + 68 | 0;
 $36 = sp + 64 | 0;
 $37 = sp + 60 | 0;
 $38 = sp + 56 | 0;
 $39 = sp + 52 | 0;
 $40 = sp + 48 | 0;
 $41 = sp + 44 | 0;
 $42 = sp + 40 | 0;
 $43 = sp + 36 | 0;
 $44 = sp + 32 | 0;
 $45 = sp + 28 | 0;
 $46 = sp + 24 | 0;
 $47 = sp + 20 | 0;
 $48 = sp + 16 | 0;
 $49 = sp + 12 | 0;
 $50 = sp + 8 | 0;
 $51 = sp + 4 | 0;
 $52 = sp;
 HEAP32[$45 >> 2] = $1;
 HEAP32[$46 >> 2] = $2;
 $53 = HEAP32[$45 >> 2] | 0;
 HEAP32[$44 >> 2] = $53;
 HEAP32[$43 >> 2] = (HEAP32[$44 >> 2] | 0) + 4;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$17 >> 2] = $53;
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = (HEAP32[$16 >> 2] | 0) + 4;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$48 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
 while (1) {
  if (!(HEAP32[$48 >> 2] | 0)) {
   label = 14;
   break;
  }
  HEAP32[$5 >> 2] = $53;
  HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  $74 = HEAP32[$46 >> 2] | 0;
  $76 = (HEAP32[$48 >> 2] | 0) + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$7 >> 2] = $74;
  HEAP32[$8 >> 2] = $76;
  if (__ZNK3zim10less_rangeclERKNS_5RangeES3_(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0) {
   HEAP32[$47 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$48 >> 2] = HEAP32[HEAP32[$48 >> 2] >> 2];
  } else {
   HEAP32[$11 >> 2] = $53;
   HEAP32[$10 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
   HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
   $89 = (HEAP32[$48 >> 2] | 0) + 16 | 0;
   $90 = HEAP32[$46 >> 2] | 0;
   HEAP32[$18 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$19 >> 2] = $89;
   HEAP32[$20 >> 2] = $90;
   $94 = __ZNK3zim10less_rangeclERKNS_5RangeES3_(HEAP32[$18 >> 2] | 0, HEAP32[$19 >> 2] | 0, HEAP32[$20 >> 2] | 0) | 0;
   $95 = HEAP32[$48 >> 2] | 0;
   if (!$94) break;
   HEAP32[$48 >> 2] = HEAP32[$95 + 4 >> 2];
  }
 }
 if ((label | 0) == 14) {
  $122 = HEAP32[$47 >> 2] | 0;
  HEAP32[$31 >> 2] = $51;
  HEAP32[$32 >> 2] = $122;
  HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
  $125 = HEAP32[$47 >> 2] | 0;
  HEAP32[$33 >> 2] = $52;
  HEAP32[$34 >> 2] = $125;
  HEAP32[HEAP32[$33 >> 2] >> 2] = HEAP32[$34 >> 2];
  HEAP32[$37 >> 2] = $0;
  HEAP32[$38 >> 2] = $51;
  HEAP32[$39 >> 2] = $52;
  $128 = HEAP32[$37 >> 2] | 0;
  HEAP32[$36 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$128 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  HEAP32[$35 >> 2] = HEAP32[$39 >> 2];
  HEAP32[$128 + 4 >> 2] = HEAP32[HEAP32[$35 >> 2] >> 2];
  STACKTOP = sp;
  return;
 }
 HEAP32[$21 >> 2] = $49;
 HEAP32[$22 >> 2] = $95;
 HEAP32[HEAP32[$21 >> 2] >> 2] = HEAP32[$22 >> 2];
 L13 : do if (HEAP32[(HEAP32[$48 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$23 >> 2] = HEAP32[(HEAP32[$48 >> 2] | 0) + 4 >> 2];
  while (1) {
   $110 = HEAP32[$23 >> 2] | 0;
   if (!(HEAP32[HEAP32[$23 >> 2] >> 2] | 0)) {
    $113 = $110;
    break L13;
   }
   HEAP32[$23 >> 2] = HEAP32[$110 >> 2];
  }
 } else $113 = HEAP32[$47 >> 2] | 0; while (0);
 HEAP32[$24 >> 2] = $50;
 HEAP32[$25 >> 2] = $113;
 HEAP32[HEAP32[$24 >> 2] >> 2] = HEAP32[$25 >> 2];
 HEAP32[$28 >> 2] = $0;
 HEAP32[$29 >> 2] = $49;
 HEAP32[$30 >> 2] = $50;
 $116 = HEAP32[$28 >> 2] | 0;
 HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$116 >> 2] = HEAP32[HEAP32[$27 >> 2] >> 2];
 HEAP32[$26 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$116 + 4 >> 2] = HEAP32[HEAP32[$26 >> 2] >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_S6_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $117 = 0, $12 = 0, $122 = 0, $125 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $76 = 0, $8 = 0, $96 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 180 | 0;
 $5 = sp + 176 | 0;
 $6 = sp + 172 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 164 | 0;
 $11 = sp + 152 | 0;
 $12 = sp + 148 | 0;
 $13 = sp + 144 | 0;
 $14 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $19 = sp + 128 | 0;
 $20 = sp + 124 | 0;
 $21 = sp + 120 | 0;
 $22 = sp + 116 | 0;
 $23 = sp + 112 | 0;
 $24 = sp + 108 | 0;
 $25 = sp + 104 | 0;
 $26 = sp + 100 | 0;
 $27 = sp + 96 | 0;
 $28 = sp + 92 | 0;
 $29 = sp + 88 | 0;
 $30 = sp + 84 | 0;
 $31 = sp + 80 | 0;
 $32 = sp + 76 | 0;
 $33 = sp + 72 | 0;
 $34 = sp + 68 | 0;
 $35 = sp + 64 | 0;
 $36 = sp + 60 | 0;
 $37 = sp + 56 | 0;
 $38 = sp + 52 | 0;
 $39 = sp + 48 | 0;
 $40 = sp + 44 | 0;
 $41 = sp + 40 | 0;
 $42 = sp + 36 | 0;
 $44 = sp + 28 | 0;
 $45 = sp + 24 | 0;
 $46 = sp + 20 | 0;
 $47 = sp + 16 | 0;
 $48 = sp + 190 | 0;
 $49 = sp + 189 | 0;
 $51 = sp + 12 | 0;
 $52 = sp + 8 | 0;
 $53 = sp + 4 | 0;
 HEAP32[$47 >> 2] = $1;
 HEAP8[$48 >> 0] = $2;
 HEAP8[$49 >> 0] = 0;
 HEAP32[$46 >> 2] = HEAP32[$47 >> 2];
 HEAP32[$45 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[sp + 32 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$16 >> 2] = $0;
 HEAP32[$17 >> 2] = sp + 188;
 $58 = HEAP32[$16 >> 2] | 0;
 $59 = HEAP32[$17 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 191 >> 0] | 0;
 HEAP32[$13 >> 2] = $58;
 HEAP32[$14 >> 2] = $59;
 $60 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $60;
 $61 = HEAP32[$12 >> 2] | 0;
 HEAP32[$61 >> 2] = 0;
 HEAP32[$61 + 4 >> 2] = 0;
 HEAP32[$61 + 8 >> 2] = 0;
 HEAP32[$8 >> 2] = HEAP32[$14 >> 2];
 $63 = HEAP32[$8 >> 2] | 0;
 HEAP32[sp + 156 >> 2] = $60;
 HEAP32[$11 >> 2] = $63;
 HEAP32[sp + 160 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$5 >> 2] = $58;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$6 >> 2] | 0) + (HEAP32[$7 >> 2] << 2) >> 2] = 0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 HEAP32[$28 >> 2] = HEAP32[$47 >> 2];
 $76 = HEAP32[$28 >> 2] | 0;
 HEAP32[$27 >> 2] = $76;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
 if ((HEAPU8[(HEAP32[$25 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$21 >> 2] = $76;
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
  $96 = HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] | 0;
 } else {
  HEAP32[$24 >> 2] = $76;
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
  $96 = HEAPU8[(HEAP32[$22 >> 2] | 0) + 11 >> 0] | 0;
 }
 HEAP32[$51 >> 2] = $96;
 HEAP32[$42 >> 2] = HEAP32[$47 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 $99 = HEAP32[$41 >> 2] | 0;
 HEAP32[$40 >> 2] = $99;
 HEAP32[$39 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$38 >> 2] = HEAP32[$39 >> 2];
 if ((HEAPU8[(HEAP32[$38 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$32 >> 2] = $99;
  HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
  HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
  $117 = HEAP32[HEAP32[$30 >> 2] >> 2] | 0;
 } else {
  HEAP32[$37 >> 2] = $99;
  HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  $117 = HEAP32[$33 >> 2] | 0;
 }
 HEAP32[$29 >> 2] = $117;
 __THREW__ = 0;
 invoke_viiii(26, $0 | 0, HEAP32[$29 >> 2] | 0, HEAP32[$51 >> 2] | 0, (HEAP32[$51 >> 2] | 0) + 1 | 0);
 $122 = __THREW__;
 __THREW__ = 0;
 if ($122 & 1) {
  $128 = ___cxa_find_matching_catch_2() | 0;
  $129 = tempRet0;
  HEAP32[$52 >> 2] = $128;
  HEAP32[$53 >> 2] = $129;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  $130 = HEAP32[$52 >> 2] | 0;
  $131 = HEAP32[$53 >> 2] | 0;
  ___resumeException($130 | 0);
 }
 __THREW__ = 0;
 invoke_vii(47, $0 | 0, HEAP8[$48 >> 0] | 0);
 $125 = __THREW__;
 __THREW__ = 0;
 if ($125 & 1) {
  $128 = ___cxa_find_matching_catch_2() | 0;
  $129 = tempRet0;
  HEAP32[$52 >> 2] = $128;
  HEAP32[$53 >> 2] = $129;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  $130 = HEAP32[$52 >> 2] | 0;
  $131 = HEAP32[$53 >> 2] | 0;
  ___resumeException($130 | 0);
 }
 HEAP8[$49 >> 0] = 1;
 if (HEAP8[$49 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim12BufferReader10sub_readerENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $84 = 0, $88 = 0, $9 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy1 = sp + 24 | 0;
 $$byval_copy = sp + 16 | 0;
 $4 = sp + 164 | 0;
 $5 = sp + 160 | 0;
 $6 = sp + 156 | 0;
 $7 = sp + 152 | 0;
 $8 = sp + 148 | 0;
 $9 = sp + 144 | 0;
 $10 = sp + 140 | 0;
 $11 = sp + 136 | 0;
 $12 = sp + 132 | 0;
 $13 = sp + 128 | 0;
 $14 = sp + 124 | 0;
 $15 = sp + 120 | 0;
 $16 = sp + 116 | 0;
 $17 = sp + 112 | 0;
 $18 = sp + 108 | 0;
 $19 = sp + 104 | 0;
 $20 = sp + 100 | 0;
 $21 = sp + 96 | 0;
 $22 = sp + 92 | 0;
 $23 = sp + 88 | 0;
 $24 = sp + 84 | 0;
 $25 = sp + 80 | 0;
 $27 = sp + 72 | 0;
 $28 = sp + 68 | 0;
 $29 = sp + 64 | 0;
 $30 = sp + 60 | 0;
 $31 = sp + 56 | 0;
 $32 = sp + 48 | 0;
 $33 = sp + 8 | 0;
 $34 = sp;
 $35 = sp + 169 | 0;
 $36 = sp + 44 | 0;
 $37 = sp + 40 | 0;
 $38 = sp + 32 | 0;
 $39 = sp + 168 | 0;
 HEAP32[$31 >> 2] = $1;
 $40 = HEAP32[$31 >> 2] | 0;
 $43 = HEAP32[(HEAP32[$40 >> 2] | 0) + 20 >> 2] | 0;
 HEAP32[$33 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$33 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$34 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$34 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$33 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$33 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$34 + 4 >> 2];
 FUNCTION_TABLE_viiii[$43 & 31]($32, $40, $$byval_copy, $$byval_copy1);
 HEAP8[$35 >> 0] = 0;
 __THREW__ = 0;
 $44 = invoke_ii(79, 12) | 0;
 $45 = __THREW__;
 __THREW__ = 0;
 if ($45 & 1) {
  $78 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$36 >> 2] = $78;
  HEAP32[$37 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
  $101 = HEAP32[$36 >> 2] | 0;
  $102 = HEAP32[$37 >> 2] | 0;
  ___resumeException($101 | 0);
 }
 HEAP8[$39 >> 0] = 1;
 HEAP32[$29 >> 2] = $38;
 HEAP32[$30 >> 2] = $32;
 $47 = HEAP32[$29 >> 2] | 0;
 HEAP32[$47 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
 HEAP32[$47 + 4 >> 2] = HEAP32[(HEAP32[$30 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$47 + 4 >> 2] | 0) {
  HEAP32[$28 >> 2] = HEAP32[$47 + 4 >> 2];
  HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$24 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  $62 = HEAP32[$24 >> 2] | 0;
  HEAP32[$25 >> 2] = 1;
  $63 = HEAP32[$25 >> 2] | 0;
  $64 = HEAP32[$62 >> 2] | 0;
  HEAP32[$62 >> 2] = $64 + $63;
  HEAP32[sp + 76 >> 2] = $64 + $63;
 }
 __THREW__ = 0;
 invoke_vii(50, $44 | 0, $38 | 0);
 $67 = __THREW__;
 __THREW__ = 0;
 if ($67 & 1) {
  $80 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$36 >> 2] = $80;
  HEAP32[$37 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($38);
  if (!(HEAP8[$39 >> 0] & 1)) {
   __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
   $101 = HEAP32[$36 >> 2] | 0;
   $102 = HEAP32[$37 >> 2] | 0;
   ___resumeException($101 | 0);
  }
  __ZdlPv($44);
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
  $101 = HEAP32[$36 >> 2] | 0;
  $102 = HEAP32[$37 >> 2] | 0;
  ___resumeException($101 | 0);
 }
 HEAP8[$39 >> 0] = 0;
 HEAP32[$22 >> 2] = $0;
 HEAP32[$23 >> 2] = $44;
 HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$21 >> 2] = $23;
 $70 = HEAP32[$20 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
 $72 = HEAP32[$19 >> 2] | 0;
 HEAP32[$17 >> 2] = $70;
 HEAP32[$18 >> 2] = $72;
 $73 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$73 >> 2] = HEAP32[HEAP32[$16 >> 2] >> 2];
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($38);
 HEAP8[$35 >> 0] = 1;
 if (HEAP8[$35 >> 0] & 1) {
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
  STACKTOP = sp;
  return;
 }
 HEAP32[$15 >> 2] = $0;
 HEAP32[$12 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$13 >> 2] = 0;
 $84 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $84;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$14 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 $88 = HEAP32[$13 >> 2] | 0;
 HEAP32[$7 >> 2] = $84;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = $88;
 if (!(HEAP32[$14 >> 2] | 0)) {
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = $84;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 $95 = HEAP32[$14 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$9 >> 2] = $95;
 $96 = HEAP32[$9 >> 2] | 0;
 if (!$96) {
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$96 >> 2] | 0) + 8 >> 2] & 255]($96);
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($32);
 STACKTOP = sp;
 return;
}

function __ZN3zim15lzma_uncompressEPKcNS_7zsize_tEPS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $114 = 0, $12 = 0, $121 = 0, $127 = 0, $13 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $158 = 0, $16 = 0, $163 = 0, $165 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $26 = 0, $3 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $70 = 0, $76 = 0, $78 = 0, $8 = 0, $82 = 0, $84 = 0, $87 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 156 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 148 | 0;
 $7 = sp + 144 | 0;
 $8 = sp + 140 | 0;
 $9 = sp + 136 | 0;
 $10 = sp + 132 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 128 | 0;
 $13 = sp;
 $14 = sp + 124 | 0;
 $15 = sp + 120 | 0;
 $16 = sp + 116 | 0;
 $17 = sp + 112 | 0;
 $18 = sp + 108 | 0;
 $19 = sp + 96 | 0;
 $20 = sp + 164 | 0;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $2;
 __ZN3zim7zsize_tC2Ey($11, 1048576, 0);
 $21 = $11;
 $23 = HEAP32[$21 >> 2] | 0;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 HEAP32[$12 >> 2] = __Znam($26 >>> 0 > 1 | ($26 | 0) == 1 & $23 >>> 0 >= 0 ? -1 : $23) | 0;
 dest = $13;
 stop = dest + 88 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$14 >> 2] = __ZN3zim10envMemSizeEPKcj(50784, 134217728) | 0;
 HEAP32[$15 >> 2] = _lzma_stream_decoder($13, HEAP32[$14 >> 2] | 0, 0, 0) | 0;
 if (HEAP32[$15 >> 2] | 0) {
  $39 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(60, $39 | 0, 50805);
  $40 = __THREW__;
  __THREW__ = 0;
  if (!($40 & 1)) ___cxa_throw($39 | 0, 42792, 178);
  $42 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$16 >> 2] = $42;
  HEAP32[$17 >> 2] = tempRet0;
  ___cxa_free_exception($39 | 0);
  $170 = HEAP32[$16 >> 2] | 0;
  $171 = HEAP32[$17 >> 2] | 0;
  ___resumeException($170 | 0);
 }
 HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$13 + 16 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$13 + 20 >> 2] = HEAP32[$11 >> 2];
 while (1) {
  HEAP32[$15 >> 2] = _lzma_code($13, 3) | 0;
  do if ((HEAP32[$15 >> 2] | 0) == 10) {
   if (!(HEAP32[$13 + 4 >> 2] | 0)) if (HEAP32[$13 + 20 >> 2] | 0) {
    label = 12;
    break;
   }
   $70 = $11;
   $76 = ___muldi3(HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0, 2, 0) | 0;
   $78 = $11;
   HEAP32[$78 >> 2] = $76;
   HEAP32[$78 + 4 >> 2] = tempRet0;
   $82 = $11;
   $84 = HEAP32[$82 >> 2] | 0;
   $87 = HEAP32[$82 + 4 >> 2] | 0;
   HEAP32[$18 >> 2] = __Znam($87 >>> 0 > 1 | ($87 | 0) == 1 & $84 >>> 0 >= 0 ? -1 : $84) | 0;
   _memcpy(HEAP32[$18 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 + 24 >> 2] | 0) | 0;
   HEAP32[$13 + 16 >> 2] = (HEAP32[$18 >> 2] | 0) + (HEAP32[$13 + 24 >> 2] | 0);
   $114 = $11;
   $121 = $13 + 24 | 0;
   $127 = _i64Subtract(HEAP32[$114 >> 2] | 0, HEAP32[$114 + 4 >> 2] | 0, HEAP32[$121 >> 2] | 0, HEAP32[$121 + 4 >> 2] | 0) | 0;
   HEAP32[$13 + 20 >> 2] = $127;
   $130 = HEAP32[$12 >> 2] | 0;
   if ($130 | 0) __ZdaPv($130);
   HEAP32[$12 >> 2] = HEAP32[$18 >> 2];
  } else label = 12; while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ((HEAP32[$15 >> 2] | 0) != 1 & (HEAP32[$15 >> 2] | 0) != 0) break;
  }
  if ((HEAP32[$15 >> 2] | 0) == 1) {
   label = 21;
   break;
  }
 }
 if ((label | 0) == 21) {
  $158 = $13 + 24 | 0;
  $163 = HEAP32[$158 + 4 >> 2] | 0;
  $165 = HEAP32[$10 >> 2] | 0;
  HEAP32[$165 >> 2] = HEAP32[$158 >> 2];
  HEAP32[$165 + 4 >> 2] = $163;
  _lzma_end($13);
  STACKTOP = sp;
  return HEAP32[$12 >> 2] | 0;
 }
 $137 = ___cxa_allocate_exception(8) | 0;
 HEAP8[$20 >> 0] = 1;
 HEAP32[$7 >> 2] = $19;
 HEAP32[$8 >> 2] = 50869;
 $138 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $138;
 $139 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $139;
 $140 = HEAP32[$5 >> 2] | 0;
 HEAP32[$140 >> 2] = 0;
 HEAP32[$140 + 4 >> 2] = 0;
 HEAP32[$140 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = $139;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $142 = HEAP32[$8 >> 2] | 0;
 $144 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$8 >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_viii(8, $138 | 0, $142 | 0, $144 | 0);
 $145 = __THREW__;
 __THREW__ = 0;
 if ($145 & 1) {
  $150 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$16 >> 2] = $150;
  HEAP32[$17 >> 2] = tempRet0;
 } else {
  __THREW__ = 0;
  invoke_vii(58, $137 | 0, $19 | 0);
  $147 = __THREW__;
  __THREW__ = 0;
  if (!($147 & 1)) {
   HEAP8[$20 >> 0] = 0;
   __THREW__ = 0;
   invoke_viii(11, $137 | 0, 41024, 53);
   __THREW__ = 0;
  }
  $152 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$16 >> 2] = $152;
  HEAP32[$17 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($19);
 }
 if (!(HEAP8[$20 >> 0] & 1)) {
  $170 = HEAP32[$16 >> 2] | 0;
  $171 = HEAP32[$17 >> 2] | 0;
  ___resumeException($170 | 0);
 }
 ___cxa_free_exception($137 | 0);
 $170 = HEAP32[$16 >> 2] | 0;
 $171 = HEAP32[$17 >> 2] | 0;
 ___resumeException($170 | 0);
 return 0;
}

function __ZN3zim12FileCompoundD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $101 = 0, $11 = 0, $113 = 0, $12 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $57 = 0, $6 = 0, $7 = 0, $70 = 0, $77 = 0, $79 = 0, $8 = 0, $9 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $1 = sp + 208 | 0;
 $2 = sp + 204 | 0;
 $3 = sp + 200 | 0;
 $4 = sp + 196 | 0;
 $5 = sp + 192 | 0;
 $6 = sp + 188 | 0;
 $7 = sp + 184 | 0;
 $8 = sp + 180 | 0;
 $9 = sp + 176 | 0;
 $10 = sp + 172 | 0;
 $11 = sp + 168 | 0;
 $12 = sp + 164 | 0;
 $13 = sp + 160 | 0;
 $14 = sp + 156 | 0;
 $15 = sp + 152 | 0;
 $16 = sp + 148 | 0;
 $17 = sp + 144 | 0;
 $18 = sp + 140 | 0;
 $19 = sp + 136 | 0;
 $20 = sp + 132 | 0;
 $21 = sp + 128 | 0;
 $22 = sp + 124 | 0;
 $23 = sp + 120 | 0;
 $24 = sp + 116 | 0;
 $25 = sp + 8 | 0;
 $26 = sp + 112 | 0;
 $27 = sp + 108 | 0;
 $28 = sp + 104 | 0;
 $29 = sp + 100 | 0;
 $30 = sp + 96 | 0;
 $31 = sp + 92 | 0;
 $32 = sp + 88 | 0;
 $33 = sp + 84 | 0;
 $34 = sp + 80 | 0;
 $35 = sp + 76 | 0;
 $36 = sp + 72 | 0;
 $37 = sp + 68 | 0;
 $38 = sp + 64 | 0;
 $39 = sp;
 $40 = sp + 60 | 0;
 $41 = sp + 56 | 0;
 $42 = sp + 52 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 44 | 0;
 $45 = sp + 40 | 0;
 $46 = sp + 36 | 0;
 $47 = sp + 32 | 0;
 $48 = sp + 28 | 0;
 $49 = sp + 24 | 0;
 $50 = sp + 20 | 0;
 $51 = sp + 16 | 0;
 $52 = sp + 12 | 0;
 HEAP32[$48 >> 2] = $0;
 $53 = HEAP32[$48 >> 2] | 0;
 HEAP32[$46 >> 2] = $53;
 HEAP32[$44 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$42 >> 2] = HEAP32[$44 >> 2];
 $57 = HEAP32[HEAP32[$42 >> 2] >> 2] | 0;
 HEAP32[$40 >> 2] = $43;
 HEAP32[$41 >> 2] = $57;
 HEAP32[HEAP32[$40 >> 2] >> 2] = HEAP32[$41 >> 2];
 HEAP32[$47 >> 2] = HEAP32[$43 >> 2];
 HEAP8[$39 >> 0] = HEAP8[$47 >> 0] | 0;
 HEAP8[$39 + 1 >> 0] = HEAP8[$47 + 1 >> 0] | 0;
 HEAP8[$39 + 2 >> 0] = HEAP8[$47 + 2 >> 0] | 0;
 HEAP8[$39 + 3 >> 0] = HEAP8[$47 + 3 >> 0] | 0;
 HEAP32[$38 >> 2] = $45;
 HEAP32[HEAP32[$38 >> 2] >> 2] = HEAP32[$39 >> 2];
 HEAP32[$49 >> 2] = HEAP32[$45 >> 2];
 while (1) {
  HEAP32[$36 >> 2] = $53;
  HEAP32[$34 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$31 >> 2] = (HEAP32[$32 >> 2] | 0) + 4;
  HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
  HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
  $70 = HEAP32[$28 >> 2] | 0;
  HEAP32[$26 >> 2] = $33;
  HEAP32[$27 >> 2] = $70;
  HEAP32[HEAP32[$26 >> 2] >> 2] = HEAP32[$27 >> 2];
  HEAP32[$37 >> 2] = HEAP32[$33 >> 2];
  HEAP8[$25 >> 0] = HEAP8[$37 >> 0] | 0;
  HEAP8[$25 + 1 >> 0] = HEAP8[$37 + 1 >> 0] | 0;
  HEAP8[$25 + 2 >> 0] = HEAP8[$37 + 2 >> 0] | 0;
  HEAP8[$25 + 3 >> 0] = HEAP8[$37 + 3 >> 0] | 0;
  HEAP32[$24 >> 2] = $35;
  HEAP32[HEAP32[$24 >> 2] >> 2] = HEAP32[$25 >> 2];
  HEAP32[$50 >> 2] = HEAP32[$35 >> 2];
  HEAP32[$22 >> 2] = $49;
  HEAP32[$23 >> 2] = $50;
  $77 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$21 >> 2] = $77;
  $79 = HEAP32[$21 >> 2] | 0;
  HEAP32[$18 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$19 >> 2] = $79;
  if (!((HEAP32[HEAP32[$18 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$19 >> 2] >> 2] | 0) ^ 1)) break;
  HEAP32[$17 >> 2] = $49;
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  HEAP32[$14 >> 2] = (HEAP32[HEAP32[$15 >> 2] >> 2] | 0) + 16;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$51 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 16 >> 2];
  $97 = HEAP32[$51 >> 2] | 0;
  if ($97 | 0) {
   __ZN3zim8FilePartINS_4unix2FSEED2Ev($97);
   __ZdlPv($97);
  }
  HEAP32[$9 >> 2] = $49;
  HEAP32[$10 >> 2] = 0;
  $99 = HEAP32[$9 >> 2] | 0;
  HEAP32[$8 >> 2] = HEAP32[$99 >> 2];
  HEAP32[$7 >> 2] = $99;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  $101 = HEAP32[$6 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$101 >> 2];
  if (HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$3 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2];
   while (1) {
    $113 = HEAP32[$3 >> 2] | 0;
    if (!(HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) break;
    HEAP32[$3 >> 2] = HEAP32[$113 >> 2];
   }
   HEAP32[$4 >> 2] = $113;
  } else {
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
    $123 = HEAP32[$5 >> 2] | 0;
    if (!((HEAP32[$2 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$1 >> 2] = $123;
    HEAP32[$5 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$4 >> 2] = HEAP32[$123 + 8 >> 2];
  }
  HEAP32[$101 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$52 >> 2] = HEAP32[$8 >> 2];
 }
 __ZNSt3__23mapIN3zim5RangeEPNS1_8FilePartINS1_4unix2FSEEENS1_10less_rangeENS_9allocatorINS_4pairIKS2_S7_EEEEED2Ev($53);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $100 = 0, $101 = 0, $11 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $13 = 0, $130 = 0, $132 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $54 = 0, $6 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $8 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 196 | 0;
 $4 = sp + 188 | 0;
 $5 = sp + 184 | 0;
 $6 = sp + 180 | 0;
 $7 = sp + 176 | 0;
 $8 = sp + 172 | 0;
 $9 = sp + 168 | 0;
 $11 = sp + 164 | 0;
 $12 = sp + 160 | 0;
 $13 = sp + 156 | 0;
 $14 = sp + 152 | 0;
 $16 = sp + 148 | 0;
 $17 = sp + 144 | 0;
 $18 = sp + 140 | 0;
 $20 = sp + 132 | 0;
 $21 = sp + 128 | 0;
 $22 = sp + 124 | 0;
 $23 = sp + 120 | 0;
 $24 = sp;
 $25 = sp + 116 | 0;
 $26 = sp + 112 | 0;
 $28 = sp + 108 | 0;
 $29 = sp + 104 | 0;
 $30 = sp + 100 | 0;
 $31 = sp + 96 | 0;
 $32 = sp + 92 | 0;
 $33 = sp + 88 | 0;
 $34 = sp + 84 | 0;
 $35 = sp + 80 | 0;
 $36 = sp + 76 | 0;
 $37 = sp + 72 | 0;
 $38 = sp + 68 | 0;
 $39 = sp + 64 | 0;
 $40 = sp + 60 | 0;
 $41 = sp + 56 | 0;
 $42 = sp + 52 | 0;
 $43 = sp + 48 | 0;
 $44 = sp + 44 | 0;
 $45 = sp + 40 | 0;
 $46 = sp + 20 | 0;
 $47 = sp + 16 | 0;
 HEAP32[$43 >> 2] = $0;
 HEAP32[$44 >> 2] = $1;
 $49 = HEAP32[$43 >> 2] | 0;
 HEAP32[$42 >> 2] = $49;
 HEAP32[$41 >> 2] = (HEAP32[$42 >> 2] | 0) + 8;
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$45 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$39 >> 2] = $49;
 $54 = HEAP32[$39 >> 2] | 0;
 $62 = (((HEAP32[$54 + 4 >> 2] | 0) - (HEAP32[$54 >> 2] | 0) | 0) / 8 | 0) + 1 | 0;
 HEAP32[$34 >> 2] = $49;
 HEAP32[$35 >> 2] = $62;
 $63 = HEAP32[$34 >> 2] | 0;
 HEAP32[$36 >> 2] = __ZNKSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE8max_sizeEv($63) | 0;
 if ((HEAP32[$35 >> 2] | 0) >>> 0 > (HEAP32[$36 >> 2] | 0) >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($63);
 HEAP32[$32 >> 2] = $63;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 $69 = HEAP32[$31 >> 2] | 0;
 HEAP32[$30 >> 2] = $69;
 HEAP32[$29 >> 2] = (HEAP32[$30 >> 2] | 0) + 8;
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$37 >> 2] = ((HEAP32[HEAP32[$28 >> 2] >> 2] | 0) - (HEAP32[$69 >> 2] | 0) | 0) / 8 | 0;
 if ((HEAP32[$37 >> 2] | 0) >>> 0 >= (((HEAP32[$36 >> 2] | 0) >>> 0) / 2 | 0) >>> 0) HEAP32[$33 >> 2] = HEAP32[$36 >> 2]; else {
  HEAP32[$38 >> 2] = HEAP32[$37 >> 2] << 1;
  HEAP32[$25 >> 2] = $38;
  HEAP32[$26 >> 2] = $35;
  $87 = HEAP32[$25 >> 2] | 0;
  $88 = HEAP32[$26 >> 2] | 0;
  HEAP8[$24 >> 0] = HEAP8[sp + 200 >> 0] | 0;
  HEAP32[$22 >> 2] = $87;
  HEAP32[$23 >> 2] = $88;
  $89 = HEAP32[$22 >> 2] | 0;
  $90 = HEAP32[$23 >> 2] | 0;
  HEAP32[sp + 136 >> 2] = $24;
  HEAP32[$20 >> 2] = $89;
  HEAP32[$21 >> 2] = $90;
  HEAP32[$33 >> 2] = HEAP32[((HEAP32[HEAP32[$20 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$21 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$23 >> 2] | 0 : HEAP32[$22 >> 2] | 0) >> 2];
 }
 $100 = HEAP32[$33 >> 2] | 0;
 HEAP32[$18 >> 2] = $49;
 $101 = HEAP32[$18 >> 2] | 0;
 __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEEC2EmmS5_($46, $100, ((HEAP32[$101 + 4 >> 2] | 0) - (HEAP32[$101 >> 2] | 0) | 0) / 8 | 0, HEAP32[$45 >> 2] | 0);
 $110 = HEAP32[$45 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$46 + 8 >> 2];
 $113 = HEAP32[$17 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$44 >> 2];
 $115 = HEAP32[$16 >> 2] | 0;
 HEAP32[$12 >> 2] = $110;
 HEAP32[$13 >> 2] = $113;
 HEAP32[$14 >> 2] = $115;
 $116 = HEAP32[$12 >> 2] | 0;
 $117 = HEAP32[$13 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$14 >> 2];
 $119 = HEAP32[$11 >> 2] | 0;
 HEAP8[sp + 8 >> 0] = HEAP8[sp + 201 >> 0] | 0;
 HEAP32[$7 >> 2] = $116;
 HEAP32[$8 >> 2] = $117;
 HEAP32[$9 >> 2] = $119;
 $120 = HEAP32[$7 >> 2] | 0;
 $121 = HEAP32[$8 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 $123 = HEAP32[$6 >> 2] | 0;
 HEAP32[sp + 192 >> 2] = $120;
 HEAP32[$4 >> 2] = $121;
 HEAP32[$5 >> 2] = $123;
 $124 = HEAP32[$4 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
 $126 = HEAP32[$2 >> 2] | 0;
 HEAP32[$124 >> 2] = HEAP32[$126 >> 2];
 HEAP32[$124 + 4 >> 2] = HEAP32[$126 + 4 >> 2];
 $127 = $46 + 8 | 0;
 HEAP32[$127 >> 2] = (HEAP32[$127 >> 2] | 0) + 8;
 __THREW__ = 0;
 invoke_vii(57, $49 | 0, $46 | 0);
 $130 = __THREW__;
 __THREW__ = 0;
 if ($130 & 1) {
  $132 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$47 >> 2] = $132;
  HEAP32[sp + 12 >> 2] = tempRet0;
  __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEED2Ev($46);
  ___resumeException(HEAP32[$47 >> 2] | 0);
 } else {
  __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEED2Ev($46);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $5 = sp + 272 | 0;
 $6 = sp + 240 | 0;
 $7 = sp + 340 | 0;
 $8 = sp;
 $9 = sp + 336 | 0;
 $10 = sp + 332 | 0;
 $11 = sp + 328 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 53260, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 L5 : do if (($$0 | 0) > 29) {
  if ($19) {
   __THREW__ = 0;
   $26 = invoke_i(1) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if (!($27 & 1)) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
    $31 = invoke_iiiii(23, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0;
    $32 = __THREW__;
    __THREW__ = 0;
    if (!($32 & 1)) {
     $$1 = $31;
     label = 12;
    }
   }
  } else {
   __THREW__ = 0;
   $36 = invoke_i(1) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer9 >> 3] = $4;
    $39 = invoke_iiiii(23, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0;
    $40 = __THREW__;
    __THREW__ = 0;
    if (!($40 & 1)) {
     $$1 = $39;
     label = 12;
    }
   }
  }
  do if ((label | 0) == 12) {
   $42 = HEAP32[$7 >> 2] | 0;
   if (!$42) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    break;
   } else {
    $$2 = $$1;
    $$sroa$069$0 = $42;
    $47 = $42;
    label = 15;
    break L5;
   }
  } while (0);
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$45482 = tempRet0;
  $$483 = $34;
 } else {
  $$2 = $$0;
  $$sroa$069$0 = 0;
  $47 = HEAP32[$7 >> 2] | 0;
  label = 15;
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0;
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0;
  do if (($47 | 0) == ($6 | 0)) {
   $$046 = $8;
   $$sroa$058$0 = 0;
   label = 19;
  } else {
   $51 = _malloc($$2 << 3) | 0;
   if (!$51) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $54 = ___cxa_find_matching_catch_2() | 0;
    $$24980 = $54;
    $$25279 = tempRet0;
    break;
   } else {
    $$046 = $51;
    $$sroa$058$0 = $51;
    label = 19;
    break;
   }
  } while (0);
  if ((label | 0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
   __THREW__ = 0;
   invoke_viiiiiii(6, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0);
   $57 = __THREW__;
   __THREW__ = 0;
   do if ($57 & 1) {
    $69 = ___cxa_find_matching_catch_2() | 0;
    $70 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$148 = $69;
    $$151 = $70;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    $60 = HEAP32[$9 >> 2] | 0;
    $61 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
    $62 = invoke_iiiiiii(40, $$byval_copy | 0, $$046 | 0, $60 | 0, $61 | 0, $2 | 0, $3 | 0) | 0;
    $63 = __THREW__;
    __THREW__ = 0;
    if ($63 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0;
     $$148 = $71;
     $$151 = tempRet0;
     break;
    }
    HEAP32[$1 >> 2] = $62;
    if ($$sroa$058$0 | 0) _free($$sroa$058$0);
    if ($$sroa$069$0 | 0) _free($$sroa$069$0);
    STACKTOP = sp;
    return $62 | 0;
   } while (0);
   if (!$$sroa$058$0) {
    $$24980 = $$148;
    $$25279 = $$151;
   } else {
    _free($$sroa$058$0);
    $$24980 = $$148;
    $$25279 = $$151;
   }
  }
  if (!$$sroa$069$0) {
   $$45482 = $$25279;
   $$483 = $$24980;
  } else {
   _free($$sroa$069$0);
   $$45482 = $$25279;
   $$483 = $$24980;
  }
 }
 ___resumeException($$483 | 0);
 return 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24980 = 0, $$25279 = 0, $$45482 = 0, $$483 = 0, $$byval_copy = 0, $$sroa$058$0 = 0, $$sroa$069$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $$byval_copy = sp + 344 | 0;
 $vararg_buffer9 = sp + 320 | 0;
 $vararg_buffer5 = sp + 304 | 0;
 $vararg_buffer2 = sp + 296 | 0;
 $vararg_buffer = sp + 280 | 0;
 $5 = sp + 272 | 0;
 $6 = sp + 240 | 0;
 $7 = sp + 340 | 0;
 $8 = sp;
 $9 = sp + 336 | 0;
 $10 = sp + 332 | 0;
 $11 = sp + 328 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 62819, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 L5 : do if (($$0 | 0) > 29) {
  if ($19) {
   __THREW__ = 0;
   $26 = invoke_i(1) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if (!($27 & 1)) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
    $31 = invoke_iiiii(23, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0;
    $32 = __THREW__;
    __THREW__ = 0;
    if (!($32 & 1)) {
     $$1 = $31;
     label = 12;
    }
   }
  } else {
   __THREW__ = 0;
   $36 = invoke_i(1) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer9 >> 3] = $4;
    $39 = invoke_iiiii(23, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0;
    $40 = __THREW__;
    __THREW__ = 0;
    if (!($40 & 1)) {
     $$1 = $39;
     label = 12;
    }
   }
  }
  do if ((label | 0) == 12) {
   $42 = HEAP32[$7 >> 2] | 0;
   if (!$42) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    break;
   } else {
    $$2 = $$1;
    $$sroa$069$0 = $42;
    $47 = $42;
    label = 15;
    break L5;
   }
  } while (0);
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$45482 = tempRet0;
  $$483 = $34;
 } else {
  $$2 = $$0;
  $$sroa$069$0 = 0;
  $47 = HEAP32[$7 >> 2] | 0;
  label = 15;
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0;
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0;
  do if (($47 | 0) == ($6 | 0)) {
   $$046 = $8;
   $$sroa$058$0 = 0;
   label = 19;
  } else {
   $51 = _malloc($$2 << 3) | 0;
   if (!$51) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $54 = ___cxa_find_matching_catch_2() | 0;
    $$24980 = $54;
    $$25279 = tempRet0;
    break;
   } else {
    $$046 = $51;
    $$sroa$058$0 = $51;
    label = 19;
    break;
   }
  } while (0);
  if ((label | 0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
   __THREW__ = 0;
   invoke_viiiiiii(6, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0);
   $57 = __THREW__;
   __THREW__ = 0;
   do if ($57 & 1) {
    $69 = ___cxa_find_matching_catch_2() | 0;
    $70 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$148 = $69;
    $$151 = $70;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    $60 = HEAP32[$9 >> 2] | 0;
    $61 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
    $62 = invoke_iiiiiii(40, $$byval_copy | 0, $$046 | 0, $60 | 0, $61 | 0, $2 | 0, $3 | 0) | 0;
    $63 = __THREW__;
    __THREW__ = 0;
    if ($63 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0;
     $$148 = $71;
     $$151 = tempRet0;
     break;
    }
    HEAP32[$1 >> 2] = $62;
    if ($$sroa$058$0 | 0) _free($$sroa$058$0);
    if ($$sroa$069$0 | 0) _free($$sroa$069$0);
    STACKTOP = sp;
    return $62 | 0;
   } while (0);
   if (!$$sroa$058$0) {
    $$24980 = $$148;
    $$25279 = $$151;
   } else {
    _free($$sroa$058$0);
    $$24980 = $$148;
    $$25279 = $$151;
   }
  }
  if (!$$sroa$069$0) {
   $$45482 = $$25279;
   $$483 = $$24980;
  } else {
   _free($$sroa$069$0);
   $$45482 = $$25279;
   $$483 = $$24980;
  }
 }
 ___resumeException($$483 | 0);
 return 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 164 | 0;
 $8 = sp;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 62819, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 L5 : do if (($$0 | 0) > 29) {
  if ($19) {
   __THREW__ = 0;
   $26 = invoke_i(1) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if (!($27 & 1)) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
    $31 = invoke_iiiii(23, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0;
    $32 = __THREW__;
    __THREW__ = 0;
    if (!($32 & 1)) {
     $$1 = $31;
     label = 12;
    }
   }
  } else {
   __THREW__ = 0;
   $36 = invoke_i(1) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer9 >> 3] = $4;
    $39 = invoke_iiiii(23, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0;
    $40 = __THREW__;
    __THREW__ = 0;
    if (!($40 & 1)) {
     $$1 = $39;
     label = 12;
    }
   }
  }
  do if ((label | 0) == 12) {
   $42 = HEAP32[$7 >> 2] | 0;
   if (!$42) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    break;
   } else {
    $$2 = $$1;
    $$sroa$071$0 = $42;
    $47 = $42;
    label = 15;
    break L5;
   }
  } while (0);
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$45484 = tempRet0;
  $$485 = $34;
 } else {
  $$2 = $$0;
  $$sroa$071$0 = 0;
  $47 = HEAP32[$7 >> 2] | 0;
  label = 15;
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0;
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0;
  do if (($47 | 0) == ($6 | 0)) {
   $$046 = $8;
   $$sroa$060$0 = 0;
   label = 19;
  } else {
   $51 = _malloc($$2 << 1) | 0;
   if (!$51) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $54 = ___cxa_find_matching_catch_2() | 0;
    $$24982 = $54;
    $$25281 = tempRet0;
    break;
   } else {
    $$046 = $51;
    $$sroa$060$0 = $51;
    label = 19;
    break;
   }
  } while (0);
  if ((label | 0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
   __THREW__ = 0;
   invoke_viiiiiii(4, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0);
   $57 = __THREW__;
   __THREW__ = 0;
   do if ($57 & 1) {
    $69 = ___cxa_find_matching_catch_2() | 0;
    $70 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$148 = $69;
    $$151 = $70;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    $60 = HEAP32[$9 >> 2] | 0;
    $61 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
    $62 = invoke_iiiiiii(39, $$byval_copy | 0, $$046 | 0, $60 | 0, $61 | 0, $2 | 0, $3 | 0) | 0;
    $63 = __THREW__;
    __THREW__ = 0;
    if ($63 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0;
     $$148 = $71;
     $$151 = tempRet0;
     break;
    }
    HEAP32[$1 >> 2] = $62;
    if ($$sroa$060$0 | 0) _free($$sroa$060$0);
    if ($$sroa$071$0 | 0) _free($$sroa$071$0);
    STACKTOP = sp;
    return $62 | 0;
   } while (0);
   if (!$$sroa$060$0) {
    $$24982 = $$148;
    $$25281 = $$151;
   } else {
    _free($$sroa$060$0);
    $$24982 = $$148;
    $$25281 = $$151;
   }
  }
  if (!$$sroa$071$0) {
   $$45484 = $$25281;
   $$485 = $$24982;
  } else {
   _free($$sroa$071$0);
   $$45484 = $$25281;
   $$485 = $$24982;
  }
 }
 ___resumeException($$485 | 0);
 return 0;
}
function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = +$4;
 var $$0 = 0, $$046 = 0, $$1 = 0, $$148 = 0, $$151 = 0, $$2 = 0, $$24982 = 0, $$25281 = 0, $$45484 = 0, $$485 = 0, $$byval_copy = 0, $$sroa$060$0 = 0, $$sroa$071$0 = 0, $10 = 0, $11 = 0, $12 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 168 | 0;
 $vararg_buffer9 = sp + 144 | 0;
 $vararg_buffer5 = sp + 128 | 0;
 $vararg_buffer2 = sp + 120 | 0;
 $vararg_buffer = sp + 104 | 0;
 $5 = sp + 96 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 164 | 0;
 $8 = sp;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = $5;
 HEAP32[$12 >> 2] = 37;
 HEAP32[$12 + 4 >> 2] = 0;
 $19 = __ZNSt3__214__num_put_base14__format_floatEPcPKcj($5 + 1 | 0, 53260, HEAP32[$2 + 4 >> 2] | 0) | 0;
 HEAP32[$7 >> 2] = $6;
 $20 = __ZNSt3__26__clocEv() | 0;
 if ($19) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$2 + 8 >> 2];
  HEAPF64[$vararg_buffer + 8 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer) | 0;
 } else {
  HEAPF64[$vararg_buffer2 >> 3] = $4;
  $$0 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 30, $20, $5, $vararg_buffer2) | 0;
 }
 L5 : do if (($$0 | 0) > 29) {
  if ($19) {
   __THREW__ = 0;
   $26 = invoke_i(1) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if (!($27 & 1)) {
    __THREW__ = 0;
    HEAP32[$vararg_buffer5 >> 2] = HEAP32[$2 + 8 >> 2];
    HEAPF64[$vararg_buffer5 + 8 >> 3] = $4;
    $31 = invoke_iiiii(23, $7 | 0, $26 | 0, $5 | 0, $vararg_buffer5 | 0) | 0;
    $32 = __THREW__;
    __THREW__ = 0;
    if (!($32 & 1)) {
     $$1 = $31;
     label = 12;
    }
   }
  } else {
   __THREW__ = 0;
   $36 = invoke_i(1) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if (!($37 & 1)) {
    __THREW__ = 0;
    HEAPF64[$vararg_buffer9 >> 3] = $4;
    $39 = invoke_iiiii(23, $7 | 0, $36 | 0, $5 | 0, $vararg_buffer9 | 0) | 0;
    $40 = __THREW__;
    __THREW__ = 0;
    if (!($40 & 1)) {
     $$1 = $39;
     label = 12;
    }
   }
  }
  do if ((label | 0) == 12) {
   $42 = HEAP32[$7 >> 2] | 0;
   if (!$42) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    break;
   } else {
    $$2 = $$1;
    $$sroa$071$0 = $42;
    $47 = $42;
    label = 15;
    break L5;
   }
  } while (0);
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$45484 = tempRet0;
  $$485 = $34;
 } else {
  $$2 = $$0;
  $$sroa$071$0 = 0;
  $47 = HEAP32[$7 >> 2] | 0;
  label = 15;
 } while (0);
 if ((label | 0) == 15) {
  $46 = $47 + $$2 | 0;
  $48 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($47, $46, $2) | 0;
  do if (($47 | 0) == ($6 | 0)) {
   $$046 = $8;
   $$sroa$060$0 = 0;
   label = 19;
  } else {
   $51 = _malloc($$2 << 1) | 0;
   if (!$51) {
    __THREW__ = 0;
    invoke_v(5);
    __THREW__ = 0;
    $54 = ___cxa_find_matching_catch_2() | 0;
    $$24982 = $54;
    $$25281 = tempRet0;
    break;
   } else {
    $$046 = $51;
    $$sroa$060$0 = $51;
    label = 19;
    break;
   }
  } while (0);
  if ((label | 0) == 19) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
   __THREW__ = 0;
   invoke_viiiiiii(4, $47 | 0, $48 | 0, $46 | 0, $$046 | 0, $9 | 0, $10 | 0, $$byval_copy | 0);
   $57 = __THREW__;
   __THREW__ = 0;
   do if ($57 & 1) {
    $69 = ___cxa_find_matching_catch_2() | 0;
    $70 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$148 = $69;
    $$151 = $70;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    HEAP32[$11 >> 2] = HEAP32[$1 >> 2];
    $60 = HEAP32[$9 >> 2] | 0;
    $61 = HEAP32[$10 >> 2] | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$11 >> 2];
    $62 = invoke_iiiiiii(39, $$byval_copy | 0, $$046 | 0, $60 | 0, $61 | 0, $2 | 0, $3 | 0) | 0;
    $63 = __THREW__;
    __THREW__ = 0;
    if ($63 & 1) {
     $71 = ___cxa_find_matching_catch_2() | 0;
     $$148 = $71;
     $$151 = tempRet0;
     break;
    }
    HEAP32[$1 >> 2] = $62;
    if ($$sroa$060$0 | 0) _free($$sroa$060$0);
    if ($$sroa$071$0 | 0) _free($$sroa$071$0);
    STACKTOP = sp;
    return $62 | 0;
   } while (0);
   if (!$$sroa$060$0) {
    $$24982 = $$148;
    $$25281 = $$151;
   } else {
    _free($$sroa$060$0);
    $$24982 = $$148;
    $$25281 = $$151;
   }
  }
  if (!$$sroa$071$0) {
   $$45484 = $$25281;
   $$485 = $$24982;
  } else {
   _free($$sroa$071$0);
   $$45484 = $$25281;
   $$485 = $$24982;
  }
 }
 ___resumeException($$485 | 0);
 return 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $108 = 0, $11 = 0, $118 = 0, $12 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $55 = 0, $6 = 0, $68 = 0, $7 = 0, $75 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $1 = sp + 188 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 180 | 0;
 $5 = sp + 176 | 0;
 $6 = sp + 172 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 164 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = sp;
 $13 = sp + 148 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $18 = sp + 128 | 0;
 $19 = sp + 124 | 0;
 $20 = sp + 120 | 0;
 $21 = sp + 116 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 108 | 0;
 $24 = sp + 104 | 0;
 $25 = sp + 100 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 92 | 0;
 $28 = sp + 88 | 0;
 $29 = sp + 84 | 0;
 $30 = sp + 80 | 0;
 $31 = sp + 76 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 68 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 60 | 0;
 $36 = sp + 56 | 0;
 $37 = sp + 52 | 0;
 $38 = sp + 48 | 0;
 $39 = sp + 44 | 0;
 $40 = sp + 40 | 0;
 $41 = sp + 36 | 0;
 $42 = sp + 32 | 0;
 $43 = sp + 28 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 20 | 0;
 $46 = sp + 16 | 0;
 $47 = sp + 12 | 0;
 HEAP32[$45 >> 2] = $0;
 $48 = HEAP32[$45 >> 2] | 0;
 if ((HEAP32[$48 + 16 >> 2] | 0) != -1) {
  $126 = $48 + 16 | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $127 + 1 | 0;
  HEAP32[$126 >> 2] = $128;
  STACKTOP = sp;
  return $127 | 0;
 }
 HEAP32[$9 >> 2] = $48;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 $55 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
 HEAP32[$3 >> 2] = $6;
 HEAP32[$4 >> 2] = $55;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
 HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
 HEAP32[$1 >> 2] = $8;
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$8 >> 2];
 while (1) {
  HEAP32[$23 >> 2] = $48;
  HEAP32[$21 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$18 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  $68 = HEAP32[$15 >> 2] | 0;
  HEAP32[$13 >> 2] = $20;
  HEAP32[$14 >> 2] = $68;
  HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[$14 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$20 >> 2];
  HEAP8[$12 >> 0] = HEAP8[$24 >> 0] | 0;
  HEAP8[$12 + 1 >> 0] = HEAP8[$24 + 1 >> 0] | 0;
  HEAP8[$12 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
  HEAP8[$12 + 3 >> 0] = HEAP8[$24 + 3 >> 0] | 0;
  HEAP32[$11 >> 2] = $22;
  HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$12 >> 2];
  HEAP32[$47 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$29 >> 2] = $46;
  HEAP32[$30 >> 2] = $47;
  $75 = HEAP32[$30 >> 2] | 0;
  HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$28 >> 2] = $75;
  $77 = HEAP32[$28 >> 2] | 0;
  HEAP32[$25 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$26 >> 2] = $77;
  if (!((HEAP32[HEAP32[$25 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$26 >> 2] >> 2] | 0) ^ 1)) break;
  HEAP32[$37 >> 2] = $46;
  HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = (HEAP32[HEAP32[$35 >> 2] >> 2] | 0) + 16;
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
  HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
  HEAP32[(HEAP32[$31 >> 2] | 0) + 4 + 4 >> 2] = 0;
  HEAP32[$44 >> 2] = $46;
  HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
  $96 = HEAP32[$43 >> 2] | 0;
  HEAP32[$42 >> 2] = HEAP32[$96 >> 2];
  if (HEAP32[(HEAP32[$42 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$40 >> 2] = HEAP32[(HEAP32[$42 >> 2] | 0) + 4 >> 2];
   while (1) {
    $108 = HEAP32[$40 >> 2] | 0;
    if (!(HEAP32[HEAP32[$40 >> 2] >> 2] | 0)) break;
    HEAP32[$40 >> 2] = HEAP32[$108 >> 2];
   }
   HEAP32[$41 >> 2] = $108;
  } else {
   while (1) {
    HEAP32[$39 >> 2] = HEAP32[$42 >> 2];
    $118 = HEAP32[$42 >> 2] | 0;
    if (!((HEAP32[$39 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$38 >> 2] = $118;
    HEAP32[$42 >> 2] = HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$41 >> 2] = HEAP32[$118 + 8 >> 2];
  }
  HEAP32[$96 >> 2] = HEAP32[$41 >> 2];
 }
 HEAP32[$48 + 16 >> 2] = 1;
 $126 = $48 + 16 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $127 + 1 | 0;
 HEAP32[$126 >> 2] = $128;
 STACKTOP = sp;
 return $127 | 0;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $108 = 0, $11 = 0, $118 = 0, $12 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $55 = 0, $6 = 0, $68 = 0, $7 = 0, $75 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $1 = sp + 188 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 184 | 0;
 $4 = sp + 180 | 0;
 $5 = sp + 176 | 0;
 $6 = sp + 172 | 0;
 $7 = sp + 168 | 0;
 $8 = sp + 164 | 0;
 $9 = sp + 160 | 0;
 $10 = sp + 156 | 0;
 $11 = sp + 152 | 0;
 $12 = sp;
 $13 = sp + 148 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $18 = sp + 128 | 0;
 $19 = sp + 124 | 0;
 $20 = sp + 120 | 0;
 $21 = sp + 116 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 108 | 0;
 $24 = sp + 104 | 0;
 $25 = sp + 100 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 92 | 0;
 $28 = sp + 88 | 0;
 $29 = sp + 84 | 0;
 $30 = sp + 80 | 0;
 $31 = sp + 76 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 68 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 60 | 0;
 $36 = sp + 56 | 0;
 $37 = sp + 52 | 0;
 $38 = sp + 48 | 0;
 $39 = sp + 44 | 0;
 $40 = sp + 40 | 0;
 $41 = sp + 36 | 0;
 $42 = sp + 32 | 0;
 $43 = sp + 28 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 20 | 0;
 $46 = sp + 16 | 0;
 $47 = sp + 12 | 0;
 HEAP32[$45 >> 2] = $0;
 $48 = HEAP32[$45 >> 2] | 0;
 if ((HEAP32[$48 + 16 >> 2] | 0) != -1) {
  $126 = $48 + 16 | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $127 + 1 | 0;
  HEAP32[$126 >> 2] = $128;
  STACKTOP = sp;
  return $127 | 0;
 }
 HEAP32[$9 >> 2] = $48;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 $55 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
 HEAP32[$3 >> 2] = $6;
 HEAP32[$4 >> 2] = $55;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
 HEAP8[$2 >> 0] = HEAP8[$10 >> 0] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[$10 + 1 >> 0] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[$10 + 2 >> 0] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[$10 + 3 >> 0] | 0;
 HEAP32[$1 >> 2] = $8;
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$8 >> 2];
 while (1) {
  HEAP32[$23 >> 2] = $48;
  HEAP32[$21 >> 2] = HEAP32[$23 >> 2];
  HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$18 >> 2] = (HEAP32[$19 >> 2] | 0) + 4;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  $68 = HEAP32[$15 >> 2] | 0;
  HEAP32[$13 >> 2] = $20;
  HEAP32[$14 >> 2] = $68;
  HEAP32[HEAP32[$13 >> 2] >> 2] = HEAP32[$14 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$20 >> 2];
  HEAP8[$12 >> 0] = HEAP8[$24 >> 0] | 0;
  HEAP8[$12 + 1 >> 0] = HEAP8[$24 + 1 >> 0] | 0;
  HEAP8[$12 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
  HEAP8[$12 + 3 >> 0] = HEAP8[$24 + 3 >> 0] | 0;
  HEAP32[$11 >> 2] = $22;
  HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$12 >> 2];
  HEAP32[$47 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$29 >> 2] = $46;
  HEAP32[$30 >> 2] = $47;
  $75 = HEAP32[$30 >> 2] | 0;
  HEAP32[$27 >> 2] = HEAP32[$29 >> 2];
  HEAP32[$28 >> 2] = $75;
  $77 = HEAP32[$28 >> 2] | 0;
  HEAP32[$25 >> 2] = HEAP32[$27 >> 2];
  HEAP32[$26 >> 2] = $77;
  if (!((HEAP32[HEAP32[$25 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$26 >> 2] >> 2] | 0) ^ 1)) break;
  HEAP32[$37 >> 2] = $46;
  HEAP32[$36 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
  HEAP32[$34 >> 2] = (HEAP32[HEAP32[$35 >> 2] >> 2] | 0) + 16;
  HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
  HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
  HEAP32[(HEAP32[$31 >> 2] | 0) + 4 + 4 >> 2] = 0;
  HEAP32[$44 >> 2] = $46;
  HEAP32[$43 >> 2] = HEAP32[$44 >> 2];
  $96 = HEAP32[$43 >> 2] | 0;
  HEAP32[$42 >> 2] = HEAP32[$96 >> 2];
  if (HEAP32[(HEAP32[$42 >> 2] | 0) + 4 >> 2] | 0) {
   HEAP32[$40 >> 2] = HEAP32[(HEAP32[$42 >> 2] | 0) + 4 >> 2];
   while (1) {
    $108 = HEAP32[$40 >> 2] | 0;
    if (!(HEAP32[HEAP32[$40 >> 2] >> 2] | 0)) break;
    HEAP32[$40 >> 2] = HEAP32[$108 >> 2];
   }
   HEAP32[$41 >> 2] = $108;
  } else {
   while (1) {
    HEAP32[$39 >> 2] = HEAP32[$42 >> 2];
    $118 = HEAP32[$42 >> 2] | 0;
    if (!((HEAP32[$39 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$39 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
    HEAP32[$38 >> 2] = $118;
    HEAP32[$42 >> 2] = HEAP32[(HEAP32[$38 >> 2] | 0) + 8 >> 2];
   }
   HEAP32[$41 >> 2] = HEAP32[$118 + 8 >> 2];
  }
  HEAP32[$96 >> 2] = HEAP32[$41 >> 2];
 }
 HEAP32[$48 + 16 >> 2] = 1;
 $126 = $48 + 16 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $127 + 1 | 0;
 HEAP32[$126 >> 2] = $128;
 STACKTOP = sp;
 return $127 | 0;
}

function __ZN3zim8FileImplD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $46 = 0, $5 = 0, $50 = 0, $57 = 0, $58 = 0, $6 = 0, $65 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $84 = 0, $88 = 0, $9 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $1 = sp + 144 | 0;
 $2 = sp + 140 | 0;
 $3 = sp + 136 | 0;
 $4 = sp + 132 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 124 | 0;
 $7 = sp + 120 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $11 = sp + 104 | 0;
 $12 = sp + 100 | 0;
 $13 = sp + 96 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 84 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $22 = sp + 60 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 4 | 0;
 $37 = sp;
 HEAP32[$37 >> 2] = $0;
 $38 = HEAP32[$37 >> 2] | 0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($38 + 356 | 0);
 __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEED2Ev($38 + 316 | 0);
 __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEED2Ev($38 + 276 | 0);
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEED2Ev($38 + 216 | 0);
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEED2Ev($38 + 160 | 0);
 HEAP32[$36 >> 2] = $38 + 156;
 HEAP32[$33 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$34 >> 2] = 0;
 $46 = HEAP32[$33 >> 2] | 0;
 HEAP32[$32 >> 2] = $46;
 HEAP32[$31 >> 2] = HEAP32[$32 >> 2];
 HEAP32[$35 >> 2] = HEAP32[HEAP32[$31 >> 2] >> 2];
 $50 = HEAP32[$34 >> 2] | 0;
 HEAP32[$28 >> 2] = $46;
 HEAP32[$27 >> 2] = HEAP32[$28 >> 2];
 HEAP32[HEAP32[$27 >> 2] >> 2] = $50;
 if (HEAP32[$35 >> 2] | 0) {
  HEAP32[$26 >> 2] = $46;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  $57 = HEAP32[$35 >> 2] | 0;
  HEAP32[sp + 32 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$30 >> 2] = $57;
  $58 = HEAP32[$30 >> 2] | 0;
  if ($58 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$58 >> 2] | 0) + 8 >> 2] & 255]($58);
 }
 HEAP32[$24 >> 2] = $38 + 152;
 HEAP32[$21 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$22 >> 2] = 0;
 $65 = HEAP32[$21 >> 2] | 0;
 HEAP32[$20 >> 2] = $65;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$23 >> 2] = HEAP32[HEAP32[$19 >> 2] >> 2];
 $69 = HEAP32[$22 >> 2] | 0;
 HEAP32[$16 >> 2] = $65;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$15 >> 2] >> 2] = $69;
 if (HEAP32[$23 >> 2] | 0) {
  HEAP32[$14 >> 2] = $65;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $76 = HEAP32[$23 >> 2] | 0;
  HEAP32[$17 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$18 >> 2] = $76;
  $77 = HEAP32[$18 >> 2] | 0;
  if ($77 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$77 >> 2] | 0) + 8 >> 2] & 255]($77);
 }
 HEAP32[$12 >> 2] = $38 + 148;
 HEAP32[$9 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = 0;
 $84 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = $84;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 $88 = HEAP32[$10 >> 2] | 0;
 HEAP32[$4 >> 2] = $84;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[HEAP32[$3 >> 2] >> 2] = $88;
 if (!(HEAP32[$11 >> 2] | 0)) {
  $101 = $38 + 136 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($101);
  $102 = $38 + 16 | 0;
  __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev($102);
  $103 = $38 + 8 | 0;
  __ZNSt3__210shared_ptrIN3zim10FileReaderEED2Ev($103);
  __ZNSt3__210shared_ptrIN3zim12FileCompoundEED2Ev($38);
  STACKTOP = sp;
  return;
 }
 HEAP32[$2 >> 2] = $84;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $95 = HEAP32[$11 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$6 >> 2] = $95;
 $96 = HEAP32[$6 >> 2] | 0;
 if (!$96) {
  $101 = $38 + 136 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($101);
  $102 = $38 + 16 | 0;
  __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev($102);
  $103 = $38 + 8 | 0;
  __ZNSt3__210shared_ptrIN3zim10FileReaderEED2Ev($103);
  __ZNSt3__210shared_ptrIN3zim12FileCompoundEED2Ev($38);
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$96 >> 2] | 0) + 8 >> 2] & 255]($96);
 $101 = $38 + 136 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($101);
 $102 = $38 + 16 | 0;
 __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev($102);
 $103 = $38 + 8 | 0;
 __ZNSt3__210shared_ptrIN3zim10FileReaderEED2Ev($103);
 __ZNSt3__210shared_ptrIN3zim12FileCompoundEED2Ev($38);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $100 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $116 = 0, $118 = 0, $12 = 0, $123 = 0, $124 = 0, $13 = 0, $130 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $46 = 0, $6 = 0, $60 = 0, $64 = 0, $66 = 0, $7 = 0, $71 = 0, $72 = 0, $77 = 0, $8 = 0, $81 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $94 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 108 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 104 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 100 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 96 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 16 | 0;
 $19 = sp + 84 | 0;
 $21 = sp + 76 | 0;
 $22 = sp + 72 | 0;
 $23 = sp;
 $24 = sp + 64 | 0;
 HEAP32[$17 >> 2] = $1;
 $25 = $18;
 HEAP32[$25 >> 2] = $2;
 HEAP32[$25 + 4 >> 2] = $3;
 HEAP32[$19 >> 2] = $4;
 HEAP32[sp + 80 >> 2] = $5;
 $29 = HEAP32[$17 >> 2] | 0;
 if (!(HEAP32[$29 + 68 >> 2] | 0)) {
  $33 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($33);
  ___cxa_throw($33 | 0, 42840, 182);
 }
 HEAP32[$16 >> 2] = HEAP32[$29 + 68 >> 2];
 $36 = HEAP32[$16 >> 2] | 0;
 HEAP32[$21 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 24 >> 2] & 127]($36) | 0;
 if (HEAP32[$29 + 64 >> 2] | 0) {
  $46 = $18;
  if (!((HEAP32[$21 >> 2] | 0) <= 0 & ((HEAP32[$46 >> 2] | 0) != 0 | (HEAP32[$46 + 4 >> 2] | 0) != 0))) if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 24 >> 2] & 127]($29) | 0)) {
   switch (HEAP32[$19 >> 2] | 0) {
   case 0:
    {
     HEAP32[$22 >> 2] = 0;
     break;
    }
   case 1:
    {
     HEAP32[$22 >> 2] = 1;
     break;
    }
   case 2:
    {
     HEAP32[$22 >> 2] = 2;
     break;
    }
   default:
    {
     HEAP32[$12 >> 2] = $0;
     $77 = $13;
     HEAP32[$77 >> 2] = -1;
     HEAP32[$77 + 4 >> 2] = -1;
     $81 = HEAP32[$12 >> 2] | 0;
     HEAP32[$81 >> 2] = 0;
     HEAP32[$81 + 4 >> 2] = 0;
     $83 = $13;
     $88 = HEAP32[$83 + 4 >> 2] | 0;
     $89 = $81 + 8 | 0;
     HEAP32[$89 >> 2] = HEAP32[$83 >> 2];
     HEAP32[$89 + 4 >> 2] = $88;
     STACKTOP = sp;
     return;
    }
   }
   $94 = HEAP32[$29 + 64 >> 2] | 0;
   if ((HEAP32[$21 >> 2] | 0) > 0) {
    $97 = HEAP32[$21 >> 2] | 0;
    $100 = $18;
    $106 = ___muldi3($97 | 0, (($97 | 0) < 0) << 31 >> 31 | 0, HEAP32[$100 >> 2] | 0, HEAP32[$100 + 4 >> 2] | 0) | 0;
    $109 = $106;
    $151 = tempRet0;
   } else {
    $109 = 0;
    $151 = 0;
   }
   if (___fseeko($94, $109, HEAP32[$22 >> 2] | 0) | 0) {
    HEAP32[$10 >> 2] = $0;
    $112 = $11;
    HEAP32[$112 >> 2] = -1;
    HEAP32[$112 + 4 >> 2] = -1;
    $116 = HEAP32[$10 >> 2] | 0;
    HEAP32[$116 >> 2] = 0;
    HEAP32[$116 + 4 >> 2] = 0;
    $118 = $11;
    $123 = HEAP32[$118 + 4 >> 2] | 0;
    $124 = $116 + 8 | 0;
    HEAP32[$124 >> 2] = HEAP32[$118 >> 2];
    HEAP32[$124 + 4 >> 2] = $123;
    STACKTOP = sp;
    return;
   } else {
    $130 = ___ftello(HEAP32[$29 + 64 >> 2] | 0) | 0;
    HEAP32[$6 >> 2] = $23;
    $133 = $7;
    HEAP32[$133 >> 2] = $130;
    HEAP32[$133 + 4 >> 2] = (($130 | 0) < 0) << 31 >> 31;
    $137 = HEAP32[$6 >> 2] | 0;
    HEAP32[$137 >> 2] = 0;
    HEAP32[$137 + 4 >> 2] = 0;
    $139 = $7;
    $144 = HEAP32[$139 + 4 >> 2] | 0;
    $145 = $137 + 8 | 0;
    HEAP32[$145 >> 2] = HEAP32[$139 >> 2];
    HEAP32[$145 + 4 >> 2] = $144;
    $149 = $29 + 72 | 0;
    HEAP32[$24 >> 2] = HEAP32[$149 >> 2];
    HEAP32[$24 + 4 >> 2] = HEAP32[$149 + 4 >> 2];
    HEAP8[$9 >> 0] = HEAP8[$24 >> 0] | 0;
    HEAP8[$9 + 1 >> 0] = HEAP8[$24 + 1 >> 0] | 0;
    HEAP8[$9 + 2 >> 0] = HEAP8[$24 + 2 >> 0] | 0;
    HEAP8[$9 + 3 >> 0] = HEAP8[$24 + 3 >> 0] | 0;
    HEAP8[$9 + 4 >> 0] = HEAP8[$24 + 4 >> 0] | 0;
    HEAP8[$9 + 5 >> 0] = HEAP8[$24 + 5 >> 0] | 0;
    HEAP8[$9 + 6 >> 0] = HEAP8[$24 + 6 >> 0] | 0;
    HEAP8[$9 + 7 >> 0] = HEAP8[$24 + 7 >> 0] | 0;
    HEAP32[$8 >> 2] = $23;
    $150 = HEAP32[$8 >> 2] | 0;
    HEAP32[$150 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$150 + 4 >> 2] = HEAP32[$9 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$0 + 4 >> 2] = HEAP32[$23 + 4 >> 2];
    HEAP32[$0 + 8 >> 2] = HEAP32[$23 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = HEAP32[$23 + 12 >> 2];
    STACKTOP = sp;
    return;
   }
  }
 }
 HEAP32[$14 >> 2] = $0;
 $60 = $15;
 HEAP32[$60 >> 2] = -1;
 HEAP32[$60 + 4 >> 2] = -1;
 $64 = HEAP32[$14 >> 2] | 0;
 HEAP32[$64 >> 2] = 0;
 HEAP32[$64 + 4 >> 2] = 0;
 $66 = $15;
 $71 = HEAP32[$66 + 4 >> 2] | 0;
 $72 = $64 + 8 | 0;
 HEAP32[$72 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$72 + 4 >> 2] = $71;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISM_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 132 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 108 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 $20 = sp + 76 | 0;
 $21 = sp + 72 | 0;
 $22 = sp + 68 | 0;
 $23 = sp + 64 | 0;
 $24 = sp + 60 | 0;
 $25 = sp + 56 | 0;
 $26 = sp + 52 | 0;
 $27 = sp + 48 | 0;
 $28 = sp + 44 | 0;
 $29 = sp + 40 | 0;
 $30 = sp + 36 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 28 | 0;
 $33 = sp + 24 | 0;
 $34 = sp + 20 | 0;
 $35 = sp + 16 | 0;
 $36 = sp + 12 | 0;
 $37 = sp + 8 | 0;
 $38 = sp + 4 | 0;
 $39 = sp;
 HEAP32[$35 >> 2] = $0;
 HEAP32[$36 >> 2] = $1;
 HEAP32[$37 >> 2] = $2;
 $40 = HEAP32[$35 >> 2] | 0;
 HEAP32[$33 >> 2] = $40;
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = (HEAP32[$32 >> 2] | 0) + 4;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$39 >> 2] = __ZNKSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE10__root_ptrEv($40) | 0;
 if (!(HEAP32[$38 >> 2] | 0)) {
  HEAP32[$27 >> 2] = $40;
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$23 >> 2];
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 while (1) {
  HEAP32[$15 >> 2] = $40;
  HEAP32[$14 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $56 = HEAP32[$37 >> 2] | 0;
  $58 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$7 >> 2] = $56;
  HEAP32[$8 >> 2] = $58;
  $60 = HEAP32[$7 >> 2] | 0;
  $61 = HEAP32[$8 >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 >> 2] = $60;
  HEAP32[$5 >> 2] = $61;
  if (__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) {
   $68 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[HEAP32[$38 >> 2] >> 2] | 0)) {
    label = 6;
    break;
   }
   HEAP32[$9 >> 2] = $68;
   HEAP32[$39 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$38 >> 2] = HEAP32[HEAP32[$38 >> 2] >> 2];
  } else {
   HEAP32[$12 >> 2] = $40;
   HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 8;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   $80 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
   $81 = HEAP32[$37 >> 2] | 0;
   HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$20 >> 2] = $80;
   HEAP32[$21 >> 2] = $81;
   $83 = HEAP32[$20 >> 2] | 0;
   $84 = HEAP32[$21 >> 2] | 0;
   HEAP32[$16 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = $83;
   HEAP32[$18 >> 2] = $84;
   $87 = __ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
   $88 = HEAP32[$38 >> 2] | 0;
   if (!$87) {
    label = 11;
    break;
   }
   $92 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[$88 + 4 >> 2] | 0)) {
    label = 10;
    break;
   }
   HEAP32[$22 >> 2] = $92 + 4;
   HEAP32[$39 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$38 >> 2] = HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2];
  }
 }
 if ((label | 0) == 6) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $68;
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $92;
  HEAP32[$34 >> 2] = (HEAP32[$38 >> 2] | 0) + 4;
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $88;
  HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISN_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $68 = 0, $7 = 0, $8 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $88 = 0, $9 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 132 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 108 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 $20 = sp + 76 | 0;
 $21 = sp + 72 | 0;
 $22 = sp + 68 | 0;
 $23 = sp + 64 | 0;
 $24 = sp + 60 | 0;
 $25 = sp + 56 | 0;
 $26 = sp + 52 | 0;
 $27 = sp + 48 | 0;
 $28 = sp + 44 | 0;
 $29 = sp + 40 | 0;
 $30 = sp + 36 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 28 | 0;
 $33 = sp + 24 | 0;
 $34 = sp + 20 | 0;
 $35 = sp + 16 | 0;
 $36 = sp + 12 | 0;
 $37 = sp + 8 | 0;
 $38 = sp + 4 | 0;
 $39 = sp;
 HEAP32[$35 >> 2] = $0;
 HEAP32[$36 >> 2] = $1;
 HEAP32[$37 >> 2] = $2;
 $40 = HEAP32[$35 >> 2] | 0;
 HEAP32[$33 >> 2] = $40;
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = (HEAP32[$32 >> 2] | 0) + 4;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$39 >> 2] = __ZNKSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE10__root_ptrEv($40) | 0;
 if (!(HEAP32[$38 >> 2] | 0)) {
  HEAP32[$27 >> 2] = $40;
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$23 >> 2];
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 while (1) {
  HEAP32[$15 >> 2] = $40;
  HEAP32[$14 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $56 = HEAP32[$37 >> 2] | 0;
  $58 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$7 >> 2] = $56;
  HEAP32[$8 >> 2] = $58;
  $60 = HEAP32[$7 >> 2] | 0;
  $61 = HEAP32[$8 >> 2] | 0;
  HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 >> 2] = $60;
  HEAP32[$5 >> 2] = $61;
  if (__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) {
   $68 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[HEAP32[$38 >> 2] >> 2] | 0)) {
    label = 6;
    break;
   }
   HEAP32[$9 >> 2] = $68;
   HEAP32[$39 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$38 >> 2] = HEAP32[HEAP32[$38 >> 2] >> 2];
  } else {
   HEAP32[$12 >> 2] = $40;
   HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 8;
   HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
   $80 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
   $81 = HEAP32[$37 >> 2] | 0;
   HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$20 >> 2] = $80;
   HEAP32[$21 >> 2] = $81;
   $83 = HEAP32[$20 >> 2] | 0;
   $84 = HEAP32[$21 >> 2] | 0;
   HEAP32[$16 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = $83;
   HEAP32[$18 >> 2] = $84;
   $87 = __ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
   $88 = HEAP32[$38 >> 2] | 0;
   if (!$87) {
    label = 11;
    break;
   }
   $92 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[$88 + 4 >> 2] | 0)) {
    label = 10;
    break;
   }
   HEAP32[$22 >> 2] = $92 + 4;
   HEAP32[$39 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$38 >> 2] = HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2];
  }
 }
 if ((label | 0) == 6) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $68;
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $92;
  HEAP32[$34 >> 2] = (HEAP32[$38 >> 2] | 0) + 4;
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $88;
  HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
  $112 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $112 | 0;
 }
 return 0;
}

function __ZN3zim14zip_uncompressEPKcNS_7zsize_tEPS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $101 = 0, $109 = 0, $11 = 0, $112 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $132 = 0, $134 = 0, $14 = 0, $142 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $7 = 0, $73 = 0, $75 = 0, $79 = 0, $8 = 0, $81 = 0, $84 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $3 = sp + 128 | 0;
 $4 = sp + 124 | 0;
 $5 = sp + 120 | 0;
 $6 = sp + 116 | 0;
 $7 = sp + 112 | 0;
 $8 = sp + 108 | 0;
 $9 = sp + 104 | 0;
 $10 = sp + 100 | 0;
 $11 = sp;
 $12 = sp + 96 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 32 | 0;
 $15 = sp + 28 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 20 | 0;
 $18 = sp + 8 | 0;
 $19 = sp + 132 | 0;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $2;
 __ZN3zim7zsize_tC2Ey($11, 1048576, 0);
 $20 = $11;
 $22 = HEAP32[$20 >> 2] | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 HEAP32[$12 >> 2] = __Znam($25 >>> 0 > 1 | ($25 | 0) == 1 & $22 >>> 0 >= 0 ? -1 : $22) | 0;
 dest = $13;
 stop = dest + 56 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$13 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$13 + 16 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$14 >> 2] = _inflateInit_($13, 50777, 56) | 0;
 if (HEAP32[$14 >> 2] | 0) {
  $53 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(60, $53 | 0, 50219);
  $54 = __THREW__;
  __THREW__ = 0;
  if (!($54 & 1)) ___cxa_throw($53 | 0, 42792, 178);
  $56 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $56;
  HEAP32[$16 >> 2] = tempRet0;
  ___cxa_free_exception($53 | 0);
  $147 = HEAP32[$15 >> 2] | 0;
  $148 = HEAP32[$16 >> 2] | 0;
  ___resumeException($147 | 0);
 }
 while (1) {
  HEAP32[$14 >> 2] = _inflate($13, 4) | 0;
  do if ((HEAP32[$14 >> 2] | 0) == -5) {
   if (!(HEAP32[$13 + 4 >> 2] | 0)) if (HEAP32[$13 + 16 >> 2] | 0) {
    label = 12;
    break;
   }
   $67 = $11;
   $73 = ___muldi3(HEAP32[$67 >> 2] | 0, HEAP32[$67 + 4 >> 2] | 0, 2, 0) | 0;
   $75 = $11;
   HEAP32[$75 >> 2] = $73;
   HEAP32[$75 + 4 >> 2] = tempRet0;
   $79 = $11;
   $81 = HEAP32[$79 >> 2] | 0;
   $84 = HEAP32[$79 + 4 >> 2] | 0;
   HEAP32[$17 >> 2] = __Znam($84 >>> 0 > 1 | ($84 | 0) == 1 & $81 >>> 0 >= 0 ? -1 : $81) | 0;
   _memcpy(HEAP32[$17 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 + 20 >> 2] | 0) | 0;
   HEAP32[$13 + 12 >> 2] = (HEAP32[$17 >> 2] | 0) + (HEAP32[$13 + 20 >> 2] | 0);
   $101 = $11;
   $109 = _i64Subtract(HEAP32[$101 >> 2] | 0, HEAP32[$101 + 4 >> 2] | 0, HEAP32[$13 + 20 >> 2] | 0, 0) | 0;
   HEAP32[$13 + 16 >> 2] = $109;
   $112 = HEAP32[$12 >> 2] | 0;
   if ($112 | 0) __ZdaPv($112);
   HEAP32[$12 >> 2] = HEAP32[$17 >> 2];
  } else label = 12; while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ((HEAP32[$14 >> 2] | 0) != 1 & (HEAP32[$14 >> 2] | 0) != 0) break;
  }
  if ((HEAP32[$14 >> 2] | 0) == 1) {
   label = 21;
   break;
  }
 }
 if ((label | 0) == 21) {
  $142 = HEAP32[$10 >> 2] | 0;
  HEAP32[$142 >> 2] = HEAP32[$13 + 20 >> 2];
  HEAP32[$142 + 4 >> 2] = 0;
  _inflateEnd($13) | 0;
  STACKTOP = sp;
  return HEAP32[$12 >> 2] | 0;
 }
 $119 = ___cxa_allocate_exception(8) | 0;
 HEAP8[$19 >> 0] = 1;
 HEAP32[$7 >> 2] = $18;
 HEAP32[$8 >> 2] = 50283;
 $120 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $120;
 $121 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $121;
 $122 = HEAP32[$5 >> 2] | 0;
 HEAP32[$122 >> 2] = 0;
 HEAP32[$122 + 4 >> 2] = 0;
 HEAP32[$122 + 8 >> 2] = 0;
 HEAP32[$4 >> 2] = $121;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $124 = HEAP32[$8 >> 2] | 0;
 $126 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$8 >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_viii(8, $120 | 0, $124 | 0, $126 | 0);
 $127 = __THREW__;
 __THREW__ = 0;
 if ($127 & 1) {
  $132 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $132;
  HEAP32[$16 >> 2] = tempRet0;
 } else {
  __THREW__ = 0;
  invoke_vii(58, $119 | 0, $18 | 0);
  $129 = __THREW__;
  __THREW__ = 0;
  if (!($129 & 1)) {
   HEAP8[$19 >> 0] = 0;
   __THREW__ = 0;
   invoke_viii(11, $119 | 0, 41024, 53);
   __THREW__ = 0;
  }
  $134 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $134;
  HEAP32[$16 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($18);
 }
 if (!(HEAP8[$19 >> 0] & 1)) {
  $147 = HEAP32[$15 >> 2] | 0;
  $148 = HEAP32[$16 >> 2] | 0;
  ___resumeException($147 | 0);
 }
 ___cxa_free_exception($119 | 0);
 $147 = HEAP32[$15 >> 2] | 0;
 $148 = HEAP32[$16 >> 2] | 0;
 ___resumeException($147 | 0);
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE12__find_equalIcEERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISG_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $72 = 0, $8 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $9 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 132 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 108 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 $20 = sp + 76 | 0;
 $21 = sp + 72 | 0;
 $22 = sp + 68 | 0;
 $23 = sp + 64 | 0;
 $24 = sp + 60 | 0;
 $25 = sp + 56 | 0;
 $26 = sp + 52 | 0;
 $27 = sp + 48 | 0;
 $28 = sp + 44 | 0;
 $29 = sp + 40 | 0;
 $30 = sp + 36 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 28 | 0;
 $33 = sp + 24 | 0;
 $34 = sp + 20 | 0;
 $35 = sp + 16 | 0;
 $36 = sp + 12 | 0;
 $37 = sp + 8 | 0;
 $38 = sp + 4 | 0;
 $39 = sp;
 HEAP32[$35 >> 2] = $0;
 HEAP32[$36 >> 2] = $1;
 HEAP32[$37 >> 2] = $2;
 $40 = HEAP32[$35 >> 2] | 0;
 HEAP32[$33 >> 2] = $40;
 HEAP32[$32 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$31 >> 2] = (HEAP32[$32 >> 2] | 0) + 4;
 HEAP32[$30 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$29 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$28 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$28 >> 2] >> 2];
 HEAP32[$39 >> 2] = __ZNKSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv($40) | 0;
 if (!(HEAP32[$38 >> 2] | 0)) {
  HEAP32[$27 >> 2] = $40;
  HEAP32[$26 >> 2] = (HEAP32[$27 >> 2] | 0) + 4;
  HEAP32[$25 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  HEAP32[HEAP32[$36 >> 2] >> 2] = HEAP32[$23 >> 2];
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $120 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 while (1) {
  HEAP32[$5 >> 2] = $40;
  HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  $56 = HEAP32[$37 >> 2] | 0;
  $58 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
  HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$10 >> 2] = $56;
  HEAP32[$11 >> 2] = $58;
  $60 = HEAP32[$10 >> 2] | 0;
  $61 = HEAP32[$11 >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = $60;
  HEAP32[$8 >> 2] = $61;
  if ((HEAP8[HEAP32[$7 >> 2] >> 0] | 0) < (HEAP8[HEAP32[$8 >> 2] >> 0] | 0)) {
   $72 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[HEAP32[$38 >> 2] >> 2] | 0)) {
    label = 6;
    break;
   }
   HEAP32[$12 >> 2] = $72;
   HEAP32[$39 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$38 >> 2] = HEAP32[HEAP32[$38 >> 2] >> 2];
  } else {
   HEAP32[$15 >> 2] = $40;
   HEAP32[$14 >> 2] = (HEAP32[$15 >> 2] | 0) + 8;
   HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
   $84 = (HEAP32[$38 >> 2] | 0) + 16 | 0;
   $85 = HEAP32[$37 >> 2] | 0;
   HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$20 >> 2] = $84;
   HEAP32[$21 >> 2] = $85;
   $87 = HEAP32[$20 >> 2] | 0;
   $88 = HEAP32[$21 >> 2] | 0;
   HEAP32[$16 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$17 >> 2] = $87;
   HEAP32[$18 >> 2] = $88;
   $96 = HEAP32[$38 >> 2] | 0;
   if ((HEAP8[HEAP32[$17 >> 2] >> 0] | 0) >= (HEAP8[HEAP32[$18 >> 2] >> 0] | 0)) {
    label = 11;
    break;
   }
   $100 = HEAP32[$38 >> 2] | 0;
   if (!(HEAP32[$96 + 4 >> 2] | 0)) {
    label = 10;
    break;
   }
   HEAP32[$22 >> 2] = $100 + 4;
   HEAP32[$39 >> 2] = HEAP32[$22 >> 2];
   HEAP32[$38 >> 2] = HEAP32[(HEAP32[$38 >> 2] | 0) + 4 >> 2];
  }
 }
 if ((label | 0) == 6) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $72;
  HEAP32[$34 >> 2] = HEAP32[HEAP32[$36 >> 2] >> 2];
  $120 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $100;
  HEAP32[$34 >> 2] = (HEAP32[$38 >> 2] | 0) + 4;
  $120 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[HEAP32[$36 >> 2] >> 2] = $96;
  HEAP32[$34 >> 2] = HEAP32[$39 >> 2];
  $120 = HEAP32[$34 >> 2] | 0;
  STACKTOP = sp;
  return $120 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE4findIS3_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $108 = 0, $11 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $60 = 0, $7 = 0, $74 = 0, $79 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 188 | 0;
 $4 = sp + 184 | 0;
 $5 = sp + 180 | 0;
 $6 = sp + 176 | 0;
 $7 = sp + 172 | 0;
 $8 = sp + 168 | 0;
 $9 = sp + 164 | 0;
 $10 = sp + 160 | 0;
 $11 = sp + 156 | 0;
 $12 = sp + 152 | 0;
 $13 = sp + 148 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $18 = sp + 128 | 0;
 $19 = sp + 124 | 0;
 $20 = sp + 120 | 0;
 $21 = sp + 116 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 108 | 0;
 $24 = sp + 104 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 92 | 0;
 $28 = sp + 88 | 0;
 $29 = sp + 84 | 0;
 $30 = sp + 80 | 0;
 $31 = sp + 76 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 68 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 60 | 0;
 $36 = sp + 56 | 0;
 $37 = sp + 52 | 0;
 $38 = sp + 48 | 0;
 $39 = sp + 44 | 0;
 $40 = sp + 40 | 0;
 $41 = sp + 36 | 0;
 $42 = sp + 32 | 0;
 $43 = sp + 28 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 20 | 0;
 $46 = sp + 16 | 0;
 $47 = sp + 12 | 0;
 $48 = sp + 8 | 0;
 $49 = sp + 4 | 0;
 $50 = sp;
 HEAP32[$47 >> 2] = $0;
 HEAP32[$48 >> 2] = $1;
 $51 = HEAP32[$47 >> 2] | 0;
 $52 = HEAP32[$48 >> 2] | 0;
 HEAP32[$45 >> 2] = $51;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$43 >> 2] = (HEAP32[$44 >> 2] | 0) + 4;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $60 = HEAP32[HEAP32[$40 >> 2] >> 2] | 0;
 HEAP32[$24 >> 2] = $51;
 HEAP32[$23 >> 2] = (HEAP32[$24 >> 2] | 0) + 4;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$49 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE13__lower_boundIS3_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_SN_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISL_EEEE($51, $52, $60, HEAP32[$20 >> 2] | 0) | 0;
 HEAP32[$10 >> 2] = $51;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 $74 = HEAP32[$4 >> 2] | 0;
 HEAP32[$2 >> 2] = $9;
 HEAP32[$3 >> 2] = $74;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 HEAP32[$50 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$13 >> 2] = $49;
 HEAP32[$14 >> 2] = $50;
 $79 = HEAP32[$14 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$12 >> 2] = $79;
 if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) ^ 1) {
  HEAP32[$17 >> 2] = $51;
  HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  $89 = HEAP32[$15 >> 2] | 0;
  $90 = HEAP32[$48 >> 2] | 0;
  HEAP32[$19 >> 2] = $49;
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  $94 = (HEAP32[HEAP32[$18 >> 2] >> 2] | 0) + 16 | 0;
  HEAP32[$28 >> 2] = $89;
  HEAP32[$29 >> 2] = $90;
  HEAP32[$30 >> 2] = $94;
  $96 = HEAP32[$29 >> 2] | 0;
  $97 = HEAP32[$30 >> 2] | 0;
  HEAP32[sp + 100 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$26 >> 2] = $96;
  HEAP32[$27 >> 2] = $97;
  if ((__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0) | 0) ^ 1) {
   HEAP32[$46 >> 2] = HEAP32[$49 >> 2];
   $112 = HEAP32[$46 >> 2] | 0;
   STACKTOP = sp;
   return $112 | 0;
  }
 }
 HEAP32[$39 >> 2] = $51;
 HEAP32[$37 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$36 >> 2] = (HEAP32[$37 >> 2] | 0) + 4;
 HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 $108 = HEAP32[$33 >> 2] | 0;
 HEAP32[$31 >> 2] = $38;
 HEAP32[$32 >> 2] = $108;
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$38 >> 2];
 $112 = HEAP32[$46 >> 2] | 0;
 STACKTOP = sp;
 return $112 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE4findIS3_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $108 = 0, $11 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $60 = 0, $7 = 0, $74 = 0, $79 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 188 | 0;
 $4 = sp + 184 | 0;
 $5 = sp + 180 | 0;
 $6 = sp + 176 | 0;
 $7 = sp + 172 | 0;
 $8 = sp + 168 | 0;
 $9 = sp + 164 | 0;
 $10 = sp + 160 | 0;
 $11 = sp + 156 | 0;
 $12 = sp + 152 | 0;
 $13 = sp + 148 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $18 = sp + 128 | 0;
 $19 = sp + 124 | 0;
 $20 = sp + 120 | 0;
 $21 = sp + 116 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 108 | 0;
 $24 = sp + 104 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 92 | 0;
 $28 = sp + 88 | 0;
 $29 = sp + 84 | 0;
 $30 = sp + 80 | 0;
 $31 = sp + 76 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 68 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 60 | 0;
 $36 = sp + 56 | 0;
 $37 = sp + 52 | 0;
 $38 = sp + 48 | 0;
 $39 = sp + 44 | 0;
 $40 = sp + 40 | 0;
 $41 = sp + 36 | 0;
 $42 = sp + 32 | 0;
 $43 = sp + 28 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 20 | 0;
 $46 = sp + 16 | 0;
 $47 = sp + 12 | 0;
 $48 = sp + 8 | 0;
 $49 = sp + 4 | 0;
 $50 = sp;
 HEAP32[$47 >> 2] = $0;
 HEAP32[$48 >> 2] = $1;
 $51 = HEAP32[$47 >> 2] | 0;
 $52 = HEAP32[$48 >> 2] | 0;
 HEAP32[$45 >> 2] = $51;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$43 >> 2] = (HEAP32[$44 >> 2] | 0) + 4;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $60 = HEAP32[HEAP32[$40 >> 2] >> 2] | 0;
 HEAP32[$24 >> 2] = $51;
 HEAP32[$23 >> 2] = (HEAP32[$24 >> 2] | 0) + 4;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$49 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE13__lower_boundIS3_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_SO_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISM_EEEE($51, $52, $60, HEAP32[$20 >> 2] | 0) | 0;
 HEAP32[$10 >> 2] = $51;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 $74 = HEAP32[$4 >> 2] | 0;
 HEAP32[$2 >> 2] = $9;
 HEAP32[$3 >> 2] = $74;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 HEAP32[$50 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$13 >> 2] = $49;
 HEAP32[$14 >> 2] = $50;
 $79 = HEAP32[$14 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$12 >> 2] = $79;
 if ((HEAP32[HEAP32[$11 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) ^ 1) {
  HEAP32[$17 >> 2] = $51;
  HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
  HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
  $89 = HEAP32[$15 >> 2] | 0;
  $90 = HEAP32[$48 >> 2] | 0;
  HEAP32[$19 >> 2] = $49;
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  $94 = (HEAP32[HEAP32[$18 >> 2] >> 2] | 0) + 16 | 0;
  HEAP32[$28 >> 2] = $89;
  HEAP32[$29 >> 2] = $90;
  HEAP32[$30 >> 2] = $94;
  $96 = HEAP32[$29 >> 2] | 0;
  $97 = HEAP32[$30 >> 2] | 0;
  HEAP32[sp + 100 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$26 >> 2] = $96;
  HEAP32[$27 >> 2] = $97;
  if ((__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$26 >> 2] | 0, HEAP32[$27 >> 2] | 0) | 0) ^ 1) {
   HEAP32[$46 >> 2] = HEAP32[$49 >> 2];
   $112 = HEAP32[$46 >> 2] | 0;
   STACKTOP = sp;
   return $112 | 0;
  }
 }
 HEAP32[$39 >> 2] = $51;
 HEAP32[$37 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$36 >> 2] = (HEAP32[$37 >> 2] | 0) + 4;
 HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 $108 = HEAP32[$33 >> 2] | 0;
 HEAP32[$31 >> 2] = $38;
 HEAP32[$32 >> 2] = $108;
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$38 >> 2];
 $112 = HEAP32[$46 >> 2] | 0;
 STACKTOP = sp;
 return $112 | 0;
}

function __ZN3zim10FileReaderC2ENSt3__210shared_ptrIKNS_12FileCompoundEEENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $12 = 0, $121 = 0, $123 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $14 = 0, $140 = 0, $141 = 0, $145 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $16 = 0, $162 = 0, $168 = 0, $17 = 0, $174 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $52 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $74 = 0, $79 = 0, $80 = 0, $85 = 0, $9 = 0, $91 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $4 = sp + 92 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 84 | 0;
 $7 = sp + 80 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 68 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 8 | 0;
 $21 = sp;
 HEAP32[$13 >> 2] = $0;
 $22 = HEAP32[$13 >> 2] | 0;
 __ZN3zim6ReaderC2Ev($22);
 HEAP32[$22 >> 2] = 43032;
 $23 = $22 + 4 | 0;
 HEAP32[$11 >> 2] = $23;
 HEAP32[$12 >> 2] = $1;
 $24 = HEAP32[$11 >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
 HEAP32[$24 + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$24 + 4 >> 2] | 0) {
  HEAP32[$10 >> 2] = HEAP32[$24 + 4 >> 2];
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
  $39 = HEAP32[$6 >> 2] | 0;
  HEAP32[$7 >> 2] = 1;
  $40 = HEAP32[$7 >> 2] | 0;
  $41 = HEAP32[$39 >> 2] | 0;
  HEAP32[$39 >> 2] = $41 + $40;
  HEAP32[sp + 76 >> 2] = $41 + $40;
 }
 $44 = $22 + 16 | 0;
 HEAP32[$44 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$44 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 $45 = $22 + 24 | 0;
 HEAP32[$45 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$45 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $46 = $2;
 $51 = HEAP32[$46 + 4 >> 2] | 0;
 $52 = $14;
 HEAP32[$52 >> 2] = HEAP32[$46 >> 2];
 HEAP32[$52 + 4 >> 2] = $51;
 HEAP32[$5 >> 2] = $1;
 $58 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$5 >> 2] >> 2] | 0) | 0;
 $60 = $16;
 HEAP32[$60 >> 2] = $58;
 HEAP32[$60 + 4 >> 2] = tempRet0;
 $64 = $16;
 $69 = HEAP32[$64 + 4 >> 2] | 0;
 $70 = $15;
 HEAP32[$70 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$70 + 4 >> 2] = $69;
 $74 = $14;
 $79 = HEAP32[$74 + 4 >> 2] | 0;
 $80 = $15;
 $85 = HEAP32[$80 + 4 >> 2] | 0;
 if (!($79 >>> 0 < $85 >>> 0 | (($79 | 0) == ($85 | 0) ? (HEAP32[$74 >> 2] | 0) >>> 0 < (HEAP32[$80 >> 2] | 0) >>> 0 : 0))) {
  $91 = $14;
  $97 = $15;
  __THREW__ = 0;
  invoke_viiiiiiiii(1, 51091, 50980, 48641, HEAP32[$91 >> 2] | 0, HEAP32[$91 + 4 >> 2] | 0, HEAP32[$97 >> 2] | 0, HEAP32[$97 + 4 >> 2] | 0, 48618, 60);
  $103 = __THREW__;
  __THREW__ = 0;
  if ($103 & 1) {
   $105 = ___cxa_find_matching_catch_2() | 0;
   $106 = tempRet0;
   HEAP32[$17 >> 2] = $105;
   HEAP32[$18 >> 2] = $106;
   __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($23);
   __ZN3zim6ReaderD2Ev($22);
   $107 = HEAP32[$17 >> 2] | 0;
   $108 = HEAP32[$18 >> 2] | 0;
   ___resumeException($107 | 0);
  }
 }
 $109 = $2;
 $115 = $3;
 $121 = _i64Add(HEAP32[$109 >> 2] | 0, HEAP32[$109 + 4 >> 2] | 0, HEAP32[$115 >> 2] | 0, HEAP32[$115 + 4 >> 2] | 0) | 0;
 $123 = $19;
 HEAP32[$123 >> 2] = $121;
 HEAP32[$123 + 4 >> 2] = tempRet0;
 HEAP32[$4 >> 2] = $1;
 $129 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
 $131 = $21;
 HEAP32[$131 >> 2] = $129;
 HEAP32[$131 + 4 >> 2] = tempRet0;
 $135 = $21;
 $140 = HEAP32[$135 + 4 >> 2] | 0;
 $141 = $20;
 HEAP32[$141 >> 2] = HEAP32[$135 >> 2];
 HEAP32[$141 + 4 >> 2] = $140;
 $145 = $19;
 $150 = HEAP32[$145 + 4 >> 2] | 0;
 $151 = $20;
 $156 = HEAP32[$151 + 4 >> 2] | 0;
 if ($150 >>> 0 < $156 >>> 0 | (($150 | 0) == ($156 | 0) ? (HEAP32[$145 >> 2] | 0) >>> 0 <= (HEAP32[$151 >> 2] | 0) >>> 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 $162 = $19;
 $168 = $20;
 __THREW__ = 0;
 invoke_viiiiiiiii(1, 48830, 51100, 48641, HEAP32[$162 >> 2] | 0, HEAP32[$162 + 4 >> 2] | 0, HEAP32[$168 >> 2] | 0, HEAP32[$168 + 4 >> 2] | 0, 48618, 61);
 $174 = __THREW__;
 __THREW__ = 0;
 if ($174 & 1) {
  $105 = ___cxa_find_matching_catch_2() | 0;
  $106 = tempRet0;
  HEAP32[$17 >> 2] = $105;
  HEAP32[$18 >> 2] = $106;
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($23);
  __ZN3zim6ReaderD2Ev($22);
  $107 = HEAP32[$17 >> 2] | 0;
  $108 = HEAP32[$18 >> 2] | 0;
  ___resumeException($107 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE5eraseENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEElEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $104 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $7 = 0, $73 = 0, $8 = 0, $84 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $2 = sp + 164 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 156 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 148 | 0;
 $7 = sp + 144 | 0;
 $8 = sp + 140 | 0;
 $9 = sp + 136 | 0;
 $10 = sp + 132 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 124 | 0;
 $13 = sp + 120 | 0;
 $14 = sp + 116 | 0;
 $15 = sp + 112 | 0;
 $16 = sp + 108 | 0;
 $17 = sp + 104 | 0;
 $18 = sp + 100 | 0;
 $19 = sp + 96 | 0;
 $20 = sp + 92 | 0;
 $21 = sp + 88 | 0;
 $22 = sp + 84 | 0;
 $23 = sp + 80 | 0;
 $24 = sp + 76 | 0;
 $25 = sp + 72 | 0;
 $26 = sp + 68 | 0;
 $27 = sp;
 $28 = sp + 64 | 0;
 $29 = sp + 60 | 0;
 $30 = sp + 168 | 0;
 $31 = sp + 56 | 0;
 $32 = sp + 52 | 0;
 $33 = sp + 48 | 0;
 $34 = sp + 44 | 0;
 $35 = sp + 40 | 0;
 $36 = sp + 36 | 0;
 $37 = sp + 32 | 0;
 $38 = sp + 28 | 0;
 $39 = sp + 24 | 0;
 $40 = sp + 20 | 0;
 $41 = sp + 16 | 0;
 $42 = sp + 12 | 0;
 $43 = sp + 8 | 0;
 $44 = sp + 4 | 0;
 HEAP32[$42 >> 2] = $0;
 $45 = HEAP32[$42 >> 2] | 0;
 HEAP32[$40 >> 2] = $1;
 HEAP32[$43 >> 2] = HEAP32[HEAP32[$40 >> 2] >> 2];
 $48 = HEAP32[$1 >> 2] | 0;
 HEAP32[$31 >> 2] = $41;
 HEAP32[$32 >> 2] = $48;
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
 HEAP32[$24 >> 2] = $41;
 $51 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$51 >> 2];
 if (HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2];
  while (1) {
   $63 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP32[HEAP32[$21 >> 2] >> 2] | 0)) break;
   HEAP32[$21 >> 2] = HEAP32[$63 >> 2];
  }
  HEAP32[$22 >> 2] = $63;
 } else {
  while (1) {
   HEAP32[$20 >> 2] = HEAP32[$23 >> 2];
   $73 = HEAP32[$23 >> 2] | 0;
   if (!((HEAP32[$20 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
   HEAP32[$19 >> 2] = $73;
   HEAP32[$23 >> 2] = HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$22 >> 2] = HEAP32[$73 + 8 >> 2];
 }
 HEAP32[$51 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$14 >> 2] = $45;
 if ((HEAP32[HEAP32[$14 >> 2] >> 2] | 0) == (HEAP32[$1 >> 2] | 0)) {
  $84 = HEAP32[$41 >> 2] | 0;
  HEAP32[$2 >> 2] = $45;
  HEAP32[HEAP32[$2 >> 2] >> 2] = $84;
 }
 HEAP32[$5 >> 2] = $45;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $89 = HEAP32[$3 >> 2] | 0;
 HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + -1;
 HEAP32[$8 >> 2] = $45;
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$13 >> 2] = $45;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAP32[$43 >> 2] | 0);
 $104 = HEAP32[$44 >> 2] | 0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$18 >> 2] = (HEAP32[HEAP32[$15 >> 2] >> 2] | 0) + 16;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 $110 = HEAP32[$17 >> 2] | 0;
 HEAP32[$28 >> 2] = $104;
 HEAP32[$29 >> 2] = $110;
 $111 = HEAP32[$28 >> 2] | 0;
 $112 = HEAP32[$29 >> 2] | 0;
 HEAP8[$27 >> 0] = HEAP8[$30 >> 0] | 0;
 HEAP32[$25 >> 2] = $111;
 HEAP32[$26 >> 2] = $112;
 __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev(HEAP32[$26 >> 2] | 0);
 $115 = HEAP32[$43 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$38 >> 2] = $115;
 HEAP32[$39 >> 2] = 1;
 $117 = HEAP32[$38 >> 2] | 0;
 $118 = HEAP32[$39 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$35 >> 2] = $117;
 HEAP32[$36 >> 2] = $118;
 HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
 __ZdlPv(HEAP32[$33 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$41 >> 2] | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE5eraseENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_PvEElEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $104 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $115 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $51 = 0, $6 = 0, $63 = 0, $7 = 0, $73 = 0, $8 = 0, $84 = 0, $89 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $2 = sp + 164 | 0;
 $3 = sp + 160 | 0;
 $4 = sp + 156 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 148 | 0;
 $7 = sp + 144 | 0;
 $8 = sp + 140 | 0;
 $9 = sp + 136 | 0;
 $10 = sp + 132 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 124 | 0;
 $13 = sp + 120 | 0;
 $14 = sp + 116 | 0;
 $15 = sp + 112 | 0;
 $16 = sp + 108 | 0;
 $17 = sp + 104 | 0;
 $18 = sp + 100 | 0;
 $19 = sp + 96 | 0;
 $20 = sp + 92 | 0;
 $21 = sp + 88 | 0;
 $22 = sp + 84 | 0;
 $23 = sp + 80 | 0;
 $24 = sp + 76 | 0;
 $25 = sp + 72 | 0;
 $26 = sp + 68 | 0;
 $27 = sp;
 $28 = sp + 64 | 0;
 $29 = sp + 60 | 0;
 $30 = sp + 168 | 0;
 $31 = sp + 56 | 0;
 $32 = sp + 52 | 0;
 $33 = sp + 48 | 0;
 $34 = sp + 44 | 0;
 $35 = sp + 40 | 0;
 $36 = sp + 36 | 0;
 $37 = sp + 32 | 0;
 $38 = sp + 28 | 0;
 $39 = sp + 24 | 0;
 $40 = sp + 20 | 0;
 $41 = sp + 16 | 0;
 $42 = sp + 12 | 0;
 $43 = sp + 8 | 0;
 $44 = sp + 4 | 0;
 HEAP32[$42 >> 2] = $0;
 $45 = HEAP32[$42 >> 2] | 0;
 HEAP32[$40 >> 2] = $1;
 HEAP32[$43 >> 2] = HEAP32[HEAP32[$40 >> 2] >> 2];
 $48 = HEAP32[$1 >> 2] | 0;
 HEAP32[$31 >> 2] = $41;
 HEAP32[$32 >> 2] = $48;
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
 HEAP32[$24 >> 2] = $41;
 $51 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = HEAP32[$51 >> 2];
 if (HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2];
  while (1) {
   $63 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP32[HEAP32[$21 >> 2] >> 2] | 0)) break;
   HEAP32[$21 >> 2] = HEAP32[$63 >> 2];
  }
  HEAP32[$22 >> 2] = $63;
 } else {
  while (1) {
   HEAP32[$20 >> 2] = HEAP32[$23 >> 2];
   $73 = HEAP32[$23 >> 2] | 0;
   if (!((HEAP32[$20 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$20 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
   HEAP32[$19 >> 2] = $73;
   HEAP32[$23 >> 2] = HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$22 >> 2] = HEAP32[$73 + 8 >> 2];
 }
 HEAP32[$51 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$14 >> 2] = $45;
 if ((HEAP32[HEAP32[$14 >> 2] >> 2] | 0) == (HEAP32[$1 >> 2] | 0)) {
  $84 = HEAP32[$41 >> 2] | 0;
  HEAP32[$2 >> 2] = $45;
  HEAP32[HEAP32[$2 >> 2] >> 2] = $84;
 }
 HEAP32[$5 >> 2] = $45;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $89 = HEAP32[$3 >> 2] | 0;
 HEAP32[$89 >> 2] = (HEAP32[$89 >> 2] | 0) + -1;
 HEAP32[$8 >> 2] = $45;
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$13 >> 2] = $45;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 __ZNSt3__213__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAP32[$43 >> 2] | 0);
 $104 = HEAP32[$44 >> 2] | 0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$18 >> 2] = (HEAP32[HEAP32[$15 >> 2] >> 2] | 0) + 16;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 $110 = HEAP32[$17 >> 2] | 0;
 HEAP32[$28 >> 2] = $104;
 HEAP32[$29 >> 2] = $110;
 $111 = HEAP32[$28 >> 2] | 0;
 $112 = HEAP32[$29 >> 2] | 0;
 HEAP8[$27 >> 0] = HEAP8[$30 >> 0] | 0;
 HEAP32[$25 >> 2] = $111;
 HEAP32[$26 >> 2] = $112;
 __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev(HEAP32[$26 >> 2] | 0);
 $115 = HEAP32[$43 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[$44 >> 2];
 HEAP32[$38 >> 2] = $115;
 HEAP32[$39 >> 2] = 1;
 $117 = HEAP32[$38 >> 2] | 0;
 $118 = HEAP32[$39 >> 2] | 0;
 HEAP32[$34 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$35 >> 2] = $117;
 HEAP32[$36 >> 2] = $118;
 HEAP32[$33 >> 2] = HEAP32[$35 >> 2];
 __ZdlPv(HEAP32[$33 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$41 >> 2] | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE4findIcEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEERKT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $112 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $60 = 0, $7 = 0, $74 = 0, $79 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $94 = 0, $96 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $2 = sp + 192 | 0;
 $3 = sp + 188 | 0;
 $4 = sp + 184 | 0;
 $5 = sp + 180 | 0;
 $6 = sp + 176 | 0;
 $7 = sp + 172 | 0;
 $8 = sp + 168 | 0;
 $9 = sp + 164 | 0;
 $10 = sp + 160 | 0;
 $11 = sp + 156 | 0;
 $12 = sp + 152 | 0;
 $13 = sp + 148 | 0;
 $14 = sp + 144 | 0;
 $15 = sp + 140 | 0;
 $16 = sp + 136 | 0;
 $17 = sp + 132 | 0;
 $18 = sp + 128 | 0;
 $19 = sp + 124 | 0;
 $20 = sp + 120 | 0;
 $21 = sp + 116 | 0;
 $22 = sp + 112 | 0;
 $23 = sp + 108 | 0;
 $24 = sp + 104 | 0;
 $26 = sp + 96 | 0;
 $27 = sp + 92 | 0;
 $28 = sp + 88 | 0;
 $29 = sp + 84 | 0;
 $30 = sp + 80 | 0;
 $31 = sp + 76 | 0;
 $32 = sp + 72 | 0;
 $33 = sp + 68 | 0;
 $34 = sp + 64 | 0;
 $35 = sp + 60 | 0;
 $36 = sp + 56 | 0;
 $37 = sp + 52 | 0;
 $38 = sp + 48 | 0;
 $39 = sp + 44 | 0;
 $40 = sp + 40 | 0;
 $41 = sp + 36 | 0;
 $42 = sp + 32 | 0;
 $43 = sp + 28 | 0;
 $44 = sp + 24 | 0;
 $45 = sp + 20 | 0;
 $46 = sp + 16 | 0;
 $47 = sp + 12 | 0;
 $48 = sp + 8 | 0;
 $49 = sp + 4 | 0;
 $50 = sp;
 HEAP32[$47 >> 2] = $0;
 HEAP32[$48 >> 2] = $1;
 $51 = HEAP32[$47 >> 2] | 0;
 $52 = HEAP32[$48 >> 2] | 0;
 HEAP32[$45 >> 2] = $51;
 HEAP32[$44 >> 2] = HEAP32[$45 >> 2];
 HEAP32[$43 >> 2] = (HEAP32[$44 >> 2] | 0) + 4;
 HEAP32[$42 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$41 >> 2] = HEAP32[$42 >> 2];
 HEAP32[$40 >> 2] = HEAP32[$41 >> 2];
 $60 = HEAP32[HEAP32[$40 >> 2] >> 2] | 0;
 HEAP32[$6 >> 2] = $51;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$49 >> 2] = __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE13__lower_boundIcEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE($51, $52, $60, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$15 >> 2] = $51;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 $74 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = $14;
 HEAP32[$8 >> 2] = $74;
 HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$8 >> 2];
 HEAP32[$50 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$18 >> 2] = $49;
 HEAP32[$19 >> 2] = $50;
 $79 = HEAP32[$19 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$17 >> 2] = $79;
 if ((HEAP32[HEAP32[$16 >> 2] >> 2] | 0) == (HEAP32[HEAP32[$17 >> 2] >> 2] | 0) ^ 1) {
  HEAP32[$22 >> 2] = $51;
  HEAP32[$21 >> 2] = (HEAP32[$22 >> 2] | 0) + 8;
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  $89 = HEAP32[$20 >> 2] | 0;
  $90 = HEAP32[$48 >> 2] | 0;
  HEAP32[$24 >> 2] = $49;
  HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
  $94 = (HEAP32[HEAP32[$23 >> 2] >> 2] | 0) + 16 | 0;
  HEAP32[$28 >> 2] = $89;
  HEAP32[$29 >> 2] = $90;
  HEAP32[$30 >> 2] = $94;
  $96 = HEAP32[$29 >> 2] | 0;
  $97 = HEAP32[$30 >> 2] | 0;
  HEAP32[sp + 100 >> 2] = HEAP32[$28 >> 2];
  HEAP32[$26 >> 2] = $96;
  HEAP32[$27 >> 2] = $97;
  if ((HEAP8[HEAP32[$26 >> 2] >> 0] | 0) < (HEAP8[HEAP32[$27 >> 2] >> 0] | 0) ^ 1) {
   HEAP32[$46 >> 2] = HEAP32[$49 >> 2];
   $116 = HEAP32[$46 >> 2] | 0;
   STACKTOP = sp;
   return $116 | 0;
  }
 }
 HEAP32[$39 >> 2] = $51;
 HEAP32[$37 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$36 >> 2] = (HEAP32[$37 >> 2] | 0) + 4;
 HEAP32[$35 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$34 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$33 >> 2] = HEAP32[$34 >> 2];
 $112 = HEAP32[$33 >> 2] | 0;
 HEAP32[$31 >> 2] = $38;
 HEAP32[$32 >> 2] = $112;
 HEAP32[HEAP32[$31 >> 2] >> 2] = HEAP32[$32 >> 2];
 HEAP32[$46 >> 2] = HEAP32[$38 >> 2];
 $116 = HEAP32[$46 >> 2] | 0;
 STACKTOP = sp;
 return $116 | 0;
}

function __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp + 84 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 76 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 $23 = sp;
 HEAP32[$20 >> 2] = $0;
 HEAP32[$21 >> 2] = $1;
 HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = (HEAP32[$21 >> 2] | 0) == (HEAP32[$20 >> 2] | 0) & 1;
 while (1) {
  if ((HEAP32[$21 >> 2] | 0) == (HEAP32[$20 >> 2] | 0)) {
   label = 18;
   break;
  }
  HEAP32[$19 >> 2] = HEAP32[$21 >> 2];
  if (!(HEAP8[(HEAP32[(HEAP32[$19 >> 2] | 0) + 8 >> 2] | 0) + 12 >> 0] & 1 ^ 1)) {
   label = 18;
   break;
  }
  HEAP32[$18 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$17 >> 2] = HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2];
  $51 = HEAP32[$21 >> 2] | 0;
  if ((HEAP32[$17 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$17 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
   HEAP32[$14 >> 2] = $51;
   HEAP32[$8 >> 2] = HEAP32[(HEAP32[$14 >> 2] | 0) + 8 >> 2];
   HEAP32[$22 >> 2] = HEAP32[(HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2];
   if (!(HEAP32[$22 >> 2] | 0)) {
    label = 8;
    break;
   }
   if (HEAP8[(HEAP32[$22 >> 2] | 0) + 12 >> 0] & 1) {
    label = 8;
    break;
   }
   HEAP32[$5 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2];
   HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 1;
   HEAP32[$2 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2];
   HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = (HEAP32[$21 >> 2] | 0) == (HEAP32[$20 >> 2] | 0) & 1;
   HEAP8[(HEAP32[$22 >> 2] | 0) + 12 >> 0] = 1;
  } else {
   HEAP32[$9 >> 2] = $51;
   HEAP32[$23 >> 2] = HEAP32[HEAP32[(HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0) + 8 >> 2] >> 2];
   if (!(HEAP32[$23 >> 2] | 0)) {
    label = 14;
    break;
   }
   if (HEAP8[(HEAP32[$23 >> 2] | 0) + 12 >> 0] & 1) {
    label = 14;
    break;
   }
   HEAP32[$10 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2];
   HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 1;
   HEAP32[$11 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2];
   HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = (HEAP32[$21 >> 2] | 0) == (HEAP32[$20 >> 2] | 0) & 1;
   HEAP8[(HEAP32[$23 >> 2] | 0) + 12 >> 0] = 1;
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$3 >> 2] = HEAP32[$21 >> 2];
  if ((HEAP32[$3 >> 2] | 0) != (HEAP32[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
   HEAP32[$4 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2];
   __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$21 >> 2] | 0);
  }
  HEAP32[$6 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2];
  HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 1;
  HEAP32[$7 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
  HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 0;
  __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$21 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 14) {
  HEAP32[$12 >> 2] = HEAP32[$21 >> 2];
  if ((HEAP32[$12 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
   HEAP32[$13 >> 2] = HEAP32[$21 >> 2];
   HEAP32[$21 >> 2] = HEAP32[(HEAP32[$13 >> 2] | 0) + 8 >> 2];
   __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$21 >> 2] | 0);
  }
  HEAP32[$15 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2];
  HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 1;
  HEAP32[$16 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$21 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2];
  HEAP8[(HEAP32[$21 >> 2] | 0) + 12 >> 0] = 0;
  __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_(HEAP32[$21 >> 2] | 0);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 18) {
  STACKTOP = sp;
  return;
 }
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $13 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $47 = 0, $55 = 0, $58 = 0, $59 = 0, $60 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $77 = 0, $86 = 0, label = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $58 = HEAP32[$0 + 12 >> 2] | 0;
   $59 = $0 + 16 + ($58 << 3) | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4);
   $60 = $0 + 24 | 0;
   if (($58 | 0) <= 1) break;
   $63 = HEAP32[$0 + 8 >> 2] | 0;
   if (!($63 & 2)) {
    $66 = $1 + 36 | 0;
    if ((HEAP32[$66 >> 2] | 0) != 1) {
     if (!($63 & 1)) {
      $86 = $1 + 54 | 0;
      $$2 = $60;
      while (1) {
       if (HEAP8[$86 >> 0] | 0) break L1;
       if ((HEAP32[$66 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4);
       $$2 = $$2 + 8 | 0;
       if ($$2 >>> 0 >= $59 >>> 0) break L1;
      }
     }
     $76 = $1 + 24 | 0;
     $77 = $1 + 54 | 0;
     $$1 = $60;
     while (1) {
      if (HEAP8[$77 >> 0] | 0) break L1;
      if ((HEAP32[$66 >> 2] | 0) == 1) if ((HEAP32[$76 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4);
      $$1 = $$1 + 8 | 0;
      if ($$1 >>> 0 >= $59 >>> 0) break L1;
     }
    }
   }
   $69 = $1 + 54 | 0;
   $$0 = $60;
   while (1) {
    if (HEAP8[$69 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4);
    $$0 = $$0 + 8 | 0;
    if ($$0 >>> 0 >= $59 >>> 0) break L1;
   }
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $26 = $1 + 52 | 0;
    $27 = $1 + 53 | 0;
    $28 = $1 + 54 | 0;
    $29 = $0 + 8 | 0;
    $30 = $1 + 24 | 0;
    $$081$off0 = 0;
    $$084 = $0 + 16 | 0;
    $$085$off0 = 0;
    L32 : while (1) {
     if ($$084 >>> 0 >= $25 >>> 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     HEAP8[$26 >> 0] = 0;
     HEAP8[$27 >> 0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4);
     if (HEAP8[$28 >> 0] | 0) {
      $$283$off0 = $$081$off0;
      label = 18;
      break;
     }
     do if (!(HEAP8[$27 >> 0] | 0)) {
      $$182$off0 = $$081$off0;
      $$186$off0 = $$085$off0;
     } else {
      if (!(HEAP8[$26 >> 0] | 0)) if (!(HEAP32[$29 >> 2] & 1)) {
       $$283$off0 = 1;
       label = 18;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = $$085$off0;
       break;
      }
      if ((HEAP32[$30 >> 2] | 0) == 1) {
       label = 23;
       break L32;
      }
      if (!(HEAP32[$29 >> 2] & 2)) {
       label = 23;
       break L32;
      } else {
       $$182$off0 = 1;
       $$186$off0 = 1;
      }
     } while (0);
     $$081$off0 = $$182$off0;
     $$084 = $$084 + 8 | 0;
     $$085$off0 = $$186$off0;
    }
    do if ((label | 0) == 18) {
     if (!$$085$off0) {
      HEAP32[$13 >> 2] = $2;
      $47 = $1 + 40 | 0;
      HEAP32[$47 >> 2] = (HEAP32[$47 >> 2] | 0) + 1;
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$30 >> 2] | 0) == 2) {
       HEAP8[$28 >> 0] = 1;
       if ($$283$off0) {
        label = 23;
        break;
       } else {
        $55 = 4;
        break;
       }
      }
     }
     if ($$283$off0) label = 23; else $55 = 4;
    } while (0);
    if ((label | 0) == 23) $55 = 3;
    HEAP32[$19 >> 2] = $55;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _x86_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $121 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $203 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 61 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 24 | 0;
 $15 = sp + 20 | 0;
 $16 = sp + 60 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP8[$8 >> 0] = $2 & 1;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 HEAP32[$13 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
 if ((HEAP32[$10 >> 2] | 0) >>> 0 < 5) {
  HEAP32[$5 >> 2] = 0;
  $203 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $203 | 0;
 }
 if (((HEAP32[$7 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0) >>> 0 > 5) HEAP32[$13 >> 2] = (HEAP32[$7 >> 2] | 0) - 5;
 HEAP32[$14 >> 2] = (HEAP32[$10 >> 2] | 0) - 5;
 HEAP32[$15 >> 2] = 0;
 while (1) {
  if ((HEAP32[$15 >> 2] | 0) >>> 0 > (HEAP32[$14 >> 2] | 0) >>> 0) break;
  HEAP8[$16 >> 0] = HEAP8[(HEAP32[$9 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) >> 0] | 0;
  if ((HEAPU8[$16 >> 0] | 0 | 0) != 232) if ((HEAPU8[$16 >> 0] | 0 | 0) != 233) {
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
   continue;
  }
  HEAP32[$17 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) - (HEAP32[$13 >> 2] | 0);
  HEAP32[$13 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$15 >> 2] | 0);
  L15 : do if ((HEAP32[$17 >> 2] | 0) >>> 0 > 5) HEAP32[$12 >> 2] = 0; else {
   HEAP32[$18 >> 2] = 0;
   while (1) {
    if ((HEAP32[$18 >> 2] | 0) >>> 0 >= (HEAP32[$17 >> 2] | 0) >>> 0) break L15;
    HEAP32[$12 >> 2] = HEAP32[$12 >> 2] & 119;
    HEAP32[$12 >> 2] = HEAP32[$12 >> 2] << 1;
    HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1;
   }
  } while (0);
  HEAP8[$16 >> 0] = HEAP8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 4) >> 0] | 0;
  if (!(HEAPU8[$16 >> 0] | 0)) label = 17; else if ((HEAPU8[$16 >> 0] | 0 | 0) == 255) label = 17; else label = 28;
  if ((label | 0) == 17) {
   label = 0;
   if (HEAP8[49559 + ((HEAP32[$12 >> 2] | 0) >>> 1 & 7) >> 0] & 1) if ((HEAP32[$12 >> 2] | 0) >>> 1 >>> 0 < 16) {
    HEAP32[$19 >> 2] = (HEAPU8[$16 >> 0] | 0) << 24 | (HEAPU8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 3) >> 0] | 0) << 16 | (HEAPU8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 2) >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 1) >> 0] | 0);
    while (1) {
     $121 = HEAP32[$19 >> 2] | 0;
     $125 = (HEAP32[$7 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) + 5 | 0;
     if (HEAP8[$8 >> 0] & 1) HEAP32[$20 >> 2] = $121 + $125; else HEAP32[$20 >> 2] = $121 - $125;
     if (!(HEAP32[$12 >> 2] | 0)) break;
     HEAP32[$21 >> 2] = HEAP32[14080 + ((HEAP32[$12 >> 2] | 0) >>> 1 << 2) >> 2];
     HEAP8[$16 >> 0] = (HEAP32[$20 >> 2] | 0) >>> (24 - (HEAP32[$21 >> 2] << 3) | 0);
     if (HEAPU8[$16 >> 0] | 0 | 0) if ((HEAPU8[$16 >> 0] | 0 | 0) != 255) break;
     HEAP32[$19 >> 2] = HEAP32[$20 >> 2] ^ (1 << 32 - (HEAP32[$21 >> 2] << 3)) - 1;
    }
    HEAP8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 4) >> 0] = ~(((HEAP32[$20 >> 2] | 0) >>> 24 & 1) - 1);
    HEAP8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 3) >> 0] = (HEAP32[$20 >> 2] | 0) >>> 16;
    HEAP8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 2) >> 0] = (HEAP32[$20 >> 2] | 0) >>> 8;
    HEAP8[(HEAP32[$9 >> 2] | 0) + ((HEAP32[$15 >> 2] | 0) + 1) >> 0] = HEAP32[$20 >> 2];
    HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 5;
    HEAP32[$12 >> 2] = 0;
   } else label = 28; else label = 28;
  }
  do if ((label | 0) == 28) {
   label = 0;
   HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
   HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 1;
   if (HEAPU8[$16 >> 0] | 0 | 0) if ((HEAPU8[$16 >> 0] | 0 | 0) != 255) break;
   HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 16;
  } while (0);
 }
 HEAP32[HEAP32[$11 >> 2] >> 2] = HEAP32[$12 >> 2];
 HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$15 >> 2];
 $203 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $203 | 0;
}

function ___get_locale($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$093$lcssa = 0, $$093118 = 0, $$094114 = 0, $$1 = 0, $$1100111 = 0, $$195112 = 0, $$2122 = 0, $$2123 = 0, $$2124 = 0, $$4 = 0, $11 = 0, $15 = 0, $2 = 0, $23 = 0, $3 = 0, $40 = 0, $48 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $70 = 0, $72 = 0, $76 = 0, $78 = 0, $82 = 0, $86 = 0, $93 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $2 = sp;
 $3 = sp + 256 | 0;
 do if (!(HEAP8[$1 >> 0] | 0)) {
  $6 = _getenv(52264) | 0;
  if ($6 | 0) if (HEAP8[$6 >> 0] | 0) {
   $$1 = $6;
   break;
  }
  $11 = _getenv(40336 + ($0 * 12 | 0) | 0) | 0;
  if ($11 | 0) if (HEAP8[$11 >> 0] | 0) {
   $$1 = $11;
   break;
  }
  $15 = _getenv(52271) | 0;
  if ($15 | 0) if (HEAP8[$15 >> 0] | 0) {
   $$1 = $15;
   break;
  }
  $$1 = 52276;
 } else $$1 = $1; while (0);
 $$093118 = 0;
 L13 : while (1) {
  switch (HEAP8[$$1 + $$093118 >> 0] | 0) {
  case 47:
  case 0:
   {
    $$093$lcssa = $$093118;
    break L13;
    break;
   }
  default:
   {}
  }
  $$093118 = $$093118 + 1 | 0;
  if ($$093118 >>> 0 >= 15) {
   $$093$lcssa = 15;
   break;
  }
 }
 $23 = HEAP8[$$1 >> 0] | 0;
 if ($23 << 24 >> 24 == 46) {
  $$2122 = 52276;
  label = 15;
 } else if (!(HEAP8[$$1 + $$093$lcssa >> 0] | 0)) if ($23 << 24 >> 24 == 67) {
  $$2122 = $$1;
  label = 15;
 } else {
  $$2123 = $$1;
  label = 16;
 } else {
  $$2122 = 52276;
  label = 15;
 }
 if ((label | 0) == 15) if (!(HEAP8[$$2122 + 1 >> 0] | 0)) {
  $$2124 = $$2122;
  label = 18;
 } else {
  $$2123 = $$2122;
  label = 16;
 }
 L22 : do if ((label | 0) == 16) if (!(_strcmp($$2123, 52276) | 0)) {
  $$2124 = $$2123;
  label = 18;
 } else if (!(_strcmp($$2123, 52284) | 0)) {
  $$2124 = $$2123;
  label = 18;
 } else {
  $40 = HEAP32[15326] | 0;
  if ($40 | 0) {
   $$094114 = $40;
   do {
    if (!(_strcmp($$2123, $$094114 + 8 | 0) | 0)) {
     $$0 = $$094114;
     break L22;
    }
    $$094114 = HEAP32[$$094114 + 24 >> 2] | 0;
   } while (($$094114 | 0) != 0);
  }
  ___lock(61308);
  $48 = HEAP32[15326] | 0;
  L32 : do if ($48 | 0) {
   $$195112 = $48;
   while (1) {
    if (!(_strcmp($$2123, $$195112 + 8 | 0) | 0)) break;
    $54 = HEAP32[$$195112 + 24 >> 2] | 0;
    if (!$54) break L32; else $$195112 = $54;
   }
   ___unlock(61308);
   $$0 = $$195112;
   break L22;
  } while (0);
  L39 : do if (!(HEAP32[15301] | 0)) {
   $58 = _getenv(52290) | 0;
   if (!$58) label = 41; else if (!(HEAP8[$58 >> 0] | 0)) label = 41; else {
    $62 = 254 - $$093$lcssa | 0;
    $63 = $$093$lcssa + 1 | 0;
    $$1100111 = $58;
    while (1) {
     $64 = ___strchrnul($$1100111, 58) | 0;
     $68 = HEAP8[$64 >> 0] | 0;
     $70 = $64 - $$1100111 + (($68 << 24 >> 24 != 0) << 31 >> 31) | 0;
     if ($70 >>> 0 < $62 >>> 0) {
      _memcpy($2 | 0, $$1100111 | 0, $70 | 0) | 0;
      $72 = $2 + $70 | 0;
      HEAP8[$72 >> 0] = 47;
      _memcpy($72 + 1 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
      HEAP8[$2 + ($63 + $70) >> 0] = 0;
      $76 = ___map_file($2 | 0, $3 | 0) | 0;
      if ($76 | 0) break;
      $86 = HEAP8[$64 >> 0] | 0;
     } else $86 = $68;
     $$1100111 = $64 + ($86 << 24 >> 24 != 0 & 1) | 0;
     if (!(HEAP8[$$1100111 >> 0] | 0)) {
      label = 41;
      break L39;
     }
    }
    $78 = _malloc(28) | 0;
    if (!$78) {
     ___munmap($76, HEAP32[$3 >> 2] | 0) | 0;
     label = 41;
     break;
    } else {
     HEAP32[$78 >> 2] = $76;
     HEAP32[$78 + 4 >> 2] = HEAP32[$3 >> 2];
     $82 = $78 + 8 | 0;
     _memcpy($82 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
     HEAP8[$82 + $$093$lcssa >> 0] = 0;
     HEAP32[$78 + 24 >> 2] = HEAP32[15326];
     HEAP32[15326] = $78;
     $$4 = $78;
     break;
    }
   }
  } else label = 41; while (0);
  if ((label | 0) == 41) {
   $93 = _malloc(28) | 0;
   if (!$93) $$4 = $93; else {
    HEAP32[$93 >> 2] = HEAP32[11021];
    HEAP32[$93 + 4 >> 2] = HEAP32[11022];
    $98 = $93 + 8 | 0;
    _memcpy($98 | 0, $$2123 | 0, $$093$lcssa | 0) | 0;
    HEAP8[$98 + $$093$lcssa >> 0] = 0;
    HEAP32[$93 + 24 >> 2] = HEAP32[15326];
    HEAP32[15326] = $93;
    $$4 = $93;
   }
  }
  ___unlock(61308);
  $$0 = ($0 | 0) == 0 & ($$4 | 0) == 0 ? 44084 : $$4;
 } while (0);
 do if ((label | 0) == 18) {
  if (!$0) if ((HEAP8[$$2124 + 1 >> 0] | 0) == 46) {
   $$0 = 44084;
   break;
  }
  $$0 = 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _lzma_block_header_decode($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $101 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $140 = 0, $141 = 0, $149 = 0, $17 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $58 = 0, $6 = 0, $7 = 0, $77 = 0, $8 = 0, $85 = 0, $9 = 0, $90 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  $17 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$7 >> 2] | 0) >>> 0 > 4) break;
  $22 = (HEAP32[$17 + 32 >> 2] | 0) + (HEAP32[$7 >> 2] << 4) | 0;
  HEAP32[$22 >> 2] = -1;
  HEAP32[$22 + 4 >> 2] = -1;
  HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$7 >> 2] << 4) + 8 >> 2] = 0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 if ((HEAP32[$17 >> 2] | 0) >>> 0 > 1) HEAP32[HEAP32[$4 >> 2] >> 2] = 1;
 HEAP8[(HEAP32[$4 >> 2] | 0) + 184 >> 0] = 0;
 if (((HEAPU8[HEAP32[$6 >> 2] >> 0] | 0) + 1 << 2 | 0) == (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0)) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0) >>> 0 <= 15) {
  HEAP32[$8 >> 2] = (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) - 4;
  $58 = _lzma_crc32(HEAP32[$6 >> 2] | 0, HEAP32[$8 >> 2] | 0, 0) | 0;
  if (($58 | 0) != (_read32le_651((HEAP32[$6 >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0) | 0)) {
   HEAP32[$3 >> 2] = 9;
   $149 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $149 | 0;
  }
  if ((HEAPU8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] | 0) & 60 | 0) {
   HEAP32[$3 >> 2] = 8;
   $149 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $149 | 0;
  }
  HEAP32[$9 >> 2] = 2;
  $77 = (HEAP32[$4 >> 2] | 0) + 16 | 0;
  if ((HEAPU8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] | 0) & 64 | 0) {
   HEAP32[$10 >> 2] = _lzma_vli_decode($77, 0, HEAP32[$6 >> 2] | 0, $9, HEAP32[$8 >> 2] | 0) | 0;
   if (HEAP32[$10 >> 2] | 0) {
    HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
    $149 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $149 | 0;
   }
   $85 = _lzma_block_unpadded_size(HEAP32[$4 >> 2] | 0) | 0;
   if (($85 | 0) == 0 & (tempRet0 | 0) == 0) {
    HEAP32[$3 >> 2] = 9;
    $149 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $149 | 0;
   }
  } else {
   $90 = $77;
   HEAP32[$90 >> 2] = -1;
   HEAP32[$90 + 4 >> 2] = -1;
  }
  $101 = (HEAP32[$4 >> 2] | 0) + 24 | 0;
  if ((HEAPU8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] | 0) & 128 | 0) {
   HEAP32[$11 >> 2] = _lzma_vli_decode($101, 0, HEAP32[$6 >> 2] | 0, $9, HEAP32[$8 >> 2] | 0) | 0;
   if (HEAP32[$11 >> 2] | 0) {
    HEAP32[$3 >> 2] = HEAP32[$11 >> 2];
    $149 = HEAP32[$3 >> 2] | 0;
    STACKTOP = sp;
    return $149 | 0;
   }
  } else {
   $108 = $101;
   HEAP32[$108 >> 2] = -1;
   HEAP32[$108 + 4 >> 2] = -1;
  }
  HEAP32[$12 >> 2] = ((HEAPU8[(HEAP32[$6 >> 2] | 0) + 1 >> 0] | 0) & 3) + 1;
  HEAP32[$13 >> 2] = 0;
  while (1) {
   if ((HEAP32[$13 >> 2] | 0) >>> 0 >= (HEAP32[$12 >> 2] | 0) >>> 0) break;
   HEAP32[$14 >> 2] = _lzma_filter_flags_decode((HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$13 >> 2] << 4) | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, $9, HEAP32[$8 >> 2] | 0) | 0;
   if (HEAP32[$14 >> 2] | 0) {
    label = 26;
    break;
   }
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
  }
  if ((label | 0) == 26) {
   _free_properties(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
   HEAP32[$3 >> 2] = HEAP32[$14 >> 2];
   $149 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $149 | 0;
  }
  while (1) {
   if ((HEAP32[$9 >> 2] | 0) >>> 0 >= (HEAP32[$8 >> 2] | 0) >>> 0) {
    label = 33;
    break;
   }
   $140 = HEAP32[$6 >> 2] | 0;
   $141 = HEAP32[$9 >> 2] | 0;
   HEAP32[$9 >> 2] = $141 + 1;
   if (HEAPU8[$140 + $141 >> 0] | 0 | 0) {
    label = 31;
    break;
   }
  }
  if ((label | 0) == 31) {
   _free_properties(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
   HEAP32[$3 >> 2] = 8;
   $149 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $149 | 0;
  } else if ((label | 0) == 33) {
   HEAP32[$3 >> 2] = 0;
   $149 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $149 | 0;
  }
 }
 HEAP32[$3 >> 2] = 11;
 $149 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $149 | 0;
}

function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $4 = sp + 132 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 124 | 0;
 $7 = sp + 120 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $12 = sp + 100 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 4 | 0;
 $37 = sp;
 HEAP32[$33 >> 2] = $0;
 HEAP32[$34 >> 2] = $1;
 HEAP32[$35 >> 2] = $2;
 HEAP32[$36 >> 2] = $3;
 $38 = HEAP32[$33 >> 2] | 0;
 HEAP32[$37 >> 2] = 0;
 $40 = HEAP32[$36 >> 2] | 0;
 HEAP32[$30 >> 2] = $38 + 12;
 HEAP32[$31 >> 2] = $37;
 HEAP32[$32 >> 2] = $40;
 $41 = HEAP32[$30 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
 $43 = HEAP32[$29 >> 2] | 0;
 HEAP32[$23 >> 2] = $41;
 HEAP32[$24 >> 2] = $43;
 $44 = HEAP32[$23 >> 2] | 0;
 HEAP32[sp + 60 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$44 >> 2] = 0;
 HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
 $48 = HEAP32[$25 >> 2] | 0;
 HEAP32[$27 >> 2] = $41 + 4;
 HEAP32[$28 >> 2] = $48;
 $49 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$49 >> 2] = HEAP32[$26 >> 2];
 if (!(HEAP32[$34 >> 2] | 0)) {
  $80 = 0;
  HEAP32[$38 >> 2] = $80;
  $81 = HEAP32[$38 >> 2] | 0;
  $82 = HEAP32[$35 >> 2] | 0;
  $83 = $81 + ($82 * 12 | 0) | 0;
  $84 = $38 + 8 | 0;
  HEAP32[$84 >> 2] = $83;
  $85 = $38 + 4 | 0;
  HEAP32[$85 >> 2] = $83;
  $86 = HEAP32[$38 >> 2] | 0;
  $87 = HEAP32[$34 >> 2] | 0;
  $88 = $86 + ($87 * 12 | 0) | 0;
  HEAP32[$21 >> 2] = $38;
  $89 = HEAP32[$21 >> 2] | 0;
  $90 = $89 + 12 | 0;
  HEAP32[$20 >> 2] = $90;
  $91 = HEAP32[$20 >> 2] | 0;
  HEAP32[$19 >> 2] = $91;
  $92 = HEAP32[$19 >> 2] | 0;
  HEAP32[$92 >> 2] = $88;
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = $38;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 12;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $60 = HEAP32[$34 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 HEAP32[$18 >> 2] = $60;
 $62 = HEAP32[$18 >> 2] | 0;
 HEAP32[$14 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $62;
 HEAP32[sp + 84 >> 2] = 0;
 $64 = HEAP32[$15 >> 2] | 0;
 HEAP32[sp + 96 >> 2] = HEAP32[$14 >> 2];
 if ($64 >>> 0 <= 357913941) {
  HEAP32[$12 >> 2] = (HEAP32[$15 >> 2] | 0) * 12;
  $80 = __Znwm(HEAP32[$12 >> 2] | 0) | 0;
  HEAP32[$38 >> 2] = $80;
  $81 = HEAP32[$38 >> 2] | 0;
  $82 = HEAP32[$35 >> 2] | 0;
  $83 = $81 + ($82 * 12 | 0) | 0;
  $84 = $38 + 8 | 0;
  HEAP32[$84 >> 2] = $83;
  $85 = $38 + 4 | 0;
  HEAP32[$85 >> 2] = $83;
  $86 = HEAP32[$38 >> 2] | 0;
  $87 = HEAP32[$34 >> 2] | 0;
  $88 = $86 + ($87 * 12 | 0) | 0;
  HEAP32[$21 >> 2] = $38;
  $89 = HEAP32[$21 >> 2] | 0;
  $90 = $89 + 12 | 0;
  HEAP32[$20 >> 2] = $90;
  $91 = HEAP32[$20 >> 2] | 0;
  HEAP32[$19 >> 2] = $91;
  $92 = HEAP32[$19 >> 2] | 0;
  HEAP32[$92 >> 2] = $88;
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = 55296;
 $66 = ___cxa_allocate_exception(8) | 0;
 $67 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = $66;
 HEAP32[$8 >> 2] = $67;
 $68 = HEAP32[$7 >> 2] | 0;
 __THREW__ = 0;
 invoke_vii(49, $68 | 0, HEAP32[$8 >> 2] | 0);
 $70 = __THREW__;
 __THREW__ = 0;
 if ($70 & 1) {
  $72 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$10 >> 2] = $72;
  HEAP32[sp + 104 >> 2] = tempRet0;
  ___cxa_free_exception($66 | 0);
  ___resumeException(HEAP32[$10 >> 2] | 0);
 } else {
  HEAP32[$68 >> 2] = 48176;
  ___cxa_throw($66 | 0, 42808, 176);
 }
}

function __ZNK3zim7Cluster7getBlobENS_12blob_index_tENS_8offset_tENS_7zsize_tE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $101 = 0, $103 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $43 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $96 = 0, $97 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $$byval_copy2 = sp + 48 | 0;
 $$byval_copy1 = sp + 40 | 0;
 $5 = sp + 152 | 0;
 $6 = sp + 148 | 0;
 $8 = sp + 140 | 0;
 $9 = sp + 136 | 0;
 $10 = sp + 132 | 0;
 $11 = sp + 128 | 0;
 $12 = sp + 124 | 0;
 $14 = sp + 116 | 0;
 $15 = sp + 112 | 0;
 $16 = sp + 108 | 0;
 $17 = sp + 104 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 100 | 0;
 $20 = sp + 96 | 0;
 $22 = sp + 92 | 0;
 $23 = sp + 88 | 0;
 $24 = sp + 84 | 0;
 $25 = sp + 24 | 0;
 $26 = sp + 16 | 0;
 $27 = sp + 80 | 0;
 $28 = sp + 72 | 0;
 $29 = sp + 8 | 0;
 $30 = sp;
 $31 = sp + 64 | 0;
 $32 = sp + 60 | 0;
 HEAP32[$24 >> 2] = $1;
 $34 = HEAP32[$24 >> 2] | 0;
 $35 = __ZNK3zim7Cluster4sizeEv($34) | 0;
 $37 = $25;
 HEAP32[$37 >> 2] = $35;
 HEAP32[$37 + 4 >> 2] = tempRet0;
 if (!(__ZNK12REAL_TYPEDEFIyEcvbEv($25) | 0)) {
  __ZN3zim4BlobC2Ev($0);
  STACKTOP = sp;
  return;
 }
 $43 = __ZNK12REAL_TYPEDEFIjEcvjEv($2) | 0;
 HEAP32[$22 >> 2] = $34 + 16;
 HEAP32[$23 >> 2] = $43;
 __ZpLIN3zim8offset_tEERT_S3_RKS2_($3, (HEAP32[HEAP32[$22 >> 2] >> 2] | 0) + (HEAP32[$23 >> 2] << 3) | 0) | 0;
 HEAP32[$27 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$27 >> 2];
 $48 = __ZNK3zim7Cluster11getBlobSizeENS_12blob_index_tE($34, $$byval_copy2) | 0;
 $50 = $26;
 HEAP32[$50 >> 2] = $48;
 HEAP32[$50 + 4 >> 2] = tempRet0;
 HEAP32[$19 >> 2] = $4;
 HEAP32[$20 >> 2] = $26;
 $54 = HEAP32[$19 >> 2] | 0;
 $55 = HEAP32[$20 >> 2] | 0;
 HEAP8[$18 >> 0] = HEAP8[sp + 156 >> 0] | 0;
 HEAP32[$16 >> 2] = $54;
 HEAP32[$17 >> 2] = $55;
 $56 = HEAP32[$17 >> 2] | 0;
 $57 = HEAP32[$16 >> 2] | 0;
 HEAP32[sp + 120 >> 2] = $18;
 HEAP32[$14 >> 2] = $56;
 HEAP32[$15 >> 2] = $57;
 $60 = __ZltIN3zim7zsize_tEEbRKT_S4_(HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
 $63 = $60 ? HEAP32[$17 >> 2] | 0 : HEAP32[$16 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$63 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$63 + 4 >> 2];
 $64 = $4;
 $69 = HEAP32[$64 + 4 >> 2] | 0;
 if ($69 >>> 0 > 0 | ($69 | 0) == 0 & (HEAP32[$64 >> 2] | 0) >>> 0 > 4294967295) {
  __ZN3zim4BlobC2Ev($0);
  STACKTOP = sp;
  return;
 }
 HEAP32[$12 >> 2] = $34 + 28;
 $77 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
 $80 = HEAP32[(HEAP32[$77 >> 2] | 0) + 20 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$29 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$30 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$30 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$29 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$29 + 4 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$30 + 4 >> 2];
 FUNCTION_TABLE_viiii[$80 & 31]($28, $77, $$byval_copy1, $$byval_copy2);
 HEAP32[$10 >> 2] = $31;
 HEAP32[$11 >> 2] = $28;
 $81 = HEAP32[$10 >> 2] | 0;
 HEAP32[$81 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
 HEAP32[$81 + 4 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$81 + 4 >> 2] | 0) {
  HEAP32[$9 >> 2] = HEAP32[$81 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
  $96 = HEAP32[$5 >> 2] | 0;
  HEAP32[$6 >> 2] = 1;
  $97 = HEAP32[$6 >> 2] | 0;
  $98 = HEAP32[$96 >> 2] | 0;
  HEAP32[$96 >> 2] = $98 + $97;
  HEAP32[sp + 144 >> 2] = $98 + $97;
 }
 __THREW__ = 0;
 invoke_vii(77, $0 | 0, $31 | 0);
 $101 = __THREW__;
 __THREW__ = 0;
 if ($101 & 1) {
  $103 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$32 >> 2] = $103;
  HEAP32[sp + 56 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($31);
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($28);
  ___resumeException(HEAP32[$32 >> 2] | 0);
 }
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($31);
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($28);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEEC2EmmS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $60 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $4 = sp + 132 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 124 | 0;
 $7 = sp + 120 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $12 = sp + 100 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $17 = sp + 80 | 0;
 $18 = sp + 76 | 0;
 $19 = sp + 72 | 0;
 $20 = sp + 68 | 0;
 $21 = sp + 64 | 0;
 $23 = sp + 56 | 0;
 $24 = sp + 52 | 0;
 $25 = sp + 48 | 0;
 $26 = sp + 44 | 0;
 $27 = sp + 40 | 0;
 $28 = sp + 36 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 $31 = sp + 24 | 0;
 $32 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 $35 = sp + 8 | 0;
 $36 = sp + 4 | 0;
 $37 = sp;
 HEAP32[$33 >> 2] = $0;
 HEAP32[$34 >> 2] = $1;
 HEAP32[$35 >> 2] = $2;
 HEAP32[$36 >> 2] = $3;
 $38 = HEAP32[$33 >> 2] | 0;
 HEAP32[$37 >> 2] = 0;
 $40 = HEAP32[$36 >> 2] | 0;
 HEAP32[$30 >> 2] = $38 + 12;
 HEAP32[$31 >> 2] = $37;
 HEAP32[$32 >> 2] = $40;
 $41 = HEAP32[$30 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$31 >> 2];
 $43 = HEAP32[$29 >> 2] | 0;
 HEAP32[$23 >> 2] = $41;
 HEAP32[$24 >> 2] = $43;
 $44 = HEAP32[$23 >> 2] | 0;
 HEAP32[sp + 60 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$44 >> 2] = 0;
 HEAP32[$25 >> 2] = HEAP32[$32 >> 2];
 $48 = HEAP32[$25 >> 2] | 0;
 HEAP32[$27 >> 2] = $41 + 4;
 HEAP32[$28 >> 2] = $48;
 $49 = HEAP32[$27 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$49 >> 2] = HEAP32[$26 >> 2];
 if (!(HEAP32[$34 >> 2] | 0)) {
  $80 = 0;
  HEAP32[$38 >> 2] = $80;
  $81 = HEAP32[$38 >> 2] | 0;
  $82 = HEAP32[$35 >> 2] | 0;
  $83 = $81 + ($82 << 3) | 0;
  $84 = $38 + 8 | 0;
  HEAP32[$84 >> 2] = $83;
  $85 = $38 + 4 | 0;
  HEAP32[$85 >> 2] = $83;
  $86 = HEAP32[$38 >> 2] | 0;
  $87 = HEAP32[$34 >> 2] | 0;
  $88 = $86 + ($87 << 3) | 0;
  HEAP32[$21 >> 2] = $38;
  $89 = HEAP32[$21 >> 2] | 0;
  $90 = $89 + 12 | 0;
  HEAP32[$20 >> 2] = $90;
  $91 = HEAP32[$20 >> 2] | 0;
  HEAP32[$19 >> 2] = $91;
  $92 = HEAP32[$19 >> 2] | 0;
  HEAP32[$92 >> 2] = $88;
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = $38;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 12;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $60 = HEAP32[$34 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 HEAP32[$18 >> 2] = $60;
 $62 = HEAP32[$18 >> 2] | 0;
 HEAP32[$14 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $62;
 HEAP32[sp + 84 >> 2] = 0;
 $64 = HEAP32[$15 >> 2] | 0;
 HEAP32[sp + 96 >> 2] = HEAP32[$14 >> 2];
 if ($64 >>> 0 <= 536870911) {
  HEAP32[$12 >> 2] = HEAP32[$15 >> 2] << 3;
  $80 = __Znwm(HEAP32[$12 >> 2] | 0) | 0;
  HEAP32[$38 >> 2] = $80;
  $81 = HEAP32[$38 >> 2] | 0;
  $82 = HEAP32[$35 >> 2] | 0;
  $83 = $81 + ($82 << 3) | 0;
  $84 = $38 + 8 | 0;
  HEAP32[$84 >> 2] = $83;
  $85 = $38 + 4 | 0;
  HEAP32[$85 >> 2] = $83;
  $86 = HEAP32[$38 >> 2] | 0;
  $87 = HEAP32[$34 >> 2] | 0;
  $88 = $86 + ($87 << 3) | 0;
  HEAP32[$21 >> 2] = $38;
  $89 = HEAP32[$21 >> 2] | 0;
  $90 = $89 + 12 | 0;
  HEAP32[$20 >> 2] = $90;
  $91 = HEAP32[$20 >> 2] | 0;
  HEAP32[$19 >> 2] = $91;
  $92 = HEAP32[$19 >> 2] | 0;
  HEAP32[$92 >> 2] = $88;
  STACKTOP = sp;
  return;
 }
 HEAP32[$9 >> 2] = 55296;
 $66 = ___cxa_allocate_exception(8) | 0;
 $67 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = $66;
 HEAP32[$8 >> 2] = $67;
 $68 = HEAP32[$7 >> 2] | 0;
 __THREW__ = 0;
 invoke_vii(49, $68 | 0, HEAP32[$8 >> 2] | 0);
 $70 = __THREW__;
 __THREW__ = 0;
 if ($70 & 1) {
  $72 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$10 >> 2] = $72;
  HEAP32[sp + 104 >> 2] = tempRet0;
  ___cxa_free_exception($66 | 0);
  ___resumeException(HEAP32[$10 >> 2] | 0);
 } else {
  HEAP32[$68 >> 2] = 48176;
  ___cxa_throw($66 | 0, 42808, 176);
 }
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE12__find_equalIS3_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISK_EERKT_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $60 = 0, $7 = 0, $72 = 0, $73 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 116 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 84 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 60 | 0;
 $19 = sp + 56 | 0;
 $20 = sp + 52 | 0;
 $21 = sp + 48 | 0;
 $22 = sp + 44 | 0;
 $23 = sp + 40 | 0;
 $24 = sp + 36 | 0;
 $25 = sp + 32 | 0;
 $26 = sp + 28 | 0;
 $27 = sp + 24 | 0;
 $28 = sp + 20 | 0;
 $29 = sp + 16 | 0;
 $30 = sp + 12 | 0;
 $31 = sp + 8 | 0;
 $32 = sp + 4 | 0;
 $33 = sp;
 HEAP32[$29 >> 2] = $0;
 HEAP32[$30 >> 2] = $1;
 HEAP32[$31 >> 2] = $2;
 $34 = HEAP32[$29 >> 2] | 0;
 HEAP32[$27 >> 2] = $34;
 HEAP32[$26 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 4;
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 HEAP32[$23 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$32 >> 2] = HEAP32[HEAP32[$22 >> 2] >> 2];
 HEAP32[$33 >> 2] = __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE10__root_ptrEv($34) | 0;
 if (!(HEAP32[$32 >> 2] | 0)) {
  HEAP32[$21 >> 2] = $34;
  HEAP32[$20 >> 2] = (HEAP32[$21 >> 2] | 0) + 4;
  HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[HEAP32[$30 >> 2] >> 2] = HEAP32[$17 >> 2];
  HEAP32[$28 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
  $102 = HEAP32[$28 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 while (1) {
  HEAP32[$12 >> 2] = $34;
  HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 8;
  HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
  $50 = HEAP32[$31 >> 2] | 0;
  $52 = (HEAP32[$32 >> 2] | 0) + 16 | 0;
  HEAP32[$3 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$4 >> 2] = $50;
  HEAP32[$5 >> 2] = $52;
  if (__ZNK3zim10less_rangeclERKNS_5RangeES3_(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) {
   $60 = HEAP32[$32 >> 2] | 0;
   if (!(HEAP32[HEAP32[$32 >> 2] >> 2] | 0)) {
    label = 6;
    break;
   }
   HEAP32[$6 >> 2] = $60;
   HEAP32[$33 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$32 >> 2] = HEAP32[HEAP32[$32 >> 2] >> 2];
  } else {
   HEAP32[$9 >> 2] = $34;
   HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + 8;
   HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
   $72 = (HEAP32[$32 >> 2] | 0) + 16 | 0;
   $73 = HEAP32[$31 >> 2] | 0;
   HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$14 >> 2] = $72;
   HEAP32[$15 >> 2] = $73;
   $77 = __ZNK3zim10less_rangeclERKNS_5RangeES3_(HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0;
   $78 = HEAP32[$32 >> 2] | 0;
   if (!$77) {
    label = 11;
    break;
   }
   $82 = HEAP32[$32 >> 2] | 0;
   if (!(HEAP32[$78 + 4 >> 2] | 0)) {
    label = 10;
    break;
   }
   HEAP32[$16 >> 2] = $82 + 4;
   HEAP32[$33 >> 2] = HEAP32[$16 >> 2];
   HEAP32[$32 >> 2] = HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2];
  }
 }
 if ((label | 0) == 6) {
  HEAP32[HEAP32[$30 >> 2] >> 2] = $60;
  HEAP32[$28 >> 2] = HEAP32[HEAP32[$30 >> 2] >> 2];
  $102 = HEAP32[$28 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 } else if ((label | 0) == 10) {
  HEAP32[HEAP32[$30 >> 2] >> 2] = $82;
  HEAP32[$28 >> 2] = (HEAP32[$32 >> 2] | 0) + 4;
  $102 = HEAP32[$28 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 } else if ((label | 0) == 11) {
  HEAP32[HEAP32[$30 >> 2] >> 2] = $78;
  HEAP32[$28 >> 2] = HEAP32[$33 >> 2];
  $102 = HEAP32[$28 >> 2] | 0;
  STACKTOP = sp;
  return $102 | 0;
 }
 return 0;
}

function _lzma_lz_decoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 72 | 0;
 $11 = sp;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 48 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
 do if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$9 >> 2] = _lzma_alloc(4208, HEAP32[$6 >> 2] | 0) | 0;
  if (HEAP32[$9 >> 2] | 0) {
   HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$9 >> 2];
   HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] = 5;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] = 67;
   HEAP32[HEAP32[$9 >> 2] >> 2] = 0;
   HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] = 0;
   $34 = (HEAP32[$9 >> 2] | 0) + 24 | 0;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$10 + 8 >> 2] = 0;
   HEAP32[$10 + 12 >> 2] = 0;
   HEAP32[$10 + 16 >> 2] = 0;
   HEAP32[$34 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$34 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
   HEAP32[$34 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
   HEAP32[$34 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
   HEAP32[$34 + 16 >> 2] = HEAP32[$10 + 16 >> 2];
   $36 = (HEAP32[$9 >> 2] | 0) + 48 | 0;
   dest = $11;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $38 = $11 + 8 | 0;
   HEAP32[$38 >> 2] = -1;
   HEAP32[$38 + 4 >> 2] = -1;
   HEAP32[$11 + 16 >> 2] = 0;
   dest = $36;
   src = $11;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   break;
  }
  HEAP32[$4 >> 2] = 5;
  $127 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 } while (0);
 HEAP32[$13 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[$8 >> 2] & 31]((HEAP32[$9 >> 2] | 0) + 24 | 0, HEAP32[$6 >> 2] | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0, $12) | 0;
 if (HEAP32[$13 >> 2] | 0) {
  HEAP32[$4 >> 2] = HEAP32[$13 >> 2];
  $127 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 if ((HEAP32[$12 >> 2] | 0) >>> 0 < 4096) HEAP32[$12 >> 2] = 4096;
 if ((HEAP32[$12 >> 2] | 0) >>> 0 > 4294967280) {
  HEAP32[$4 >> 2] = 5;
  $127 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 }
 HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + 15 & -16;
 do if ((HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[$12 >> 2] | 0)) {
  _lzma_free(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, HEAP32[$6 >> 2] | 0);
  $71 = _lzma_alloc(HEAP32[$12 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  HEAP32[HEAP32[$9 >> 2] >> 2] = $71;
  if (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) {
   HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] = HEAP32[$12 >> 2];
   break;
  }
  HEAP32[$4 >> 2] = 5;
  $127 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $127 | 0;
 } while (0);
 _lz_decoder_reset(HEAP32[HEAP32[$5 >> 2] >> 2] | 0);
 if (HEAP32[$12 + 4 >> 2] | 0) if ((HEAP32[$12 + 8 >> 2] | 0) >>> 0 > 0) {
  HEAP32[$14 >> 2] = (HEAP32[$12 + 8 >> 2] | 0) >>> 0 < (HEAP32[$12 >> 2] | 0) >>> 0 ? HEAP32[$12 + 8 >> 2] | 0 : HEAP32[$12 >> 2] | 0;
  HEAP32[$15 >> 2] = (HEAP32[$12 + 8 >> 2] | 0) - (HEAP32[$14 >> 2] | 0);
  _memcpy(HEAP32[HEAP32[$9 >> 2] >> 2] | 0, (HEAP32[$12 + 4 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0, HEAP32[$14 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = HEAP32[$14 >> 2];
  HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = HEAP32[$14 >> 2];
 }
 HEAP8[(HEAP32[$9 >> 2] | 0) + 96 >> 0] = 0;
 HEAP8[(HEAP32[$9 >> 2] | 0) + 97 >> 0] = 0;
 HEAP32[(HEAP32[$9 >> 2] | 0) + 100 >> 2] = 0;
 HEAP32[(HEAP32[$9 >> 2] | 0) + 100 + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = _lzma_next_filter_init((HEAP32[$9 >> 2] | 0) + 48 | 0, HEAP32[$6 >> 2] | 0, (HEAP32[$7 >> 2] | 0) + 16 | 0) | 0;
 $127 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $127 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 __THREW__ = 0;
 invoke_vii(45, $4 | 0, $0 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($5 & 1) {
  $56 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $56;
  $$pre$phi13Z2D = $0;
  $$pre$phi15Z2D = $0;
  label = 20;
 } else {
  L4 : do if (HEAP8[$4 >> 0] | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
   __THREW__ = 0;
   $13 = invoke_iii(32, $$byval_copy | 0, 62424) | 0;
   $14 = __THREW__;
   __THREW__ = 0;
   L6 : do if ($14 & 1) {
    $58 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$0 = $58;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    $19 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    $21 = HEAP32[$19 + 24 >> 2] | 0;
    $22 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $23 = $19 + 76 | 0;
    do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($22, HEAP32[$23 >> 2] | 0) | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $19);
     __THREW__ = 0;
     $26 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     if (!($27 & 1)) {
      __THREW__ = 0;
      $32 = invoke_iii(HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] | 0, $26 | 0, 32) | 0;
      $33 = __THREW__;
      __THREW__ = 0;
      if (!($33 & 1)) {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $37 = $32 << 24 >> 24;
       HEAP32[$23 >> 2] = $37;
       $$pre$phiZ2D = $19;
       $39 = $37;
       label = 10;
       break;
      }
     }
     $35 = ___cxa_find_matching_catch_3(0) | 0;
     __ZNSt3__26localeD2Ev($$byval_copy);
     $eh$lpad$body$indexZ2D = $35;
    } else {
     $$pre$phiZ2D = $19;
     $39 = HEAP32[$23 >> 2] | 0;
     label = 10;
    } while (0);
    do if ((label | 0) == 10) {
     $42 = HEAP32[(HEAP32[$13 >> 2] | 0) + 28 >> 2] | 0;
     HEAP32[$3 >> 2] = $21;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
     $43 = invoke_iiiiiii($42 | 0, $13 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $39 & 255 | 0, $1 | 0, $2 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      $60 = ___cxa_find_matching_catch_3(0) | 0;
      $eh$lpad$body$indexZ2D = $60;
      break;
     }
     if ($43 | 0) break L4;
     $50 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $50 | 0, HEAP32[$50 + 16 >> 2] | 5 | 0);
     $54 = __THREW__;
     __THREW__ = 0;
     if (!($54 & 1)) break L4;
     $62 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $62;
     break L6;
    } while (0);
    $$0 = $eh$lpad$body$indexZ2D;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
   $$1 = $$0;
   $$pre$phi13Z2D = $0;
   $$pre$phi15Z2D = $0;
   label = 20;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
 } while (0);
 do if ((label | 0) == 20) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $68 = __THREW__;
  __THREW__ = 0;
  if (!($68 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $70 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $72 = __THREW__;
  __THREW__ = 0;
  if ($72 & 1) {
   $74 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($74);
  } else ___resumeException($70 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $13 = 0, $14 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 __THREW__ = 0;
 invoke_vii(45, $4 | 0, $0 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($5 & 1) {
  $56 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $56;
  $$pre$phi13Z2D = $0;
  $$pre$phi15Z2D = $0;
  label = 20;
 } else {
  L4 : do if (HEAP8[$4 >> 0] | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
   __THREW__ = 0;
   $13 = invoke_iii(32, $$byval_copy | 0, 62424) | 0;
   $14 = __THREW__;
   __THREW__ = 0;
   L6 : do if ($14 & 1) {
    $58 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$0 = $58;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    $19 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    $21 = HEAP32[$19 + 24 >> 2] | 0;
    $22 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $23 = $19 + 76 | 0;
    do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($22, HEAP32[$23 >> 2] | 0) | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $19);
     __THREW__ = 0;
     $26 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     if (!($27 & 1)) {
      __THREW__ = 0;
      $32 = invoke_iii(HEAP32[(HEAP32[$26 >> 2] | 0) + 28 >> 2] | 0, $26 | 0, 32) | 0;
      $33 = __THREW__;
      __THREW__ = 0;
      if (!($33 & 1)) {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $37 = $32 << 24 >> 24;
       HEAP32[$23 >> 2] = $37;
       $$pre$phiZ2D = $19;
       $39 = $37;
       label = 10;
       break;
      }
     }
     $35 = ___cxa_find_matching_catch_3(0) | 0;
     __ZNSt3__26localeD2Ev($$byval_copy);
     $eh$lpad$body$indexZ2D = $35;
    } else {
     $$pre$phiZ2D = $19;
     $39 = HEAP32[$23 >> 2] | 0;
     label = 10;
    } while (0);
    do if ((label | 0) == 10) {
     $42 = HEAP32[(HEAP32[$13 >> 2] | 0) + 20 >> 2] | 0;
     HEAP32[$3 >> 2] = $21;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
     $43 = invoke_iiiiiii($42 | 0, $13 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $39 & 255 | 0, $1 | 0, $2 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      $60 = ___cxa_find_matching_catch_3(0) | 0;
      $eh$lpad$body$indexZ2D = $60;
      break;
     }
     if ($43 | 0) break L4;
     $50 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $50 | 0, HEAP32[$50 + 16 >> 2] | 5 | 0);
     $54 = __THREW__;
     __THREW__ = 0;
     if (!($54 & 1)) break L4;
     $62 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $62;
     break L6;
    } while (0);
    $$0 = $eh$lpad$body$indexZ2D;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
   $$1 = $$0;
   $$pre$phi13Z2D = $0;
   $$pre$phi15Z2D = $0;
   label = 20;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($4);
 } while (0);
 do if ((label | 0) == 20) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $68 = __THREW__;
  __THREW__ = 0;
  if (!($68 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $70 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $72 = __THREW__;
  __THREW__ = 0;
  if ($72 & 1) {
   $74 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($74);
  } else ___resumeException($70 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $50 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $62 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(45, $3 | 0, $0 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($4 & 1) {
  $56 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $56;
  $$pre$phi13Z2D = $0;
  $$pre$phi15Z2D = $0;
  label = 20;
 } else {
  L4 : do if (HEAP8[$3 >> 0] | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
   __THREW__ = 0;
   $12 = invoke_iii(32, $$byval_copy | 0, 62424) | 0;
   $13 = __THREW__;
   __THREW__ = 0;
   L6 : do if ($13 & 1) {
    $58 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$0 = $58;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    $18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    $20 = HEAP32[$18 + 24 >> 2] | 0;
    $21 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $22 = $18 + 76 | 0;
    do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $18);
     __THREW__ = 0;
     $25 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
     $26 = __THREW__;
     __THREW__ = 0;
     if (!($26 & 1)) {
      __THREW__ = 0;
      $31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
      $32 = __THREW__;
      __THREW__ = 0;
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $36 = $31 << 24 >> 24;
       HEAP32[$22 >> 2] = $36;
       $$pre$phiZ2D = $18;
       $38 = $36;
       label = 10;
       break;
      }
     }
     $34 = ___cxa_find_matching_catch_3(0) | 0;
     __ZNSt3__26localeD2Ev($$byval_copy);
     $eh$lpad$body$indexZ2D = $34;
    } else {
     $$pre$phiZ2D = $18;
     $38 = HEAP32[$22 >> 2] | 0;
     label = 10;
    } while (0);
    do if ((label | 0) == 10) {
     $42 = HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] | 0;
     HEAP32[$2 >> 2] = $20;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
     $43 = invoke_iiiiii($42 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 & 255 | 0, $1 & 65535 | 0) | 0;
     $44 = __THREW__;
     __THREW__ = 0;
     if ($44 & 1) {
      $60 = ___cxa_find_matching_catch_3(0) | 0;
      $eh$lpad$body$indexZ2D = $60;
      break;
     }
     if ($43 | 0) break L4;
     $50 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $50 | 0, HEAP32[$50 + 16 >> 2] | 5 | 0);
     $54 = __THREW__;
     __THREW__ = 0;
     if (!($54 & 1)) break L4;
     $62 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $62;
     break L6;
    } while (0);
    $$0 = $eh$lpad$body$indexZ2D;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
   $$1 = $$0;
   $$pre$phi13Z2D = $0;
   $$pre$phi15Z2D = $0;
   label = 20;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 } while (0);
 do if ((label | 0) == 20) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $68 = __THREW__;
  __THREW__ = 0;
  if (!($68 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $70 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $72 = __THREW__;
  __THREW__ = 0;
  if ($72 & 1) {
   $74 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($74);
  } else ___resumeException($70 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi13Z2D = 0, $$pre$phi15Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(45, $3 | 0, $0 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($4 & 1) {
  $55 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $55;
  $$pre$phi13Z2D = $0;
  $$pre$phi15Z2D = $0;
  label = 20;
 } else {
  L4 : do if (HEAP8[$3 >> 0] | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
   __THREW__ = 0;
   $12 = invoke_iii(32, $$byval_copy | 0, 62424) | 0;
   $13 = __THREW__;
   __THREW__ = 0;
   L6 : do if ($13 & 1) {
    $57 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$0 = $57;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    $18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    $20 = HEAP32[$18 + 24 >> 2] | 0;
    $21 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $22 = $18 + 76 | 0;
    do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $18);
     __THREW__ = 0;
     $25 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
     $26 = __THREW__;
     __THREW__ = 0;
     if (!($26 & 1)) {
      __THREW__ = 0;
      $31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
      $32 = __THREW__;
      __THREW__ = 0;
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $36 = $31 << 24 >> 24;
       HEAP32[$22 >> 2] = $36;
       $$pre$phiZ2D = $18;
       $38 = $36;
       label = 10;
       break;
      }
     }
     $34 = ___cxa_find_matching_catch_3(0) | 0;
     __ZNSt3__26localeD2Ev($$byval_copy);
     $eh$lpad$body$indexZ2D = $34;
    } else {
     $$pre$phiZ2D = $18;
     $38 = HEAP32[$22 >> 2] | 0;
     label = 10;
    } while (0);
    do if ((label | 0) == 10) {
     $41 = HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] | 0;
     HEAP32[$2 >> 2] = $20;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
     $42 = invoke_iiiiii($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 & 255 | 0, $1 | 0) | 0;
     $43 = __THREW__;
     __THREW__ = 0;
     if ($43 & 1) {
      $59 = ___cxa_find_matching_catch_3(0) | 0;
      $eh$lpad$body$indexZ2D = $59;
      break;
     }
     if ($42 | 0) break L4;
     $49 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $49 | 0, HEAP32[$49 + 16 >> 2] | 5 | 0);
     $53 = __THREW__;
     __THREW__ = 0;
     if (!($53 & 1)) break L4;
     $61 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $61;
     break L6;
    } while (0);
    $$0 = $eh$lpad$body$indexZ2D;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
   $$1 = $$0;
   $$pre$phi13Z2D = $0;
   $$pre$phi15Z2D = $0;
   label = 20;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 } while (0);
 do if ((label | 0) == 20) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi15Z2D + (HEAP32[(HEAP32[$$pre$phi13Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $67 = __THREW__;
  __THREW__ = 0;
  if (!($67 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $69 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $71 = __THREW__;
  __THREW__ = 0;
  if ($71 & 1) {
   $73 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($73);
  } else ___resumeException($69 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi20Z2D = 0, $$pre$phi22Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $49 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $61 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(45, $3 | 0, $0 | 0);
 $4 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($4 & 1) {
  $55 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $55;
  $$pre$phi20Z2D = $0;
  $$pre$phi22Z2D = $0;
  label = 20;
 } else {
  L4 : do if (HEAP8[$3 >> 0] | 0) {
   __ZNKSt3__28ios_base6getlocEv($$byval_copy, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
   __THREW__ = 0;
   $12 = invoke_iii(32, $$byval_copy | 0, 62424) | 0;
   $13 = __THREW__;
   __THREW__ = 0;
   L6 : do if ($13 & 1) {
    $57 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $$0 = $57;
   } else {
    __ZNSt3__26localeD2Ev($$byval_copy);
    $18 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    $20 = HEAP32[$18 + 24 >> 2] | 0;
    $21 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
    $22 = $18 + 76 | 0;
    do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($21, HEAP32[$22 >> 2] | 0) | 0) {
     __ZNKSt3__28ios_base6getlocEv($$byval_copy, $18);
     __THREW__ = 0;
     $25 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
     $26 = __THREW__;
     __THREW__ = 0;
     if (!($26 & 1)) {
      __THREW__ = 0;
      $31 = invoke_iii(HEAP32[(HEAP32[$25 >> 2] | 0) + 28 >> 2] | 0, $25 | 0, 32) | 0;
      $32 = __THREW__;
      __THREW__ = 0;
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($$byval_copy);
       $36 = $31 << 24 >> 24;
       HEAP32[$22 >> 2] = $36;
       $$pre$phiZ2D = $18;
       $38 = $36;
       label = 10;
       break;
      }
     }
     $34 = ___cxa_find_matching_catch_3(0) | 0;
     __ZNSt3__26localeD2Ev($$byval_copy);
     $eh$lpad$body$indexZ2D = $34;
    } else {
     $$pre$phiZ2D = $18;
     $38 = HEAP32[$22 >> 2] | 0;
     label = 10;
    } while (0);
    do if ((label | 0) == 10) {
     $41 = HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] | 0;
     HEAP32[$2 >> 2] = $20;
     __THREW__ = 0;
     HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
     $42 = invoke_iiiiii($41 | 0, $12 | 0, $$byval_copy | 0, $$pre$phiZ2D | 0, $38 & 255 | 0, $1 | 0) | 0;
     $43 = __THREW__;
     __THREW__ = 0;
     if ($43 & 1) {
      $59 = ___cxa_find_matching_catch_3(0) | 0;
      $eh$lpad$body$indexZ2D = $59;
      break;
     }
     if ($42 | 0) break L4;
     $49 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $49 | 0, HEAP32[$49 + 16 >> 2] | 5 | 0);
     $53 = __THREW__;
     __THREW__ = 0;
     if (!($53 & 1)) break L4;
     $61 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $61;
     break L6;
    } while (0);
    $$0 = $eh$lpad$body$indexZ2D;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
   $$1 = $$0;
   $$pre$phi20Z2D = $0;
   $$pre$phi22Z2D = $0;
   label = 20;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
 } while (0);
 do if ((label | 0) == 20) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi22Z2D + (HEAP32[(HEAP32[$$pre$phi20Z2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $67 = __THREW__;
  __THREW__ = 0;
  if (!($67 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $69 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $71 = __THREW__;
  __THREW__ = 0;
  if ($71 & 1) {
   $73 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($73);
  } else ___resumeException($69 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload29 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy9 = sp + 40 | 0;
 $$byval_copy = sp;
 $6 = sp + 32 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 L1 : do if (!(HEAP32[$3 + 4 >> 2] & 1)) {
  HEAP32[$6 >> 2] = -1;
  $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy9, $3, $4, $6) | 0;
  switch (HEAP32[$6 >> 2] | 0) {
  case 0:
   {
    HEAP8[$5 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$5 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$5 >> 0] = 1;
    HEAP32[$4 >> 2] = 4;
   }
  }
  $$sroa$027$0 = HEAP32[$1 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3);
  __THREW__ = 0;
  $21 = invoke_iii(32, $$byval_copy9 | 0, 62400) | 0;
  $22 = __THREW__;
  __THREW__ = 0;
  do if ($22 & 1) {
   $46 = ___cxa_find_matching_catch_2() | 0;
   $47 = tempRet0;
   __ZNSt3__26localeD2Ev($$byval_copy9);
   $$2 = $46;
   $$233 = $47;
  } else {
   __ZNSt3__26localeD2Ev($$byval_copy9);
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3);
   __THREW__ = 0;
   $24 = invoke_iii(32, $$byval_copy9 | 0, 62408) | 0;
   $25 = __THREW__;
   __THREW__ = 0;
   if ($25 & 1) {
    $48 = ___cxa_find_matching_catch_2() | 0;
    $49 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy9);
    $$2 = $48;
    $$233 = $49;
    break;
   }
   __ZNSt3__26localeD2Ev($$byval_copy9);
   __THREW__ = 0;
   invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $$byval_copy | 0, $24 | 0);
   $30 = __THREW__;
   __THREW__ = 0;
   L15 : do if ($30 & 1) {
    $32 = ___cxa_find_matching_catch_2() | 0;
    $$030 = $32;
    $$sink$index3 = tempRet0;
   } else {
    __THREW__ = 0;
    invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0, $$byval_copy + 12 | 0, $24 | 0);
    $37 = __THREW__;
    __THREW__ = 0;
    if ($37 & 1) {
     $58 = ___cxa_find_matching_catch_2() | 0;
     $59 = tempRet0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
     $$030 = $58;
     $$sink$index3 = $59;
     break;
    }
    HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
    $40 = $$byval_copy + 24 | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy9 >> 2] = HEAP32[$9 >> 2];
    $41 = invoke_iiiiiiii(8, $1 | 0, $$byval_copy9 | 0, $$byval_copy | 0, $40 | 0, $21 | 0, $4 | 0, 1) | 0;
    $42 = __THREW__;
    __THREW__ = 0;
    if ($42 & 1) {
     $50 = ___cxa_find_matching_catch_2() | 0;
     $51 = tempRet0;
     $56 = $40;
     while (1) {
      $56 = $56 + -12 | 0;
      __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($56);
      if (($56 | 0) == ($$byval_copy | 0)) {
       $$030 = $50;
       $$sink$index3 = $51;
       break L15;
      }
     }
    }
    HEAP8[$5 >> 0] = ($41 | 0) == ($$byval_copy | 0) & 1;
    $$sroa$027$0$copyload29 = HEAP32[$1 >> 2] | 0;
    $53 = $40;
    do {
     $53 = $53 + -12 | 0;
     __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($53);
    } while (($53 | 0) != ($$byval_copy | 0));
    $$sroa$027$0 = $$sroa$027$0$copyload29;
    break L1;
   } while (0);
   $$2 = $$030;
   $$233 = $$sink$index3;
  } while (0);
  ___resumeException($$2 | 0);
 } while (0);
 STACKTOP = sp;
 return $$sroa$027$0 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$030 = 0, $$2 = 0, $$233 = 0, $$byval_copy = 0, $$byval_copy9 = 0, $$sink$index3 = 0, $$sroa$027$0 = 0, $$sroa$027$0$copyload29 = 0, $16 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy9 = sp + 40 | 0;
 $$byval_copy = sp;
 $6 = sp + 32 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 L1 : do if (!(HEAP32[$3 + 4 >> 2] & 1)) {
  HEAP32[$6 >> 2] = -1;
  $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy9 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$1 >> 2] = FUNCTION_TABLE_iiiiiii[$16 & 63]($0, $$byval_copy, $$byval_copy9, $3, $4, $6) | 0;
  switch (HEAP32[$6 >> 2] | 0) {
  case 0:
   {
    HEAP8[$5 >> 0] = 0;
    break;
   }
  case 1:
   {
    HEAP8[$5 >> 0] = 1;
    break;
   }
  default:
   {
    HEAP8[$5 >> 0] = 1;
    HEAP32[$4 >> 2] = 4;
   }
  }
  $$sroa$027$0 = HEAP32[$1 >> 2] | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3);
  __THREW__ = 0;
  $21 = invoke_iii(32, $$byval_copy9 | 0, 62368) | 0;
  $22 = __THREW__;
  __THREW__ = 0;
  do if ($22 & 1) {
   $46 = ___cxa_find_matching_catch_2() | 0;
   $47 = tempRet0;
   __ZNSt3__26localeD2Ev($$byval_copy9);
   $$2 = $46;
   $$233 = $47;
  } else {
   __ZNSt3__26localeD2Ev($$byval_copy9);
   __ZNKSt3__28ios_base6getlocEv($$byval_copy9, $3);
   __THREW__ = 0;
   $24 = invoke_iii(32, $$byval_copy9 | 0, 62384) | 0;
   $25 = __THREW__;
   __THREW__ = 0;
   if ($25 & 1) {
    $48 = ___cxa_find_matching_catch_2() | 0;
    $49 = tempRet0;
    __ZNSt3__26localeD2Ev($$byval_copy9);
    $$2 = $48;
    $$233 = $49;
    break;
   }
   __ZNSt3__26localeD2Ev($$byval_copy9);
   __THREW__ = 0;
   invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $$byval_copy | 0, $24 | 0);
   $30 = __THREW__;
   __THREW__ = 0;
   L15 : do if ($30 & 1) {
    $32 = ___cxa_find_matching_catch_2() | 0;
    $$030 = $32;
    $$sink$index3 = tempRet0;
   } else {
    __THREW__ = 0;
    invoke_vii(HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0, $$byval_copy + 12 | 0, $24 | 0);
    $37 = __THREW__;
    __THREW__ = 0;
    if ($37 & 1) {
     $58 = ___cxa_find_matching_catch_2() | 0;
     $59 = tempRet0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
     $$030 = $58;
     $$sink$index3 = $59;
     break;
    }
    HEAP32[$9 >> 2] = HEAP32[$2 >> 2];
    $40 = $$byval_copy + 24 | 0;
    __THREW__ = 0;
    HEAP32[$$byval_copy9 >> 2] = HEAP32[$9 >> 2];
    $41 = invoke_iiiiiiii(7, $1 | 0, $$byval_copy9 | 0, $$byval_copy | 0, $40 | 0, $21 | 0, $4 | 0, 1) | 0;
    $42 = __THREW__;
    __THREW__ = 0;
    if ($42 & 1) {
     $50 = ___cxa_find_matching_catch_2() | 0;
     $51 = tempRet0;
     $56 = $40;
     while (1) {
      $56 = $56 + -12 | 0;
      __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($56);
      if (($56 | 0) == ($$byval_copy | 0)) {
       $$030 = $50;
       $$sink$index3 = $51;
       break L15;
      }
     }
    }
    HEAP8[$5 >> 0] = ($41 | 0) == ($$byval_copy | 0) & 1;
    $$sroa$027$0$copyload29 = HEAP32[$1 >> 2] | 0;
    $53 = $40;
    do {
     $53 = $53 + -12 | 0;
     __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
    } while (($53 | 0) != ($$byval_copy | 0));
    $$sroa$027$0 = $$sroa$027$0$copyload29;
    break L1;
   } while (0);
   $$2 = $$030;
   $$233 = $$sink$index3;
  } while (0);
  ___resumeException($$2 | 0);
 } while (0);
 STACKTOP = sp;
 return $$sroa$027$0 | 0;
}

function __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$8 = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $104 = 0, $106 = 0, $11 = 0, $110 = 0, $113 = 0, $134 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $42 = 0, $48 = 0, $57 = 0, $59 = 0, $66 = 0, $75 = 0, $85 = 0, $87 = 0, $89 = 0, $95 = 0, $98 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 if (!($7 & 4)) $$pre$phiZ2D = $1; else {
  $10 = HEAP32[$2 >> 2] | 0;
  $11 = $1;
  if (($11 - $10 | 0) > 2) if ((HEAP8[$10 >> 0] | 0) == -17) if ((HEAP8[$10 + 1 >> 0] | 0) == -69) if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
   HEAP32[$2 >> 2] = $10 + 3;
   $$pre$phiZ2D = $11;
  } else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11;
 }
 $24 = $4;
 L9 : while (1) {
  $25 = HEAP32[$2 >> 2] | 0;
  if ($25 >>> 0 >= $1 >>> 0) {
   $$8 = 0;
   break;
  }
  $27 = HEAP32[$5 >> 2] | 0;
  if ($27 >>> 0 >= $4 >>> 0) {
   $$8 = 1;
   break;
  }
  $29 = HEAP8[$25 >> 0] | 0;
  $30 = $29 & 255;
  if ($30 >>> 0 > $6 >>> 0) {
   $$8 = 2;
   break;
  }
  do if ($29 << 24 >> 24 > -1) {
   HEAP16[$27 >> 1] = $29 & 255;
   $$sink = $25 + 1 | 0;
  } else {
   if (($29 & 255) < 194) {
    $$8 = 2;
    break L9;
   }
   if (($29 & 255) < 224) {
    if (($$pre$phiZ2D - $25 | 0) < 2) {
     $$8 = 1;
     break L9;
    }
    $42 = HEAPU8[$25 + 1 >> 0] | 0;
    if (($42 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $48 = $42 & 63 | $30 << 6 & 1984;
    if ($48 >>> 0 > $6 >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$27 >> 1] = $48;
    $$sink = $25 + 2 | 0;
    break;
   }
   if (($29 & 255) < 240) {
    if (($$pre$phiZ2D - $25 | 0) < 3) {
     $$8 = 1;
     break L9;
    }
    $57 = HEAP8[$25 + 1 >> 0] | 0;
    $59 = HEAP8[$25 + 2 >> 0] | 0;
    switch ($29 << 24 >> 24) {
    case -32:
     {
      if (($57 & -32) << 24 >> 24 != -96) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($57 & -32) << 24 >> 24 != -128) {
       $$8 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($57 & -64) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
    }
    $66 = $59 & 255;
    if (($66 & 192 | 0) != 128) {
     $$8 = 2;
     break L9;
    }
    $75 = ($57 & 63) << 6 | $30 << 12 | $66 & 63;
    if (($75 & 65535) >>> 0 > $6 >>> 0) {
     $$8 = 2;
     break L9;
    }
    HEAP16[$27 >> 1] = $75;
    $$sink = $25 + 3 | 0;
    break;
   }
   if (($29 & 255) >= 245) {
    $$8 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $25 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $85 = HEAP8[$25 + 1 >> 0] | 0;
   $87 = HEAP8[$25 + 2 >> 0] | 0;
   $89 = HEAP8[$25 + 3 >> 0] | 0;
   switch ($29 << 24 >> 24) {
   case -16:
    {
     if (($85 + 112 & 255) >= 48) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($85 & -16) << 24 >> 24 != -128) {
      $$8 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($85 & -64) << 24 >> 24 != -128) {
     $$8 = 2;
     break L9;
    }
   }
   $95 = $87 & 255;
   if (($95 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   $98 = $89 & 255;
   if (($98 & 192 | 0) != 128) {
    $$8 = 2;
    break L9;
   }
   if (($24 - $27 | 0) < 4) {
    $$8 = 1;
    break L9;
   }
   $104 = $30 & 7;
   $106 = $85 & 255;
   $110 = $95 << 6;
   $113 = $98 & 63;
   if (($106 << 12 & 258048 | $104 << 18 | $110 & 4032 | $113) >>> 0 > $6 >>> 0) {
    $$8 = 2;
    break L9;
   }
   HEAP16[$27 >> 1] = $106 << 2 & 60 | $95 >>> 4 & 3 | (($106 >>> 4 & 3 | $104 << 2) << 6) + 16320 | 55296;
   $134 = $27 + 2 | 0;
   HEAP32[$5 >> 2] = $134;
   HEAP16[$134 >> 1] = $113 | $110 & 960 | 56320;
   $$sink = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  } while (0);
  HEAP32[$2 >> 2] = $$sink;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 2;
 }
 return $$8 | 0;
}

function _lz_decode($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 36 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 28 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 20 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 HEAP32[$19 >> 2] = HEAP32[$10 >> 2];
 if (!(HEAP32[(HEAP32[$19 >> 2] | 0) + 48 + 20 >> 2] | 0)) {
  HEAP32[$9 >> 2] = _decode_buffer_799(HEAP32[$19 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
  $129 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 }
 L5 : while (1) {
  if ((HEAP32[HEAP32[$16 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$17 >> 2] | 0) >>> 0) {
   label = 26;
   break;
  }
  do if (!(HEAP8[(HEAP32[$19 >> 2] | 0) + 96 >> 0] & 1)) if ((HEAP32[(HEAP32[$19 >> 2] | 0) + 100 >> 2] | 0) == (HEAP32[(HEAP32[$19 >> 2] | 0) + 100 + 4 >> 2] | 0)) {
   HEAP32[(HEAP32[$19 >> 2] | 0) + 100 >> 2] = 0;
   HEAP32[(HEAP32[$19 >> 2] | 0) + 100 + 4 >> 2] = 0;
   HEAP32[$20 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[$19 >> 2] | 0) + 48 + 20 >> 2] & 7](HEAP32[(HEAP32[$19 >> 2] | 0) + 48 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, (HEAP32[$19 >> 2] | 0) + 100 + 8 | 0, (HEAP32[$19 >> 2] | 0) + 100 + 4 | 0, 4096, HEAP32[$18 >> 2] | 0) | 0;
   if ((HEAP32[$20 >> 2] | 0) == 1) {
    HEAP8[(HEAP32[$19 >> 2] | 0) + 96 >> 0] = 1;
    break;
   }
   if (HEAP32[$20 >> 2] | 0) {
    label = 11;
    break L5;
   }
   if (!(HEAP32[(HEAP32[$19 >> 2] | 0) + 100 + 4 >> 2] | 0)) {
    label = 11;
    break L5;
   }
  } while (0);
  $92 = HEAP32[$19 >> 2] | 0;
  if (HEAP8[(HEAP32[$19 >> 2] | 0) + 97 >> 0] & 1) {
   label = 13;
   break;
  }
  HEAP32[$21 >> 2] = _decode_buffer_799($92, (HEAP32[$19 >> 2] | 0) + 100 + 8 | 0, (HEAP32[$19 >> 2] | 0) + 100 | 0, HEAP32[(HEAP32[$19 >> 2] | 0) + 100 + 4 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
  if ((HEAP32[$21 >> 2] | 0) == 1) HEAP8[(HEAP32[$19 >> 2] | 0) + 97 >> 0] = 1; else {
   if (HEAP32[$21 >> 2] | 0) {
    label = 21;
    break;
   }
   if (HEAP8[(HEAP32[$19 >> 2] | 0) + 96 >> 0] & 1) if ((HEAP32[HEAP32[$16 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$17 >> 2] | 0) >>> 0) {
    label = 24;
    break;
   }
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$9 >> 2] = HEAP32[$20 >> 2];
  $129 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 13) {
  if (HEAP32[$92 + 100 + 4 >> 2] | 0) {
   HEAP32[$9 >> 2] = 9;
   $129 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
  if (HEAP8[(HEAP32[$19 >> 2] | 0) + 96 >> 0] & 1) {
   HEAP32[$9 >> 2] = 1;
   $129 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  } else {
   HEAP32[$9 >> 2] = 0;
   $129 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $129 | 0;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$9 >> 2] = HEAP32[$21 >> 2];
  $129 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 24) {
  HEAP32[$9 >> 2] = 9;
  $129 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 26) {
  HEAP32[$9 >> 2] = 0;
  $129 = HEAP32[$9 >> 2] | 0;
  STACKTOP = sp;
  return $129 | 0;
 }
 return 0;
}

function __ZN3zim9SubBufferC2ENSt3__210shared_ptrIKNS_6BufferEEENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy1 = 0, $10 = 0, $104 = 0, $11 = 0, $110 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $4 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $65 = 0, $71 = 0, $73 = 0, $77 = 0, $8 = 0, $82 = 0, $83 = 0, $87 = 0, $9 = 0, $92 = 0, $93 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy1 = sp + 40 | 0;
 $4 = sp + 96 | 0;
 $5 = sp + 92 | 0;
 $6 = sp + 88 | 0;
 $8 = sp + 80 | 0;
 $9 = sp + 76 | 0;
 $10 = sp + 72 | 0;
 $11 = sp + 68 | 0;
 $12 = sp + 64 | 0;
 $13 = sp + 60 | 0;
 $14 = sp + 56 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 8 | 0;
 $21 = sp;
 HEAP32[$14 >> 2] = $0;
 $22 = HEAP32[$14 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 __ZN3zim6BufferC2ENS_7zsize_tE($22, $$byval_copy1);
 HEAP32[$22 >> 2] = 43196;
 $23 = $22 + 24 | 0;
 HEAP32[$13 >> 2] = $1;
 $25 = HEAP32[HEAP32[$13 >> 2] >> 2] | 0;
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$16 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 $29 = invoke_iii($28 | 0, $25 | 0, $$byval_copy1 | 0) | 0;
 $30 = __THREW__;
 __THREW__ = 0;
 if ($30 & 1) {
  $118 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$17 >> 2] = $118;
  HEAP32[$18 >> 2] = tempRet0;
  __ZN3zim6BufferD2Ev($22);
  $122 = HEAP32[$17 >> 2] | 0;
  $123 = HEAP32[$18 >> 2] | 0;
  ___resumeException($122 | 0);
 }
 HEAP32[$10 >> 2] = $23;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $29;
 $32 = HEAP32[$10 >> 2] | 0;
 HEAP32[$32 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$32 + 4 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$32 + 4 >> 2] | 0) {
  HEAP32[$9 >> 2] = HEAP32[$32 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
  $46 = HEAP32[$5 >> 2] | 0;
  HEAP32[$6 >> 2] = 1;
  $47 = HEAP32[$6 >> 2] | 0;
  $48 = HEAP32[$46 >> 2] | 0;
  HEAP32[$46 >> 2] = $48 + $47;
  HEAP32[sp + 84 >> 2] = $48 + $47;
 }
 $51 = $2;
 $57 = $3;
 $63 = _i64Add(HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, HEAP32[$57 >> 2] | 0, HEAP32[$57 + 4 >> 2] | 0) | 0;
 $65 = $19;
 HEAP32[$65 >> 2] = $63;
 HEAP32[$65 + 4 >> 2] = tempRet0;
 HEAP32[$4 >> 2] = $1;
 $71 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
 $73 = $21;
 HEAP32[$73 >> 2] = $71;
 HEAP32[$73 + 4 >> 2] = tempRet0;
 $77 = $21;
 $82 = HEAP32[$77 + 4 >> 2] | 0;
 $83 = $20;
 HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$83 + 4 >> 2] = $82;
 $87 = $19;
 $92 = HEAP32[$87 + 4 >> 2] | 0;
 $93 = $20;
 $98 = HEAP32[$93 + 4 >> 2] | 0;
 if ($92 >>> 0 < $98 >>> 0 | (($92 | 0) == ($98 | 0) ? (HEAP32[$87 >> 2] | 0) >>> 0 <= (HEAP32[$93 >> 2] | 0) >>> 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 $104 = $19;
 $110 = $20;
 __THREW__ = 0;
 invoke_viiiiiiiii(1, 48830, 51100, 48846, HEAP32[$104 >> 2] | 0, HEAP32[$104 + 4 >> 2] | 0, HEAP32[$110 >> 2] | 0, HEAP32[$110 + 4 >> 2] | 0, 50990, 111);
 $116 = __THREW__;
 __THREW__ = 0;
 if (!($116 & 1)) {
  STACKTOP = sp;
  return;
 }
 $120 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$17 >> 2] = $120;
 HEAP32[$18 >> 2] = tempRet0;
 __ZNSt3__210shared_ptrIKcED2Ev($23);
 __ZN3zim6BufferD2Ev($22);
 $122 = HEAP32[$17 >> 2] | 0;
 $123 = HEAP32[$18 >> 2] | 0;
 ___resumeException($122 | 0);
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $100 = 0, $101 = 0, $21 = 0, $24 = 0, $36 = 0, $38 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $67 = 0, $70 = 0, $82 = 0, $85 = 0, $9 = 0, $99 = 0, label = 0;
 $5 = $4 + 8 | 0;
 L1 : while (1) {
  $6 = HEAP32[$1 >> 2] | 0;
  do if (!$6) $99 = 1; else {
   $9 = HEAP32[$6 + 12 >> 2] | 0;
   if (($9 | 0) == (HEAP32[$6 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] & 127]($6) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $99 = 1;
    break;
   } else {
    $99 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $21 = HEAP32[$2 >> 2] | 0;
  do if (!$21) label = 15; else {
   $24 = HEAP32[$21 + 12 >> 2] | 0;
   if (($24 | 0) == (HEAP32[$21 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 127]($21) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$24 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 15;
    break;
   } else if ($99) {
    $100 = $21;
    break;
   } else {
    $82 = $21;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($99) {
    $82 = 0;
    break;
   } else $100 = 0;
  }
  $36 = HEAP32[$1 >> 2] | 0;
  $38 = HEAP32[$36 + 12 >> 2] | 0;
  if (($38 | 0) == (HEAP32[$36 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($36) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$38 >> 0] | 0) | 0;
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $82 = $100;
   break;
  }
  if (!(HEAP16[(HEAP32[$5 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $82 = $100;
   break;
  }
  $56 = HEAP32[$1 >> 2] | 0;
  $57 = $56 + 12 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  if (($58 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] & 127]($56) | 0; else {
   HEAP32[$57 >> 2] = $58 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$58 >> 0] | 0) | 0;
  }
 }
 $67 = HEAP32[$1 >> 2] | 0;
 do if (!$67) $101 = 1; else {
  $70 = HEAP32[$67 + 12 >> 2] | 0;
  if (($70 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($67) | 0; else $$0$i$i$i$i7 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$70 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i7, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $101 = 1;
   break;
  } else {
   $101 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$82) label = 39; else {
  $85 = HEAP32[$82 + 12 >> 2] | 0;
  if (($85 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] & 127]($82) | 0; else $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$85 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i13, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 39;
   break;
  } else if ($101) break; else {
   label = 41;
   break;
  }
 } while (0);
 if ((label | 0) == 39) if ($101) label = 41;
 if ((label | 0) == 41) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $100 = 0, $101 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $68 = 0, $71 = 0, $8 = 0, $83 = 0, $86 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 do if (!$5) $100 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$8 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $100 = 1;
   break;
  } else {
   $100 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$23 >> 0] | 0) | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 14;
   break;
  } else if ($100) {
   $83 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($100) label = 16; else {
  $83 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 6; else if ((label | 0) == 17) {
  $37 = HEAP32[$1 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$39 >> 0] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 63]($4, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 4;
   break;
  }
  $57 = HEAP32[$1 >> 2] | 0;
  $58 = $57 + 12 | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  if (($59 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 40 >> 2] & 127]($57) | 0; else {
   HEAP32[$58 >> 2] = $59 + 1;
   __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$59 >> 0] | 0) | 0;
  }
  $68 = HEAP32[$1 >> 2] | 0;
  do if (!$68) $101 = 1; else {
   $71 = HEAP32[$68 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$68 + 16 >> 2] | 0)) $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$68 >> 2] | 0) + 36 >> 2] & 127]($68) | 0; else $$0$i$i$i$i8 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$71 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i8, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $101 = 1;
    break;
   } else {
    $101 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$83) label = 38; else {
   $86 = HEAP32[$83 + 12 >> 2] | 0;
   if (($86 | 0) == (HEAP32[$83 + 16 >> 2] | 0)) $$0$i$i2$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$83 >> 2] | 0) + 36 >> 2] & 127]($83) | 0; else $$0$i$i2$i$i14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$86 >> 0] | 0) | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i2$i$i14, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 38;
    break;
   } else if ($101) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$101) break;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 } while (0);
 return;
}

function __ZNK3zim6Reader4readIyEET_NS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $11 = 0, $111 = 0, $117 = 0, $12 = 0, $123 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $76 = 0, $78 = 0, $8 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy1 = sp + 72 | 0;
 $$byval_copy = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 88 | 0;
 $10 = sp + 8 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $0;
 $12 = HEAP32[$2 >> 2] | 0;
 $13 = $1;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $3;
 HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$19 + 4 >> 2] = $18;
 $25 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12) | 0;
 $27 = $5;
 HEAP32[$27 >> 2] = $25;
 HEAP32[$27 + 4 >> 2] = tempRet0;
 $31 = $5;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $37 = $4;
 HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$37 + 4 >> 2] = $36;
 $41 = $3;
 $46 = HEAP32[$41 + 4 >> 2] | 0;
 $47 = $4;
 $52 = HEAP32[$47 + 4 >> 2] | 0;
 if (!($46 >>> 0 < $52 >>> 0 | (($46 | 0) == ($52 | 0) ? (HEAP32[$41 >> 2] | 0) >>> 0 < (HEAP32[$47 >> 2] | 0) >>> 0 : 0))) {
  $58 = $3;
  $64 = $4;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49924, HEAP32[$58 >> 2] | 0, HEAP32[$58 + 4 >> 2] | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0, 49933, 43);
 }
 $70 = $1;
 $76 = _i64Add(HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0, 8, 0) | 0;
 $78 = $6;
 HEAP32[$78 >> 2] = $76;
 HEAP32[$78 + 4 >> 2] = tempRet0;
 $84 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12) | 0;
 $86 = $8;
 HEAP32[$86 >> 2] = $84;
 HEAP32[$86 + 4 >> 2] = tempRet0;
 $90 = $8;
 $95 = HEAP32[$90 + 4 >> 2] | 0;
 $96 = $7;
 HEAP32[$96 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$96 + 4 >> 2] = $95;
 $100 = $6;
 $105 = HEAP32[$100 + 4 >> 2] | 0;
 $106 = $7;
 $111 = HEAP32[$106 + 4 >> 2] | 0;
 if ($105 >>> 0 < $111 >>> 0 | (($105 | 0) == ($111 | 0) ? (HEAP32[$100 >> 2] | 0) >>> 0 <= (HEAP32[$106 >> 2] | 0) >>> 0 : 0)) {
  $129 = HEAP32[$12 >> 2] | 0;
  $130 = $129 + 12 | 0;
  $131 = HEAP32[$130 >> 2] | 0;
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  __ZN3zim7zsize_tC2Ey($11, 8, 0);
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  FUNCTION_TABLE_viiii[$131 & 31]($12, $9, $$byval_copy, $$byval_copy1);
  $132 = __ZN3zim16fromLittleEndianIyEET_PKc($9) | 0;
  $133 = tempRet0;
  tempRet0 = $133;
  STACKTOP = sp;
  return $132 | 0;
 }
 $117 = $6;
 $123 = $7;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51006, 51100, 49924, HEAP32[$117 >> 2] | 0, HEAP32[$117 + 4 >> 2] | 0, HEAP32[$123 >> 2] | 0, HEAP32[$123 + 4 >> 2] | 0, 49933, 44);
 $129 = HEAP32[$12 >> 2] | 0;
 $130 = $129 + 12 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 __ZN3zim7zsize_tC2Ey($11, 8, 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 FUNCTION_TABLE_viiii[$131 & 31]($12, $9, $$byval_copy, $$byval_copy1);
 $132 = __ZN3zim16fromLittleEndianIyEET_PKc($9) | 0;
 $133 = tempRet0;
 tempRet0 = $133;
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i15 = 0, $$pre$phiZ2D = 0, $$sroa$028$138 = 0, $12 = 0, $17 = 0, $22 = 0, $23 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $69 = 0, $7 = 0, $71 = 0, $83 = 0, $9 = 0, $99 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP8[$0 >> 0] = 0;
 $7 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 $9 = HEAP32[$7 + 16 >> 2] | 0;
 if (!$9) {
  $12 = HEAP32[$7 + 72 >> 2] | 0;
  if ($12 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($12) | 0;
  do if (!$2) {
   $17 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
   if (HEAP32[$17 + 4 >> 2] & 4096 | 0) {
    __ZNKSt3__28ios_base6getlocEv($3, $17);
    __THREW__ = 0;
    $22 = invoke_iii(32, $3 | 0, 62368) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    if ($23 & 1) {
     $69 = ___cxa_find_matching_catch_2() | 0;
     __ZNSt3__26localeD2Ev($3);
     ___resumeException($69 | 0);
    }
    __ZNSt3__26localeD2Ev($3);
    $30 = HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
    $31 = $22 + 8 | 0;
    $32 = $30;
    $33 = ($30 | 0) == 0;
    $34 = $32 + 12 | 0;
    $35 = $32 + 16 | 0;
    $36 = $30;
    while (1) {
     if ($33) {
      $$pre$phiZ2D = 0;
      $$sroa$028$138 = 0;
      break;
     }
     $37 = HEAP32[$34 >> 2] | 0;
     if (($37 | 0) == (HEAP32[$35 >> 2] | 0)) $$0$i$i$i$i15 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 127]($32) | 0; else $$0$i$i$i$i15 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$37 >> 0] | 0) | 0;
     $47 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i15, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
     $spec$select = $47 ? 0 : $30;
     if ($47) {
      $$pre$phiZ2D = 0;
      $$sroa$028$138 = 0;
      break;
     }
     $48 = $spec$select;
     $49 = $48 + 12 | 0;
     $50 = HEAP32[$49 >> 2] | 0;
     $51 = $48 + 16 | 0;
     if (($50 | 0) == (HEAP32[$51 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$spec$select >> 2] | 0) + 36 >> 2] & 127]($48) | 0; else $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$50 >> 0] | 0) | 0;
     if (($$0$i$i & 255) << 24 >> 24 <= -1) {
      label = 23;
      break;
     }
     if (!(HEAP16[(HEAP32[$31 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
      label = 23;
      break;
     }
     $71 = HEAP32[$49 >> 2] | 0;
     if (($71 | 0) == (HEAP32[$51 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$spec$select >> 2] | 0) + 40 >> 2] & 127]($48) | 0; else {
      HEAP32[$49 >> 2] = $71 + 1;
      __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$71 >> 0] | 0) | 0;
     }
    }
    if ((label | 0) == 23) {
     $$pre$phiZ2D = $spec$select;
     $$sroa$028$138 = $30;
    }
    if ($$sroa$028$138 | 0) {
     $83 = HEAP32[$$pre$phiZ2D + 12 >> 2] | 0;
     if (($83 | 0) == (HEAP32[$$pre$phiZ2D + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$sroa$028$138 >> 2] | 0) + 36 >> 2] & 127]($$pre$phiZ2D) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$83 >> 0] | 0) | 0;
     if (!(__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0)) break;
    }
    $99 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __ZNSt3__28ios_base5clearEj($99, HEAP32[$99 + 16 >> 2] | 6);
   }
  } while (0);
  HEAP8[$0 >> 0] = (HEAP32[$1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) + 16 >> 2] | 0) == 0 & 1;
 } else __ZNSt3__28ios_base5clearEj($7, $9 | 4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i14 = 0, $100 = 0, $20 = 0, $23 = 0, $37 = 0, $39 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $67 = 0, $70 = 0, $8 = 0, $82 = 0, $85 = 0, $99 = 0, label = 0;
 $5 = HEAP32[$1 >> 2] | 0;
 do if (!$5) $99 = 1; else {
  $8 = HEAP32[$5 + 12 >> 2] | 0;
  if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $99 = 1;
   break;
  } else {
   $99 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $20 = HEAP32[$2 >> 2] | 0;
 do if (!$20) label = 14; else {
  $23 = HEAP32[$20 + 12 >> 2] | 0;
  if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 14;
   break;
  } else if ($99) {
   $82 = $20;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($99) label = 16; else {
  $82 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 6; else if ((label | 0) == 17) {
  $37 = HEAP32[$1 >> 2] | 0;
  $39 = HEAP32[$37 + 12 >> 2] | 0;
  if (($39 | 0) == (HEAP32[$37 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$37 >> 2] | 0) + 36 >> 2] & 127]($37) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$39 >> 2] | 0) | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 63]($4, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 4;
   break;
  }
  $56 = HEAP32[$1 >> 2] | 0;
  $57 = $56 + 12 | 0;
  $58 = HEAP32[$57 >> 2] | 0;
  if (($58 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 40 >> 2] & 127]($56) | 0; else {
   HEAP32[$57 >> 2] = $58 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$58 >> 2] | 0) | 0;
  }
  $67 = HEAP32[$1 >> 2] | 0;
  do if (!$67) $100 = 1; else {
   $70 = HEAP32[$67 + 12 >> 2] | 0;
   if (($70 | 0) == (HEAP32[$67 + 16 >> 2] | 0)) $$0$i$i$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 127]($67) | 0; else $$0$i$i$i$i8 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$70 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i8, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $100 = 1;
    break;
   } else {
    $100 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$82) label = 38; else {
   $85 = HEAP32[$82 + 12 >> 2] | 0;
   if (($85 | 0) == (HEAP32[$82 + 16 >> 2] | 0)) $$0$i$i2$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$82 >> 2] | 0) + 36 >> 2] & 127]($82) | 0; else $$0$i$i2$i$i14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$85 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i14, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 38;
    break;
   } else if ($100) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$100) break;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 } while (0);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$in = 0, $$01742 = 0, $$018$off040 = 0, $$1435056 = 0, $$144 = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $47 = 0, $5 = 0, $6 = 0, $eh$lpad$body$indexZ2D = 0, $spec$select$i = 0, label = 0;
 if ($1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $3 = $0 + 8 | 0;
 $4 = $3 + 3 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $12 = HEAP32[$0 + 4 >> 2] | 0;
  $18 = (HEAP32[$3 >> 2] & 2147483647) + -1 | 0;
 } else {
  $12 = $5 & 255;
  $18 = 1;
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1;
 $14 = $$sroa$speculated >>> 0 < 2;
 $spec$select$i = $14 ? 1 : ($$sroa$speculated + 4 & -4) + -1 | 0;
 L8 : do if (($spec$select$i | 0) != ($18 | 0)) {
  do if ($14) {
   $42 = HEAP32[$0 >> 2] | 0;
   if ($6) {
    $$01742 = $42;
    $$018$off040 = 0;
    $$144 = $0;
    label = 26;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $42, ($5 & 255) + 1 | 0) | 0;
    __ZdlPv($42);
    label = 29;
   }
  } else {
   $20 = $spec$select$i + 1 | 0;
   $21 = $20 >>> 0 > 1073741823;
   L14 : do if ($spec$select$i >>> 0 > $18 >>> 0) {
    if (!$21) {
     $$016$in = __Znwm($20 << 2) | 0;
     break;
    }
    $22 = ___cxa_allocate_exception(8) | 0;
    __THREW__ = 0;
    invoke_vii(49, $22 | 0, 55296);
    $23 = __THREW__;
    __THREW__ = 0;
    if ($23 & 1) {
     $25 = ___cxa_find_matching_catch_2() | 0;
     ___cxa_free_exception($22 | 0);
     ___resumeException($25 | 0);
    } else {
     HEAP32[$22 >> 2] = 48176;
     ___cxa_throw($22 | 0, 42808, 176);
    }
   } else {
    do if ($21) {
     $29 = ___cxa_allocate_exception(8) | 0;
     __THREW__ = 0;
     invoke_vii(49, $29 | 0, 55296);
     $30 = __THREW__;
     __THREW__ = 0;
     if ($30 & 1) {
      $33 = ___cxa_find_matching_catch_3(0) | 0;
      ___cxa_free_exception($29 | 0);
      $eh$lpad$body$indexZ2D = $33;
      break;
     } else {
      HEAP32[$29 >> 2] = 48176;
      __THREW__ = 0;
      invoke_viii(11, $29 | 0, 42808, 176);
      __THREW__ = 0;
      label = 19;
      break;
     }
    } else {
     __THREW__ = 0;
     $36 = invoke_ii(79, $20 << 2 | 0) | 0;
     $37 = __THREW__;
     __THREW__ = 0;
     if ($37 & 1) label = 19; else {
      $$016$in = $36;
      break L14;
     }
    } while (0);
    if ((label | 0) == 19) {
     $39 = ___cxa_find_matching_catch_3(0) | 0;
     $eh$lpad$body$indexZ2D = $39;
    }
    ___cxa_begin_catch($eh$lpad$body$indexZ2D | 0) | 0;
    ___cxa_end_catch();
    break L8;
   } while (0);
   if ($6) {
    $$01742 = HEAP32[$0 >> 2] | 0;
    $$018$off040 = 1;
    $$144 = $$016$in;
    label = 26;
    break;
   } else {
    __ZNSt3__211char_traitsIwE4copyEPwPKwm($$016$in, $0, ($5 & 255) + 1 | 0) | 0;
    $$1435056 = $$016$in;
    $$pre$phi59Z2D = $20;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 28;
    break;
   }
  } while (0);
  if ((label | 0) == 26) {
   $47 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($$144, $$01742, (HEAP32[$47 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv($$01742);
   if ($$018$off040) {
    $$1435056 = $$144;
    $$pre$phi59Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $47;
    label = 28;
   } else label = 29;
  }
  if ((label | 0) == 28) {
   HEAP32[$3 >> 2] = $$pre$phi59Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $12;
   HEAP32[$0 >> 2] = $$1435056;
   break;
  } else if ((label | 0) == 29) {
   HEAP8[$4 >> 0] = $12;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$4 = 0, $$pre80 = 0, $100 = 0, $109 = 0, $114 = 0, $117 = 0, $129 = 0, $134 = 0, $137 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $58 = 0, $63 = 0, $69 = 0, $71 = 0, $77 = 0, $87 = 0, $91 = 0, label = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $$pre80 = $4;
 if (!($7 & 2)) label = 4; else if (($$pre80 - $3 | 0) < 3) $$4 = 1; else {
  HEAP32[$5 >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = -17;
  $14 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $14 + 1;
  HEAP8[$14 >> 0] = -69;
  $16 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $16 + 1;
  HEAP8[$16 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $18 = $1;
  $19 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if ($19 >>> 0 >= $1 >>> 0) {
    $$4 = 0;
    break L4;
   }
   $21 = HEAP16[$19 >> 1] | 0;
   $22 = $21 & 65535;
   if ($22 >>> 0 > $6 >>> 0) {
    $$4 = 2;
    break L4;
   }
   do if (($21 & 65535) < 128) {
    $25 = HEAP32[$5 >> 2] | 0;
    if (($$pre80 - $25 | 0) < 1) {
     $$4 = 1;
     break L4;
    }
    HEAP32[$5 >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $21;
   } else {
    if (($21 & 65535) < 2048) {
     $32 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $32 | 0) < 2) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $32 + 1;
     HEAP8[$32 >> 0] = $22 >>> 6 | 192;
     $43 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($21 & 65535) < 55296) {
     $46 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $46 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $22 >>> 12 | 224;
     $58 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $22 >>> 6 & 63 | 128;
     $63 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $63 + 1;
     HEAP8[$63 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($21 & 65535) >= 56320) {
     if (($21 & 65535) < 57344) {
      $$4 = 2;
      break L4;
     }
     $117 = HEAP32[$5 >> 2] | 0;
     if (($$pre80 - $117 | 0) < 3) {
      $$4 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $117 + 1;
     HEAP8[$117 >> 0] = $22 >>> 12 | 224;
     $129 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $129 + 1;
     HEAP8[$129 >> 0] = $22 >>> 6 & 63 | 128;
     $134 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $134 + 1;
     HEAP8[$134 >> 0] = $22 & 63 | 128;
     break;
    }
    if (($18 - $19 | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $69 = $19 + 2 | 0;
    $71 = HEAPU16[$69 >> 1] | 0;
    if (($71 & 64512 | 0) != 56320) {
     $$4 = 2;
     break L4;
    }
    if (($$pre80 - (HEAP32[$5 >> 2] | 0) | 0) < 4) {
     $$4 = 1;
     break L4;
    }
    $77 = $22 & 960;
    if ((($77 << 10) + 65536 | $22 << 10 & 64512 | $71 & 1023) >>> 0 > $6 >>> 0) {
     $$4 = 2;
     break L4;
    }
    HEAP32[$2 >> 2] = $69;
    $87 = ($77 >>> 6) + 1 | 0;
    $91 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $91 + 1;
    HEAP8[$91 >> 0] = $87 >>> 2 | 240;
    $100 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $100 + 1;
    HEAP8[$100 >> 0] = $22 >>> 2 & 15 | $87 << 4 & 48 | 128;
    $109 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $109 + 1;
    HEAP8[$109 >> 0] = $22 << 4 & 48 | $71 >>> 6 & 15 | 128;
    $114 = HEAP32[$5 >> 2] | 0;
    HEAP32[$5 >> 2] = $114 + 1;
    HEAP8[$114 >> 0] = $71 & 63 | 128;
   } while (0);
   $137 = (HEAP32[$2 >> 2] | 0) + 2 | 0;
   HEAP32[$2 >> 2] = $137;
   $19 = $137;
  }
 } while (0);
 return $$4 | 0;
}

function __ZNK3zim12BufferReader4readEPcNS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy1 = 0, $$byval_copy3 = 0, $10 = 0, $100 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $5 = 0, $50 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $67 = 0, $7 = 0, $73 = 0, $79 = 0, $8 = 0, $85 = 0, $87 = 0, $9 = 0, $94 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy3 = sp + 96 | 0;
 $$byval_copy1 = sp + 88 | 0;
 $4 = sp + 120 | 0;
 $5 = sp + 116 | 0;
 $6 = sp + 112 | 0;
 $7 = sp + 108 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 80 | 0;
 $10 = sp + 72 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 56 | 0;
 $13 = sp + 48 | 0;
 $14 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 8 | 0;
 $19 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 $20 = HEAP32[$7 >> 2] | 0;
 $21 = $2;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $27 = $9;
 HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$27 + 4 >> 2] = $26;
 HEAP32[$6 >> 2] = $20 + 4;
 $34 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0;
 $36 = $11;
 HEAP32[$36 >> 2] = $34;
 HEAP32[$36 + 4 >> 2] = tempRet0;
 $40 = $11;
 $45 = HEAP32[$40 + 4 >> 2] | 0;
 $46 = $10;
 HEAP32[$46 >> 2] = HEAP32[$40 >> 2];
 HEAP32[$46 + 4 >> 2] = $45;
 $50 = $9;
 $55 = HEAP32[$50 + 4 >> 2] | 0;
 $56 = $10;
 $61 = HEAP32[$56 + 4 >> 2] | 0;
 if (!($55 >>> 0 < $61 >>> 0 | (($55 | 0) == ($61 | 0) ? (HEAP32[$50 >> 2] | 0) >>> 0 < (HEAP32[$56 >> 2] | 0) >>> 0 : 0))) {
  $67 = $9;
  $73 = $10;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49464, HEAP32[$67 >> 2] | 0, HEAP32[$67 + 4 >> 2] | 0, HEAP32[$73 >> 2] | 0, HEAP32[$73 + 4 >> 2] | 0, 48618, 331);
 };
 HEAP32[$13 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 $79 = $3;
 __ZN3zim8offset_tC2Ey($14, HEAP32[$79 >> 2] | 0, HEAP32[$79 + 4 >> 2] | 0);
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
 $85 = __ZplIN3zim8offset_tEET_S2_RKS2_($$byval_copy3, $14) | 0;
 $87 = $12;
 HEAP32[$87 >> 2] = $85;
 HEAP32[$87 + 4 >> 2] = tempRet0;
 HEAP32[$5 >> 2] = $20 + 4;
 $94 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$5 >> 2] >> 2] | 0) | 0;
 $96 = $16;
 HEAP32[$96 >> 2] = $94;
 HEAP32[$96 + 4 >> 2] = tempRet0;
 $100 = $16;
 __ZN3zim8offset_tC2Ey($15, HEAP32[$100 >> 2] | 0, HEAP32[$100 + 4 >> 2] | 0);
 if (!(__ZleIN3zim8offset_tEEbRKT_S4_($12, $15) | 0)) {
  HEAP32[$17 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$17 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
  HEAP32[$18 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$18 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$17 + 4 >> 2];
  HEAP32[$$byval_copy3 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
  __Z15_on_assert_failIN3zim8offset_tES1_EvPKcS3_S3_T_T0_S3_i(49481, 51100, 49505, $$byval_copy1, $$byval_copy3, 48618, 332);
 }
 if (!(__ZNK12REAL_TYPEDEFIyEcvbEv($3) | 0)) {
  STACKTOP = sp;
  return;
 }
 $108 = HEAP32[$8 >> 2] | 0;
 HEAP32[$4 >> 2] = $20 + 4;
 $111 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 $114 = HEAP32[(HEAP32[$111 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$19 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy3 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$$byval_copy3 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 $115 = FUNCTION_TABLE_iii[$114 & 63]($111, $$byval_copy3) | 0;
 _memcpy($108 | 0, $115 | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i2$i$i = 0, $$0$i$i2$i$i13 = 0, $20 = 0, $23 = 0, $35 = 0, $37 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $62 = 0, $65 = 0, $77 = 0, $8 = 0, $80 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0;
 L1 : while (1) {
  $5 = HEAP32[$1 >> 2] | 0;
  do if (!$5) $94 = 1; else {
   $8 = HEAP32[$5 + 12 >> 2] | 0;
   if (($8 | 0) == (HEAP32[$5 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127]($5) | 0; else $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$8 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$1 >> 2] = 0;
    $94 = 1;
    break;
   } else {
    $94 = (HEAP32[$1 >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $20 = HEAP32[$2 >> 2] | 0;
  do if (!$20) label = 15; else {
   $23 = HEAP32[$20 + 12 >> 2] | 0;
   if (($23 | 0) == (HEAP32[$20 + 16 >> 2] | 0)) $$0$i$i2$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 127]($20) | 0; else $$0$i$i2$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$23 >> 2] | 0) | 0;
   if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
    HEAP32[$2 >> 2] = 0;
    label = 15;
    break;
   } else if ($94) {
    $95 = $20;
    break;
   } else {
    $77 = $20;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($94) {
    $77 = 0;
    break;
   } else $95 = 0;
  }
  $35 = HEAP32[$1 >> 2] | 0;
  $37 = HEAP32[$35 + 12 >> 2] | 0;
  if (($37 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 127]($35) | 0; else $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$37 >> 2] | 0) | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4, 8192, $$0$i$i) | 0)) {
   $77 = $95;
   break;
  }
  $51 = HEAP32[$1 >> 2] | 0;
  $52 = $51 + 12 | 0;
  $53 = HEAP32[$52 >> 2] | 0;
  if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 40 >> 2] & 127]($51) | 0; else {
   HEAP32[$52 >> 2] = $53 + 4;
   __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$53 >> 2] | 0) | 0;
  }
 }
 $62 = HEAP32[$1 >> 2] | 0;
 do if (!$62) $96 = 1; else {
  $65 = HEAP32[$62 + 12 >> 2] | 0;
  if (($65 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 36 >> 2] & 127]($62) | 0; else $$0$i$i$i$i7 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$65 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i7, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$1 >> 2] = 0;
   $96 = 1;
   break;
  } else {
   $96 = (HEAP32[$1 >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$77) label = 38; else {
  $80 = HEAP32[$77 + 12 >> 2] | 0;
  if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) $$0$i$i2$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 127]($77) | 0; else $$0$i$i2$i$i13 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$80 >> 2] | 0) | 0;
  if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i2$i$i13, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) {
   HEAP32[$2 >> 2] = 0;
   label = 38;
   break;
  } else if ($96) break; else {
   label = 40;
   break;
  }
 } while (0);
 if ((label | 0) == 38) if ($96) label = 40;
 if ((label | 0) == 40) HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2;
 return;
}

function __ZNK3zim6Reader4readIjEET_NS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $11 = 0, $111 = 0, $117 = 0, $12 = 0, $123 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $18 = 0, $19 = 0, $2 = 0, $25 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $76 = 0, $78 = 0, $8 = 0, $84 = 0, $86 = 0, $9 = 0, $90 = 0, $95 = 0, $96 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy1 = sp + 72 | 0;
 $$byval_copy = sp + 64 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 8 | 0;
 $11 = sp;
 HEAP32[$2 >> 2] = $0;
 $12 = HEAP32[$2 >> 2] | 0;
 $13 = $1;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $3;
 HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$19 + 4 >> 2] = $18;
 $25 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12) | 0;
 $27 = $5;
 HEAP32[$27 >> 2] = $25;
 HEAP32[$27 + 4 >> 2] = tempRet0;
 $31 = $5;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $37 = $4;
 HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$37 + 4 >> 2] = $36;
 $41 = $3;
 $46 = HEAP32[$41 + 4 >> 2] | 0;
 $47 = $4;
 $52 = HEAP32[$47 + 4 >> 2] | 0;
 if (!($46 >>> 0 < $52 >>> 0 | (($46 | 0) == ($52 | 0) ? (HEAP32[$41 >> 2] | 0) >>> 0 < (HEAP32[$47 >> 2] | 0) >>> 0 : 0))) {
  $58 = $3;
  $64 = $4;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49924, HEAP32[$58 >> 2] | 0, HEAP32[$58 + 4 >> 2] | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0, 49933, 43);
 }
 $70 = $1;
 $76 = _i64Add(HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0, 4, 0) | 0;
 $78 = $6;
 HEAP32[$78 >> 2] = $76;
 HEAP32[$78 + 4 >> 2] = tempRet0;
 $84 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$12 >> 2] >> 2] & 127]($12) | 0;
 $86 = $8;
 HEAP32[$86 >> 2] = $84;
 HEAP32[$86 + 4 >> 2] = tempRet0;
 $90 = $8;
 $95 = HEAP32[$90 + 4 >> 2] | 0;
 $96 = $7;
 HEAP32[$96 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$96 + 4 >> 2] = $95;
 $100 = $6;
 $105 = HEAP32[$100 + 4 >> 2] | 0;
 $106 = $7;
 $111 = HEAP32[$106 + 4 >> 2] | 0;
 if ($105 >>> 0 < $111 >>> 0 | (($105 | 0) == ($111 | 0) ? (HEAP32[$100 >> 2] | 0) >>> 0 <= (HEAP32[$106 >> 2] | 0) >>> 0 : 0)) {
  $129 = HEAP32[$12 >> 2] | 0;
  $130 = $129 + 12 | 0;
  $131 = HEAP32[$130 >> 2] | 0;
  HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  __ZN3zim7zsize_tC2Ey($11, 4, 0);
  HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$11 >> 2];
  HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  FUNCTION_TABLE_viiii[$131 & 31]($12, $9, $$byval_copy, $$byval_copy1);
  $132 = __ZN3zim16fromLittleEndianIjEET_PKc($9) | 0;
  STACKTOP = sp;
  return $132 | 0;
 }
 $117 = $6;
 $123 = $7;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51006, 51100, 49924, HEAP32[$117 >> 2] | 0, HEAP32[$117 + 4 >> 2] | 0, HEAP32[$123 >> 2] | 0, HEAP32[$123 + 4 >> 2] | 0, 49933, 44);
 $129 = HEAP32[$12 >> 2] | 0;
 $130 = $129 + 12 | 0;
 $131 = HEAP32[$130 >> 2] | 0;
 HEAP32[$10 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 __ZN3zim7zsize_tC2Ey($11, 4, 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$10 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$10 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 FUNCTION_TABLE_viiii[$131 & 31]($12, $9, $$byval_copy, $$byval_copy1);
 $132 = __ZN3zim16fromLittleEndianIjEET_PKc($9) | 0;
 STACKTOP = sp;
 return $132 | 0;
}

function __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$9 = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink107 = 0, $10 = 0, $104 = 0, $11 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $39 = 0, $45 = 0, $52 = 0, $54 = 0, $61 = 0, $71 = 0, $78 = 0, $80 = 0, $82 = 0, $88 = 0, $91 = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 if (!($7 & 4)) $$pre$phiZ2D = $1; else {
  $10 = HEAP32[$2 >> 2] | 0;
  $11 = $1;
  if (($11 - $10 | 0) > 2) if ((HEAP8[$10 >> 0] | 0) == -17) if ((HEAP8[$10 + 1 >> 0] | 0) == -69) if ((HEAP8[$10 + 2 >> 0] | 0) == -65) {
   HEAP32[$2 >> 2] = $10 + 3;
   $$pre$phiZ2D = $11;
  } else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11; else $$pre$phiZ2D = $11;
 }
 L9 : while (1) {
  $24 = HEAP32[$2 >> 2] | 0;
  if ($24 >>> 0 >= $1 >>> 0) {
   $$9 = 0;
   break;
  }
  $26 = HEAP32[$5 >> 2] | 0;
  if ($26 >>> 0 >= $4 >>> 0) {
   $$9 = 1;
   break;
  }
  $28 = HEAP8[$24 >> 0] | 0;
  $29 = $28 & 255;
  do if ($28 << 24 >> 24 > -1) if ($29 >>> 0 > $6 >>> 0) {
   $$9 = 2;
   break L9;
  } else {
   $$sink = $29;
   $$sink107 = 1;
  } else {
   if (($28 & 255) < 194) {
    $$9 = 2;
    break L9;
   }
   if (($28 & 255) < 224) {
    if (($$pre$phiZ2D - $24 | 0) < 2) {
     $$9 = 1;
     break L9;
    }
    $39 = HEAPU8[$24 + 1 >> 0] | 0;
    if (($39 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $45 = $39 & 63 | $29 << 6 & 1984;
    if ($45 >>> 0 > $6 >>> 0) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $45;
     $$sink107 = 2;
     break;
    }
   }
   if (($28 & 255) < 240) {
    if (($$pre$phiZ2D - $24 | 0) < 3) {
     $$9 = 1;
     break L9;
    }
    $52 = HEAP8[$24 + 1 >> 0] | 0;
    $54 = HEAP8[$24 + 2 >> 0] | 0;
    switch ($28 << 24 >> 24) {
    case -32:
     {
      if (($52 & -32) << 24 >> 24 != -96) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    case -19:
     {
      if (($52 & -32) << 24 >> 24 != -128) {
       $$9 = 2;
       break L9;
      }
      break;
     }
    default:
     if (($52 & -64) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
    }
    $61 = $54 & 255;
    if (($61 & 192 | 0) != 128) {
     $$9 = 2;
     break L9;
    }
    $71 = ($52 & 63) << 6 | $29 << 12 & 61440 | $61 & 63;
    if ($71 >>> 0 > $6 >>> 0) {
     $$9 = 2;
     break L9;
    } else {
     $$sink = $71;
     $$sink107 = 3;
     break;
    }
   }
   if (($28 & 255) >= 245) {
    $$9 = 2;
    break L9;
   }
   if (($$pre$phiZ2D - $24 | 0) < 4) {
    $$9 = 1;
    break L9;
   }
   $78 = HEAP8[$24 + 1 >> 0] | 0;
   $80 = HEAP8[$24 + 2 >> 0] | 0;
   $82 = HEAP8[$24 + 3 >> 0] | 0;
   switch ($28 << 24 >> 24) {
   case -16:
    {
     if (($78 + 112 & 255) >= 48) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   case -12:
    {
     if (($78 & -16) << 24 >> 24 != -128) {
      $$9 = 2;
      break L9;
     }
     break;
    }
   default:
    if (($78 & -64) << 24 >> 24 != -128) {
     $$9 = 2;
     break L9;
    }
   }
   $88 = $80 & 255;
   if (($88 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $91 = $82 & 255;
   if (($91 & 192 | 0) != 128) {
    $$9 = 2;
    break L9;
   }
   $104 = ($78 & 63) << 12 | $29 << 18 & 1835008 | $88 << 6 & 4032 | $91 & 63;
   if ($104 >>> 0 > $6 >>> 0) {
    $$9 = 2;
    break L9;
   } else {
    $$sink = $104;
    $$sink107 = 4;
   }
  } while (0);
  HEAP32[$26 >> 2] = $$sink;
  HEAP32[$2 >> 2] = $24 + $$sink107;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 }
 return $$9 | 0;
}

function _lzma_block_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $100 = 0, $105 = 0, $108 = 0, $116 = 0, $118 = 0, $121 = 0, $136 = 0, $148 = 0, $18 = 0, $25 = 0, $3 = 0, $30 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $62 = 0, $64 = 0, $7 = 0, $75 = 0, $8 = 0, $81 = 0, $87 = 0, $96 = 0, $99 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (45 != (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0)) _lzma_next_end(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0);
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] = 45;
 $18 = _lzma_block_unpadded_size(HEAP32[$6 >> 2] | 0) | 0;
 do if (!(($18 | 0) == 0 & (tempRet0 | 0) == 0)) {
  $25 = (HEAP32[$6 >> 2] | 0) + 24 | 0;
  $30 = HEAP32[$25 + 4 >> 2] | 0;
  if (!($30 >>> 0 < 2147483647 | ($30 | 0) == 2147483647 & (HEAP32[$25 >> 2] | 0) >>> 0 <= 4294967295)) {
   $38 = (HEAP32[$6 >> 2] | 0) + 24 | 0;
   if (!((HEAP32[$38 >> 2] | 0) == -1 ? (HEAP32[$38 + 4 >> 2] | 0) == -1 : 0)) break;
  }
  HEAP32[$7 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
  do if (!(HEAP32[$7 >> 2] | 0)) {
   HEAP32[$7 >> 2] = _lzma_alloc(208, HEAP32[$5 >> 2] | 0) | 0;
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$7 >> 2];
    HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] = 3;
    HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = 65;
    $62 = (HEAP32[$7 >> 2] | 0) + 8 | 0;
    dest = $8;
    stop = dest + 48 | 0;
    do {
     HEAP32[dest >> 2] = 0;
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $64 = $8 + 8 | 0;
    HEAP32[$64 >> 2] = -1;
    HEAP32[$64 + 4 >> 2] = -1;
    HEAP32[$8 + 16 >> 2] = 0;
    dest = $62;
    src = $8;
    stop = dest + 48 | 0;
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2];
     dest = dest + 4 | 0;
     src = src + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    break;
   }
   HEAP32[$3 >> 2] = 5;
   $148 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $148 | 0;
  } while (0);
  HEAP32[HEAP32[$7 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] = HEAP32[$6 >> 2];
  $75 = (HEAP32[$7 >> 2] | 0) + 64 | 0;
  HEAP32[$75 >> 2] = 0;
  HEAP32[$75 + 4 >> 2] = 0;
  $81 = (HEAP32[$7 >> 2] | 0) + 72 | 0;
  HEAP32[$81 >> 2] = 0;
  HEAP32[$81 + 4 >> 2] = 0;
  $87 = (HEAP32[$6 >> 2] | 0) + 16 | 0;
  $96 = HEAP32[$6 >> 2] | 0;
  if ((HEAP32[$87 >> 2] | 0) == -1 ? (HEAP32[$87 + 4 >> 2] | 0) == -1 : 0) {
   $99 = _i64Subtract(-4, 2147483647, HEAP32[$96 + 4 >> 2] | 0, 0) | 0;
   $100 = tempRet0;
   $105 = _i64Subtract($99 | 0, $100 | 0, _lzma_check_size(HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0) | 0, 0) | 0;
   $118 = $105;
   $121 = tempRet0;
  } else {
   $108 = $96 + 16 | 0;
   $118 = HEAP32[$108 >> 2] | 0;
   $121 = HEAP32[$108 + 4 >> 2] | 0;
  }
  $116 = (HEAP32[$7 >> 2] | 0) + 80 | 0;
  HEAP32[$116 >> 2] = $118;
  HEAP32[$116 + 4 >> 2] = $121;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 88 >> 2] = 0;
  _lzma_check_init((HEAP32[$7 >> 2] | 0) + 96 | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0);
  if ((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) >>> 0 >= 1) $136 = HEAPU8[(HEAP32[$6 >> 2] | 0) + 184 >> 0] | 0; else $136 = 0;
  HEAP8[(HEAP32[$7 >> 2] | 0) + 200 >> 0] = ($136 | 0) != 0 & 1;
  HEAP32[$3 >> 2] = _lzma_raw_decoder_init((HEAP32[$7 >> 2] | 0) + 8 | 0, HEAP32[$5 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] | 0) | 0;
  $148 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $148 | 0;
 } while (0);
 HEAP32[$3 >> 2] = 11;
 $148 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $148 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0 = 0, $$069 = 0, $$070 = 0, $$070$lcssa = 0, $$077 = 0, $$079 = 0, $$171 = 0, $$173 = 0, $$178 = 0, $$2 = 0, $$2$lcssa = 0, $$375$ph = 0, $$476 = 0, $$5$ph86 = 0, $14 = 0, $15 = 0, $18 = 0, $23 = 0, $24 = 0, $35 = 0, $36 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $51 = 0, $55 = 0, $56 = 0, $64 = 0, $66 = 0, $67 = 0, $74 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 $9 = sp + 8 | 0;
 $$070 = $2;
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3;
   break;
  }
  if (!(HEAP32[$$070 >> 2] | 0)) {
   $$070$lcssa = $$070;
   break;
  }
  $$070 = $$070 + 4 | 0;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $14 = $6;
 $15 = $0 + 8 | 0;
 $$077 = $2;
 $$079 = $5;
 $$171 = $$070$lcssa;
 L6 : while (1) {
  if (($$079 | 0) == ($6 | 0) | ($$077 | 0) == ($3 | 0)) {
   $74 = $$077;
   label = 36;
   break;
  }
  $18 = $1;
  $23 = HEAP32[$18 + 4 >> 2] | 0;
  $24 = $8;
  HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$24 + 4 >> 2] = $23;
  $35 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
  $36 = _wcsnrtombs($$079, $4, $$171 - $$077 >> 2, $14 - $$079 | 0, $1) | 0;
  if ($35 | 0) ___uselocale($35) | 0;
  switch ($36 | 0) {
  case -1:
   {
    label = 10;
    break L6;
    break;
   }
  case 0:
   {
    $$375$ph = 1;
    label = 33;
    break L6;
    break;
   }
  default:
   {}
  }
  $51 = (HEAP32[$7 >> 2] | 0) + $36 | 0;
  HEAP32[$7 >> 2] = $51;
  if (($51 | 0) == ($6 | 0)) {
   label = 34;
   break;
  }
  if (($$171 | 0) == ($3 | 0)) {
   $$5$ph86 = $3;
   $77 = $51;
   $78 = HEAP32[$4 >> 2] | 0;
  } else {
   $55 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
   $56 = _wcrtomb($9, 0, $1) | 0;
   if ($55 | 0) ___uselocale($55) | 0;
   if (($56 | 0) == -1) {
    $$173 = 2;
    label = 32;
    break;
   }
   if ($56 >>> 0 > ($14 - (HEAP32[$7 >> 2] | 0) | 0) >>> 0) {
    $$173 = 1;
    label = 32;
    break;
   }
   $$0 = $9;
   $$069 = $56;
   while (1) {
    if (!$$069) break;
    $66 = HEAP8[$$0 >> 0] | 0;
    $67 = HEAP32[$7 >> 2] | 0;
    HEAP32[$7 >> 2] = $67 + 1;
    HEAP8[$67 >> 0] = $66;
    $$0 = $$0 + 1 | 0;
    $$069 = $$069 + -1 | 0;
   }
   $64 = (HEAP32[$4 >> 2] | 0) + 4 | 0;
   HEAP32[$4 >> 2] = $64;
   $$2 = $64;
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3;
     break;
    }
    if (!(HEAP32[$$2 >> 2] | 0)) {
     $$2$lcssa = $$2;
     break;
    }
    $$2 = $$2 + 4 | 0;
   }
   $$5$ph86 = $$2$lcssa;
   $77 = HEAP32[$7 >> 2] | 0;
   $78 = $64;
  }
  $$077 = $78;
  $$079 = $77;
  $$171 = $$5$ph86;
 }
 if ((label | 0) == 10) {
  HEAP32[$7 >> 2] = $$079;
  $$178 = $$077;
  $43 = $$079;
  while (1) {
   if (($$178 | 0) == (HEAP32[$4 >> 2] | 0)) break;
   $40 = HEAP32[$$178 >> 2] | 0;
   $42 = ___uselocale(HEAP32[$15 >> 2] | 0) | 0;
   $44 = _wcrtomb($43, $40, $8) | 0;
   if ($42 | 0) ___uselocale($42) | 0;
   if (($44 | 0) == -1) break;
   $48 = (HEAP32[$7 >> 2] | 0) + $44 | 0;
   HEAP32[$7 >> 2] = $48;
   $$178 = $$178 + 4 | 0;
   $43 = $48;
  }
  HEAP32[$4 >> 2] = $$178;
  $$375$ph = 2;
  label = 33;
 } else if ((label | 0) == 32) {
  $$375$ph = $$173;
  label = 33;
 } else if ((label | 0) == 34) {
  $74 = HEAP32[$4 >> 2] | 0;
  label = 36;
 }
 if ((label | 0) == 33) $$476 = $$375$ph; else if ((label | 0) == 36) $$476 = ($74 | 0) != ($3 | 0) & 1;
 STACKTOP = sp;
 return $$476 | 0;
}

function __ZNK3zim10FileReader10get_bufferENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy5 = sp + 64 | 0;
 $$byval_copy4 = sp + 56 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 8 | 0;
 $16 = sp;
 HEAP32[$4 >> 2] = $1;
 $17 = HEAP32[$4 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $18 = $17 + 24 | 0;
 HEAP32[$6 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$18 + 4 >> 2];
 if (!(__ZleIN3zim7zsize_tEEbRKT_S4_($5, $6) | 0)) {
  HEAP32[$7 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$8 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$$byval_copy4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$$byval_copy5 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  __Z15_on_assert_failIN3zim7zsize_tES1_EvPKcS3_S3_T_T0_S3_i(48607, 51100, 48612, $$byval_copy4, $$byval_copy5, 48618, 131);
 }
 $20 = $3;
 $22 = HEAP32[$20 >> 2] | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 HEAP32[$9 >> 2] = __Znam($25 >>> 0 > 1 | ($25 | 0) == 1 & $22 >>> 0 >= 0 ? -1 : $22) | 0;
 HEAP8[$10 >> 0] = 0;
 $33 = __Znwm(32) | 0;
 $34 = HEAP32[$9 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$11 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
 invoke_viii(12, $33 | 0, $34 | 0, $$byval_copy5 | 0);
 $35 = __THREW__;
 __THREW__ = 0;
 if ($35 & 1) {
  $44 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$12 >> 2] = $44;
  HEAP32[$13 >> 2] = tempRet0;
  __ZdlPv($33);
  $48 = HEAP32[$12 >> 2] | 0;
  $49 = HEAP32[$13 >> 2] | 0;
  ___resumeException($48 | 0);
 };
 HEAP32[$14 >> 2] = 0;
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$14 >> 2];
 __ZNSt3__210shared_ptrIKN3zim6BufferEEC2INS1_12MemoryBufferILb1EEEEEPT_NS_9enable_ifIXsr14is_convertibleIS9_PS3_EE5valueENS4_5__natEE4typeE($0, $33, $$byval_copy5);
 $39 = HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] | 0;
 $40 = HEAP32[$9 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$16 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$16 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __THREW__ = 0;
 HEAP32[$$byval_copy4 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$$byval_copy4 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 HEAP32[$$byval_copy5 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$$byval_copy5 + 4 >> 2] = HEAP32[$16 + 4 >> 2];
 invoke_viiii($39 | 0, $17 | 0, $40 | 0, $$byval_copy4 | 0, $$byval_copy5 | 0);
 $41 = __THREW__;
 __THREW__ = 0;
 if ($41 & 1) {
  $46 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$12 >> 2] = $46;
  HEAP32[$13 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($0);
  $48 = HEAP32[$12 >> 2] | 0;
  $49 = HEAP32[$13 >> 2] | 0;
  ___resumeException($48 | 0);
 }
 HEAP8[$10 >> 0] = 1;
 if (HEAP8[$10 >> 0] & 1) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$070 = 0, $$070$lcssa = 0, $$074 = 0, $$077 = 0, $$1 = 0, $$172$ph = 0, $$175 = 0, $$2 = 0, $$2$lcssa = 0, $$273 = 0, $$4$ph = 0, $$pre = 0, $$sink = 0, $13 = 0, $14 = 0, $17 = 0, $22 = 0, $23 = 0, $34 = 0, $35 = 0, $38 = 0, $44 = 0, $45 = 0, $53 = 0, $57 = 0, $58 = 0, $64 = 0, $69 = 0, $72 = 0, $73 = 0, $8 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 $$070 = $2;
 while (1) {
  if (($$070 | 0) == ($3 | 0)) {
   $$070$lcssa = $3;
   break;
  }
  if (!(HEAP8[$$070 >> 0] | 0)) {
   $$070$lcssa = $$070;
   break;
  }
  $$070 = $$070 + 1 | 0;
 }
 HEAP32[$7 >> 2] = $5;
 HEAP32[$4 >> 2] = $2;
 $13 = $6;
 $14 = $0 + 8 | 0;
 $$074 = $2;
 $$077 = $5;
 $$1 = $$070$lcssa;
 while (1) {
  if (($$077 | 0) == ($6 | 0) | ($$074 | 0) == ($3 | 0)) {
   $69 = $$074;
   label = 33;
   break;
  }
  $17 = $1;
  $22 = HEAP32[$17 + 4 >> 2] | 0;
  $23 = $8;
  HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$23 + 4 >> 2] = $22;
  $34 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
  $35 = _mbsnrtowcs($$077, $4, $$1 - $$074 | 0, $13 - $$077 >> 2, $1) | 0;
  if ($34 | 0) ___uselocale($34) | 0;
  if (($35 | 0) == -1) {
   label = 10;
   break;
  }
  $53 = (HEAP32[$7 >> 2] | 0) + ($35 << 2) | 0;
  HEAP32[$7 >> 2] = $53;
  if (($53 | 0) == ($6 | 0)) {
   label = 30;
   break;
  }
  $$pre = HEAP32[$4 >> 2] | 0;
  if (($$1 | 0) == ($3 | 0)) {
   $$4$ph = $3;
   $72 = $53;
   $73 = $$pre;
  } else {
   $57 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
   $58 = _mbrtowc($53, $$pre, 1, $1) | 0;
   if ($57 | 0) ___uselocale($57) | 0;
   if ($58 | 0) {
    $$172$ph = 2;
    label = 29;
    break;
   }
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 4;
   $64 = (HEAP32[$4 >> 2] | 0) + 1 | 0;
   HEAP32[$4 >> 2] = $64;
   $$2 = $64;
   while (1) {
    if (($$2 | 0) == ($3 | 0)) {
     $$2$lcssa = $3;
     break;
    }
    if (!(HEAP8[$$2 >> 0] | 0)) {
     $$2$lcssa = $$2;
     break;
    }
    $$2 = $$2 + 1 | 0;
   }
   $$4$ph = $$2$lcssa;
   $72 = HEAP32[$7 >> 2] | 0;
   $73 = $64;
  }
  $$074 = $73;
  $$077 = $72;
  $$1 = $$4$ph;
 }
 do if ((label | 0) == 10) {
  $38 = $$1;
  $$175 = $$074;
  $storemerge = $$077;
  L29 : while (1) {
   HEAP32[$7 >> 2] = $storemerge;
   if (($$175 | 0) == (HEAP32[$4 >> 2] | 0)) {
    label = 19;
    break;
   }
   $44 = ___uselocale(HEAP32[$14 >> 2] | 0) | 0;
   $45 = _mbrtowc($storemerge, $$175, $38 - $$175 | 0, $8) | 0;
   if ($44 | 0) ___uselocale($44) | 0;
   switch ($45 | 0) {
   case -1:
    {
     label = 15;
     break L29;
     break;
    }
   case -2:
    {
     label = 16;
     break L29;
     break;
    }
   case 0:
    {
     $$sink = 1;
     break;
    }
   default:
    $$sink = $45;
   }
   $$175 = $$175 + $$sink | 0;
   $storemerge = (HEAP32[$7 >> 2] | 0) + 4 | 0;
  }
  if ((label | 0) == 15) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = 2;
   label = 29;
   break;
  } else if ((label | 0) == 16) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = 1;
   label = 29;
   break;
  } else if ((label | 0) == 19) {
   HEAP32[$4 >> 2] = $$175;
   $$172$ph = ($$175 | 0) != ($3 | 0) & 1;
   label = 29;
   break;
  }
 } else if ((label | 0) == 30) {
  $69 = HEAP32[$4 >> 2] | 0;
  label = 33;
 } while (0);
 if ((label | 0) == 29) $$273 = $$172$ph; else if ((label | 0) == 33) $$273 = ($69 | 0) != ($3 | 0) & 1;
 STACKTOP = sp;
 return $$273 | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $50 = 0, $52 = 0, $56 = 0, $60 = 0, $65 = 0, $68 = 0, $7 = 0, $71 = 0, $73 = 0, $8 = 0, $83 = 0, $86 = 0, $88 = 0, $9 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 $2 = sp + 156 | 0;
 $4 = sp + 148 | 0;
 $5 = sp + 144 | 0;
 $7 = sp + 136 | 0;
 $8 = sp + 132 | 0;
 $9 = sp + 128 | 0;
 $10 = sp + 124 | 0;
 $11 = sp + 120 | 0;
 $12 = sp + 116 | 0;
 $13 = sp + 112 | 0;
 $14 = sp + 108 | 0;
 $15 = sp + 104 | 0;
 $16 = sp + 100 | 0;
 $17 = sp + 96 | 0;
 $18 = sp + 92 | 0;
 $19 = sp + 88 | 0;
 $20 = sp + 84 | 0;
 $21 = sp + 80 | 0;
 $22 = sp + 76 | 0;
 $23 = sp + 72 | 0;
 $24 = sp + 68 | 0;
 $25 = sp + 64 | 0;
 $26 = sp + 60 | 0;
 $27 = sp + 56 | 0;
 $33 = sp + 32 | 0;
 $34 = sp + 28 | 0;
 $35 = sp + 24 | 0;
 $36 = sp + 20 | 0;
 $37 = sp + 16 | 0;
 $38 = sp + 12 | 0;
 $39 = sp + 8 | 0;
 $40 = sp + 4 | 0;
 $41 = sp;
 HEAP32[$40 >> 2] = $0;
 HEAP32[$41 >> 2] = $1;
 $42 = HEAP32[$40 >> 2] | 0;
 $43 = HEAP32[$41 >> 2] | 0;
 if ($43 >>> 0 > (__ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($42) | 0) >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($42); else {
  HEAP32[$39 >> 2] = $42;
  HEAP32[$38 >> 2] = (HEAP32[$39 >> 2] | 0) + 8;
  HEAP32[$37 >> 2] = HEAP32[$38 >> 2];
  $50 = HEAP32[$41 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$37 >> 2];
  HEAP32[$8 >> 2] = $50;
  $52 = HEAP32[$8 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = $52;
  HEAP32[sp + 140 >> 2] = 0;
  HEAP32[sp + 152 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
  $56 = __Znwm(HEAP32[$2 >> 2] | 0) | 0;
  HEAP32[$42 + 4 >> 2] = $56;
  HEAP32[$42 >> 2] = $56;
  $60 = (HEAP32[$42 >> 2] | 0) + (HEAP32[$41 >> 2] | 0) | 0;
  HEAP32[$11 >> 2] = $42;
  HEAP32[$10 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[HEAP32[$9 >> 2] >> 2] = $60;
  HEAP32[$35 >> 2] = $42;
  HEAP32[$36 >> 2] = 0;
  $65 = HEAP32[$35 >> 2] | 0;
  HEAP32[$34 >> 2] = $65;
  HEAP32[$33 >> 2] = HEAP32[HEAP32[$34 >> 2] >> 2];
  $68 = HEAP32[$33 >> 2] | 0;
  HEAP32[$13 >> 2] = $65;
  HEAP32[$12 >> 2] = HEAP32[HEAP32[$13 >> 2] >> 2];
  $71 = HEAP32[$12 >> 2] | 0;
  HEAP32[$18 >> 2] = $65;
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  $73 = HEAP32[$17 >> 2] | 0;
  HEAP32[$16 >> 2] = $73;
  HEAP32[$15 >> 2] = (HEAP32[$16 >> 2] | 0) + 8;
  HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
  $83 = $71 + ((HEAP32[HEAP32[$14 >> 2] >> 2] | 0) - (HEAP32[$73 >> 2] | 0)) | 0;
  HEAP32[$20 >> 2] = $65;
  HEAP32[$19 >> 2] = HEAP32[HEAP32[$20 >> 2] >> 2];
  $86 = HEAP32[$19 >> 2] | 0;
  HEAP32[$25 >> 2] = $65;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  $88 = HEAP32[$24 >> 2] | 0;
  HEAP32[$23 >> 2] = $88;
  HEAP32[$22 >> 2] = (HEAP32[$23 >> 2] | 0) + 8;
  HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
  $98 = $86 + ((HEAP32[HEAP32[$21 >> 2] >> 2] | 0) - (HEAP32[$88 >> 2] | 0)) | 0;
  HEAP32[$27 >> 2] = $65;
  HEAP32[$26 >> 2] = HEAP32[HEAP32[$27 >> 2] >> 2];
  $103 = (HEAP32[$26 >> 2] | 0) + (HEAP32[$36 >> 2] | 0) | 0;
  HEAP32[sp + 52 >> 2] = $65;
  HEAP32[sp + 48 >> 2] = $68;
  HEAP32[sp + 44 >> 2] = $83;
  HEAP32[sp + 40 >> 2] = $98;
  HEAP32[sp + 36 >> 2] = $103;
  STACKTOP = sp;
  return;
 }
}
function _lzma_raw_coder_init($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $106 = 0, $11 = 0, $111 = 0, $114 = 0, $12 = 0, $13 = 0, $136 = 0, $14 = 0, $15 = 0, $151 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $39 = 0, $5 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $90 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $5 = sp + 128 | 0;
 $6 = sp + 124 | 0;
 $7 = sp + 120 | 0;
 $8 = sp + 116 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 132 | 0;
 $11 = sp + 108 | 0;
 $12 = sp + 104 | 0;
 $13 = sp;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP8[$10 >> 0] = $4 & 1;
 HEAP32[$12 >> 2] = _validate_chain(HEAP32[$8 >> 2] | 0, $11) | 0;
 if (HEAP32[$12 >> 2] | 0) {
  HEAP32[$5 >> 2] = HEAP32[$12 >> 2];
  $151 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $151 | 0;
 }
 L5 : do if (HEAP8[$10 >> 0] & 1) {
  HEAP32[$14 >> 2] = 0;
  while (1) {
   if ((HEAP32[$14 >> 2] | 0) >>> 0 >= (HEAP32[$11 >> 2] | 0) >>> 0) break L5;
   HEAP32[$15 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) - 1;
   $39 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 4) | 0;
   HEAP32[$16 >> 2] = FUNCTION_TABLE_iii[HEAP32[$9 >> 2] & 63](HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0) | 0;
   if (!(HEAP32[$16 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] | 0)) break;
   $55 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 4) | 0;
   $60 = HEAP32[$55 + 4 >> 2] | 0;
   $63 = $13 + (HEAP32[$15 >> 2] << 4) | 0;
   HEAP32[$63 >> 2] = HEAP32[$55 >> 2];
   HEAP32[$63 + 4 >> 2] = $60;
   HEAP32[$13 + (HEAP32[$15 >> 2] << 4) + 8 >> 2] = HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2];
   HEAP32[$13 + (HEAP32[$15 >> 2] << 4) + 12 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[$14 >> 2] << 4) + 8 >> 2];
   HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1;
  }
  HEAP32[$5 >> 2] = 8;
  $151 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $151 | 0;
 } else {
  HEAP32[$17 >> 2] = 0;
  while (1) {
   if ((HEAP32[$17 >> 2] | 0) >>> 0 >= (HEAP32[$11 >> 2] | 0) >>> 0) break L5;
   $90 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$17 >> 2] << 4) | 0;
   HEAP32[$18 >> 2] = FUNCTION_TABLE_iii[HEAP32[$9 >> 2] & 63](HEAP32[$90 >> 2] | 0, HEAP32[$90 + 4 >> 2] | 0) | 0;
   if (!(HEAP32[$18 >> 2] | 0)) break;
   if (!(HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] | 0)) break;
   $106 = (HEAP32[$8 >> 2] | 0) + (HEAP32[$17 >> 2] << 4) | 0;
   $111 = HEAP32[$106 + 4 >> 2] | 0;
   $114 = $13 + (HEAP32[$17 >> 2] << 4) | 0;
   HEAP32[$114 >> 2] = HEAP32[$106 >> 2];
   HEAP32[$114 + 4 >> 2] = $111;
   HEAP32[$13 + (HEAP32[$17 >> 2] << 4) + 8 >> 2] = HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2];
   HEAP32[$13 + (HEAP32[$17 >> 2] << 4) + 12 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + (HEAP32[$17 >> 2] << 4) + 8 >> 2];
   HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1;
  }
  HEAP32[$5 >> 2] = 8;
  $151 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $151 | 0;
 } while (0);
 $136 = $13 + (HEAP32[$11 >> 2] << 4) | 0;
 HEAP32[$136 >> 2] = -1;
 HEAP32[$136 + 4 >> 2] = -1;
 HEAP32[$13 + (HEAP32[$11 >> 2] << 4) + 8 >> 2] = 0;
 HEAP32[$19 >> 2] = _lzma_next_filter_init(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, $13) | 0;
 if (HEAP32[$19 >> 2] | 0) _lzma_next_end(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 HEAP32[$5 >> 2] = HEAP32[$19 >> 2];
 $151 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $151 | 0;
}

function __ZNK3zim4File10getArticleEj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $12 = sp + 56 | 0;
 $13 = sp + 52 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $19 = sp + 28 | 0;
 $20 = sp + 16 | 0;
 $21 = sp + 12 | 0;
 $22 = sp + 8 | 0;
 $23 = sp + 96 | 0;
 $24 = sp;
 HEAP32[$17 >> 2] = $1;
 HEAP32[$18 >> 2] = $2;
 $25 = HEAP32[$17 >> 2] | 0;
 $26 = HEAP32[$18 >> 2] | 0;
 HEAP32[$16 >> 2] = $25;
 HEAP32[$19 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv(HEAP32[HEAP32[$16 >> 2] >> 2] | 0) | 0;
 if ($26 >>> 0 < (__ZNK12REAL_TYPEDEFIjEcvjEv($19) | 0) >>> 0) {
  HEAP32[$8 >> 2] = $24;
  HEAP32[$9 >> 2] = $25;
  $50 = HEAP32[$8 >> 2] | 0;
  HEAP32[$50 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
  HEAP32[$50 + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[$50 + 4 >> 2] | 0)) {
   $70 = HEAP32[$18 >> 2] | 0;
   __ZN3zim7ArticleC2ENSt3__210shared_ptrINS_8FileImplEEEj($0, $24, $70);
   __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($24);
   STACKTOP = sp;
   return;
  }
  HEAP32[$7 >> 2] = HEAP32[$50 + 4 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$3 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
  $65 = HEAP32[$3 >> 2] | 0;
  HEAP32[$4 >> 2] = 1;
  $66 = HEAP32[$4 >> 2] | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  HEAP32[$65 >> 2] = $67 + $66;
  HEAP32[$5 >> 2] = $67 + $66;
  $70 = HEAP32[$18 >> 2] | 0;
  __ZN3zim7ArticleC2ENSt3__210shared_ptrINS_8FileImplEEEj($0, $24, $70);
  __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($24);
  STACKTOP = sp;
  return;
 }
 $32 = ___cxa_allocate_exception(8) | 0;
 HEAP8[$23 >> 0] = 1;
 HEAP32[$14 >> 2] = $20;
 HEAP32[$15 >> 2] = 52146;
 $33 = HEAP32[$14 >> 2] | 0;
 HEAP32[$13 >> 2] = $33;
 $34 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $34;
 $35 = HEAP32[$12 >> 2] | 0;
 HEAP32[$35 >> 2] = 0;
 HEAP32[$35 + 4 >> 2] = 0;
 HEAP32[$35 + 8 >> 2] = 0;
 HEAP32[$11 >> 2] = $34;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 $39 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$15 >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_viii(8, $33 | 0, $37 | 0, $39 | 0);
 $40 = __THREW__;
 __THREW__ = 0;
 if ($40 & 1) {
  $45 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$21 >> 2] = $45;
  HEAP32[$22 >> 2] = tempRet0;
 } else {
  __THREW__ = 0;
  invoke_vii(58, $32 | 0, $20 | 0);
  $42 = __THREW__;
  __THREW__ = 0;
  if (!($42 & 1)) {
   HEAP8[$23 >> 0] = 0;
   __THREW__ = 0;
   invoke_viii(11, $32 | 0, 41024, 53);
   __THREW__ = 0;
  }
  $47 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$21 >> 2] = $47;
  HEAP32[$22 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($20);
 }
 if (!(HEAP8[$23 >> 0] & 1)) {
  $71 = HEAP32[$21 >> 2] | 0;
  $72 = HEAP32[$22 >> 2] | 0;
  ___resumeException($71 | 0);
 }
 ___cxa_free_exception($32 | 0);
 $71 = HEAP32[$21 >> 2] | 0;
 $72 = HEAP32[$22 >> 2] | 0;
 ___resumeException($71 | 0);
}

function _dict_repeat($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $101 = 0, $105 = 0, $122 = 0, $128 = 0, $143 = 0, $144 = 0, $145 = 0, $24 = 0, $26 = 0, $3 = 0, $34 = 0, $4 = 0, $42 = 0, $46 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $72 = 0, $8 = 0, $9 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 24 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) - (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0);
 if ((HEAP32[$6 >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) >>> 0) $24 = HEAP32[$6 >> 2] | 0; else $24 = HEAP32[HEAP32[$5 >> 2] >> 2] | 0;
 HEAP32[$7 >> 2] = $24;
 $26 = HEAP32[$5 >> 2] | 0;
 HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) - (HEAP32[$7 >> 2] | 0);
 do if ((HEAP32[$4 >> 2] | 0) >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) do {
  $34 = _dict_get(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
  HEAP8[(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >> 0] = $34;
  $42 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
  HEAP32[$42 >> 2] = (HEAP32[$42 >> 2] | 0) + 1;
  $46 = (HEAP32[$7 >> 2] | 0) + -1 | 0;
  HEAP32[$7 >> 2] = $46;
 } while ($46 >>> 0 > 0); else {
  $53 = HEAP32[$3 >> 2] | 0;
  if ((HEAP32[$4 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
   _memcpy((HEAP32[$53 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0, (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) + (0 - (HEAP32[$4 >> 2] | 0)) + -1 | 0, HEAP32[$7 >> 2] | 0) | 0;
   $72 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
   HEAP32[$72 >> 2] = (HEAP32[$72 >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
   break;
  }
  HEAP32[$8 >> 2] = (HEAP32[$53 + 4 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) - 1 + (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0);
  HEAP32[$9 >> 2] = (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
  $97 = (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0;
  $101 = (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[$8 >> 2] | 0) | 0;
  if ((HEAP32[$9 >> 2] | 0) >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   _memmove($97 | 0, $101 | 0, HEAP32[$9 >> 2] | 0) | 0;
   $105 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
   HEAP32[$105 >> 2] = (HEAP32[$105 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
   HEAP32[$9 >> 2] = (HEAP32[$7 >> 2] | 0) - (HEAP32[$9 >> 2] | 0);
   _memcpy((HEAP32[HEAP32[$3 >> 2] >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) | 0, HEAP32[HEAP32[$3 >> 2] >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
   $122 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
   HEAP32[$122 >> 2] = (HEAP32[$122 >> 2] | 0) + (HEAP32[$9 >> 2] | 0);
   break;
  } else {
   _memmove($97 | 0, $101 | 0, HEAP32[$7 >> 2] | 0) | 0;
   $128 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
   HEAP32[$128 >> 2] = (HEAP32[$128 >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
   break;
  }
 } while (0);
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  $143 = HEAP32[$5 >> 2] | 0;
  $144 = HEAP32[$143 >> 2] | 0;
  $145 = ($144 | 0) != 0;
  STACKTOP = sp;
  return $145 | 0;
 }
 HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 $143 = HEAP32[$5 >> 2] | 0;
 $144 = HEAP32[$143 >> 2] | 0;
 $145 = ($144 | 0) != 0;
 STACKTOP = sp;
 return $145 | 0;
}

function __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$byval_copy = 0, $$pre$phi19Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $47 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $63 = 0, $65 = 0, $67 = 0, $69 = 0, $eh$lpad$body$sink$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $3 = sp;
 $4 = sp + 8 | 0;
 __THREW__ = 0;
 invoke_vii(45, $3 | 0, $0 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($5 & 1) {
  $53 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $53;
  $$pre$phi19Z2D = $0;
  $$pre$phiZ2D = $0;
 } else {
  L4 : do if (HEAP8[$3 >> 0] | 0) {
   $10 = (HEAP32[$0 >> 2] | 0) + -12 | 0;
   HEAP32[$4 >> 2] = HEAP32[$0 + (HEAP32[$10 >> 2] | 0) + 24 >> 2];
   $16 = $0 + (HEAP32[$10 >> 2] | 0) | 0;
   $18 = HEAP32[$16 + 4 >> 2] | 0;
   $19 = $1 + $2 | 0;
   $20 = $16 + 76 | 0;
   $21 = HEAP32[$20 >> 2] | 0;
   do if (($21 | 0) == -1) {
    __ZNKSt3__28ios_base6getlocEv($$byval_copy, $16);
    __THREW__ = 0;
    $23 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
    $24 = __THREW__;
    __THREW__ = 0;
    if (!($24 & 1)) {
     __THREW__ = 0;
     $29 = invoke_iii(HEAP32[(HEAP32[$23 >> 2] | 0) + 28 >> 2] | 0, $23 | 0, 32) | 0;
     $30 = __THREW__;
     __THREW__ = 0;
     if (!($30 & 1)) {
      __ZNSt3__26localeD2Ev($$byval_copy);
      $34 = $29 << 24 >> 24;
      HEAP32[$20 >> 2] = $34;
      $36 = $34;
      label = 8;
      break;
     }
    }
    $32 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__26localeD2Ev($$byval_copy);
    $eh$lpad$body$sink$indexZ2D = $32;
   } else {
    $36 = $21;
    label = 8;
   } while (0);
   do if ((label | 0) == 8) {
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
    $40 = invoke_iiiiiii(39, $$byval_copy | 0, $1 | 0, (($18 & 176 | 0) == 32 ? $19 : $1) | 0, $19 | 0, $16 | 0, $36 & 255 | 0) | 0;
    $41 = __THREW__;
    __THREW__ = 0;
    if ($41 & 1) {
     $57 = ___cxa_find_matching_catch_3(0) | 0;
     $eh$lpad$body$sink$indexZ2D = $57;
     break;
    }
    if ($40 | 0) break L4;
    $47 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __THREW__ = 0;
    invoke_vii(46, $47 | 0, HEAP32[$47 + 16 >> 2] | 5 | 0);
    $51 = __THREW__;
    __THREW__ = 0;
    if (!($51 & 1)) break L4;
    $55 = ___cxa_find_matching_catch_3(0) | 0;
    $eh$lpad$body$sink$indexZ2D = $55;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
   $$1 = $eh$lpad$body$sink$indexZ2D;
   $$pre$phi19Z2D = $0;
   $$pre$phiZ2D = $0;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($3);
  STACKTOP = sp;
  return $0 | 0;
 } while (0);
 ___cxa_begin_catch($$1 | 0) | 0;
 __THREW__ = 0;
 invoke_vi(186, $$pre$phi19Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0);
 $63 = __THREW__;
 __THREW__ = 0;
 if (!($63 & 1)) {
  ___cxa_end_catch();
  STACKTOP = sp;
  return $0 | 0;
 }
 $65 = ___cxa_find_matching_catch_2() | 0;
 __THREW__ = 0;
 invoke_v(3);
 $67 = __THREW__;
 __THREW__ = 0;
 if ($67 & 1) {
  $69 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($69);
 } else ___resumeException($65 | 0);
 return 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $62 = 0, $63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $5 = sp;
 L1 : do if (!(HEAP32[$2 + 4 >> 2] & 1)) {
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $4 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
  __THREW__ = 0;
  $16 = invoke_iii(32, $$byval_copy | 0, 62408) | 0;
  $17 = __THREW__;
  __THREW__ = 0;
  do if ($17 & 1) {
   $40 = ___cxa_find_matching_catch_2() | 0;
   $41 = tempRet0;
   __ZNSt3__26localeD2Ev($$byval_copy);
   $$0 = $41;
   $$011 = $40;
  } else {
   __ZNSt3__26localeD2Ev($$byval_copy);
   $19 = HEAP32[$16 >> 2] | 0;
   if ($4) FUNCTION_TABLE_vii[HEAP32[$19 + 24 >> 2] & 127]($$byval_copy, $16); else FUNCTION_TABLE_vii[HEAP32[$19 + 28 >> 2] & 127]($$byval_copy, $16);
   $25 = $$byval_copy + 8 + 3 | 0;
   $26 = HEAP8[$25 >> 0] | 0;
   $28 = HEAP32[$$byval_copy >> 2] | 0;
   $30 = $$byval_copy + 4 | 0;
   $$sroa$013$0 = $26 << 24 >> 24 < 0 ? $28 : $$byval_copy;
   $31 = $26;
   $35 = $28;
   while (1) {
    $32 = $31 << 24 >> 24 < 0;
    if (($$sroa$013$0 | 0) == (($32 ? $35 : $$byval_copy) + (($32 ? HEAP32[$30 >> 2] | 0 : $31 & 255) << 2) | 0)) {
     label = 9;
     break;
    }
    $42 = HEAP32[$$sroa$013$0 >> 2] | 0;
    $43 = HEAP32[$1 >> 2] | 0;
    if ($43 | 0) {
     $45 = $43 + 24 | 0;
     $46 = HEAP32[$45 >> 2] | 0;
     if (($46 | 0) == (HEAP32[$43 + 28 >> 2] | 0)) {
      $52 = HEAP32[(HEAP32[$43 >> 2] | 0) + 52 >> 2] | 0;
      $53 = __ZNSt3__211char_traitsIwE11to_int_typeEw($42) | 0;
      __THREW__ = 0;
      $54 = invoke_iii($52 | 0, $43 | 0, $53 | 0) | 0;
      $55 = __THREW__;
      __THREW__ = 0;
      if ($55 & 1) {
       label = 18;
       break;
      } else $$0$i$i = $54;
     } else {
      HEAP32[$45 >> 2] = $46 + 4;
      HEAP32[$46 >> 2] = $42;
      $$0$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($42) | 0;
     }
     if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) HEAP32[$1 >> 2] = 0;
    }
    $$sroa$013$0 = $$sroa$013$0 + 4 | 0;
    $31 = HEAP8[$25 >> 0] | 0;
    $35 = HEAP32[$$byval_copy >> 2] | 0;
   }
   if ((label | 0) == 9) {
    $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
    $$sroa$0$0 = $$sroa$0$0$copyload;
    break L1;
   } else if ((label | 0) == 18) {
    $62 = ___cxa_find_matching_catch_2() | 0;
    $63 = tempRet0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($$byval_copy);
    $$0 = $63;
    $$011 = $62;
    break;
   }
  } while (0);
  ___resumeException($$011 | 0);
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0$i$i = 0, $$011 = 0, $$byval_copy = 0, $$sroa$0$0 = 0, $$sroa$0$0$copyload = 0, $$sroa$013$0 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $61 = 0, $62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $5 = sp;
 L1 : do if (!(HEAP32[$2 + 4 >> 2] & 1)) {
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
  $$sroa$0$0 = FUNCTION_TABLE_iiiiii[$12 & 31]($0, $$byval_copy, $2, $3, $4 & 1) | 0;
 } else {
  __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
  __THREW__ = 0;
  $16 = invoke_iii(32, $$byval_copy | 0, 62384) | 0;
  $17 = __THREW__;
  __THREW__ = 0;
  do if ($17 & 1) {
   $39 = ___cxa_find_matching_catch_2() | 0;
   $40 = tempRet0;
   __ZNSt3__26localeD2Ev($$byval_copy);
   $$0 = $40;
   $$011 = $39;
  } else {
   __ZNSt3__26localeD2Ev($$byval_copy);
   $19 = HEAP32[$16 >> 2] | 0;
   if ($4) FUNCTION_TABLE_vii[HEAP32[$19 + 24 >> 2] & 127]($$byval_copy, $16); else FUNCTION_TABLE_vii[HEAP32[$19 + 28 >> 2] & 127]($$byval_copy, $16);
   $24 = $$byval_copy + 11 | 0;
   $25 = HEAP8[$24 >> 0] | 0;
   $27 = HEAP32[$$byval_copy >> 2] | 0;
   $29 = $$byval_copy + 4 | 0;
   $$sroa$013$0 = $25 << 24 >> 24 < 0 ? $27 : $$byval_copy;
   $30 = $25;
   $34 = $27;
   while (1) {
    $31 = $30 << 24 >> 24 < 0;
    if (($$sroa$013$0 | 0) == (($31 ? $34 : $$byval_copy) + ($31 ? HEAP32[$29 >> 2] | 0 : $30 & 255) | 0)) {
     label = 9;
     break;
    }
    $41 = HEAP8[$$sroa$013$0 >> 0] | 0;
    $42 = HEAP32[$1 >> 2] | 0;
    if ($42 | 0) {
     $44 = $42 + 24 | 0;
     $45 = HEAP32[$44 >> 2] | 0;
     if (($45 | 0) == (HEAP32[$42 + 28 >> 2] | 0)) {
      $51 = HEAP32[(HEAP32[$42 >> 2] | 0) + 52 >> 2] | 0;
      $52 = __ZNSt3__211char_traitsIcE11to_int_typeEc($41) | 0;
      __THREW__ = 0;
      $53 = invoke_iii($51 | 0, $42 | 0, $52 | 0) | 0;
      $54 = __THREW__;
      __THREW__ = 0;
      if ($54 & 1) {
       label = 18;
       break;
      } else $$0$i$i = $53;
     } else {
      HEAP32[$44 >> 2] = $45 + 1;
      HEAP8[$45 >> 0] = $41;
      $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($41) | 0;
     }
     if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) HEAP32[$1 >> 2] = 0;
    }
    $$sroa$013$0 = $$sroa$013$0 + 1 | 0;
    $30 = HEAP8[$24 >> 0] | 0;
    $34 = HEAP32[$$byval_copy >> 2] | 0;
   }
   if ((label | 0) == 9) {
    $$sroa$0$0$copyload = HEAP32[$1 >> 2] | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
    $$sroa$0$0 = $$sroa$0$0$copyload;
    break L1;
   } else if ((label | 0) == 18) {
    $61 = ___cxa_find_matching_catch_2() | 0;
    $62 = tempRet0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($$byval_copy);
    $$0 = $62;
    $$011 = $61;
    break;
   }
  } while (0);
  ___resumeException($$011 | 0);
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$0 | 0;
}

function __ZNSt3__2rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_RS4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $3 = 0, $32 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $65 = 0, $67 = 0, $7 = 0, $70 = 0, $75 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $87 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 __THREW__ = 0;
 invoke_viii(14, $13 | 0, HEAP32[$11 >> 2] | 0, 0);
 $18 = __THREW__;
 __THREW__ = 0;
 do if (!($18 & 1)) {
  HEAP32[$10 >> 2] = $13;
  if (!(HEAP8[HEAP32[$10 >> 2] >> 0] & 1)) {
   $77 = HEAP32[$11 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
  $23 = HEAP32[$11 >> 2] | 0;
  HEAP32[$9 >> 2] = $23 + (HEAP32[(HEAP32[$23 >> 2] | 0) + -12 >> 2] | 0);
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2];
  $32 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$32 + 12 >> 2] | 0) == (HEAP32[$32 + 16 >> 2] | 0)) {
   __THREW__ = 0;
   $41 = invoke_ii(HEAP32[(HEAP32[$32 >> 2] | 0) + 40 >> 2] | 0, $32 | 0) | 0;
   $42 = __THREW__;
   __THREW__ = 0;
   if ($42 & 1) break;
   HEAP32[$6 >> 2] = $41;
  } else {
   $44 = $32 + 12 | 0;
   $45 = HEAP32[$44 >> 2] | 0;
   HEAP32[$44 >> 2] = $45 + 1;
   HEAP32[$6 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$45 >> 0] | 0) | 0;
  }
  HEAP32[$16 >> 2] = HEAP32[$6 >> 2];
  $50 = HEAP32[$16 >> 2] | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($50, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   $53 = HEAP32[$11 >> 2] | 0;
   HEAP32[$4 >> 2] = $53 + (HEAP32[(HEAP32[$53 >> 2] | 0) + -12 >> 2] | 0);
   HEAP32[$5 >> 2] = 6;
   $59 = HEAP32[$5 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$3 >> 2] = $59;
   $60 = HEAP32[$2 >> 2] | 0;
   __THREW__ = 0;
   invoke_vii(46, $60 | 0, HEAP32[$60 + 16 >> 2] | HEAP32[$3 >> 2] | 0);
   $65 = __THREW__;
   __THREW__ = 0;
   if ($65 & 1) break;
   $77 = HEAP32[$11 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  } else {
   $79 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$16 >> 2] | 0) | 0;
   HEAP8[HEAP32[$12 >> 2] >> 0] = $79;
   $77 = HEAP32[$11 >> 2] | 0;
   STACKTOP = sp;
   return $77 | 0;
  }
 } while (0);
 $67 = ___cxa_find_matching_catch_3(0) | 0;
 HEAP32[$14 >> 2] = $67;
 HEAP32[$15 >> 2] = tempRet0;
 ___cxa_begin_catch(HEAP32[$14 >> 2] | 0) | 0;
 $70 = HEAP32[$11 >> 2] | 0;
 __THREW__ = 0;
 invoke_vi(186, $70 + (HEAP32[(HEAP32[$70 >> 2] | 0) + -12 >> 2] | 0) | 0);
 $75 = __THREW__;
 __THREW__ = 0;
 if (!($75 & 1)) {
  ___cxa_end_catch();
  $77 = HEAP32[$11 >> 2] | 0;
  STACKTOP = sp;
  return $77 | 0;
 }
 $81 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$14 >> 2] = $81;
 HEAP32[$15 >> 2] = tempRet0;
 __THREW__ = 0;
 invoke_v(3);
 $83 = __THREW__;
 __THREW__ = 0;
 if ($83 & 1) {
  $87 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($87);
 } else ___resumeException(HEAP32[$14 >> 2] | 0);
 return 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $36 = 0, $4 = 0, $41 = 0, $46 = 0, $5 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $67 = 0, $7 = 0, $76 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $9 = 0, $91 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 52 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 44 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 32 | 0;
 $15 = sp + 28 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 20 | 0;
 $18 = sp + 16 | 0;
 $19 = sp + 12 | 0;
 $20 = sp + 8 | 0;
 $21 = sp + 4 | 0;
 $22 = sp;
 HEAP32[$21 >> 2] = $0;
 HEAP32[$22 >> 2] = $1;
 $23 = HEAP32[$21 >> 2] | 0;
 $25 = HEAP32[$23 + 44 >> 2] | 0;
 HEAP32[$19 >> 2] = $23;
 if ($25 >>> 0 < (HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
  HEAP32[$18 >> 2] = $23;
  HEAP32[$23 + 44 >> 2] = HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2];
 }
 HEAP32[$16 >> 2] = $23;
 $36 = HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$9 >> 2] = $23;
 do if ($36 >>> 0 < (HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] | 0) >>> 0) {
  $41 = HEAP32[$22 >> 2] | 0;
  if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($41, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
   HEAP32[$7 >> 2] = $23;
   $46 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[$6 >> 2] = $23;
   $50 = (HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0) + -1 | 0;
   $52 = HEAP32[$23 + 44 >> 2] | 0;
   HEAP32[$2 >> 2] = $23;
   HEAP32[$3 >> 2] = $46;
   HEAP32[$4 >> 2] = $50;
   HEAP32[$5 >> 2] = $52;
   $53 = HEAP32[$2 >> 2] | 0;
   HEAP32[$53 + 8 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$53 + 12 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$53 + 16 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$20 >> 2] = __ZNSt3__211char_traitsIcE7not_eofEi(HEAP32[$22 >> 2] | 0) | 0;
   $97 = HEAP32[$20 >> 2] | 0;
   STACKTOP = sp;
   return $97 | 0;
  }
  if (!(HEAP32[$23 + 48 >> 2] & 16)) {
   $67 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$22 >> 2] | 0) | 0;
   HEAP32[$8 >> 2] = $23;
   if (!(__ZNSt3__211char_traitsIcE2eqEcc($67, HEAP8[(HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) + -1 >> 0] | 0) | 0)) break;
  }
  HEAP32[$10 >> 2] = $23;
  $76 = HEAP32[(HEAP32[$10 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[$11 >> 2] = $23;
  $80 = (HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0) + -1 | 0;
  $82 = HEAP32[$23 + 44 >> 2] | 0;
  HEAP32[$12 >> 2] = $23;
  HEAP32[$13 >> 2] = $76;
  HEAP32[$14 >> 2] = $80;
  HEAP32[$15 >> 2] = $82;
  $83 = HEAP32[$12 >> 2] | 0;
  HEAP32[$83 + 8 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$83 + 12 >> 2] = HEAP32[$14 >> 2];
  HEAP32[$83 + 16 >> 2] = HEAP32[$15 >> 2];
  $91 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$22 >> 2] | 0) | 0;
  HEAP32[$17 >> 2] = $23;
  HEAP8[HEAP32[(HEAP32[$17 >> 2] | 0) + 12 >> 2] >> 0] = $91;
  HEAP32[$20 >> 2] = HEAP32[$22 >> 2];
  $97 = HEAP32[$20 >> 2] | 0;
  STACKTOP = sp;
  return $97 | 0;
 } while (0);
 HEAP32[$20 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $97 = HEAP32[$20 >> 2] | 0;
 STACKTOP = sp;
 return $97 | 0;
}

function __ZN3zim6DirentC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $1 = sp + 120 | 0;
 $2 = sp + 116 | 0;
 $3 = sp + 112 | 0;
 $4 = sp + 108 | 0;
 $5 = sp + 104 | 0;
 $6 = sp + 100 | 0;
 $7 = sp + 96 | 0;
 $8 = sp + 92 | 0;
 $9 = sp + 88 | 0;
 $10 = sp + 84 | 0;
 $11 = sp + 80 | 0;
 $12 = sp + 76 | 0;
 $13 = sp + 72 | 0;
 $14 = sp + 68 | 0;
 $15 = sp + 64 | 0;
 $16 = sp + 60 | 0;
 $17 = sp + 56 | 0;
 $18 = sp + 52 | 0;
 $19 = sp + 48 | 0;
 $20 = sp + 44 | 0;
 $21 = sp + 40 | 0;
 $22 = sp + 36 | 0;
 $23 = sp + 32 | 0;
 $24 = sp + 28 | 0;
 $25 = sp + 24 | 0;
 $27 = sp + 16 | 0;
 $28 = sp + 12 | 0;
 $29 = sp + 8 | 0;
 $30 = sp + 4 | 0;
 $31 = sp;
 HEAP32[$31 >> 2] = $0;
 $32 = HEAP32[$31 >> 2] | 0;
 HEAP16[$32 >> 1] = 0;
 HEAP32[$32 + 4 >> 2] = 0;
 __ZN3zim15cluster_index_tC2Ej($32 + 8 | 0, 0);
 __ZN3zim12blob_index_tC2Ej($32 + 12 | 0, 0);
 __ZN3zim15article_index_tC2Ej($32 + 16 | 0, 0);
 HEAP8[$32 + 20 >> 0] = 0;
 HEAP32[$30 >> 2] = $32 + 24;
 $39 = HEAP32[$30 >> 2] | 0;
 HEAP32[$29 >> 2] = $39;
 $40 = HEAP32[$29 >> 2] | 0;
 HEAP32[$28 >> 2] = $40;
 $41 = HEAP32[$28 >> 2] | 0;
 HEAP32[$41 >> 2] = 0;
 HEAP32[$41 + 4 >> 2] = 0;
 HEAP32[$41 + 8 >> 2] = 0;
 HEAP32[$27 >> 2] = $40;
 HEAP32[sp + 20 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$23 >> 2] = $39;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$25 >> 2] = 0;
 while (1) {
  if ((HEAP32[$25 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$24 >> 2] | 0) + (HEAP32[$25 >> 2] << 2) >> 2] = 0;
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
 }
 HEAP32[$10 >> 2] = $32 + 36;
 $54 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $54;
 $55 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = $55;
 $56 = HEAP32[$8 >> 2] | 0;
 HEAP32[$56 >> 2] = 0;
 HEAP32[$56 + 4 >> 2] = 0;
 HEAP32[$56 + 8 >> 2] = 0;
 HEAP32[$7 >> 2] = $55;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$3 >> 2] = $54;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$5 >> 2] = 0;
 while (1) {
  if ((HEAP32[$5 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] << 2) >> 2] = 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
 }
 HEAP32[$20 >> 2] = $32 + 48;
 $69 = HEAP32[$20 >> 2] | 0;
 HEAP32[$19 >> 2] = $69;
 $70 = HEAP32[$19 >> 2] | 0;
 HEAP32[$18 >> 2] = $70;
 $71 = HEAP32[$18 >> 2] | 0;
 HEAP32[$71 >> 2] = 0;
 HEAP32[$71 + 4 >> 2] = 0;
 HEAP32[$71 + 8 >> 2] = 0;
 HEAP32[$17 >> 2] = $70;
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$13 >> 2] = $69;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$14 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$15 >> 2] = 0;
 while (1) {
  if ((HEAP32[$15 >> 2] | 0) >>> 0 >= 3) break;
  HEAP32[(HEAP32[$14 >> 2] | 0) + (HEAP32[$15 >> 2] << 2) >> 2] = 0;
  HEAP32[$15 >> 2] = (HEAP32[$15 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _lzma_raw_coder_memusage($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $101 = 0, $103 = 0, $112 = 0, $118 = 0, $120 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $17 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, $4 = 0, $42 = 0, $48 = 0, $50 = 0, $6 = 0, $62 = 0, $64 = 0, $68 = 0, $7 = 0, $77 = 0, $8 = 0, $81 = 0, $87 = 0, $9 = 0, $93 = 0, $95 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (_validate_chain(HEAP32[$4 >> 2] | 0, sp + 32 | 0) | 0) {
  $13 = $2;
  HEAP32[$13 >> 2] = -1;
  HEAP32[$13 + 4 >> 2] = -1;
  $124 = $2;
  $125 = $124;
  $126 = HEAP32[$125 >> 2] | 0;
  $127 = $124 + 4 | 0;
  $128 = $127;
  $129 = HEAP32[$128 >> 2] | 0;
  tempRet0 = $129;
  STACKTOP = sp;
  return $126 | 0;
 }
 $17 = $6;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$17 + 4 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 while (1) {
  $25 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] << 4) | 0;
  HEAP32[$8 >> 2] = FUNCTION_TABLE_iii[HEAP32[$3 >> 2] & 63](HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0) | 0;
  if (!(HEAP32[$8 >> 2] | 0)) {
   label = 5;
   break;
  }
  if (!(HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0)) {
   $42 = $6;
   $48 = _i64Add(HEAP32[$42 >> 2] | 0, HEAP32[$42 + 4 >> 2] | 0, 1024, 0) | 0;
   $50 = $6;
   HEAP32[$50 >> 2] = $48;
   HEAP32[$50 + 4 >> 2] = tempRet0;
  } else {
   $62 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] & 127](HEAP32[(HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] << 4) + 8 >> 2] | 0) | 0;
   $64 = $9;
   HEAP32[$64 >> 2] = $62;
   HEAP32[$64 + 4 >> 2] = tempRet0;
   $68 = $9;
   if ((HEAP32[$68 >> 2] | 0) == -1 ? (HEAP32[$68 + 4 >> 2] | 0) == -1 : 0) {
    label = 9;
    break;
   }
   $81 = $9;
   $87 = $6;
   $93 = _i64Add(HEAP32[$87 >> 2] | 0, HEAP32[$87 + 4 >> 2] | 0, HEAP32[$81 >> 2] | 0, HEAP32[$81 + 4 >> 2] | 0) | 0;
   $95 = $6;
   HEAP32[$95 >> 2] = $93;
   HEAP32[$95 + 4 >> 2] = tempRet0;
  }
  $99 = HEAP32[$4 >> 2] | 0;
  $101 = (HEAP32[$7 >> 2] | 0) + 1 | 0;
  HEAP32[$7 >> 2] = $101;
  $103 = $99 + ($101 << 4) | 0;
  if (!((HEAP32[$103 >> 2] | 0) != -1 ? 1 : (HEAP32[$103 + 4 >> 2] | 0) != -1)) {
   label = 12;
   break;
  }
 }
 if ((label | 0) == 5) {
  $34 = $2;
  HEAP32[$34 >> 2] = -1;
  HEAP32[$34 + 4 >> 2] = -1;
  $124 = $2;
  $125 = $124;
  $126 = HEAP32[$125 >> 2] | 0;
  $127 = $124 + 4 | 0;
  $128 = $127;
  $129 = HEAP32[$128 >> 2] | 0;
  tempRet0 = $129;
  STACKTOP = sp;
  return $126 | 0;
 } else if ((label | 0) == 9) {
  $77 = $2;
  HEAP32[$77 >> 2] = -1;
  HEAP32[$77 + 4 >> 2] = -1;
  $124 = $2;
  $125 = $124;
  $126 = HEAP32[$125 >> 2] | 0;
  $127 = $124 + 4 | 0;
  $128 = $127;
  $129 = HEAP32[$128 >> 2] | 0;
  tempRet0 = $129;
  STACKTOP = sp;
  return $126 | 0;
 } else if ((label | 0) == 12) {
  $112 = $6;
  $118 = _i64Add(HEAP32[$112 >> 2] | 0, HEAP32[$112 + 4 >> 2] | 0, 32768, 0) | 0;
  $120 = $2;
  HEAP32[$120 >> 2] = $118;
  HEAP32[$120 + 4 >> 2] = tempRet0;
  $124 = $2;
  $125 = $124;
  $126 = HEAP32[$125 >> 2] | 0;
  $127 = $124 + 4 | 0;
  $128 = $127;
  $129 = HEAP32[$128 >> 2] | 0;
  tempRet0 = $129;
  STACKTOP = sp;
  return $126 | 0;
 }
 return 0;
}

function __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $59 = 0, $60 = 0, $69 = 0, $72 = 0, $81 = 0, $88 = 0, $93 = 0, $95 = 0;
 L1 : do if ($0 << 24 >> 24 == $5 << 24 >> 24) if (!(HEAP8[$1 >> 0] | 0)) $$2 = -1; else {
  HEAP8[$1 >> 0] = 0;
  $15 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $15 + 1;
  HEAP8[$15 >> 0] = 46;
  $18 = HEAP8[$7 + 11 >> 0] | 0;
  if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) $$2 = 0; else {
   $25 = HEAP32[$9 >> 2] | 0;
   if (($25 - $8 | 0) < 160) {
    $30 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $25 + 4;
    HEAP32[$25 >> 2] = $30;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if ($0 << 24 >> 24 == $6 << 24 >> 24) {
   $34 = HEAP8[$7 + 11 >> 0] | 0;
   if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
    if (!(HEAP8[$1 >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $43 = HEAP32[$9 >> 2] | 0;
    if (($43 - $8 | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $48 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $43 + 4;
    HEAP32[$43 >> 2] = $48;
    HEAP32[$10 >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $50 = $11 + 32 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $11 + $$0$i$idx | 0;
   if (($$0$i$idx | 0) == 32) {
    $$0$lcssa$i = $50;
    break;
   }
   if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $56 = $$0$lcssa$i - $11 | 0;
  if (($56 | 0) > 31) $$2 = -1; else {
   $59 = HEAP8[40416 + $56 >> 0] | 0;
   switch ($56 | 0) {
   case 24:
   case 25:
    {
     $60 = HEAP32[$4 >> 2] | 0;
     if (($60 | 0) != ($3 | 0)) if ((HEAP8[$60 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$4 >> 2] = $60 + 1;
     HEAP8[$60 >> 0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
   case 23:
   case 22:
    {
     HEAP8[$2 >> 0] = 80;
     $69 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $69 + 1;
     HEAP8[$69 >> 0] = $59;
     $$2 = 0;
     break L1;
     break;
    }
   default:
    {
     $72 = $59 & 95;
     if (($72 | 0) == (HEAP8[$2 >> 0] | 0)) {
      HEAP8[$2 >> 0] = $72 | 128;
      if (HEAP8[$1 >> 0] | 0) {
       HEAP8[$1 >> 0] = 0;
       $81 = HEAP8[$7 + 11 >> 0] | 0;
       if (($81 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $81 & 255) | 0) {
        $88 = HEAP32[$9 >> 2] | 0;
        if (($88 - $8 | 0) < 160) {
         $93 = HEAP32[$10 >> 2] | 0;
         HEAP32[$9 >> 2] = $88 + 4;
         HEAP32[$88 >> 2] = $93;
        }
       }
      }
     }
     $95 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $95 + 1;
     HEAP8[$95 >> 0] = $59;
     if (($56 | 0) > 21) {
      $$2 = 0;
      break L1;
     }
     HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
     $$2 = 0;
     break L1;
    }
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $80 = 0, $82 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 116 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 84 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 60 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 133 | 0;
 $23 = sp + 48 | 0;
 $24 = sp + 44 | 0;
 $25 = sp + 40 | 0;
 $26 = sp + 36 | 0;
 $27 = sp + 32 | 0;
 $28 = sp + 28 | 0;
 $30 = sp + 24 | 0;
 $31 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 HEAP32[$34 >> 2] = $0;
 $35 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $35;
 $36 = HEAP32[$33 >> 2] | 0;
 $38 = HEAP32[$36 + 4 >> 2] | 0;
 HEAP32[$30 >> 2] = $36;
 HEAP32[$31 >> 2] = $38;
 $39 = HEAP32[$30 >> 2] | 0;
 $40 = HEAP32[$31 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 132 >> 0] | 0;
 HEAP32[$27 >> 2] = $39;
 HEAP32[$28 >> 2] = $40;
 $41 = HEAP32[$27 >> 2] | 0;
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$41 + 8 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $41;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 12;
  HEAP32[$24 >> 2] = (HEAP32[$25 >> 2] | 0) + 4;
  $51 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
  $52 = $41 + 8 | 0;
  $54 = (HEAP32[$52 >> 2] | 0) + -12 | 0;
  HEAP32[$52 >> 2] = $54;
  HEAP32[$23 >> 2] = $54;
  $55 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $51;
  HEAP32[$21 >> 2] = $55;
  $56 = HEAP32[$20 >> 2] | 0;
  $57 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $56;
  HEAP32[$18 >> 2] = $57;
  $59 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $59;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(HEAP32[$16 >> 2] | 0);
 }
 if (!(HEAP32[$35 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$14 >> 2] = $35;
 HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 12;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 $68 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
 $69 = HEAP32[$35 >> 2] | 0;
 HEAP32[$11 >> 2] = $35;
 $70 = HEAP32[$11 >> 2] | 0;
 HEAP32[$10 >> 2] = $70;
 HEAP32[$9 >> 2] = (HEAP32[$10 >> 2] | 0) + 12;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 $80 = ((HEAP32[HEAP32[$8 >> 2] >> 2] | 0) - (HEAP32[$70 >> 2] | 0) | 0) / 12 | 0;
 HEAP32[$5 >> 2] = $68;
 HEAP32[$6 >> 2] = $69;
 HEAP32[$7 >> 2] = $80;
 $82 = HEAP32[$6 >> 2] | 0;
 $83 = HEAP32[$7 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = $82;
 HEAP32[$4 >> 2] = $83;
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 __ZdlPv(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4getxERKS1_S5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp + 44 | 0;
 $20 = sp + 40 | 0;
 $21 = sp + 36 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 28 | 0;
 $24 = sp + 24 | 0;
 $25 = sp + 20 | 0;
 $26 = sp + 16 | 0;
 $27 = sp + 12 | 0;
 $28 = sp + 8 | 0;
 $29 = sp + 4 | 0;
 $30 = sp;
 $31 = sp + 109 | 0;
 $32 = sp + 108 | 0;
 HEAP32[$28 >> 2] = $1;
 HEAP32[$29 >> 2] = $2;
 HEAP32[$30 >> 2] = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE6getptrERKS1_(HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0) | 0;
 if (HEAP32[$30 >> 2] | 0) {
  HEAP8[$31 >> 0] = 1;
  $38 = HEAP32[$30 >> 2] | 0;
  HEAP32[$25 >> 2] = $0;
  HEAP32[$26 >> 2] = $31;
  HEAP32[$27 >> 2] = $38;
  $39 = HEAP32[$25 >> 2] | 0;
  HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
  HEAP8[$39 >> 0] = HEAP8[HEAP32[$24 >> 2] >> 0] & 1;
  HEAP32[$16 >> 2] = HEAP32[$27 >> 2];
  $47 = HEAP32[$16 >> 2] | 0;
  HEAP32[$22 >> 2] = $39 + 4;
  HEAP32[$23 >> 2] = $47;
  $48 = HEAP32[$22 >> 2] | 0;
  HEAP32[$48 >> 2] = HEAP32[HEAP32[$23 >> 2] >> 2];
  HEAP32[$48 + 4 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[$48 + 4 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$21 >> 2] = HEAP32[$48 + 4 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$17 >> 2] = (HEAP32[$20 >> 2] | 0) + 4;
  $63 = HEAP32[$17 >> 2] | 0;
  HEAP32[$18 >> 2] = 1;
  $64 = HEAP32[$18 >> 2] | 0;
  $65 = HEAP32[$63 >> 2] | 0;
  HEAP32[$63 >> 2] = $65 + $64;
  HEAP32[$19 >> 2] = $65 + $64;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$32 >> 0] = 0;
  HEAP32[$13 >> 2] = $0;
  HEAP32[$14 >> 2] = $32;
  HEAP32[$15 >> 2] = $3;
  $68 = HEAP32[$13 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
  HEAP8[$68 >> 0] = HEAP8[HEAP32[$12 >> 2] >> 0] & 1;
  HEAP32[$4 >> 2] = HEAP32[$15 >> 2];
  $76 = HEAP32[$4 >> 2] | 0;
  HEAP32[$10 >> 2] = $68 + 4;
  HEAP32[$11 >> 2] = $76;
  $77 = HEAP32[$10 >> 2] | 0;
  HEAP32[$77 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  HEAP32[$77 + 4 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[$77 + 4 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$9 >> 2] = HEAP32[$77 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
  $92 = HEAP32[$5 >> 2] | 0;
  HEAP32[$6 >> 2] = 1;
  $93 = HEAP32[$6 >> 2] | 0;
  $94 = HEAP32[$92 >> 2] | 0;
  HEAP32[$92 >> 2] = $94 + $93;
  HEAP32[$7 >> 2] = $94 + $93;
  STACKTOP = sp;
  return;
 }
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4getxERKS1_S6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $94 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp + 44 | 0;
 $20 = sp + 40 | 0;
 $21 = sp + 36 | 0;
 $22 = sp + 32 | 0;
 $23 = sp + 28 | 0;
 $24 = sp + 24 | 0;
 $25 = sp + 20 | 0;
 $26 = sp + 16 | 0;
 $27 = sp + 12 | 0;
 $28 = sp + 8 | 0;
 $29 = sp + 4 | 0;
 $30 = sp;
 $31 = sp + 109 | 0;
 $32 = sp + 108 | 0;
 HEAP32[$28 >> 2] = $1;
 HEAP32[$29 >> 2] = $2;
 HEAP32[$30 >> 2] = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE6getptrERKS1_(HEAP32[$28 >> 2] | 0, HEAP32[$29 >> 2] | 0) | 0;
 if (HEAP32[$30 >> 2] | 0) {
  HEAP8[$31 >> 0] = 1;
  $38 = HEAP32[$30 >> 2] | 0;
  HEAP32[$25 >> 2] = $0;
  HEAP32[$26 >> 2] = $31;
  HEAP32[$27 >> 2] = $38;
  $39 = HEAP32[$25 >> 2] | 0;
  HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
  HEAP8[$39 >> 0] = HEAP8[HEAP32[$24 >> 2] >> 0] & 1;
  HEAP32[$16 >> 2] = HEAP32[$27 >> 2];
  $47 = HEAP32[$16 >> 2] | 0;
  HEAP32[$22 >> 2] = $39 + 4;
  HEAP32[$23 >> 2] = $47;
  $48 = HEAP32[$22 >> 2] | 0;
  HEAP32[$48 >> 2] = HEAP32[HEAP32[$23 >> 2] >> 2];
  HEAP32[$48 + 4 >> 2] = HEAP32[(HEAP32[$23 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[$48 + 4 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$21 >> 2] = HEAP32[$48 + 4 >> 2];
  HEAP32[$20 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$17 >> 2] = (HEAP32[$20 >> 2] | 0) + 4;
  $63 = HEAP32[$17 >> 2] | 0;
  HEAP32[$18 >> 2] = 1;
  $64 = HEAP32[$18 >> 2] | 0;
  $65 = HEAP32[$63 >> 2] | 0;
  HEAP32[$63 >> 2] = $65 + $64;
  HEAP32[$19 >> 2] = $65 + $64;
  STACKTOP = sp;
  return;
 } else {
  HEAP8[$32 >> 0] = 0;
  HEAP32[$13 >> 2] = $0;
  HEAP32[$14 >> 2] = $32;
  HEAP32[$15 >> 2] = $3;
  $68 = HEAP32[$13 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
  HEAP8[$68 >> 0] = HEAP8[HEAP32[$12 >> 2] >> 0] & 1;
  HEAP32[$4 >> 2] = HEAP32[$15 >> 2];
  $76 = HEAP32[$4 >> 2] | 0;
  HEAP32[$10 >> 2] = $68 + 4;
  HEAP32[$11 >> 2] = $76;
  $77 = HEAP32[$10 >> 2] | 0;
  HEAP32[$77 >> 2] = HEAP32[HEAP32[$11 >> 2] >> 2];
  HEAP32[$77 + 4 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2];
  if (!(HEAP32[$77 + 4 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  HEAP32[$9 >> 2] = HEAP32[$77 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 >> 2] = (HEAP32[$8 >> 2] | 0) + 4;
  $92 = HEAP32[$5 >> 2] | 0;
  HEAP32[$6 >> 2] = 1;
  $93 = HEAP32[$6 >> 2] | 0;
  $94 = HEAP32[$92 >> 2] | 0;
  HEAP32[$92 >> 2] = $94 + $93;
  HEAP32[$7 >> 2] = $94 + $93;
  STACKTOP = sp;
  return;
 }
}

function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pre$phi69Z2D = 0, $100 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $61 = 0, $68 = 0, $69 = 0, $78 = 0, $86 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $99 = 0, label = 0;
 $2 = $0 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $0 + 100 | 0;
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1;
  $11 = HEAPU8[$3 >> 0] | 0;
 } else $11 = ___shgetc($0) | 0;
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1;
   $14 = HEAP32[$2 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1;
    $22 = HEAPU8[$14 >> 0] | 0;
   } else $22 = ___shgetc($0) | 0;
   $21 = $22 + -48 | 0;
   if (($1 | 0) != 0 & $21 >>> 0 > 9) if (!(HEAP32[$4 >> 2] | 0)) {
    $100 = 0;
    $99 = -2147483648;
   } else {
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
    label = 14;
   } else {
    $$0 = $13;
    $$049 = $22;
    $$pre$phi69Z2D = $21;
    label = 12;
   }
   break;
  }
 default:
  {
   $$0 = 0;
   $$049 = $11;
   $$pre$phi69Z2D = $11 + -48 | 0;
   label = 12;
  }
 }
 if ((label | 0) == 12) if ($$pre$phi69Z2D >>> 0 > 9) label = 14; else {
  $$04858 = 0;
  $$157 = $$049;
  while (1) {
   $$04858 = $$157 + -48 + ($$04858 * 10 | 0) | 0;
   $36 = HEAP32[$2 >> 2] | 0;
   if ($36 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $36 + 1;
    $44 = HEAPU8[$36 >> 0] | 0;
   } else $44 = ___shgetc($0) | 0;
   $43 = $44 + -48 | 0;
   if (!($43 >>> 0 < 10 & ($$04858 | 0) < 214748364)) break; else $$157 = $44;
  }
  $49 = (($$04858 | 0) < 0) << 31 >> 31;
  if ($43 >>> 0 < 10) {
   $$251 = $44;
   $51 = $$04858;
   $52 = $49;
   while (1) {
    $53 = ___muldi3($51 | 0, $52 | 0, 10, 0) | 0;
    $54 = tempRet0;
    $57 = _i64Add($$251 | 0, (($$251 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
    $51 = _i64Add($57 | 0, tempRet0 | 0, $53 | 0, $54 | 0) | 0;
    $52 = tempRet0;
    $61 = HEAP32[$2 >> 2] | 0;
    if ($61 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $61 + 1;
     $69 = HEAPU8[$61 >> 0] | 0;
    } else $69 = ___shgetc($0) | 0;
    $68 = $69 + -48 | 0;
    if (!($68 >>> 0 < 10 & (($52 | 0) < 21474836 | ($52 | 0) == 21474836 & $51 >>> 0 < 2061584302))) break; else $$251 = $69;
   }
   if ($68 >>> 0 < 10) {
    do {
     $78 = HEAP32[$2 >> 2] | 0;
     if ($78 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$2 >> 2] = $78 + 1;
      $86 = HEAPU8[$78 >> 0] | 0;
     } else $86 = ___shgetc($0) | 0;
    } while (($86 + -48 | 0) >>> 0 < 10);
    $93 = $51;
    $94 = $52;
   } else {
    $93 = $51;
    $94 = $52;
   }
  } else {
   $93 = $$04858;
   $94 = $49;
  }
  if (HEAP32[$4 >> 2] | 0) HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $92 = ($$0 | 0) == 0;
  $95 = _i64Subtract(0, 0, $93 | 0, $94 | 0) | 0;
  $100 = $92 ? $93 : $95;
  $99 = $92 ? $94 : tempRet0;
 }
 if ((label | 0) == 14) if (!(HEAP32[$4 >> 2] | 0)) {
  $100 = 0;
  $99 = -2147483648;
 } else {
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1;
  $100 = 0;
  $99 = -2147483648;
 }
 tempRet0 = $99;
 return $100 | 0;
}

function __ZNSt3__210__stdinbufIcE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $6 = 0, $61 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 52 | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0;
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1;
  $15 = $0 + 32 | 0;
  $$052 = 0;
  while (1) {
   if ($$052 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0;
   if (($18 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18;
   $$052 = $$052 + 1 | 0;
  }
  if ((label | 0) == 8) $$10 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$0 + 53 >> 0] | 0)) {
    $28 = $0 + 40 | 0;
    $29 = $0 + 36 | 0;
    $30 = $3 + 1 | 0;
    $$048 = $$sroa$speculated;
    L11 : while (1) {
     $31 = HEAP32[$28 >> 2] | 0;
     $32 = $31;
     $34 = HEAP32[$32 >> 2] | 0;
     $37 = HEAP32[$32 + 4 >> 2] | 0;
     $38 = HEAP32[$29 >> 2] | 0;
     $39 = $2 + $$048 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] & 15]($38, $31, $2, $39, $4, $3, $30, $5) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $45 = HEAP32[$28 >> 2] | 0;
     HEAP32[$45 >> 2] = $34;
     HEAP32[$45 + 4 >> 2] = $37;
     if (($$048 | 0) == 8) {
      label = 17;
      break;
     }
     $51 = _getc(HEAP32[$15 >> 2] | 0) | 0;
     if (($51 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$39 >> 0] = $51;
     $$048 = $$048 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0; else if ((label | 0) == 17) {
     $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break;
    }
    $$351 = $$048;
    label = 19;
   } else {
    HEAP8[$3 >> 0] = HEAP8[$2 >> 0] | 0;
    $$351 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($1) HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0; else {
     $$0 = $$351;
     do {
      if (($$0 | 0) <= 0) break L23;
      $$0 = $$0 + -1 | 0;
      $61 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$2 + $$0 >> 0] | 0) | 0;
     } while ((_ungetc($61, HEAP32[$15 >> 2] | 0) | 0) != -1);
     $$9 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
     break L21;
    } while (0);
    $$9 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$3 >> 0] | 0) | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = $0 + 48 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   HEAP8[$6 >> 0] = 0;
   $$11 = $10;
  } else $$11 = $10;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function _lzma_vli_decode($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $111 = 0, $12 = 0, $16 = 0, $28 = 0, $36 = 0, $45 = 0, $5 = 0, $59 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $79 = 0, $8 = 0, $81 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 $12 = sp + 28 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = 0;
 do if (!(HEAP32[$7 >> 2] | 0)) {
  HEAP32[$7 >> 2] = $11;
  $16 = HEAP32[$6 >> 2] | 0;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = 0;
  if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = 9;
   $111 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $111 | 0;
  }
 } else {
  if (!(HEAP32[HEAP32[$7 >> 2] >> 2] | 0)) {
   $28 = HEAP32[$6 >> 2] | 0;
   HEAP32[$28 >> 2] = 0;
   HEAP32[$28 + 4 >> 2] = 0;
  }
  if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 < 9) {
   $36 = HEAP32[$6 >> 2] | 0;
   $45 = _bitshift64Lshr(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) * 7 | 0) | 0;
   if (!(($45 | 0) != 0 | (tempRet0 | 0) != 0)) {
    if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >>> 0 < (HEAP32[$10 >> 2] | 0) >>> 0) break;
    HEAP32[$5 >> 2] = 10;
    $111 = HEAP32[$5 >> 2] | 0;
    STACKTOP = sp;
    return $111 | 0;
   }
  }
  HEAP32[$5 >> 2] = 11;
  $111 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 } while (0);
 while (1) {
  HEAP8[$12 >> 0] = HEAP8[(HEAP32[$8 >> 2] | 0) + (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >> 0] | 0;
  $59 = HEAP32[$9 >> 2] | 0;
  HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1;
  $64 = (HEAPU8[$12 >> 0] | 0) & 127;
  $70 = _bitshift64Shl($64 | 0, (($64 | 0) < 0) << 31 >> 31 | 0, (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) * 7 | 0) | 0;
  $72 = HEAP32[$6 >> 2] | 0;
  $73 = $72;
  $79 = _i64Add(HEAP32[$73 >> 2] | 0, HEAP32[$73 + 4 >> 2] | 0, $70 | 0, tempRet0 | 0) | 0;
  $81 = $72;
  HEAP32[$81 >> 2] = $79;
  HEAP32[$81 + 4 >> 2] = tempRet0;
  $85 = HEAP32[$7 >> 2] | 0;
  HEAP32[$85 >> 2] = (HEAP32[$85 >> 2] | 0) + 1;
  if (!((HEAPU8[$12 >> 0] | 0) & 128)) {
   label = 13;
   break;
  }
  if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) == 9) {
   label = 18;
   break;
  }
  if ((HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >>> 0 >= (HEAP32[$10 >> 2] | 0) >>> 0) {
   label = 20;
   break;
  }
 }
 if ((label | 0) == 13) {
  if (!(HEAPU8[$12 >> 0] | 0)) if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >>> 0 > 1) {
   HEAP32[$5 >> 2] = 9;
   $111 = HEAP32[$5 >> 2] | 0;
   STACKTOP = sp;
   return $111 | 0;
  }
  HEAP32[$5 >> 2] = (HEAP32[$7 >> 2] | 0) == ($11 | 0) ? 0 : 1;
  $111 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 } else if ((label | 0) == 18) {
  HEAP32[$5 >> 2] = 9;
  $111 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 } else if ((label | 0) == 20) {
  HEAP32[$5 >> 2] = (HEAP32[$7 >> 2] | 0) == ($11 | 0) ? 9 : 0;
  $111 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $111 | 0;
 }
 return 0;
}

function __ZNSt3__210__stdinbufIwE9__getcharEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$048 = 0, $$052 = 0, $$10 = 0, $$11 = 0, $$351 = 0, $$9 = 0, $$sroa$speculated = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $46 = 0, $5 = 0, $52 = 0, $6 = 0, $64 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $6 = $0 + 52 | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  $13 = HEAP32[$0 + 44 >> 2] | 0;
  $$sroa$speculated = ($13 | 0) > 1 ? $13 : 1;
  $15 = $0 + 32 | 0;
  $$052 = 0;
  while (1) {
   if ($$052 >>> 0 >= $$sroa$speculated >>> 0) {
    label = 9;
    break;
   }
   $18 = _getc(HEAP32[$15 >> 2] | 0) | 0;
   if (($18 | 0) == -1) {
    label = 8;
    break;
   }
   HEAP8[$2 + $$052 >> 0] = $18;
   $$052 = $$052 + 1 | 0;
  }
  if ((label | 0) == 8) $$10 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else if ((label | 0) == 9) {
   do if (!(HEAP8[$0 + 53 >> 0] | 0)) {
    $29 = $0 + 40 | 0;
    $30 = $0 + 36 | 0;
    $31 = $3 + 4 | 0;
    $$048 = $$sroa$speculated;
    L11 : while (1) {
     $32 = HEAP32[$29 >> 2] | 0;
     $33 = $32;
     $35 = HEAP32[$33 >> 2] | 0;
     $38 = HEAP32[$33 + 4 >> 2] | 0;
     $39 = HEAP32[$30 >> 2] | 0;
     $40 = $2 + $$048 | 0;
     switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$39 >> 2] | 0) + 16 >> 2] & 15]($39, $32, $2, $40, $4, $3, $31, $5) | 0) {
     case 3:
      {
       label = 15;
       break L11;
       break;
      }
     case 2:
      {
       label = 17;
       break L11;
       break;
      }
     case 1:
      break;
     default:
      break L11;
     }
     $46 = HEAP32[$29 >> 2] | 0;
     HEAP32[$46 >> 2] = $35;
     HEAP32[$46 + 4 >> 2] = $38;
     if (($$048 | 0) == 8) {
      label = 17;
      break;
     }
     $52 = _getc(HEAP32[$15 >> 2] | 0) | 0;
     if (($52 | 0) == -1) {
      label = 17;
      break;
     }
     HEAP8[$40 >> 0] = $52;
     $$048 = $$048 + 1 | 0;
    }
    if ((label | 0) == 15) HEAP32[$3 >> 2] = HEAP8[$2 >> 0]; else if ((label | 0) == 17) {
     $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break;
    }
    $$351 = $$048;
    label = 19;
   } else {
    HEAP32[$3 >> 2] = HEAP8[$2 >> 0];
    $$351 = $$sroa$speculated;
    label = 19;
   } while (0);
   L21 : do if ((label | 0) == 19) {
    L23 : do if ($1) HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0; else {
     $$0 = $$351;
     do {
      if (($$0 | 0) <= 0) break L23;
      $$0 = $$0 + -1 | 0;
      $64 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP8[$2 + $$0 >> 0] | 0) | 0;
     } while ((_ungetc($64, HEAP32[$15 >> 2] | 0) | 0) != -1);
     $$9 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
     break L21;
    } while (0);
    $$9 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$3 >> 2] | 0) | 0;
   } while (0);
   $$10 = $$9;
  }
  $$11 = $$10;
 } else {
  $9 = $0 + 48 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($1) {
   HEAP32[$9 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   HEAP8[$6 >> 0] = 0;
   $$11 = $10;
  } else $$11 = $10;
 }
 STACKTOP = sp;
 return $$11 | 0;
}

function _lzma_simple_coder_init($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, $42 = 0, $58 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $8 = sp + 84 | 0;
 $9 = sp + 80 | 0;
 $10 = sp + 76 | 0;
 $11 = sp + 72 | 0;
 $12 = sp + 68 | 0;
 $13 = sp + 64 | 0;
 $14 = sp + 60 | 0;
 $15 = sp + 56 | 0;
 $16 = sp + 88 | 0;
 $17 = sp + 52 | 0;
 $18 = sp;
 $19 = sp + 48 | 0;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAP32[$13 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP8[$16 >> 0] = $7 & 1;
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 do if (!(HEAP32[$17 >> 2] | 0)) {
  HEAP32[$17 >> 2] = _lzma_alloc(80 + (HEAP32[$14 >> 2] << 1) | 0, HEAP32[$10 >> 2] | 0) | 0;
  if (!(HEAP32[$17 >> 2] | 0)) {
   HEAP32[$8 >> 2] = 5;
   $105 = HEAP32[$8 >> 2] | 0;
   STACKTOP = sp;
   return $105 | 0;
  }
  HEAP32[HEAP32[$9 >> 2] >> 2] = HEAP32[$17 >> 2];
  HEAP32[(HEAP32[$9 >> 2] | 0) + 20 >> 2] = 1;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 24 >> 2] = 54;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 40 >> 2] = 11;
  $40 = HEAP32[$17 >> 2] | 0;
  dest = $18;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $42 = $18 + 8 | 0;
  HEAP32[$42 >> 2] = -1;
  HEAP32[$42 + 4 >> 2] = -1;
  HEAP32[$18 + 16 >> 2] = 0;
  dest = $40;
  src = $18;
  stop = dest + 48 | 0;
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  HEAP32[(HEAP32[$17 >> 2] | 0) + 52 >> 2] = HEAP32[$12 >> 2];
  HEAP32[(HEAP32[$17 >> 2] | 0) + 64 >> 2] = HEAP32[$14 >> 2] << 1;
  if ((HEAP32[$13 >> 2] | 0) >>> 0 <= 0) {
   HEAP32[(HEAP32[$17 >> 2] | 0) + 56 >> 2] = 0;
   break;
  }
  $58 = _lzma_alloc(HEAP32[$13 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$17 >> 2] | 0) + 56 >> 2] = $58;
  if (!(HEAP32[(HEAP32[$17 >> 2] | 0) + 56 >> 2] | 0)) {
   HEAP32[$8 >> 2] = 5;
   $105 = HEAP32[$8 >> 2] | 0;
   STACKTOP = sp;
   return $105 | 0;
  }
 } while (0);
 if (HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0) {
  HEAP32[$19 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[$17 >> 2] | 0) + 60 >> 2] = HEAP32[HEAP32[$19 >> 2] >> 2];
  if (HEAP32[(HEAP32[$17 >> 2] | 0) + 60 >> 2] & (HEAP32[$15 >> 2] | 0) - 1 | 0) {
   HEAP32[$8 >> 2] = 8;
   $105 = HEAP32[$8 >> 2] | 0;
   STACKTOP = sp;
   return $105 | 0;
  }
 } else HEAP32[(HEAP32[$17 >> 2] | 0) + 60 >> 2] = 0;
 HEAP8[(HEAP32[$17 >> 2] | 0) + 49 >> 0] = HEAP8[$16 >> 0] & 1;
 HEAP8[(HEAP32[$17 >> 2] | 0) + 48 >> 0] = 0;
 HEAP32[(HEAP32[$17 >> 2] | 0) + 68 >> 2] = 0;
 HEAP32[(HEAP32[$17 >> 2] | 0) + 72 >> 2] = 0;
 HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] = 0;
 HEAP32[$8 >> 2] = _lzma_next_filter_init(HEAP32[$17 >> 2] | 0, HEAP32[$10 >> 2] | 0, (HEAP32[$11 >> 2] | 0) + 16 | 0) | 0;
 $105 = HEAP32[$8 >> 2] | 0;
 STACKTOP = sp;
 return $105 | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$2 = 0, $15 = 0, $18 = 0, $25 = 0, $30 = 0, $34 = 0, $43 = 0, $48 = 0, $50 = 0, $56 = 0, $60 = 0, $61 = 0, $65 = 0, $75 = 0, $84 = 0, $91 = 0, $96 = 0, $98 = 0;
 L1 : do if (($0 | 0) == ($5 | 0)) if (!(HEAP8[$1 >> 0] | 0)) $$2 = -1; else {
  HEAP8[$1 >> 0] = 0;
  $15 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $15 + 1;
  HEAP8[$15 >> 0] = 46;
  $18 = HEAP8[$7 + 11 >> 0] | 0;
  if (!(($18 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $18 & 255) | 0)) $$2 = 0; else {
   $25 = HEAP32[$9 >> 2] | 0;
   if (($25 - $8 | 0) < 160) {
    $30 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $25 + 4;
    HEAP32[$25 >> 2] = $30;
    $$2 = 0;
   } else $$2 = 0;
  }
 } else {
  if (($0 | 0) == ($6 | 0)) {
   $34 = HEAP8[$7 + 11 >> 0] | 0;
   if (($34 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $34 & 255) | 0) {
    if (!(HEAP8[$1 >> 0] | 0)) {
     $$2 = -1;
     break;
    }
    $43 = HEAP32[$9 >> 2] | 0;
    if (($43 - $8 | 0) >= 160) {
     $$2 = 0;
     break;
    }
    $48 = HEAP32[$10 >> 2] | 0;
    HEAP32[$9 >> 2] = $43 + 4;
    HEAP32[$43 >> 2] = $48;
    HEAP32[$10 >> 2] = 0;
    $$2 = 0;
    break;
   }
  }
  $50 = $11 + 128 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $11 + ($$0$i$idx << 2) | 0;
   if (($$0$i$idx | 0) == 32) {
    $$0$lcssa$i = $50;
    break;
   }
   if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $56 = $$0$lcssa$i - $11 | 0;
  if (($56 | 0) > 124) $$2 = -1; else {
   $60 = HEAP8[40416 + ($56 >> 2) >> 0] | 0;
   $61 = $56 + -88 | 0;
   switch ($61 >>> 2 | $61 << 30 | 0) {
   case 2:
   case 3:
    {
     $65 = HEAP32[$4 >> 2] | 0;
     if (($65 | 0) != ($3 | 0)) if ((HEAP8[$65 + -1 >> 0] & 95) != (HEAP8[$2 >> 0] & 127)) {
      $$2 = -1;
      break L1;
     }
     HEAP32[$4 >> 2] = $65 + 1;
     HEAP8[$65 >> 0] = $60;
     $$2 = 0;
     break L1;
     break;
    }
   case 1:
   case 0:
    {
     HEAP8[$2 >> 0] = 80;
     break;
    }
   default:
    {
     $75 = $60 & 95;
     if (($75 | 0) == (HEAP8[$2 >> 0] | 0)) {
      HEAP8[$2 >> 0] = $75 | 128;
      if (HEAP8[$1 >> 0] | 0) {
       HEAP8[$1 >> 0] = 0;
       $84 = HEAP8[$7 + 11 >> 0] | 0;
       if (($84 << 24 >> 24 < 0 ? HEAP32[$7 + 4 >> 2] | 0 : $84 & 255) | 0) {
        $91 = HEAP32[$9 >> 2] | 0;
        if (($91 - $8 | 0) < 160) {
         $96 = HEAP32[$10 >> 2] | 0;
         HEAP32[$9 >> 2] = $91 + 4;
         HEAP32[$91 >> 2] = $96;
        }
       }
      }
     }
    }
   }
   $98 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $98 + 1;
   HEAP8[$98 >> 0] = $60;
   if (($56 | 0) > 84) $$2 = 0; else {
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 1;
    $$2 = 0;
   }
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 116 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 84 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 60 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 133 | 0;
 $23 = sp + 48 | 0;
 $24 = sp + 44 | 0;
 $25 = sp + 40 | 0;
 $26 = sp + 36 | 0;
 $27 = sp + 32 | 0;
 $28 = sp + 28 | 0;
 $30 = sp + 24 | 0;
 $31 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 HEAP32[$34 >> 2] = $0;
 $35 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $35;
 $36 = HEAP32[$33 >> 2] | 0;
 $38 = HEAP32[$36 + 4 >> 2] | 0;
 HEAP32[$30 >> 2] = $36;
 HEAP32[$31 >> 2] = $38;
 $39 = HEAP32[$30 >> 2] | 0;
 $40 = HEAP32[$31 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 132 >> 0] | 0;
 HEAP32[$27 >> 2] = $39;
 HEAP32[$28 >> 2] = $40;
 $41 = HEAP32[$27 >> 2] | 0;
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$41 + 8 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $41;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 12;
  HEAP32[$24 >> 2] = (HEAP32[$25 >> 2] | 0) + 4;
  $51 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
  $52 = $41 + 8 | 0;
  $54 = (HEAP32[$52 >> 2] | 0) + -8 | 0;
  HEAP32[$52 >> 2] = $54;
  HEAP32[$23 >> 2] = $54;
  $55 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $51;
  HEAP32[$21 >> 2] = $55;
  $56 = HEAP32[$20 >> 2] | 0;
  $57 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $56;
  HEAP32[$18 >> 2] = $57;
  $59 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $59;
 }
 if (!(HEAP32[$35 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$14 >> 2] = $35;
 HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 12;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 $67 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
 $68 = HEAP32[$35 >> 2] | 0;
 HEAP32[$4 >> 2] = $35;
 $69 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $69;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $79 = ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) - (HEAP32[$69 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[$9 >> 2] = $67;
 HEAP32[$10 >> 2] = $68;
 HEAP32[$11 >> 2] = $79;
 $81 = HEAP32[$10 >> 2] | 0;
 $82 = HEAP32[$11 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = $81;
 HEAP32[$8 >> 2] = $82;
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 __ZdlPv(HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim7Article7getDataEyy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $25 = 0, $29 = 0, $34 = 0, $37 = 0, $38 = 0, $42 = 0, $43 = 0, $45 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy2 = sp + 48 | 0;
 $$byval_copy1 = sp + 40 | 0;
 $$byval_copy = sp + 32 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $8 = sp + 96 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 8 | 0;
 $20 = sp;
 HEAP32[$10 >> 2] = $1;
 $21 = $11;
 HEAP32[$21 >> 2] = $2;
 HEAP32[$21 + 4 >> 2] = $3;
 $25 = $12;
 HEAP32[$25 >> 2] = $4;
 HEAP32[$25 + 4 >> 2] = $5;
 $29 = HEAP32[$10 >> 2] | 0;
 __ZNK3zim7Article10getClusterEv($13, $29);
 HEAP32[$9 >> 2] = $13;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 if (!(HEAP32[HEAP32[$8 >> 2] >> 2] | 0)) {
  __ZN3zim4BlobC2Ev($0);
  HEAP32[$16 >> 2] = 1;
  __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($13);
  STACKTOP = sp;
  return;
 }
 HEAP32[$7 >> 2] = $13;
 $37 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0;
 __THREW__ = 0;
 invoke_vii(76, $18 | 0, $29 | 0);
 $38 = __THREW__;
 __THREW__ = 0;
 if ($38 & 1) {
  $34 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$14 >> 2] = $34;
  HEAP32[$15 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($13);
  $63 = HEAP32[$14 >> 2] | 0;
  $64 = HEAP32[$15 >> 2] | 0;
  ___resumeException($63 | 0);
 }
 HEAP32[$6 >> 2] = $18;
 __THREW__ = 0;
 $42 = invoke_ii(91, HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0;
 $43 = __THREW__;
 __THREW__ = 0;
 if (!($43 & 1)) {
  HEAP32[$17 >> 2] = $42;
  $45 = $11;
  __THREW__ = 0;
  invoke_viii(16, $19 | 0, HEAP32[$45 >> 2] | 0, HEAP32[$45 + 4 >> 2] | 0);
  $51 = __THREW__;
  __THREW__ = 0;
  if (!($51 & 1)) {
   $53 = $12;
   __ZN3zim7zsize_tC2Ey($20, HEAP32[$53 >> 2] | 0, HEAP32[$53 + 4 >> 2] | 0);
   __THREW__ = 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$17 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
   HEAP32[$$byval_copy2 >> 2] = HEAP32[$20 >> 2];
   HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
   invoke_viiiii(4, $0 | 0, $37 | 0, $$byval_copy | 0, $$byval_copy1 | 0, $$byval_copy2 | 0);
   $59 = __THREW__;
   __THREW__ = 0;
   if (!($59 & 1)) {
    __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($18);
    HEAP32[$16 >> 2] = 1;
    __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($13);
    STACKTOP = sp;
    return;
   }
  }
 }
 $61 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$14 >> 2] = $61;
 HEAP32[$15 >> 2] = tempRet0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($18);
 __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($13);
 $63 = HEAP32[$14 >> 2] | 0;
 $64 = HEAP32[$15 >> 2] | 0;
 ___resumeException($63 | 0);
}

function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $6 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $1 = sp + 128 | 0;
 $2 = sp + 124 | 0;
 $3 = sp + 120 | 0;
 $4 = sp + 116 | 0;
 $5 = sp + 112 | 0;
 $6 = sp + 108 | 0;
 $7 = sp + 104 | 0;
 $8 = sp + 100 | 0;
 $9 = sp + 96 | 0;
 $10 = sp + 92 | 0;
 $11 = sp + 88 | 0;
 $12 = sp + 84 | 0;
 $13 = sp + 80 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 72 | 0;
 $16 = sp + 68 | 0;
 $17 = sp + 64 | 0;
 $18 = sp + 60 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 56 | 0;
 $21 = sp + 52 | 0;
 $22 = sp + 133 | 0;
 $23 = sp + 48 | 0;
 $24 = sp + 44 | 0;
 $25 = sp + 40 | 0;
 $26 = sp + 36 | 0;
 $27 = sp + 32 | 0;
 $28 = sp + 28 | 0;
 $30 = sp + 24 | 0;
 $31 = sp + 20 | 0;
 $33 = sp + 16 | 0;
 $34 = sp + 12 | 0;
 HEAP32[$34 >> 2] = $0;
 $35 = HEAP32[$34 >> 2] | 0;
 HEAP32[$33 >> 2] = $35;
 $36 = HEAP32[$33 >> 2] | 0;
 $38 = HEAP32[$36 + 4 >> 2] | 0;
 HEAP32[$30 >> 2] = $36;
 HEAP32[$31 >> 2] = $38;
 $39 = HEAP32[$30 >> 2] | 0;
 $40 = HEAP32[$31 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 132 >> 0] | 0;
 HEAP32[$27 >> 2] = $39;
 HEAP32[$28 >> 2] = $40;
 $41 = HEAP32[$27 >> 2] | 0;
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$41 + 8 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $41;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 12;
  HEAP32[$24 >> 2] = (HEAP32[$25 >> 2] | 0) + 4;
  $51 = HEAP32[HEAP32[$24 >> 2] >> 2] | 0;
  $52 = $41 + 8 | 0;
  $54 = (HEAP32[$52 >> 2] | 0) + -1 | 0;
  HEAP32[$52 >> 2] = $54;
  HEAP32[$23 >> 2] = $54;
  $55 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $51;
  HEAP32[$21 >> 2] = $55;
  $56 = HEAP32[$20 >> 2] | 0;
  $57 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $56;
  HEAP32[$18 >> 2] = $57;
  $59 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $59;
 }
 if (!(HEAP32[$35 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$14 >> 2] = $35;
 HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 12;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 4;
 $67 = HEAP32[HEAP32[$12 >> 2] >> 2] | 0;
 $68 = HEAP32[$35 >> 2] | 0;
 HEAP32[$4 >> 2] = $35;
 $69 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $69;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $78 = (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) - (HEAP32[$69 >> 2] | 0) | 0;
 HEAP32[$9 >> 2] = $67;
 HEAP32[$10 >> 2] = $68;
 HEAP32[$11 >> 2] = $78;
 $80 = HEAP32[$10 >> 2] | 0;
 $81 = HEAP32[$11 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = $80;
 HEAP32[$8 >> 2] = $81;
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 __ZdlPv(HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 52 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 44 | 0;
 $11 = sp;
 $12 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 76 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 HEAP32[$19 >> 2] = $0;
 HEAP32[$20 >> 2] = $1;
 HEAP32[$21 >> 2] = $2;
 $23 = HEAP32[$19 >> 2] | 0;
 HEAP32[$15 >> 2] = $23;
 HEAP32[$16 >> 2] = 0;
 HEAP32[$17 >> 2] = 0;
 HEAP32[$18 >> 2] = 0;
 $24 = HEAP32[$15 >> 2] | 0;
 HEAP32[$24 + 8 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$24 + 12 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$24 + 16 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$3 >> 2] = $23;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$5 >> 2] = 0;
 $31 = HEAP32[$3 >> 2] | 0;
 $32 = HEAP32[$4 >> 2] | 0;
 HEAP32[$31 + 24 >> 2] = $32;
 HEAP32[$31 + 20 >> 2] = $32;
 HEAP32[$31 + 28 >> 2] = HEAP32[$5 >> 2];
 if (HEAP8[$23 + 96 >> 0] & 1) {
  $41 = HEAP32[$23 + 32 >> 2] | 0;
  if ($41 | 0) __ZdaPv($41);
 }
 if (HEAP8[$23 + 97 >> 0] & 1) {
  $47 = HEAP32[$23 + 56 >> 2] | 0;
  if ($47 | 0) __ZdaPv($47);
 }
 HEAP32[$23 + 52 >> 2] = HEAP32[$21 >> 2];
 do if ((HEAP32[$23 + 52 >> 2] | 0) >>> 0 > 8) if (HEAP8[$23 + 98 >> 0] & 1 & (HEAP32[$20 >> 2] | 0) != 0) {
  HEAP32[$23 + 32 >> 2] = HEAP32[$20 >> 2];
  HEAP8[$23 + 96 >> 0] = 0;
  break;
 } else {
  HEAP32[$23 + 32 >> 2] = __Znam(HEAP32[$23 + 52 >> 2] | 0) | 0;
  HEAP8[$23 + 96 >> 0] = 1;
  break;
 } else {
  HEAP32[$23 + 32 >> 2] = $23 + 44;
  HEAP32[$23 + 52 >> 2] = 8;
  HEAP8[$23 + 96 >> 0] = 0;
 } while (0);
 if (HEAP8[$23 + 98 >> 0] & 1) {
  HEAP32[$23 + 60 >> 2] = 0;
  HEAP32[$23 + 56 >> 2] = 0;
  HEAP8[$23 + 97 >> 0] = 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 HEAP32[$22 >> 2] = 8;
 HEAP32[$12 >> 2] = $21;
 HEAP32[$13 >> 2] = $22;
 $74 = HEAP32[$12 >> 2] | 0;
 $75 = HEAP32[$13 >> 2] | 0;
 HEAP8[$11 >> 0] = HEAP8[$14 >> 0] | 0;
 HEAP32[$9 >> 2] = $74;
 HEAP32[$10 >> 2] = $75;
 $76 = HEAP32[$9 >> 2] | 0;
 $77 = HEAP32[$10 >> 2] | 0;
 HEAP32[$6 >> 2] = $11;
 HEAP32[$7 >> 2] = $76;
 HEAP32[$8 >> 2] = $77;
 HEAP32[$23 + 60 >> 2] = HEAP32[((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) < (HEAP32[HEAP32[$8 >> 2] >> 2] | 0) ? HEAP32[$10 >> 2] | 0 : HEAP32[$9 >> 2] | 0) >> 2];
 if (HEAP32[$20 >> 2] | 0) if ((HEAP32[$23 + 60 >> 2] | 0) >>> 0 >= 8) {
  HEAP32[$23 + 56 >> 2] = HEAP32[$20 >> 2];
  HEAP8[$23 + 97 >> 0] = 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 HEAP32[$23 + 56 >> 2] = __Znam(HEAP32[$23 + 60 >> 2] | 0) | 0;
 HEAP8[$23 + 97 >> 0] = 1;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp;
 $20 = sp + 44 | 0;
 $21 = sp + 40 | 0;
 $22 = sp + 120 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 HEAP32[$31 >> 2] = $0;
 $32 = HEAP32[$31 >> 2] | 0;
 if (!(HEAP32[$32 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$30 >> 2] = $32;
 $35 = HEAP32[$30 >> 2] | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 HEAP32[$27 >> 2] = $35;
 HEAP32[$28 >> 2] = $36;
 $37 = HEAP32[$27 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$37 + 4 >> 2];
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$29 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $37;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  $46 = HEAP32[$24 >> 2] | 0;
  $48 = (HEAP32[$29 >> 2] | 0) + -12 | 0;
  HEAP32[$29 >> 2] = $48;
  HEAP32[$23 >> 2] = $48;
  $49 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $46;
  HEAP32[$21 >> 2] = $49;
  $50 = HEAP32[$20 >> 2] | 0;
  $51 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $50;
  HEAP32[$18 >> 2] = $51;
  $53 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $53;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(HEAP32[$16 >> 2] | 0);
 }
 HEAP32[$37 + 4 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$14 >> 2] = $32;
 HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 $60 = HEAP32[$12 >> 2] | 0;
 $61 = HEAP32[$32 >> 2] | 0;
 HEAP32[$4 >> 2] = $32;
 $62 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $62;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $72 = ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) - (HEAP32[$62 >> 2] | 0) | 0) / 12 | 0;
 HEAP32[$9 >> 2] = $60;
 HEAP32[$10 >> 2] = $61;
 HEAP32[$11 >> 2] = $72;
 $74 = HEAP32[$10 >> 2] | 0;
 $75 = HEAP32[$11 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = $74;
 HEAP32[$8 >> 2] = $75;
 HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
 __ZdlPv(HEAP32[$5 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _lzma_block_unpadded_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $103 = 0, $108 = 0, $114 = 0, $118 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $2 = 0, $24 = 0, $29 = 0, $3 = 0, $37 = 0, $48 = 0, $61 = 0, $67 = 0, $76 = 0, $82 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 do if (HEAP32[$2 >> 2] | 0) if ((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 <= 1) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= 8) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 1024) if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] & 3)) {
  $24 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
  $29 = HEAP32[$24 + 4 >> 2] | 0;
  if (!($29 >>> 0 < 2147483647 | ($29 | 0) == 2147483647 & (HEAP32[$24 >> 2] | 0) >>> 0 <= 4294967295)) {
   $37 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
   if (!((HEAP32[$37 >> 2] | 0) == -1 ? (HEAP32[$37 + 4 >> 2] | 0) == -1 : 0)) break;
  }
  $48 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
  if (!((HEAP32[$48 >> 2] | 0) == 0 & (HEAP32[$48 + 4 >> 2] | 0) == 0)) if ((HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) >>> 0 <= 15) {
   $67 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
   if ((HEAP32[$67 >> 2] | 0) == -1 ? (HEAP32[$67 + 4 >> 2] | 0) == -1 : 0) {
    $76 = $1;
    HEAP32[$76 >> 2] = -1;
    HEAP32[$76 + 4 >> 2] = -1;
    $128 = $1;
    $129 = $128;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $128 + 4 | 0;
    $132 = $131;
    $133 = HEAP32[$132 >> 2] | 0;
    tempRet0 = $133;
    STACKTOP = sp;
    return $130 | 0;
   }
   $82 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
   $91 = _i64Add(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0, 0) | 0;
   $92 = tempRet0;
   $97 = _i64Add($91 | 0, $92 | 0, _lzma_check_size(HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) | 0, 0) | 0;
   $99 = $3;
   HEAP32[$99 >> 2] = $97;
   HEAP32[$99 + 4 >> 2] = tempRet0;
   $103 = $3;
   $108 = HEAP32[$103 + 4 >> 2] | 0;
   if ($108 >>> 0 > 2147483647 | ($108 | 0) == 2147483647 & (HEAP32[$103 >> 2] | 0) >>> 0 > 4294967292) {
    $114 = $1;
    HEAP32[$114 >> 2] = 0;
    HEAP32[$114 + 4 >> 2] = 0;
    $128 = $1;
    $129 = $128;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $128 + 4 | 0;
    $132 = $131;
    $133 = HEAP32[$132 >> 2] | 0;
    tempRet0 = $133;
    STACKTOP = sp;
    return $130 | 0;
   } else {
    $118 = $3;
    $123 = HEAP32[$118 + 4 >> 2] | 0;
    $124 = $1;
    HEAP32[$124 >> 2] = HEAP32[$118 >> 2];
    HEAP32[$124 + 4 >> 2] = $123;
    $128 = $1;
    $129 = $128;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $128 + 4 | 0;
    $132 = $131;
    $133 = HEAP32[$132 >> 2] | 0;
    tempRet0 = $133;
    STACKTOP = sp;
    return $130 | 0;
   }
  }
 } while (0);
 $61 = $1;
 HEAP32[$61 >> 2] = 0;
 HEAP32[$61 + 4 >> 2] = 0;
 $128 = $1;
 $129 = $128;
 $130 = HEAP32[$129 >> 2] | 0;
 $131 = $128 + 4 | 0;
 $132 = $131;
 $133 = HEAP32[$132 >> 2] | 0;
 tempRet0 = $133;
 STACKTOP = sp;
 return $130 | 0;
}

function _lzma_stream_decoder_init($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $121 = 0, $46 = 0, $48 = 0, $5 = 0, $55 = 0, $6 = 0, $60 = 0, $65 = 0, $66 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $82 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $5 = sp + 72 | 0;
 $6 = sp + 68 | 0;
 $7 = sp + 64 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 60 | 0;
 $10 = sp + 56 | 0;
 $11 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 $12 = $8;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$12 + 4 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 if (27 != (HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] | 0)) _lzma_next_end(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0);
 HEAP32[(HEAP32[$6 >> 2] | 0) + 16 >> 2] = 27;
 if (HEAP32[$9 >> 2] & -32 | 0) {
  HEAP32[$5 >> 2] = 8;
  $121 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 }
 HEAP32[$10 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
 do if (!(HEAP32[$10 >> 2] | 0)) {
  HEAP32[$10 >> 2] = _lzma_alloc(1368, HEAP32[$7 >> 2] | 0) | 0;
  if (HEAP32[$10 >> 2] | 0) {
   HEAP32[HEAP32[$6 >> 2] >> 2] = HEAP32[$10 >> 2];
   HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] = 2;
   HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] = 64;
   HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] = 98;
   HEAP32[(HEAP32[$6 >> 2] | 0) + 36 >> 2] = 28;
   $46 = (HEAP32[$10 >> 2] | 0) + 8 | 0;
   dest = $11;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $48 = $11 + 8 | 0;
   HEAP32[$48 >> 2] = -1;
   HEAP32[$48 + 4 >> 2] = -1;
   HEAP32[$11 + 16 >> 2] = 0;
   dest = $46;
   src = $11;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[(HEAP32[$10 >> 2] | 0) + 304 >> 2] = 0;
   break;
  }
  HEAP32[$5 >> 2] = 5;
  $121 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $121 | 0;
 } while (0);
 $55 = $8;
 $60 = HEAP32[$55 + 4 >> 2] | 0;
 $65 = 0 > $60 >>> 0 | 0 == ($60 | 0) & 1 > (HEAP32[$55 >> 2] | 0) >>> 0;
 $66 = $8;
 $73 = $65 ? 0 : HEAP32[$66 + 4 >> 2] | 0;
 $76 = (HEAP32[$10 >> 2] | 0) + 312 | 0;
 HEAP32[$76 >> 2] = $65 ? 1 : HEAP32[$66 >> 2] | 0;
 HEAP32[$76 + 4 >> 2] = $73;
 $82 = (HEAP32[$10 >> 2] | 0) + 320 | 0;
 HEAP32[$82 >> 2] = 32768;
 HEAP32[$82 + 4 >> 2] = 0;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 328 >> 0] = (HEAP32[$9 >> 2] & 1 | 0) != 0 & 1;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 329 >> 0] = (HEAP32[$9 >> 2] & 2 | 0) != 0 & 1;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 330 >> 0] = (HEAP32[$9 >> 2] & 4 | 0) != 0 & 1;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 331 >> 0] = (HEAP32[$9 >> 2] & 16 | 0) != 0 & 1;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 332 >> 0] = (HEAP32[$9 >> 2] & 8 | 0) != 0 & 1;
 HEAP8[(HEAP32[$10 >> 2] | 0) + 333 >> 0] = 1;
 HEAP32[$5 >> 2] = _stream_decoder_reset(HEAP32[$10 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
 $121 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $121 | 0;
}

function _wcsrtombs($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05674 = 0, $$057$lcssa = 0, $$05784 = 0, $$05873 = 0, $$1 = 0, $$159 = 0, $$260$lcssa = 0, $$26083 = 0, $$278 = 0, $$3 = 0, $$361 = 0, $$477 = 0, $$5 = 0, $$pn = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $51 = 0, $6 = 0, $7 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 L1 : do if (!$0) {
  $6 = HEAP32[$1 >> 2] | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if (!$7) $$0 = 0; else {
   $$05674 = $6;
   $$05873 = 0;
   $9 = $7;
   while (1) {
    if ($9 >>> 0 > 127) {
     $11 = _wcrtomb($4, $9, 0) | 0;
     if (($11 | 0) == -1) {
      $$0 = -1;
      break L1;
     } else $$pn = $11;
    } else $$pn = 1;
    $$159 = $$pn + $$05873 | 0;
    $$05674 = $$05674 + 4 | 0;
    $9 = HEAP32[$$05674 >> 2] | 0;
    if (!$9) {
     $$0 = $$159;
     break;
    } else $$05873 = $$159;
   }
  }
 } else {
  L10 : do if ($2 >>> 0 > 3) {
   $$05784 = $0;
   $$26083 = $2;
   $18 = HEAP32[$1 >> 2] | 0;
   while (1) {
    $17 = HEAP32[$18 >> 2] | 0;
    if (($17 + -1 | 0) >>> 0 > 126) {
     if (!$17) break;
     $23 = _wcrtomb($$05784, $17, 0) | 0;
     if (($23 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     $$1 = $$05784 + $23 | 0;
     $$361 = $$26083 - $23 | 0;
     $31 = $18;
    } else {
     HEAP8[$$05784 >> 0] = $17;
     $$1 = $$05784 + 1 | 0;
     $$361 = $$26083 + -1 | 0;
     $31 = HEAP32[$1 >> 2] | 0;
    }
    $18 = $31 + 4 | 0;
    HEAP32[$1 >> 2] = $18;
    if ($$361 >>> 0 <= 3) {
     $$057$lcssa = $$1;
     $$260$lcssa = $$361;
     break L10;
    } else {
     $$05784 = $$1;
     $$26083 = $$361;
    }
   }
   HEAP8[$$05784 >> 0] = 0;
   HEAP32[$1 >> 2] = 0;
   $$0 = $2 - $$26083 | 0;
   break L1;
  } else {
   $$057$lcssa = $0;
   $$260$lcssa = $2;
  } while (0);
  if (!$$260$lcssa) $$0 = $2; else {
   $$278 = $$057$lcssa;
   $$477 = $$260$lcssa;
   $35 = HEAP32[$1 >> 2] | 0;
   while (1) {
    $34 = HEAP32[$35 >> 2] | 0;
    if (($34 + -1 | 0) >>> 0 > 126) {
     if (!$34) {
      label = 20;
      break;
     }
     $40 = _wcrtomb($4, $34, 0) | 0;
     if (($40 | 0) == -1) {
      $$0 = -1;
      break L1;
     }
     if ($$477 >>> 0 < $40 >>> 0) {
      label = 23;
      break;
     }
     _wcrtomb($$278, HEAP32[$35 >> 2] | 0, 0) | 0;
     $$3 = $$278 + $40 | 0;
     $$5 = $$477 - $40 | 0;
     $51 = $35;
    } else {
     HEAP8[$$278 >> 0] = $34;
     $$3 = $$278 + 1 | 0;
     $$5 = $$477 + -1 | 0;
     $51 = HEAP32[$1 >> 2] | 0;
    }
    $35 = $51 + 4 | 0;
    HEAP32[$1 >> 2] = $35;
    if (!$$5) {
     $$0 = $2;
     break L1;
    } else {
     $$278 = $$3;
     $$477 = $$5;
    }
   }
   if ((label | 0) == 20) {
    HEAP8[$$278 >> 0] = 0;
    HEAP32[$1 >> 2] = 0;
    $$0 = $2 - $$477 | 0;
    break;
   } else if ((label | 0) == 23) {
    $$0 = $2 - $$477 | 0;
    break;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK3zim6Buffer2asIyEET_NS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $105 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 40 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $1;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $3;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 $20 = $8 + 16 | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $4;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 $30 = $3;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $4;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 if (!($35 >>> 0 < $41 >>> 0 | (($35 | 0) == ($41 | 0) ? (HEAP32[$30 >> 2] | 0) >>> 0 < (HEAP32[$36 >> 2] | 0) >>> 0 : 0))) {
  $47 = $3;
  $53 = $4;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 50982, HEAP32[$47 >> 2] | 0, HEAP32[$47 + 4 >> 2] | 0, HEAP32[$53 >> 2] | 0, HEAP32[$53 + 4 >> 2] | 0, 50990, 54);
 }
 $59 = $1;
 $65 = _i64Add(HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0, 8, 0) | 0;
 $67 = $5;
 HEAP32[$67 >> 2] = $65;
 HEAP32[$67 + 4 >> 2] = tempRet0;
 $72 = $8 + 16 | 0;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = $6;
 HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$78 + 4 >> 2] = $77;
 $82 = $5;
 $87 = HEAP32[$82 + 4 >> 2] | 0;
 $88 = $6;
 $93 = HEAP32[$88 + 4 >> 2] | 0;
 if ($87 >>> 0 < $93 >>> 0 | (($87 | 0) == ($93 | 0) ? (HEAP32[$82 >> 2] | 0) >>> 0 <= (HEAP32[$88 >> 2] | 0) >>> 0 : 0)) {
  $111 = HEAP32[$8 >> 2] | 0;
  $112 = $111 + 8 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
  $115 = __ZN3zim16fromLittleEndianIyEET_PKc($114) | 0;
  $116 = tempRet0;
  tempRet0 = $116;
  STACKTOP = sp;
  return $115 | 0;
 }
 $99 = $5;
 $105 = $6;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51006, 51100, 50982, HEAP32[$99 >> 2] | 0, HEAP32[$99 + 4 >> 2] | 0, HEAP32[$105 >> 2] | 0, HEAP32[$105 + 4 >> 2] | 0, 50990, 55);
 $111 = HEAP32[$8 >> 2] | 0;
 $112 = $111 + 8 | 0;
 $113 = HEAP32[$112 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
 $115 = __ZN3zim16fromLittleEndianIyEET_PKc($114) | 0;
 $116 = tempRet0;
 tempRet0 = $116;
 STACKTOP = sp;
 return $115 | 0;
}

function _updatewindow($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $116 = 0, $137 = 0, $140 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2];
 if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] | 0)) {
  $26 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 32 >> 2] & 63](HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] | 0, 1 << HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2], 1) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] = $26;
  if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] | 0)) {
   HEAP32[$3 >> 2] = 1;
   $140 = HEAP32[$3 >> 2] | 0;
   STACKTOP = sp;
   return $140 | 0;
  }
 }
 if (!(HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0)) {
  HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] = 1 << HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2];
  HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] = 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] = 0;
 }
 $52 = HEAP32[$7 >> 2] | 0;
 do if ((HEAP32[$6 >> 2] | 0) >>> 0 >= (HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0) >>> 0) {
  _memcpy(HEAP32[$52 + 56 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + (0 - (HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0)) | 0, HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] = 0;
  HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2];
 } else {
  HEAP32[$8 >> 2] = (HEAP32[$52 + 44 >> 2] | 0) - (HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] | 0);
  if ((HEAP32[$8 >> 2] | 0) >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
  _memcpy((HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] | 0) + (HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] | 0) | 0, (HEAP32[$5 >> 2] | 0) + (0 - (HEAP32[$6 >> 2] | 0)) | 0, HEAP32[$8 >> 2] | 0) | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) - (HEAP32[$8 >> 2] | 0);
  if (HEAP32[$6 >> 2] | 0) {
   _memcpy(HEAP32[(HEAP32[$7 >> 2] | 0) + 56 >> 2] | 0, (HEAP32[$5 >> 2] | 0) + (0 - (HEAP32[$6 >> 2] | 0)) | 0, HEAP32[$6 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] = HEAP32[$6 >> 2];
   HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2];
   break;
  }
  $116 = (HEAP32[$7 >> 2] | 0) + 52 | 0;
  HEAP32[$116 >> 2] = (HEAP32[$116 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
  if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] | 0) == (HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0)) HEAP32[(HEAP32[$7 >> 2] | 0) + 52 >> 2] = 0;
  if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0) >>> 0) {
   $137 = (HEAP32[$7 >> 2] | 0) + 48 | 0;
   HEAP32[$137 >> 2] = (HEAP32[$137 >> 2] | 0) + (HEAP32[$8 >> 2] | 0);
  }
 } while (0);
 HEAP32[$3 >> 2] = 0;
 $140 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $140 | 0;
}

function __ZNSt3__213__vector_baseIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp;
 $20 = sp + 44 | 0;
 $21 = sp + 40 | 0;
 $22 = sp + 120 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 HEAP32[$31 >> 2] = $0;
 $32 = HEAP32[$31 >> 2] | 0;
 if (!(HEAP32[$32 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$30 >> 2] = $32;
 $35 = HEAP32[$30 >> 2] | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 HEAP32[$27 >> 2] = $35;
 HEAP32[$28 >> 2] = $36;
 $37 = HEAP32[$27 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$37 + 4 >> 2];
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$29 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $37;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  $46 = HEAP32[$24 >> 2] | 0;
  $48 = (HEAP32[$29 >> 2] | 0) + -8 | 0;
  HEAP32[$29 >> 2] = $48;
  HEAP32[$23 >> 2] = $48;
  $49 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $46;
  HEAP32[$21 >> 2] = $49;
  $50 = HEAP32[$20 >> 2] | 0;
  $51 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $50;
  HEAP32[$18 >> 2] = $51;
  $53 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $53;
 }
 HEAP32[$37 + 4 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$7 >> 2] = $32;
 HEAP32[$6 >> 2] = (HEAP32[$7 >> 2] | 0) + 8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $59 = HEAP32[$5 >> 2] | 0;
 $60 = HEAP32[$32 >> 2] | 0;
 HEAP32[$4 >> 2] = $32;
 $61 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $61;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $71 = ((HEAP32[HEAP32[$1 >> 2] >> 2] | 0) - (HEAP32[$61 >> 2] | 0) | 0) / 8 | 0;
 HEAP32[$12 >> 2] = $59;
 HEAP32[$13 >> 2] = $60;
 HEAP32[$14 >> 2] = $71;
 $73 = HEAP32[$13 >> 2] | 0;
 $74 = HEAP32[$14 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = $73;
 HEAP32[$11 >> 2] = $74;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 __ZdlPv(HEAP32[$8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $70 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $1 = sp + 116 | 0;
 $2 = sp + 112 | 0;
 $3 = sp + 108 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $14 = sp + 64 | 0;
 $15 = sp + 60 | 0;
 $16 = sp + 56 | 0;
 $17 = sp + 52 | 0;
 $18 = sp + 48 | 0;
 $19 = sp;
 $20 = sp + 44 | 0;
 $21 = sp + 40 | 0;
 $22 = sp + 120 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 HEAP32[$31 >> 2] = $0;
 $32 = HEAP32[$31 >> 2] | 0;
 if (!(HEAP32[$32 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$30 >> 2] = $32;
 $35 = HEAP32[$30 >> 2] | 0;
 $36 = HEAP32[$35 >> 2] | 0;
 HEAP32[$27 >> 2] = $35;
 HEAP32[$28 >> 2] = $36;
 $37 = HEAP32[$27 >> 2] | 0;
 HEAP32[$29 >> 2] = HEAP32[$37 + 4 >> 2];
 while (1) {
  if ((HEAP32[$28 >> 2] | 0) == (HEAP32[$29 >> 2] | 0)) break;
  HEAP32[$26 >> 2] = $37;
  HEAP32[$25 >> 2] = (HEAP32[$26 >> 2] | 0) + 8;
  HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
  $46 = HEAP32[$24 >> 2] | 0;
  $48 = (HEAP32[$29 >> 2] | 0) + -1 | 0;
  HEAP32[$29 >> 2] = $48;
  HEAP32[$23 >> 2] = $48;
  $49 = HEAP32[$23 >> 2] | 0;
  HEAP32[$20 >> 2] = $46;
  HEAP32[$21 >> 2] = $49;
  $50 = HEAP32[$20 >> 2] | 0;
  $51 = HEAP32[$21 >> 2] | 0;
  HEAP8[$19 >> 0] = HEAP8[$22 >> 0] | 0;
  HEAP32[$17 >> 2] = $50;
  HEAP32[$18 >> 2] = $51;
  $53 = HEAP32[$18 >> 2] | 0;
  HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
  HEAP32[$16 >> 2] = $53;
 }
 HEAP32[$37 + 4 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$7 >> 2] = $32;
 HEAP32[$6 >> 2] = (HEAP32[$7 >> 2] | 0) + 8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $59 = HEAP32[$5 >> 2] | 0;
 $60 = HEAP32[$32 >> 2] | 0;
 HEAP32[$4 >> 2] = $32;
 $61 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $61;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $70 = (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) - (HEAP32[$61 >> 2] | 0) | 0;
 HEAP32[$12 >> 2] = $59;
 HEAP32[$13 >> 2] = $60;
 HEAP32[$14 >> 2] = $70;
 $72 = HEAP32[$13 >> 2] | 0;
 $73 = HEAP32[$14 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$10 >> 2] = $72;
 HEAP32[$11 >> 2] = $73;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 __ZdlPv(HEAP32[$8 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _decode_buffer_799($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $57 = 0, $7 = 0, $8 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $16 = sp + 4 | 0;
 $17 = sp;
 HEAP32[$8 >> 2] = $0;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$12 >> 2] = $4;
 HEAP32[$13 >> 2] = $5;
 HEAP32[$14 >> 2] = $6;
 while (1) {
  if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0)) HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[$15 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
  if (((HEAP32[$14 >> 2] | 0) - (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) | 0) >>> 0 < ((HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0) - (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) | 0) >>> 0) $57 = (HEAP32[$14 >> 2] | 0) - (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) | 0; else $57 = (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0) - (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] = (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) + $57;
  HEAP32[$16 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 + 4 >> 2] & 31](HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0) | 0;
  HEAP32[$17 >> 2] = (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$15 >> 2] | 0);
  _memcpy((HEAP32[$12 >> 2] | 0) + (HEAP32[HEAP32[$13 >> 2] >> 2] | 0) | 0, (HEAP32[HEAP32[$8 >> 2] >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0, HEAP32[$17 >> 2] | 0) | 0;
  $87 = HEAP32[$13 >> 2] | 0;
  HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + (HEAP32[$17 >> 2] | 0);
  if (HEAP8[(HEAP32[$8 >> 2] | 0) + 20 >> 0] & 1) {
   _lz_decoder_reset(HEAP32[$8 >> 2] | 0);
   if (HEAP32[$16 >> 2] | 0) {
    label = 10;
    break;
   }
   if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
    label = 10;
    break;
   }
  } else {
   if (HEAP32[$16 >> 2] | 0) {
    label = 14;
    break;
   }
   if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
    label = 14;
    break;
   }
   if ((HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0) >>> 0) {
    label = 14;
    break;
   }
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$7 >> 2] = HEAP32[$16 >> 2];
  $116 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 } else if ((label | 0) == 14) {
  HEAP32[$7 >> 2] = HEAP32[$16 >> 2];
  $116 = HEAP32[$7 >> 2] | 0;
  STACKTOP = sp;
  return $116 | 0;
 }
 return 0;
}

function __ZNK3zim6Buffer2asItEET_NS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $105 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 40 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $1;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $3;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 $20 = $8 + 16 | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $4;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 $30 = $3;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $4;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 if (!($35 >>> 0 < $41 >>> 0 | (($35 | 0) == ($41 | 0) ? (HEAP32[$30 >> 2] | 0) >>> 0 < (HEAP32[$36 >> 2] | 0) >>> 0 : 0))) {
  $47 = $3;
  $53 = $4;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 50982, HEAP32[$47 >> 2] | 0, HEAP32[$47 + 4 >> 2] | 0, HEAP32[$53 >> 2] | 0, HEAP32[$53 + 4 >> 2] | 0, 50990, 54);
 }
 $59 = $1;
 $65 = _i64Add(HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0, 2, 0) | 0;
 $67 = $5;
 HEAP32[$67 >> 2] = $65;
 HEAP32[$67 + 4 >> 2] = tempRet0;
 $72 = $8 + 16 | 0;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = $6;
 HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$78 + 4 >> 2] = $77;
 $82 = $5;
 $87 = HEAP32[$82 + 4 >> 2] | 0;
 $88 = $6;
 $93 = HEAP32[$88 + 4 >> 2] | 0;
 if ($87 >>> 0 < $93 >>> 0 | (($87 | 0) == ($93 | 0) ? (HEAP32[$82 >> 2] | 0) >>> 0 <= (HEAP32[$88 >> 2] | 0) >>> 0 : 0)) {
  $111 = HEAP32[$8 >> 2] | 0;
  $112 = $111 + 8 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
  $115 = __ZN3zim16fromLittleEndianItEET_PKc($114) | 0;
  STACKTOP = sp;
  return $115 | 0;
 }
 $99 = $5;
 $105 = $6;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51006, 51100, 50982, HEAP32[$99 >> 2] | 0, HEAP32[$99 + 4 >> 2] | 0, HEAP32[$105 >> 2] | 0, HEAP32[$105 + 4 >> 2] | 0, 50990, 55);
 $111 = HEAP32[$8 >> 2] | 0;
 $112 = $111 + 8 | 0;
 $113 = HEAP32[$112 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
 $115 = __ZN3zim16fromLittleEndianItEET_PKc($114) | 0;
 STACKTOP = sp;
 return $115 | 0;
}

function __ZNK3zim6Buffer2asIjEET_NS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $105 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $53 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $7 = 0, $72 = 0, $77 = 0, $78 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $99 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 40 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[$2 >> 2] = $0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $1;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $3;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 $20 = $8 + 16 | 0;
 $25 = HEAP32[$20 + 4 >> 2] | 0;
 $26 = $4;
 HEAP32[$26 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 + 4 >> 2] = $25;
 $30 = $3;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $4;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 if (!($35 >>> 0 < $41 >>> 0 | (($35 | 0) == ($41 | 0) ? (HEAP32[$30 >> 2] | 0) >>> 0 < (HEAP32[$36 >> 2] | 0) >>> 0 : 0))) {
  $47 = $3;
  $53 = $4;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 50982, HEAP32[$47 >> 2] | 0, HEAP32[$47 + 4 >> 2] | 0, HEAP32[$53 >> 2] | 0, HEAP32[$53 + 4 >> 2] | 0, 50990, 54);
 }
 $59 = $1;
 $65 = _i64Add(HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0, 4, 0) | 0;
 $67 = $5;
 HEAP32[$67 >> 2] = $65;
 HEAP32[$67 + 4 >> 2] = tempRet0;
 $72 = $8 + 16 | 0;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = $6;
 HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$78 + 4 >> 2] = $77;
 $82 = $5;
 $87 = HEAP32[$82 + 4 >> 2] | 0;
 $88 = $6;
 $93 = HEAP32[$88 + 4 >> 2] | 0;
 if ($87 >>> 0 < $93 >>> 0 | (($87 | 0) == ($93 | 0) ? (HEAP32[$82 >> 2] | 0) >>> 0 <= (HEAP32[$88 >> 2] | 0) >>> 0 : 0)) {
  $111 = HEAP32[$8 >> 2] | 0;
  $112 = $111 + 8 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
  $115 = __ZN3zim16fromLittleEndianIjEET_PKc($114) | 0;
  STACKTOP = sp;
  return $115 | 0;
 }
 $99 = $5;
 $105 = $6;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51006, 51100, 50982, HEAP32[$99 >> 2] | 0, HEAP32[$99 + 4 >> 2] | 0, HEAP32[$105 >> 2] | 0, HEAP32[$105 + 4 >> 2] | 0, 50990, 55);
 $111 = HEAP32[$8 >> 2] | 0;
 $112 = $111 + 8 | 0;
 $113 = HEAP32[$112 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $114 = FUNCTION_TABLE_iii[$113 & 63]($8, $$byval_copy) | 0;
 $115 = __ZN3zim16fromLittleEndianIjEET_PKc($114) | 0;
 STACKTOP = sp;
 return $115 | 0;
}

function _lzma_index_hash_append($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $102 = 0, $111 = 0, $117 = 0, $118 = 0, $126 = 0, $135 = 0, $14 = 0, $144 = 0, $150 = 0, $151 = 0, $157 = 0, $21 = 0, $26 = 0, $32 = 0, $37 = 0, $43 = 0, $48 = 0, $5 = 0, $56 = 0, $6 = 0, $62 = 0, $7 = 0, $74 = 0, $79 = 0, $8 = 0, $88 = 0, $9 = 0, $93 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $9 = sp + 16 | 0;
 HEAP32[$6 >> 2] = $0;
 $10 = $7;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$10 + 4 >> 2] = $2;
 $14 = $8;
 HEAP32[$14 >> 2] = $3;
 HEAP32[$14 + 4 >> 2] = $4;
 $21 = $7;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 $32 = $7;
 $37 = HEAP32[$32 + 4 >> 2] | 0;
 $43 = $8;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 if ((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) != 0 | ($26 >>> 0 < 0 | ($26 | 0) == 0 & (HEAP32[$21 >> 2] | 0) >>> 0 < 5) | ($37 >>> 0 > 2147483647 | ($37 | 0) == 2147483647 & (HEAP32[$32 >> 2] | 0) >>> 0 > 4294967292) | ($48 >>> 0 > 2147483647 | ($48 | 0) == 2147483647 & (HEAP32[$43 >> 2] | 0) >>> 0 > 4294967295)) {
  HEAP32[$5 >> 2] = 11;
  $157 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $157 | 0;
 }
 $56 = $7;
 $62 = $8;
 HEAP32[$9 >> 2] = _hash_append((HEAP32[$6 >> 2] | 0) + 8 | 0, HEAP32[$56 >> 2] | 0, HEAP32[$56 + 4 >> 2] | 0, HEAP32[$62 >> 2] | 0, HEAP32[$62 + 4 >> 2] | 0) | 0;
 if (HEAP32[$9 >> 2] | 0) {
  HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
  $157 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $157 | 0;
 }
 $74 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
 $79 = HEAP32[$74 + 4 >> 2] | 0;
 if (!($79 >>> 0 > 2147483647 | ($79 | 0) == 2147483647 & (HEAP32[$74 >> 2] | 0) >>> 0 > 4294967295)) {
  $88 = (HEAP32[$6 >> 2] | 0) + 8 + 8 | 0;
  $93 = HEAP32[$88 + 4 >> 2] | 0;
  if (!($93 >>> 0 > 2147483647 | ($93 | 0) == 2147483647 & (HEAP32[$88 >> 2] | 0) >>> 0 > 4294967295)) {
   $102 = (HEAP32[$6 >> 2] | 0) + 8 + 16 | 0;
   $111 = (HEAP32[$6 >> 2] | 0) + 8 + 24 | 0;
   $117 = _index_size_664(HEAP32[$102 >> 2] | 0, HEAP32[$102 + 4 >> 2] | 0, HEAP32[$111 >> 2] | 0, HEAP32[$111 + 4 >> 2] | 0) | 0;
   $118 = tempRet0;
   if (!($118 >>> 0 > 4 | ($118 | 0) == 4 & $117 >>> 0 > 0)) {
    $126 = (HEAP32[$6 >> 2] | 0) + 8 | 0;
    $135 = (HEAP32[$6 >> 2] | 0) + 8 + 16 | 0;
    $144 = (HEAP32[$6 >> 2] | 0) + 8 + 24 | 0;
    $150 = _index_stream_size(HEAP32[$126 >> 2] | 0, HEAP32[$126 + 4 >> 2] | 0, HEAP32[$135 >> 2] | 0, HEAP32[$135 + 4 >> 2] | 0, HEAP32[$144 >> 2] | 0, HEAP32[$144 + 4 >> 2] | 0) | 0;
    $151 = tempRet0;
    if (!($151 >>> 0 > 2147483647 | ($151 | 0) == 2147483647 & $150 >>> 0 > 4294967295)) {
     HEAP32[$5 >> 2] = 0;
     $157 = HEAP32[$5 >> 2] | 0;
     STACKTOP = sp;
     return $157 | 0;
    }
   }
  }
 }
 HEAP32[$5 >> 2] = 9;
 $157 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $157 | 0;
}

function _pop_arg_494($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do if ($1 >>> 0 <= 20) do switch ($1 | 0) {
 case 9:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $10 = HEAP32[$9 >> 2] | 0;
   HEAP32[$2 >> 2] = $9 + 4;
   HEAP32[$0 >> 2] = $10;
   break L1;
   break;
  }
 case 10:
  {
   $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$2 >> 2] = $16 + 4;
   $20 = $0;
   HEAP32[$20 >> 2] = $17;
   HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 11:
  {
   $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $30 = HEAP32[$29 >> 2] | 0;
   HEAP32[$2 >> 2] = $29 + 4;
   $31 = $0;
   HEAP32[$31 >> 2] = $30;
   HEAP32[$31 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 12:
  {
   $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $41 = $40;
   $43 = HEAP32[$41 >> 2] | 0;
   $46 = HEAP32[$41 + 4 >> 2] | 0;
   HEAP32[$2 >> 2] = $40 + 8;
   $47 = $0;
   HEAP32[$47 >> 2] = $43;
   HEAP32[$47 + 4 >> 2] = $46;
   break L1;
   break;
  }
 case 13:
  {
   $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$2 >> 2] = $56 + 4;
   $59 = ($57 & 65535) << 16 >> 16;
   $62 = $0;
   HEAP32[$62 >> 2] = $59;
   HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 14:
  {
   $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $72 = HEAP32[$71 >> 2] | 0;
   HEAP32[$2 >> 2] = $71 + 4;
   $73 = $0;
   HEAP32[$73 >> 2] = $72 & 65535;
   HEAP32[$73 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 15:
  {
   $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $83 = HEAP32[$82 >> 2] | 0;
   HEAP32[$2 >> 2] = $82 + 4;
   $85 = ($83 & 255) << 24 >> 24;
   $88 = $0;
   HEAP32[$88 >> 2] = $85;
   HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31;
   break L1;
   break;
  }
 case 16:
  {
   $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
   $98 = HEAP32[$97 >> 2] | 0;
   HEAP32[$2 >> 2] = $97 + 4;
   $99 = $0;
   HEAP32[$99 >> 2] = $98 & 255;
   HEAP32[$99 + 4 >> 2] = 0;
   break L1;
   break;
  }
 case 17:
  {
   $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $109 = +HEAPF64[$108 >> 3];
   HEAP32[$2 >> 2] = $108 + 8;
   HEAPF64[$0 >> 3] = $109;
   break L1;
   break;
  }
 case 18:
  {
   $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1);
   $116 = +HEAPF64[$115 >> 3];
   HEAP32[$2 >> 2] = $115 + 8;
   HEAPF64[$0 >> 3] = $116;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0); while (0);
 return;
}

function _mbsnrtowcs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$04975 = 0, $$05374 = 0, $$056 = 0, $$150 = 0, $$154 = 0, $$15773 = 0, $$164 = 0, $$176 = 0, $$2 = 0, $$25170 = 0, $$25569 = 0, $$258 = 0, $$352 = 0, $$359 = 0, $$371 = 0, $$468 = 0, $$cast = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $30 = 0, $31 = 0, $39 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $5 = sp;
 $6 = sp + 1024 | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP32[$6 >> 2] = $7;
 $8 = ($0 | 0) != 0;
 $$056 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 L1 : do if (($$056 | 0) != 0 & ($7 | 0) != 0) {
  $$04975 = 0;
  $$05374 = $2;
  $$15773 = $$056;
  $$176 = $$0;
  $44 = $$cast;
  while (1) {
   $11 = $$05374 >>> 2;
   $12 = $11 >>> 0 >= $$15773 >>> 0;
   if (!($$05374 >>> 0 > 131 | $12)) {
    $$150 = $$04975;
    $$154 = $$05374;
    $$164 = $$176;
    $$359 = $$15773;
    $25 = $44;
    break L1;
   }
   $spec$select = $12 ? $$15773 : $11;
   $15 = $$05374 - $spec$select | 0;
   $16 = _mbsrtowcs($$176, $6, $spec$select, $4) | 0;
   if (($16 | 0) == -1) break;
   $18 = ($$176 | 0) == ($5 | 0);
   $$258 = $$15773 - ($18 ? 0 : $16) | 0;
   $$2 = $18 ? $$176 : $$176 + ($16 << 2) | 0;
   $21 = $16 + $$04975 | 0;
   $22 = HEAP32[$6 >> 2] | 0;
   if (($$258 | 0) != 0 & ($22 | 0) != 0) {
    $$04975 = $21;
    $$05374 = $15;
    $$15773 = $$258;
    $$176 = $$2;
    $44 = $22;
   } else {
    $$150 = $21;
    $$154 = $15;
    $$164 = $$2;
    $$359 = $$258;
    $25 = $22;
    break L1;
   }
  }
  $$150 = -1;
  $$154 = $15;
  $$164 = $$176;
  $$359 = 0;
  $25 = HEAP32[$6 >> 2] | 0;
 } else {
  $$150 = 0;
  $$154 = $2;
  $$164 = $$0;
  $$359 = $$056;
  $25 = $$cast;
 } while (0);
 L9 : do if (!$25) $$352 = $$150; else if (($$359 | 0) != 0 & ($$154 | 0) != 0) {
  $$25170 = $$150;
  $$25569 = $$154;
  $$371 = $$164;
  $$468 = $$359;
  $30 = $25;
  while (1) {
   $31 = _mbrtowc($$371, $30, $$25569, $4) | 0;
   if (($31 + 2 | 0) >>> 0 < 3) break;
   $30 = (HEAP32[$6 >> 2] | 0) + $31 | 0;
   HEAP32[$6 >> 2] = $30;
   $$25569 = $$25569 - $31 | 0;
   $$468 = $$468 + -1 | 0;
   $39 = $$25170 + 1 | 0;
   if (!(($$468 | 0) != 0 & ($$25569 | 0) != 0)) {
    $$352 = $39;
    break L9;
   } else {
    $$25170 = $39;
    $$371 = $$371 + 4 | 0;
   }
  }
  switch ($31 | 0) {
  case -1:
   {
    $$352 = $31;
    break L9;
    break;
   }
  case 0:
   {
    HEAP32[$6 >> 2] = 0;
    $$352 = $$25170;
    break L9;
    break;
   }
  default:
   {
    HEAP32[$4 >> 2] = 0;
    $$352 = $$25170;
    break L9;
   }
  }
 } else $$352 = $$150; while (0);
 if ($8) HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
 STACKTOP = sp;
 return $$352 | 0;
}

function __ZN3zim8FileImpl15getIndexByTitleENS_15article_index_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $37 = 0, $4 = 0, $44 = 0, $49 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 8 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 52 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 44 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 24 | 0;
 $15 = sp + 20 | 0;
 $16 = sp + 16 | 0;
 $17 = sp + 84 | 0;
 $18 = sp;
 HEAP32[$12 >> 2] = $0;
 $19 = HEAP32[$12 >> 2] | 0;
 HEAP32[$13 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv($19) | 0;
 if (!(__ZgeIN3zim15article_index_tEEbRKT_S4_($1, $13) | 0)) {
  HEAP32[$4 >> 2] = $19 + 148;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  $44 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
  __ZN3zim8offset_tC2Ey($18, HEAP32[$1 >> 2] << 2, 0);
  HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2];
  __ZN3zim15article_index_tC2Ej($11, __ZNK3zim6Reader4readIjEET_NS_8offset_tE($44, $$byval_copy) | 0);
  STACKTOP = sp;
  return HEAP32[$11 >> 2] | 0;
 }
 $22 = ___cxa_allocate_exception(8) | 0;
 HEAP8[$17 >> 0] = 1;
 HEAP32[$9 >> 2] = $14;
 HEAP32[$10 >> 2] = 52146;
 $23 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = $23;
 $24 = HEAP32[$8 >> 2] | 0;
 HEAP32[$7 >> 2] = $24;
 $25 = HEAP32[$7 >> 2] | 0;
 HEAP32[$25 >> 2] = 0;
 HEAP32[$25 + 4 >> 2] = 0;
 HEAP32[$25 + 8 >> 2] = 0;
 HEAP32[$6 >> 2] = $24;
 HEAP32[sp + 68 >> 2] = HEAP32[$6 >> 2];
 $27 = HEAP32[$10 >> 2] | 0;
 $29 = __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$10 >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_viii(8, $23 | 0, $27 | 0, $29 | 0);
 $30 = __THREW__;
 __THREW__ = 0;
 if ($30 & 1) {
  $35 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $35;
  HEAP32[$16 >> 2] = tempRet0;
 } else {
  __THREW__ = 0;
  invoke_vii(58, $22 | 0, $14 | 0);
  $32 = __THREW__;
  __THREW__ = 0;
  if (!($32 & 1)) {
   HEAP8[$17 >> 0] = 0;
   __THREW__ = 0;
   invoke_viii(11, $22 | 0, 41024, 53);
   __THREW__ = 0;
  }
  $37 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $37;
  HEAP32[$16 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 }
 if (!(HEAP8[$17 >> 0] & 1)) {
  $49 = HEAP32[$15 >> 2] | 0;
  $50 = HEAP32[$16 >> 2] | 0;
  ___resumeException($49 | 0);
 }
 ___cxa_free_exception($22 | 0);
 $49 = HEAP32[$15 >> 2] | 0;
 $50 = HEAP32[$16 >> 2] | 0;
 ___resumeException($49 | 0);
 return 0;
}

function __ZNSt3__28ios_base4InitC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $22 = 0, $35 = 0, $38 = 0, $4 = 0, $42 = 0, $45 = 0, $7 = 0;
 $1 = HEAP32[10957] | 0;
 __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(62e3, $1, 62056);
 HEAP32[15330] = 44696;
 HEAP32[15332] = 44716;
 HEAP32[15331] = 0;
 __ZNSt3__28ios_base4initEPv(61328, 62e3);
 HEAP32[15350] = 0;
 HEAP32[15351] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(62064, $1, 62120);
 HEAP32[15352] = 44744;
 HEAP32[15354] = 44764;
 HEAP32[15353] = 0;
 __ZNSt3__28ios_base4initEPv(61416, 62064);
 HEAP32[15372] = 0;
 HEAP32[15373] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $4 = HEAP32[10924] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(62128, $4, 62176);
 HEAP32[15374] = 44792;
 HEAP32[15375] = 44812;
 __ZNSt3__28ios_base4initEPv(61500, 62128);
 HEAP32[15393] = 0;
 HEAP32[15394] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(62184, $4, 62232);
 HEAP32[15395] = 44840;
 HEAP32[15396] = 44860;
 __ZNSt3__28ios_base4initEPv(61584, 62184);
 HEAP32[15414] = 0;
 HEAP32[15415] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $7 = HEAP32[10989] | 0;
 __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(62240, $7, 62288);
 HEAP32[15416] = 44792;
 HEAP32[15417] = 44812;
 __ZNSt3__28ios_base4initEPv(61668, 62240);
 HEAP32[15435] = 0;
 HEAP32[15436] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $14 = HEAP32[61664 + (HEAP32[(HEAP32[15416] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[15458] = 44792;
 HEAP32[15459] = 44812;
 __ZNSt3__28ios_base4initEPv(61836, $14);
 HEAP32[15477] = 0;
 HEAP32[15478] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(62296, $7, 62344);
 HEAP32[15437] = 44840;
 HEAP32[15438] = 44860;
 __ZNSt3__28ios_base4initEPv(61752, 62296);
 HEAP32[15456] = 0;
 HEAP32[15457] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $22 = HEAP32[61748 + (HEAP32[(HEAP32[15437] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[15479] = 44840;
 HEAP32[15480] = 44860;
 __ZNSt3__28ios_base4initEPv(61920, $22);
 HEAP32[15498] = 0;
 HEAP32[15499] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP32[61320 + (HEAP32[(HEAP32[15330] | 0) + -12 >> 2] | 0) + 72 >> 2] = 61496;
 HEAP32[61408 + (HEAP32[(HEAP32[15352] | 0) + -12 >> 2] | 0) + 72 >> 2] = 61580;
 $35 = (HEAP32[15416] | 0) + -12 | 0;
 $38 = 61664 + (HEAP32[$35 >> 2] | 0) + 4 | 0;
 HEAP32[$38 >> 2] = HEAP32[$38 >> 2] | 8192;
 $42 = (HEAP32[15437] | 0) + -12 | 0;
 $45 = 61748 + (HEAP32[$42 >> 2] | 0) + 4 | 0;
 HEAP32[$45 >> 2] = HEAP32[$45 >> 2] | 8192;
 HEAP32[61664 + (HEAP32[$35 >> 2] | 0) + 72 >> 2] = 61496;
 HEAP32[61748 + (HEAP32[$42 >> 2] | 0) + 72 >> 2] = 61580;
 return;
}

function __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100 = 0, $$194 = 0, $$194$ph = 0, $$2102 = 0, $$598 = 0, $$pre = 0, $21 = 0, $22 = 0, $33 = 0, $47 = 0, $49 = 0, $56 = 0, $76 = 0, $78 = 0, $80 = 0, $86 = 0, $89 = 0;
 $$pre = $1;
 if (!($4 & 4)) $$194$ph = $0; else if (($$pre - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) $$194$ph = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; else $$194$ph = $0; else $$194$ph = $0; else $$194$ph = $0;
 $$0100 = 0;
 $$194 = $$194$ph;
 L7 : while (1) {
  if (!($$0100 >>> 0 < $2 >>> 0 & $$194 >>> 0 < $1 >>> 0)) break;
  $21 = HEAP8[$$194 >> 0] | 0;
  $22 = $21 & 255;
  if ($22 >>> 0 > $3 >>> 0) break;
  do if ($21 << 24 >> 24 > -1) {
   $$2102 = $$0100;
   $$598 = $$194 + 1 | 0;
  } else {
   if (($21 & 255) < 194) break L7;
   if (($21 & 255) < 224) {
    if (($$pre - $$194 | 0) < 2) break L7;
    $33 = HEAPU8[$$194 + 1 >> 0] | 0;
    if (($33 & 192 | 0) != 128) break L7;
    if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) break L7; else {
     $$2102 = $$0100;
     $$598 = $$194 + 2 | 0;
     break;
    }
   }
   if (($21 & 255) < 240) {
    if (($$pre - $$194 | 0) < 3) break L7;
    $47 = HEAP8[$$194 + 1 >> 0] | 0;
    $49 = HEAP8[$$194 + 2 >> 0] | 0;
    switch ($21 << 24 >> 24) {
    case -32:
     {
      if (($47 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($47 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($47 & -64) << 24 >> 24 != -128) break L7;
    }
    $56 = $49 & 255;
    if (($56 & 192 | 0) != 128) break L7;
    if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) break L7; else {
     $$2102 = $$0100;
     $$598 = $$194 + 3 | 0;
     break;
    }
   }
   if (($21 & 255) >= 245) break L7;
   if (($2 - $$0100 | 0) >>> 0 < 2 | ($$pre - $$194 | 0) < 4) break L7;
   $76 = HEAP8[$$194 + 1 >> 0] | 0;
   $78 = HEAP8[$$194 + 2 >> 0] | 0;
   $80 = HEAP8[$$194 + 3 >> 0] | 0;
   switch ($21 << 24 >> 24) {
   case -16:
    {
     if (($76 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($76 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($76 & -64) << 24 >> 24 != -128) break L7;
   }
   $86 = $78 & 255;
   if (($86 & 192 | 0) != 128) break L7;
   $89 = $80 & 255;
   if (($89 & 192 | 0) != 128) break L7;
   if ((($76 & 63) << 12 | $22 << 18 & 1835008 | $86 << 6 & 4032 | $89 & 63) >>> 0 > $3 >>> 0) break L7; else {
    $$2102 = $$0100 + 1 | 0;
    $$598 = $$194 + 4 | 0;
   }
  } while (0);
  $$0100 = $$2102 + 1 | 0;
  $$194 = $$598;
 }
 return $$194 - $0 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $44 = 0, $5 = 0, $51 = 0, $53 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 36 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$6 >> 2] = $0;
 $11 = HEAP32[$6 >> 2] | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($11);
 HEAP32[$11 >> 2] = 42968;
 HEAP32[$11 + 32 >> 2] = 0;
 HEAP32[$11 + 36 >> 2] = 0;
 HEAP32[$11 + 40 >> 2] = 0;
 HEAP32[$11 + 52 >> 2] = 0;
 HEAP32[$11 + 56 >> 2] = 0;
 HEAP32[$11 + 60 >> 2] = 0;
 HEAP32[$11 + 64 >> 2] = 0;
 HEAP32[$11 + 68 >> 2] = 0;
 $20 = $11 + 72 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 $21 = $11 + 80 | 0;
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 HEAP32[$11 + 88 >> 2] = 0;
 HEAP32[$11 + 92 >> 2] = 0;
 HEAP8[$11 + 96 >> 0] = 0;
 HEAP8[$11 + 97 >> 0] = 0;
 HEAP8[$11 + 98 >> 0] = 0;
 HEAP32[$5 >> 2] = $11;
 __ZNSt3__26localeC2ERKS0_($7, (HEAP32[$5 >> 2] | 0) + 4 | 0);
 HEAP32[$4 >> 2] = $7;
 __THREW__ = 0;
 $30 = invoke_iii(34, HEAP32[$4 >> 2] | 0, 62672) | 0;
 $31 = __THREW__;
 __THREW__ = 0;
 if ($31 & 1) {
  $33 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($33);
 }
 __ZNSt3__26localeD2Ev($7);
 do if ($30) {
  HEAP32[$3 >> 2] = $11;
  __ZNSt3__26localeC2ERKS0_($10, (HEAP32[$3 >> 2] | 0) + 4 | 0);
  HEAP32[$2 >> 2] = $10;
  __THREW__ = 0;
  $38 = invoke_iii(32, HEAP32[$2 >> 2] | 0, 62672) | 0;
  $39 = __THREW__;
  __THREW__ = 0;
  if (!($39 & 1)) {
   HEAP32[$11 + 68 >> 2] = $38;
   __ZNSt3__26localeD2Ev($10);
   HEAP32[$1 >> 2] = HEAP32[$11 + 68 >> 2];
   $44 = HEAP32[$1 >> 2] | 0;
   HEAP8[$11 + 98 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 28 >> 2] & 127]($44) | 0) & 1;
   break;
  }
  $53 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$8 >> 2] = $53;
  HEAP32[$9 >> 2] = tempRet0;
  __ZNSt3__26localeD2Ev($10);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11);
  $60 = HEAP32[$8 >> 2] | 0;
  $61 = HEAP32[$9 >> 2] | 0;
  ___resumeException($60 | 0);
 } while (0);
 __THREW__ = 0;
 invoke_iiii(HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0, $11 | 0, 0, 4096) | 0;
 $58 = __THREW__;
 __THREW__ = 0;
 if (!($58 & 1)) {
  STACKTOP = sp;
  return;
 }
 $51 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$8 >> 2] = $51;
 HEAP32[$9 >> 2] = tempRet0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($11);
 $60 = HEAP32[$8 >> 2] | 0;
 $61 = HEAP32[$9 >> 2] | 0;
 ___resumeException($60 | 0);
}

function __ZNSt3__2L11init_monthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60040] | 0)) if (___cxa_guard_acquire(60040) | 0) {
  $4 = 58752;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 59040);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58752, 53535) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58764, 53543) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58776, 53552) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58788, 53558) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58800, 53564) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58812, 53568) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58824, 53573) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58836, 53578) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58848, 53585) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58860, 53595) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58872, 53603) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58884, 53612) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58896, 53621) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58908, 53625) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58920, 53629) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58932, 53633) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58944, 53564) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58956, 53637) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58968, 53641) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58980, 53645) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58992, 53649) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59004, 53653) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59016, 53657) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59028, 53661) | 0;
 return;
}

function __ZNSt3__2L12init_wmonthsEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60120] | 0)) if (___cxa_guard_acquire(60120) | 0) {
  $4 = 59504;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 59792);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59504, 45884) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59516, 45916) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59528, 45952) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59540, 45976) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59552, 46e3) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59564, 46016) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59576, 46036) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59588, 46056) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59600, 46084) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59612, 46124) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59624, 46156) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59636, 46192) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59648, 46228) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59660, 46244) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59672, 46260) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59684, 46276) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59696, 46e3) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59708, 46292) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59720, 46308) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59732, 46324) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59744, 46340) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59756, 46356) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59768, 46372) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59780, 46388) | 0;
 return;
}

function __ZNK3zim12FileCompound6locateENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy2 = sp + 64 | 0;
 $$byval_copy1 = sp + 56 | 0;
 $4 = sp + 124 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 120 | 0;
 $7 = sp + 116 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 112 | 0;
 $10 = sp + 108 | 0;
 $11 = sp + 104 | 0;
 $12 = sp + 100 | 0;
 $13 = sp + 96 | 0;
 $14 = sp + 92 | 0;
 $15 = sp + 88 | 0;
 $16 = sp + 80 | 0;
 $17 = sp + 72 | 0;
 $18 = sp + 24 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 8 | 0;
 $21 = sp;
 HEAP32[$17 >> 2] = $1;
 $22 = HEAP32[$17 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$19 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$21 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$21 + 4 >> 2];
 $23 = __ZN3zimplENS_8offset_tERKNS_7zsize_tE($$byval_copy2, $3) | 0;
 $25 = $20;
 HEAP32[$25 >> 2] = $23;
 HEAP32[$25 + 4 >> 2] = tempRet0;
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$19 + 4 >> 2];
 HEAP32[$$byval_copy2 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$$byval_copy2 + 4 >> 2] = HEAP32[$20 + 4 >> 2];
 __ZN3zim5RangeC2ENS_8offset_tES1_($18, $$byval_copy1, $$byval_copy2);
 HEAP32[$14 >> 2] = $22;
 HEAP32[$15 >> 2] = $18;
 __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE20__equal_range_uniqueIS3_EENS_4pairINS_21__tree_const_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEESN_EERKT_($16, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0);
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $16;
 $31 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP8[$5 >> 0] = HEAP8[$12 >> 0] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
 HEAP32[$4 >> 2] = $31;
 HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = (HEAP32[$11 >> 2] | 0) + 4;
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$6 >> 2] >> 2];
 HEAP8[$8 >> 0] = HEAP8[$13 >> 0] | 0;
 HEAP8[$8 + 1 >> 0] = HEAP8[$13 + 1 >> 0] | 0;
 HEAP8[$8 + 2 >> 0] = HEAP8[$13 + 2 >> 0] | 0;
 HEAP8[$8 + 3 >> 0] = HEAP8[$13 + 3 >> 0] | 0;
 HEAP32[$7 >> 2] = $31 + 4;
 HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$8 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi10Z2D = 0, $$pre$phiZ2D = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $55 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 20 | 0;
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 __THREW__ = 0;
 invoke_viii(14, $4 | 0, $0 | 0, 0);
 $7 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($7 & 1) {
  $39 = ___cxa_find_matching_catch_3(0) | 0;
  $$1 = $39;
  $$pre$phi10Z2D = $0;
  $$pre$phiZ2D = $0;
  label = 12;
 } else L4 : do if (HEAP8[$4 >> 0] | 0) {
  HEAP32[$5 >> 2] = 0;
  __ZNKSt3__28ios_base6getlocEv($6, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
  __THREW__ = 0;
  $15 = invoke_iii(32, $6 | 0, 62392) | 0;
  $16 = __THREW__;
  __THREW__ = 0;
  do if ($16 & 1) label = 8; else {
   $21 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
   $26 = HEAP32[(HEAP32[$15 >> 2] | 0) + 28 >> 2] | 0;
   HEAP32[$2 >> 2] = HEAP32[$21 + 24 >> 2];
   HEAP32[$3 >> 2] = 0;
   __THREW__ = 0;
   HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
   HEAP32[$$byval_copy1 >> 2] = HEAP32[$3 >> 2];
   invoke_iiiiiii($26 | 0, $15 | 0, $$byval_copy | 0, $$byval_copy1 | 0, $21 | 0, $5 | 0, $1 | 0) | 0;
   $27 = __THREW__;
   __THREW__ = 0;
   if ($27 & 1) label = 8; else {
    __ZNSt3__26localeD2Ev($6);
    $32 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __THREW__ = 0;
    invoke_vii(46, $32 | 0, HEAP32[$32 + 16 >> 2] | HEAP32[$5 >> 2] | 0);
    $37 = __THREW__;
    __THREW__ = 0;
    if ($37 & 1) {
     $43 = ___cxa_find_matching_catch_3(0) | 0;
     $$0 = $43;
     break;
    } else break L4;
   }
  } while (0);
  if ((label | 0) == 8) {
   $41 = ___cxa_find_matching_catch_3(0) | 0;
   __ZNSt3__26localeD2Ev($6);
   $$0 = $41;
  }
  $$1 = $$0;
  $$pre$phi10Z2D = $0;
  $$pre$phiZ2D = $0;
  label = 12;
  break L1;
 } while (0); while (0);
 do if ((label | 0) == 12) {
  ___cxa_begin_catch($$1 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi10Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $49 = __THREW__;
  __THREW__ = 0;
  if (!($49 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $51 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $53 = __THREW__;
  __THREW__ = 0;
  if ($53 & 1) {
   $55 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($55);
  } else ___resumeException($51 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function _lzma_crc64($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $117 = 0, $128 = 0, $13 = 0, $135 = 0, $136 = 0, $140 = 0, $143 = 0, $156 = 0, $158 = 0, $161 = 0, $162 = 0, $168 = 0, $172 = 0, $176 = 0, $20 = 0, $21 = 0, $31 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $50 = 0, $56 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $88 = 0, $9 = 0, $98 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 $9 = $6;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$9 + 4 >> 2] = $3;
 $13 = $6;
 $20 = ~HEAP32[$13 + 4 >> 2];
 $21 = $6;
 HEAP32[$21 >> 2] = ~HEAP32[$13 >> 2];
 HEAP32[$21 + 4 >> 2] = $20;
 L1 : do if ((HEAP32[$5 >> 2] | 0) >>> 0 > 4) {
  while (1) {
   $31 = HEAP32[$4 >> 2] | 0;
   if (!(HEAP32[$4 >> 2] & 3)) break;
   HEAP32[$4 >> 2] = $31 + 1;
   $44 = 14416 + (((HEAPU8[$31 >> 0] | 0) ^ HEAP32[$6 >> 2] & 255) << 3) | 0;
   $46 = HEAP32[$44 >> 2] | 0;
   $49 = HEAP32[$44 + 4 >> 2] | 0;
   $50 = $6;
   $56 = _bitshift64Lshr(HEAP32[$50 >> 2] | 0, HEAP32[$50 + 4 >> 2] | 0, 8) | 0;
   $60 = $6;
   HEAP32[$60 >> 2] = $46 ^ $56;
   HEAP32[$60 + 4 >> 2] = $49 ^ tempRet0;
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1;
  }
  HEAP32[$7 >> 2] = $31 + (HEAP32[$5 >> 2] & -4);
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & 3;
  while (1) {
   if ((HEAP32[$4 >> 2] | 0) >>> 0 >= (HEAP32[$7 >> 2] | 0) >>> 0) break L1;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2] ^ HEAP32[HEAP32[$4 >> 2] >> 2];
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
   $88 = 20560 + ((HEAP32[$8 >> 2] & 255) << 3) | 0;
   $98 = 18512 + (((HEAP32[$8 >> 2] | 0) >>> 8 & 255) << 3) | 0;
   $117 = 16464 + (((HEAP32[$8 >> 2] | 0) >>> 16 & 255) << 3) | 0;
   $128 = 14416 + ((HEAP32[$8 >> 2] | 0) >>> 24 << 3) | 0;
   $135 = HEAP32[$88 + 4 >> 2] ^ HEAP32[$98 + 4 >> 2] ^ HEAP32[$117 + 4 >> 2] ^ HEAP32[$128 + 4 >> 2];
   $136 = $6;
   HEAP32[$136 >> 2] = HEAP32[$88 >> 2] ^ HEAP32[$98 >> 2] ^ HEAP32[$6 + 4 >> 2] ^ HEAP32[$117 >> 2] ^ HEAP32[$128 >> 2];
   HEAP32[$136 + 4 >> 2] = $135;
  }
 } while (0);
 while (1) {
  $140 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $140 + -1;
  if (!$140) break;
  $143 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $143 + 1;
  $156 = 14416 + (((HEAPU8[$143 >> 0] | 0) ^ HEAP32[$6 >> 2] & 255) << 3) | 0;
  $158 = HEAP32[$156 >> 2] | 0;
  $161 = HEAP32[$156 + 4 >> 2] | 0;
  $162 = $6;
  $168 = _bitshift64Lshr(HEAP32[$162 >> 2] | 0, HEAP32[$162 + 4 >> 2] | 0, 8) | 0;
  $172 = $6;
  HEAP32[$172 >> 2] = $158 ^ $168;
  HEAP32[$172 + 4 >> 2] = $161 ^ tempRet0;
 }
 $176 = $6;
 tempRet0 = ~HEAP32[$176 + 4 >> 2];
 STACKTOP = sp;
 return ~HEAP32[$176 >> 2] | 0;
}

function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$03952 = 0, $$03952$pn = 0, $$04051 = 0, $$04350 = 0, $$2 = 0, $$lcssa = 0, $$lcssa56 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $spec$select = 0, $spec$select47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 $spec$select = ($3 | 0) == 0 ? 61284 : $3;
 $6 = HEAP32[$spec$select >> 2] | 0;
 L1 : do if (!$1) if (!$6) $$0 = 0; else label = 19; else {
  $spec$select47 = ($0 | 0) == 0 ? $4 : $0;
  if (!$2) $$0 = -2; else {
   if (!$6) {
    $12 = HEAP8[$1 >> 0] | 0;
    if ($12 << 24 >> 24 > -1) {
     HEAP32[$spec$select47 >> 2] = $12 & 255;
     $$0 = $12 << 24 >> 24 != 0 & 1;
     break;
    }
    $21 = (HEAP32[HEAP32[(___pthread_self_732() | 0) + 188 >> 2] >> 2] | 0) == 0;
    $22 = HEAP8[$1 >> 0] | 0;
    if ($21) {
     HEAP32[$spec$select47 >> 2] = $22 << 24 >> 24 & 57343;
     $$0 = 1;
     break;
    }
    $26 = ($22 & 255) + -194 | 0;
    if ($26 >>> 0 > 50) {
     label = 19;
     break;
    }
    $30 = HEAP32[33568 + ($26 << 2) >> 2] | 0;
    $31 = $2 + -1 | 0;
    if (!$31) $$2 = $30; else {
     $$03952 = $1 + 1 | 0;
     $$04051 = $30;
     $$04350 = $31;
     label = 11;
    }
   } else {
    $$03952 = $1;
    $$04051 = $6;
    $$04350 = $2;
    label = 11;
   }
   L14 : do if ((label | 0) == 11) {
    $34 = HEAPU8[$$03952 >> 0] | 0;
    $35 = $34 >>> 3;
    if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
     label = 19;
     break L1;
    }
    $43 = $34 + -128 | $$04051 << 6;
    $44 = $$04350 + -1 | 0;
    if (($43 | 0) < 0) {
     $$03952$pn = $$03952;
     $47 = $43;
     $53 = $44;
     while (1) {
      $$03952$pn = $$03952$pn + 1 | 0;
      if (!$53) {
       $$2 = $47;
       break L14;
      }
      $49 = HEAP8[$$03952$pn >> 0] | 0;
      if (($49 & -64) << 24 >> 24 != -128) {
       label = 19;
       break L1;
      }
      $51 = ($49 & 255) + -128 | $47 << 6;
      $52 = $53 + -1 | 0;
      if (($51 | 0) >= 0) {
       $$lcssa = $52;
       $$lcssa56 = $51;
       break;
      } else {
       $47 = $51;
       $53 = $52;
      }
     }
    } else {
     $$lcssa = $44;
     $$lcssa56 = $43;
    }
    HEAP32[$spec$select >> 2] = 0;
    HEAP32[$spec$select47 >> 2] = $$lcssa56;
    $$0 = $2 - $$lcssa | 0;
    break L1;
   } while (0);
   HEAP32[$spec$select >> 2] = $$2;
   $$0 = -2;
  }
 } while (0);
 if ((label | 0) == 19) {
  HEAP32[$spec$select >> 2] = 0;
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $7 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 100 | 0;
 $3 = sp + 96 | 0;
 $4 = sp + 92 | 0;
 $5 = sp + 88 | 0;
 $6 = sp + 84 | 0;
 $7 = sp + 80 | 0;
 $8 = sp + 76 | 0;
 $9 = sp + 72 | 0;
 $10 = sp + 68 | 0;
 $11 = sp + 64 | 0;
 $12 = sp + 60 | 0;
 $13 = sp + 56 | 0;
 $14 = sp + 52 | 0;
 $15 = sp + 48 | 0;
 $16 = sp + 44 | 0;
 $17 = sp + 40 | 0;
 $18 = sp + 36 | 0;
 $19 = sp + 32 | 0;
 $20 = sp + 28 | 0;
 $21 = sp + 24 | 0;
 $22 = sp + 20 | 0;
 $23 = sp + 16 | 0;
 $24 = sp + 12 | 0;
 $25 = sp + 8 | 0;
 $26 = sp + 4 | 0;
 $27 = sp;
 HEAP32[$26 >> 2] = $0;
 HEAP32[$27 >> 2] = $1;
 $28 = HEAP32[$26 >> 2] | 0;
 HEAP32[$25 >> 2] = HEAP32[$27 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$25 >> 2];
 $31 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $31;
 HEAP32[$22 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 if ((HEAPU8[(HEAP32[$21 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$15 >> 2] = $31;
  HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
  HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
  $49 = HEAP32[HEAP32[$13 >> 2] >> 2] | 0;
 } else {
  HEAP32[$20 >> 2] = $31;
  HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
  HEAP32[$18 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
  HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
  $49 = HEAP32[$16 >> 2] | 0;
 }
 HEAP32[$12 >> 2] = $49;
 $50 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$27 >> 2];
 $52 = HEAP32[$11 >> 2] | 0;
 HEAP32[$10 >> 2] = $52;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 if ((HEAPU8[(HEAP32[$8 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$4 >> 2] = $52;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  $72 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0;
  $73 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($28, $50, $72) | 0;
  STACKTOP = sp;
  return $73 | 0;
 } else {
  HEAP32[$7 >> 2] = $52;
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  $72 = HEAPU8[(HEAP32[$5 >> 2] | 0) + 11 >> 0] | 0;
  $73 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($28, $50, $72) | 0;
  STACKTOP = sp;
  return $73 | 0;
 }
 return 0;
}

function __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $5 = 0, $55 = 0, $57 = 0, $6 = 0, $62 = 0, $65 = 0, $7 = 0, $70 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 112 | 0;
 $5 = sp + 108 | 0;
 $6 = sp + 104 | 0;
 $7 = sp + 100 | 0;
 $9 = sp + 92 | 0;
 $10 = sp + 88 | 0;
 $12 = sp + 80 | 0;
 $13 = sp + 76 | 0;
 $14 = sp + 72 | 0;
 $15 = sp + 68 | 0;
 $16 = sp + 64 | 0;
 $18 = sp + 56 | 0;
 $19 = sp + 52 | 0;
 $20 = sp + 48 | 0;
 $21 = sp + 44 | 0;
 $22 = sp + 40 | 0;
 $23 = sp + 36 | 0;
 $24 = sp + 32 | 0;
 $25 = sp + 28 | 0;
 $26 = sp + 24 | 0;
 $27 = sp + 20 | 0;
 $28 = sp + 16 | 0;
 $29 = sp + 12 | 0;
 $30 = sp + 8 | 0;
 $31 = sp + 4 | 0;
 $32 = sp;
 HEAP32[$28 >> 2] = $0;
 HEAP32[$29 >> 2] = $1;
 HEAP32[$30 >> 2] = $2;
 HEAP32[$31 >> 2] = $3;
 $33 = HEAP32[$28 >> 2] | 0;
 HEAP32[$32 >> 2] = 0;
 $35 = HEAP32[$31 >> 2] | 0;
 HEAP32[$25 >> 2] = $33 + 12;
 HEAP32[$26 >> 2] = $32;
 HEAP32[$27 >> 2] = $35;
 $36 = HEAP32[$25 >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
 $38 = HEAP32[$24 >> 2] | 0;
 HEAP32[$18 >> 2] = $36;
 HEAP32[$19 >> 2] = $38;
 $39 = HEAP32[$18 >> 2] | 0;
 HEAP32[sp + 60 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$39 >> 2] = 0;
 HEAP32[$20 >> 2] = HEAP32[$27 >> 2];
 $43 = HEAP32[$20 >> 2] | 0;
 HEAP32[$22 >> 2] = $36 + 4;
 HEAP32[$23 >> 2] = $43;
 $44 = HEAP32[$22 >> 2] | 0;
 HEAP32[$21 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$44 >> 2] = HEAP32[$21 >> 2];
 if (HEAP32[$29 >> 2] | 0) {
  HEAP32[$6 >> 2] = $33;
  HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 12;
  HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
  $55 = HEAP32[$29 >> 2] | 0;
  HEAP32[$12 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
  HEAP32[$13 >> 2] = $55;
  $57 = HEAP32[$13 >> 2] | 0;
  HEAP32[$9 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$10 >> 2] = $57;
  HEAP32[sp + 84 >> 2] = 0;
  HEAP32[sp + 96 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
  $62 = __Znwm(HEAP32[$7 >> 2] | 0) | 0;
 } else $62 = 0;
 HEAP32[$33 >> 2] = $62;
 $65 = (HEAP32[$33 >> 2] | 0) + (HEAP32[$30 >> 2] | 0) | 0;
 HEAP32[$33 + 8 >> 2] = $65;
 HEAP32[$33 + 4 >> 2] = $65;
 $70 = (HEAP32[$33 >> 2] | 0) + (HEAP32[$29 >> 2] | 0) | 0;
 HEAP32[$16 >> 2] = $33;
 HEAP32[$15 >> 2] = (HEAP32[$16 >> 2] | 0) + 12;
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 HEAP32[HEAP32[$14 >> 2] >> 2] = $70;
 STACKTOP = sp;
 return;
}

function __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$016$i$i = 0, $$pre$phi47Z2D = 0, $$pre$phi49Z2D = 0, $$sroa$0$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $27 = 0, $28 = 0, $33 = 0, $42 = 0, $43 = 0, $49 = 0, $57 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!$7) {
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 $9 = $3;
 $10 = $1;
 $11 = $9 - $10 | 0;
 $12 = $4 + 12 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 $$0 = ($13 | 0) > ($11 | 0) ? $13 - $11 | 0 : 0;
 $16 = $2;
 $17 = $16 - $10 | 0;
 if (($17 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $1, $17) | 0) != ($17 | 0)) {
  HEAP32[$0 >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 do if (($$0 | 0) > 0) {
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  if ($$0 >>> 0 < 11) {
   $33 = $6 + 11 | 0;
   HEAP8[$33 >> 0] = $$0;
   $$016$i$i = $6;
   $$pre$phi47Z2D = $33;
   $$pre$phi49Z2D = $6;
  } else {
   $27 = $$0 + 16 & -16;
   $28 = __Znwm($27) | 0;
   HEAP32[$6 >> 2] = $28;
   HEAP32[$6 + 8 >> 2] = $27 | -2147483648;
   HEAP32[$6 + 4 >> 2] = $$0;
   $$016$i$i = $28;
   $$pre$phi47Z2D = $6 + 11 | 0;
   $$pre$phi49Z2D = $6;
  }
  _memset($$016$i$i | 0, $5 | 0, $$0 | 0) | 0;
  HEAP8[$$016$i$i + $$0 >> 0] = 0;
  __THREW__ = 0;
  $42 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0, $7 | 0, ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0 ? HEAP32[$$pre$phi49Z2D >> 2] | 0 : $6) | 0, $$0 | 0) | 0;
  $43 = __THREW__;
  __THREW__ = 0;
  if ($43 & 1) {
   $49 = ___cxa_find_matching_catch_2() | 0;
   if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) >= 0) ___resumeException($49 | 0);
   __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0);
   ___resumeException($49 | 0);
  }
  if (($42 | 0) == ($$0 | 0)) {
   if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0);
   break;
  }
  HEAP32[$0 >> 2] = 0;
  if ((HEAP8[$$pre$phi47Z2D >> 0] | 0) < 0) __ZdlPv(HEAP32[$$pre$phi49Z2D >> 2] | 0);
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 } while (0);
 $57 = $9 - $16 | 0;
 if (($57 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $2, $57) | 0) != ($57 | 0)) {
  HEAP32[$0 >> 2] = 0;
  $$sroa$0$2 = 0;
  STACKTOP = sp;
  return $$sroa$0$2 | 0;
 }
 HEAP32[$12 >> 2] = 0;
 $$sroa$0$2 = $7;
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$2 = 0, $$pre49 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $32 = 0, $43 = 0, $46 = 0, $48 = 0, $58 = 0, $63 = 0, $74 = 0, $80 = 0, $85 = 0, $88 = 0, label = 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$5 >> 2] = $3;
 $$pre49 = $4;
 if (!($7 & 2)) label = 4; else if (($$pre49 - $3 | 0) < 3) $$2 = 1; else {
  HEAP32[$5 >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = -17;
  $14 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $14 + 1;
  HEAP8[$14 >> 0] = -69;
  $16 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $16 + 1;
  HEAP8[$16 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $18 = HEAP32[$2 >> 2] | 0;
  while (1) {
   if ($18 >>> 0 >= $1 >>> 0) {
    $$2 = 0;
    break L4;
   }
   $20 = HEAP32[$18 >> 2] | 0;
   if ($20 >>> 0 > $6 >>> 0 | ($20 & -2048 | 0) == 55296) {
    $$2 = 2;
    break L4;
   }
   do if ($20 >>> 0 < 128) {
    $25 = HEAP32[$5 >> 2] | 0;
    if (($$pre49 - $25 | 0) < 1) {
     $$2 = 1;
     break L4;
    }
    HEAP32[$5 >> 2] = $25 + 1;
    HEAP8[$25 >> 0] = $20;
   } else {
    if ($20 >>> 0 < 2048) {
     $32 = HEAP32[$5 >> 2] | 0;
     if (($$pre49 - $32 | 0) < 2) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $32 + 1;
     HEAP8[$32 >> 0] = $20 >>> 6 | 192;
     $43 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $43 + 1;
     HEAP8[$43 >> 0] = $20 & 63 | 128;
     break;
    }
    $46 = HEAP32[$5 >> 2] | 0;
    $48 = $$pre49 - $46 | 0;
    if ($20 >>> 0 < 65536) {
     if (($48 | 0) < 3) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $20 >>> 12 | 224;
     $58 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $58 + 1;
     HEAP8[$58 >> 0] = $20 >>> 6 & 63 | 128;
     $63 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $63 + 1;
     HEAP8[$63 >> 0] = $20 & 63 | 128;
     break;
    } else {
     if (($48 | 0) < 4) {
      $$2 = 1;
      break L4;
     }
     HEAP32[$5 >> 2] = $46 + 1;
     HEAP8[$46 >> 0] = $20 >>> 18 | 240;
     $74 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $74 + 1;
     HEAP8[$74 >> 0] = $20 >>> 12 & 63 | 128;
     $80 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $80 + 1;
     HEAP8[$80 >> 0] = $20 >>> 6 & 63 | 128;
     $85 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $85 + 1;
     HEAP8[$85 >> 0] = $20 & 63 | 128;
     break;
    }
   } while (0);
   $88 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
   HEAP32[$2 >> 2] = $88;
   $18 = $88;
  }
 } while (0);
 return $$2 | 0;
}

function __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$091 = 0, $$185 = 0, $$185$ph = 0, $$589 = 0, $$pre = 0, $21 = 0, $22 = 0, $33 = 0, $47 = 0, $49 = 0, $56 = 0, $74 = 0, $76 = 0, $78 = 0, $84 = 0, $87 = 0;
 $$pre = $1;
 if (!($4 & 4)) $$185$ph = $0; else if (($$pre - $0 | 0) > 2) if ((HEAP8[$0 >> 0] | 0) == -17) if ((HEAP8[$0 + 1 >> 0] | 0) == -69) $$185$ph = (HEAP8[$0 + 2 >> 0] | 0) == -65 ? $0 + 3 | 0 : $0; else $$185$ph = $0; else $$185$ph = $0; else $$185$ph = $0;
 $$091 = 0;
 $$185 = $$185$ph;
 L7 : while (1) {
  if (!($$091 >>> 0 < $2 >>> 0 & $$185 >>> 0 < $1 >>> 0)) break;
  $21 = HEAP8[$$185 >> 0] | 0;
  $22 = $21 & 255;
  do if ($21 << 24 >> 24 > -1) {
   if ($22 >>> 0 > $3 >>> 0) break L7;
   $$589 = $$185 + 1 | 0;
  } else {
   if (($21 & 255) < 194) break L7;
   if (($21 & 255) < 224) {
    if (($$pre - $$185 | 0) < 2) break L7;
    $33 = HEAPU8[$$185 + 1 >> 0] | 0;
    if (($33 & 192 | 0) != 128) break L7;
    if (($33 & 63 | $22 << 6 & 1984) >>> 0 > $3 >>> 0) break L7;
    $$589 = $$185 + 2 | 0;
    break;
   }
   if (($21 & 255) < 240) {
    if (($$pre - $$185 | 0) < 3) break L7;
    $47 = HEAP8[$$185 + 1 >> 0] | 0;
    $49 = HEAP8[$$185 + 2 >> 0] | 0;
    switch ($21 << 24 >> 24) {
    case -32:
     {
      if (($47 & -32) << 24 >> 24 != -96) break L7;
      break;
     }
    case -19:
     {
      if (($47 & -32) << 24 >> 24 != -128) break L7;
      break;
     }
    default:
     if (($47 & -64) << 24 >> 24 != -128) break L7;
    }
    $56 = $49 & 255;
    if (($56 & 192 | 0) != 128) break L7;
    if ((($47 & 63) << 6 | $22 << 12 & 61440 | $56 & 63) >>> 0 > $3 >>> 0) break L7; else {
     $$589 = $$185 + 3 | 0;
     break;
    }
   }
   if (($21 & 255) >= 245) break L7;
   if (($$pre - $$185 | 0) < 4) break L7;
   $74 = HEAP8[$$185 + 1 >> 0] | 0;
   $76 = HEAP8[$$185 + 2 >> 0] | 0;
   $78 = HEAP8[$$185 + 3 >> 0] | 0;
   switch ($21 << 24 >> 24) {
   case -16:
    {
     if (($74 + 112 & 255) >= 48) break L7;
     break;
    }
   case -12:
    {
     if (($74 & -16) << 24 >> 24 != -128) break L7;
     break;
    }
   default:
    if (($74 & -64) << 24 >> 24 != -128) break L7;
   }
   $84 = $76 & 255;
   if (($84 & 192 | 0) != 128) break L7;
   $87 = $78 & 255;
   if (($87 & 192 | 0) != 128) break L7;
   if ((($74 & 63) << 12 | $22 << 18 & 1835008 | $84 << 6 & 4032 | $87 & 63) >>> 0 > $3 >>> 0) break L7; else $$589 = $$185 + 4 | 0;
  } while (0);
  $$091 = $$091 + 1 | 0;
  $$185 = $$589;
 }
 return $$185 - $0 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i$i = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $35 = 0, $39 = 0, $41 = 0, $43 = 0, $49 = 0, $51 = 0, $53 = 0, $55 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 __THREW__ = 0;
 invoke_vii(45, $2 | 0, $0 | 0);
 $3 = __THREW__;
 __THREW__ = 0;
 L1 : do if ($3 & 1) {
  $41 = ___cxa_find_matching_catch_3(0) | 0;
  $$0 = $41;
  $$pre$phi9Z2D = $0;
  $$pre$phiZ2D = $0;
  label = 12;
 } else {
  L4 : do if (HEAP8[$2 >> 0] | 0) {
   $12 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
   $13 = $12;
   do if (!$12) label = 8; else {
    $15 = $13 + 24 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    if (($16 | 0) == (HEAP32[$13 + 28 >> 2] | 0)) {
     $23 = HEAP32[(HEAP32[$12 >> 2] | 0) + 52 >> 2] | 0;
     $24 = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0;
     __THREW__ = 0;
     $25 = invoke_iii($23 | 0, $13 | 0, $24 | 0) | 0;
     $26 = __THREW__;
     __THREW__ = 0;
     if ($26 & 1) break; else $$0$i$i = $25;
    } else {
     HEAP32[$15 >> 2] = $16 + 1;
     HEAP8[$16 >> 0] = $1;
     $$0$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($1) | 0;
    }
    if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) label = 8; else break L4;
   } while (0);
   if ((label | 0) == 8) {
    $35 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
    __THREW__ = 0;
    invoke_vii(46, $35 | 0, HEAP32[$35 + 16 >> 2] | 1 | 0);
    $39 = __THREW__;
    __THREW__ = 0;
    if (!($39 & 1)) break;
   }
   $43 = ___cxa_find_matching_catch_3(0) | 0;
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
   $$0 = $43;
   $$pre$phi9Z2D = $0;
   $$pre$phiZ2D = $0;
   label = 12;
   break L1;
  } while (0);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($2);
 } while (0);
 do if ((label | 0) == 12) {
  ___cxa_begin_catch($$0 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $$pre$phi9Z2D + (HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + -12 >> 2] | 0) | 0);
  $49 = __THREW__;
  __THREW__ = 0;
  if (!($49 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $51 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $53 = __THREW__;
  __THREW__ = 0;
  if ($53 & 1) {
   $55 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($55);
  } else ___resumeException($51 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}
function _wcsnrtombs($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$04773 = 0, $$05172 = 0, $$054 = 0, $$148 = 0, $$152 = 0, $$15571 = 0, $$162 = 0, $$174 = 0, $$2 = 0, $$24968 = 0, $$25367 = 0, $$256 = 0, $$350 = 0, $$357 = 0, $$369 = 0, $$466 = 0, $$cast = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $24 = 0, $30 = 0, $31 = 0, $40 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $5 = sp;
 $6 = sp + 256 | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP32[$6 >> 2] = $7;
 $8 = ($0 | 0) != 0;
 $$054 = $8 ? $3 : 256;
 $$0 = $8 ? $0 : $5;
 $$cast = $7;
 L1 : do if (($$054 | 0) != 0 & ($7 | 0) != 0) {
  $$04773 = 0;
  $$05172 = $2;
  $$15571 = $$054;
  $$174 = $$0;
  $45 = $$cast;
  while (1) {
   $11 = $$05172 >>> 0 >= $$15571 >>> 0;
   if (!($11 | $$05172 >>> 0 > 32)) {
    $$148 = $$04773;
    $$152 = $$05172;
    $$162 = $$174;
    $$357 = $$15571;
    $24 = $45;
    break L1;
   }
   $spec$select = $11 ? $$15571 : $$05172;
   $14 = $$05172 - $spec$select | 0;
   $15 = _wcsrtombs($$174, $6, $spec$select, 0) | 0;
   if (($15 | 0) == -1) break;
   $17 = ($$174 | 0) == ($5 | 0);
   $$256 = $$15571 - ($17 ? 0 : $15) | 0;
   $$2 = $17 ? $$174 : $$174 + $15 | 0;
   $20 = $15 + $$04773 | 0;
   $21 = HEAP32[$6 >> 2] | 0;
   if (($$256 | 0) != 0 & ($21 | 0) != 0) {
    $$04773 = $20;
    $$05172 = $14;
    $$15571 = $$256;
    $$174 = $$2;
    $45 = $21;
   } else {
    $$148 = $20;
    $$152 = $14;
    $$162 = $$2;
    $$357 = $$256;
    $24 = $21;
    break L1;
   }
  }
  $$148 = -1;
  $$152 = $14;
  $$162 = $$174;
  $$357 = 0;
  $24 = HEAP32[$6 >> 2] | 0;
 } else {
  $$148 = 0;
  $$152 = $2;
  $$162 = $$0;
  $$357 = $$054;
  $24 = $$cast;
 } while (0);
 L9 : do if (!$24) $$350 = $$148; else if (($$357 | 0) != 0 & ($$152 | 0) != 0) {
  $$24968 = $$148;
  $$25367 = $$152;
  $$369 = $$162;
  $$466 = $$357;
  $30 = $24;
  while (1) {
   $31 = _wcrtomb($$369, HEAP32[$30 >> 2] | 0, 0) | 0;
   if (($31 + 1 | 0) >>> 0 < 2) break;
   $30 = (HEAP32[$6 >> 2] | 0) + 4 | 0;
   HEAP32[$6 >> 2] = $30;
   $$25367 = $$25367 + -1 | 0;
   $$466 = $$466 - $31 | 0;
   $40 = $31 + $$24968 | 0;
   if (!(($$466 | 0) != 0 & ($$25367 | 0) != 0)) {
    $$350 = $40;
    break L9;
   } else {
    $$24968 = $40;
    $$369 = $$369 + $31 | 0;
   }
  }
  if (!$31) {
   HEAP32[$6 >> 2] = 0;
   $$350 = $$24968;
  } else $$350 = -1;
 } else $$350 = $$148; while (0);
 if ($8) HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
 STACKTOP = sp;
 return $$350 | 0;
}

function __ZN3zim10FileReaderC2ENSt3__210shared_ptrIKNS_12FileCompoundEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $43 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy1 = sp + 24 | 0;
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 80 | 0;
 $3 = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $6 = sp + 64 | 0;
 $7 = sp + 60 | 0;
 $8 = sp + 56 | 0;
 $9 = sp + 52 | 0;
 $10 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 36 | 0;
 $14 = sp + 32 | 0;
 $15 = sp;
 HEAP32[$10 >> 2] = $0;
 $16 = HEAP32[$10 >> 2] | 0;
 HEAP32[$8 >> 2] = $11;
 HEAP32[$9 >> 2] = $1;
 $17 = HEAP32[$8 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$17 + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$17 + 4 >> 2] | 0) {
  HEAP32[$7 >> 2] = HEAP32[$17 + 4 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$3 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
  $32 = HEAP32[$3 >> 2] | 0;
  HEAP32[$4 >> 2] = 1;
  $33 = HEAP32[$4 >> 2] | 0;
  $34 = HEAP32[$32 >> 2] | 0;
  HEAP32[$32 >> 2] = $34 + $33;
  HEAP32[sp + 68 >> 2] = $34 + $33;
 }
 __THREW__ = 0;
 invoke_viii(16, $12 | 0, 0, 0);
 $37 = __THREW__;
 __THREW__ = 0;
 if ($37 & 1) {
  $49 = ___cxa_find_matching_catch_2() | 0;
  $50 = tempRet0;
  HEAP32[$13 >> 2] = $49;
  HEAP32[$14 >> 2] = $50;
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($11);
  $51 = HEAP32[$13 >> 2] | 0;
  $52 = HEAP32[$14 >> 2] | 0;
  ___resumeException($51 | 0);
 }
 HEAP32[$2 >> 2] = $1;
 $41 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 $43 = $15;
 HEAP32[$43 >> 2] = $41;
 HEAP32[$43 + 4 >> 2] = tempRet0;
 __THREW__ = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$15 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$15 + 4 >> 2];
 invoke_viiii(18, $16 | 0, $11 | 0, $$byval_copy | 0, $$byval_copy1 | 0);
 $47 = __THREW__;
 __THREW__ = 0;
 if ($47 & 1) {
  $49 = ___cxa_find_matching_catch_2() | 0;
  $50 = tempRet0;
  HEAP32[$13 >> 2] = $49;
  HEAP32[$14 >> 2] = $50;
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($11);
  $51 = HEAP32[$13 >> 2] | 0;
  $52 = HEAP32[$14 >> 2] | 0;
  ___resumeException($51 | 0);
 } else {
  __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($11);
  STACKTOP = sp;
  return;
 }
}

function _validate_chain($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $25 = 0, $3 = 0, $33 = 0, $4 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0, $79 = 0, $8 = 0, $81 = 0, $9 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 25 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (HEAP32[$3 >> 2] | 0) {
  $13 = HEAP32[$3 >> 2] | 0;
  if (!((HEAP32[$13 >> 2] | 0) == -1 ? (HEAP32[$13 + 4 >> 2] | 0) == -1 : 0)) {
   HEAP32[$5 >> 2] = 0;
   HEAP8[$6 >> 0] = 1;
   HEAP8[$7 >> 0] = 0;
   HEAP32[$8 >> 2] = 0;
   L4 : while (1) {
    HEAP32[$9 >> 2] = 0;
    while (1) {
     $25 = (HEAP32[$3 >> 2] | 0) + (HEAP32[$8 >> 2] << 4) | 0;
     $33 = 13792 + (HEAP32[$9 >> 2] << 4) | 0;
     if (!((HEAP32[$25 >> 2] | 0) != (HEAP32[$33 >> 2] | 0) ? 1 : (HEAP32[$25 + 4 >> 2] | 0) != (HEAP32[$33 + 4 >> 2] | 0))) break;
     $44 = 13792 + (HEAP32[$9 >> 2] << 4) | 0;
     if ((HEAP32[$44 >> 2] | 0) == -1 ? (HEAP32[$44 + 4 >> 2] | 0) == -1 : 0) {
      label = 8;
      break L4;
     }
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
    }
    if (!(HEAP8[$6 >> 0] & 1)) {
     label = 11;
     break;
    }
    HEAP8[$6 >> 0] = HEAP8[13792 + (HEAP32[$9 >> 2] << 4) + 12 >> 0] & 1;
    HEAP8[$7 >> 0] = HEAP8[13792 + (HEAP32[$9 >> 2] << 4) + 13 >> 0] & 1;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + (HEAP8[13792 + (HEAP32[$9 >> 2] << 4) + 14 >> 0] & 1);
    $77 = HEAP32[$3 >> 2] | 0;
    $79 = (HEAP32[$8 >> 2] | 0) + 1 | 0;
    HEAP32[$8 >> 2] = $79;
    $81 = $77 + ($79 << 4) | 0;
    if (!((HEAP32[$81 >> 2] | 0) != -1 ? 1 : (HEAP32[$81 + 4 >> 2] | 0) != -1)) {
     label = 13;
     break;
    }
   }
   if ((label | 0) == 8) {
    HEAP32[$2 >> 2] = 8;
    $98 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $98 | 0;
   } else if ((label | 0) == 11) {
    HEAP32[$2 >> 2] = 8;
    $98 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $98 | 0;
   } else if ((label | 0) == 13) {
    if ((HEAP32[$8 >> 2] | 0) >>> 0 <= 4) if (!(HEAP8[$7 >> 0] & 1 ^ 1 | (HEAP32[$5 >> 2] | 0) >>> 0 > 3)) {
     HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$8 >> 2];
     HEAP32[$2 >> 2] = 0;
     $98 = HEAP32[$2 >> 2] | 0;
     STACKTOP = sp;
     return $98 | 0;
    }
    HEAP32[$2 >> 2] = 8;
    $98 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $98 | 0;
   }
  }
 }
 HEAP32[$2 >> 2] = 11;
 $98 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $98 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $28 = 0, $3 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $61 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 $13 = sp + 44 | 0;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 $14 = HEAP32[$11 >> 2] | 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 24 >> 2] & 127]($14) | 0;
 HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$14 + 68 >> 2] = __ZNKSt3__26locale9use_facetERNS0_2idE(HEAP32[$10 >> 2] | 0, 62672) | 0;
 HEAP8[$13 >> 0] = HEAP8[$14 + 98 >> 0] & 1;
 HEAP32[$9 >> 2] = HEAP32[$14 + 68 >> 2];
 $28 = HEAP32[$9 >> 2] | 0;
 HEAP8[$14 + 98 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] & 127]($28) | 0) & 1;
 if ((HEAP8[$13 >> 0] & 1 | 0) == (HEAP8[$14 + 98 >> 0] & 1 | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = $14;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$8 >> 2] = 0;
 $43 = HEAP32[$5 >> 2] | 0;
 HEAP32[$43 + 8 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$43 + 12 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$43 + 16 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$2 >> 2] = $14;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 $50 = HEAP32[$2 >> 2] | 0;
 $51 = HEAP32[$3 >> 2] | 0;
 HEAP32[$50 + 24 >> 2] = $51;
 HEAP32[$50 + 20 >> 2] = $51;
 HEAP32[$50 + 28 >> 2] = HEAP32[$4 >> 2];
 $61 = HEAP8[$14 + 96 >> 0] & 1;
 if (HEAP8[$14 + 98 >> 0] & 1) {
  if ($61) {
   $63 = HEAP32[$14 + 32 >> 2] | 0;
   if ($63 | 0) __ZdaPv($63);
  }
  HEAP8[$14 + 96 >> 0] = HEAP8[$14 + 97 >> 0] & 1;
  HEAP32[$14 + 52 >> 2] = HEAP32[$14 + 60 >> 2];
  HEAP32[$14 + 32 >> 2] = HEAP32[$14 + 56 >> 2];
  HEAP32[$14 + 60 >> 2] = 0;
  HEAP32[$14 + 56 >> 2] = 0;
  HEAP8[$14 + 97 >> 0] = 0;
  STACKTOP = sp;
  return;
 }
 if (!$61) if ((HEAP32[$14 + 32 >> 2] | 0) != ($14 + 44 | 0)) {
  HEAP32[$14 + 60 >> 2] = HEAP32[$14 + 52 >> 2];
  HEAP32[$14 + 56 >> 2] = HEAP32[$14 + 32 >> 2];
  HEAP8[$14 + 97 >> 0] = 0;
  HEAP32[$14 + 32 >> 2] = __Znam(HEAP32[$14 + 52 >> 2] | 0) | 0;
  HEAP8[$14 + 96 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 HEAP32[$14 + 60 >> 2] = HEAP32[$14 + 52 >> 2];
 HEAP32[$14 + 56 >> 2] = __Znam(HEAP32[$14 + 60 >> 2] | 0) | 0;
 HEAP8[$14 + 97 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK3zim7Article14getArticleSizeEv($0) {
 $0 = $0 | 0;
 var $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy1 = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp;
 HEAP32[$5 >> 2] = $0;
 $13 = HEAP32[$5 >> 2] | 0;
 __ZNK3zim7Article9getDirentEv($6, $13);
 HEAP32[$4 >> 2] = $13;
 $15 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 HEAP32[$3 >> 2] = $6;
 __THREW__ = 0;
 $18 = invoke_ii(90, HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
 $19 = __THREW__;
 __THREW__ = 0;
 if (!($19 & 1)) {
  HEAP32[$8 >> 2] = $18;
  __THREW__ = 0;
  HEAP32[$$byval_copy1 >> 2] = HEAP32[$8 >> 2];
  invoke_viii(15, $7 | 0, $15 | 0, $$byval_copy1 | 0);
  $21 = __THREW__;
  __THREW__ = 0;
  if (!($21 & 1)) {
   HEAP32[$2 >> 2] = $7;
   $24 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
   HEAP32[$1 >> 2] = $6;
   __THREW__ = 0;
   $27 = invoke_ii(91, HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
   $28 = __THREW__;
   __THREW__ = 0;
   if (!($28 & 1)) {
    HEAP32[$11 >> 2] = $27;
    __THREW__ = 0;
    HEAP32[$$byval_copy1 >> 2] = HEAP32[$11 >> 2];
    $30 = invoke_iii(38, $24 | 0, $$byval_copy1 | 0) | 0;
    $31 = tempRet0;
    $32 = __THREW__;
    __THREW__ = 0;
    if (!($32 & 1)) {
     $34 = $12;
     HEAP32[$34 >> 2] = $30;
     HEAP32[$34 + 4 >> 2] = $31;
     $38 = __ZNK12REAL_TYPEDEFIyEcvyEv($12) | 0;
     $39 = tempRet0;
     __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($7);
     __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($6);
     tempRet0 = $39;
     STACKTOP = sp;
     return $38 | 0;
    }
   }
   $42 = ___cxa_find_matching_catch_2() | 0;
   HEAP32[$9 >> 2] = $42;
   HEAP32[$10 >> 2] = tempRet0;
   __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($7);
   __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($6);
   $44 = HEAP32[$9 >> 2] | 0;
   $45 = HEAP32[$10 >> 2] | 0;
   ___resumeException($44 | 0);
  }
 }
 $40 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$9 >> 2] = $40;
 HEAP32[$10 >> 2] = tempRet0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($6);
 $44 = HEAP32[$9 >> 2] | 0;
 $45 = HEAP32[$10 >> 2] | 0;
 ___resumeException($44 | 0);
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $3 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 HEAP32[$20 >> 2] = $0;
 HEAP32[$21 >> 2] = $1;
 $23 = HEAP32[$20 >> 2] | 0;
 if (!(HEAP32[$21 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($23, HEAP32[HEAP32[$21 >> 2] >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($23, HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$12 >> 2] = $23;
 HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$10 >> 2];
 $35 = HEAP32[$22 >> 2] | 0;
 HEAP32[$9 >> 2] = (HEAP32[$21 >> 2] | 0) + 16;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 $39 = HEAP32[$8 >> 2] | 0;
 HEAP32[$5 >> 2] = $35;
 HEAP32[$6 >> 2] = $39;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$6 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 80 >> 0] | 0;
 HEAP32[sp + 76 >> 2] = $40;
 HEAP32[$3 >> 2] = $41;
 __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev(HEAP32[$3 >> 2] | 0);
 $44 = HEAP32[$21 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$18 >> 2] = $44;
 HEAP32[$19 >> 2] = 1;
 $46 = HEAP32[$18 >> 2] | 0;
 $47 = HEAP32[$19 >> 2] | 0;
 HEAP32[sp + 36 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $46;
 HEAP32[sp + 28 >> 2] = $47;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 __ZdlPv(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $44 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $3 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 HEAP32[$20 >> 2] = $0;
 HEAP32[$21 >> 2] = $1;
 $23 = HEAP32[$20 >> 2] | 0;
 if (!(HEAP32[$21 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($23, HEAP32[HEAP32[$21 >> 2] >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($23, HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$12 >> 2] = $23;
 HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$10 >> 2];
 $35 = HEAP32[$22 >> 2] | 0;
 HEAP32[$9 >> 2] = (HEAP32[$21 >> 2] | 0) + 16;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 $39 = HEAP32[$8 >> 2] | 0;
 HEAP32[$5 >> 2] = $35;
 HEAP32[$6 >> 2] = $39;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$6 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 80 >> 0] | 0;
 HEAP32[sp + 76 >> 2] = $40;
 HEAP32[$3 >> 2] = $41;
 __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev(HEAP32[$3 >> 2] | 0);
 $44 = HEAP32[$21 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$18 >> 2] = $44;
 HEAP32[$19 >> 2] = 1;
 $46 = HEAP32[$18 >> 2] | 0;
 $47 = HEAP32[$19 >> 2] | 0;
 HEAP32[sp + 36 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $46;
 HEAP32[sp + 28 >> 2] = $47;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 __ZdlPv(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $39 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255;
 $7 = ($2 | 0) != 0;
 L1 : do if ($7 & ($0 & 3 | 0) != 0) {
  $8 = $1 & 255;
  $$03555 = $0;
  $$03654 = $2;
  while (1) {
   if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
    $$035$lcssa65 = $$03555;
    $$036$lcssa64 = $$03654;
    label = 6;
    break L1;
   }
   $11 = $$03555 + 1 | 0;
   $12 = $$03654 + -1 | 0;
   $16 = ($12 | 0) != 0;
   if ($16 & ($11 & 3 | 0) != 0) {
    $$03555 = $11;
    $$03654 = $12;
   } else {
    $$035$lcssa = $11;
    $$036$lcssa = $12;
    $$lcssa = $16;
    label = 5;
    break;
   }
  }
 } else {
  $$035$lcssa = $0;
  $$036$lcssa = $2;
  $$lcssa = $7;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$035$lcssa65 = $$035$lcssa;
  $$036$lcssa64 = $$036$lcssa;
  label = 6;
 } else label = 16;
 L8 : do if ((label | 0) == 6) {
  $18 = $1 & 255;
  if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) if (!$$036$lcssa64) {
   label = 16;
   break;
  } else {
   $39 = $$035$lcssa65;
   break;
  }
  $20 = Math_imul($3, 16843009) | 0;
  L13 : do if ($$036$lcssa64 >>> 0 > 3) {
   $$046 = $$035$lcssa65;
   $$13745 = $$036$lcssa64;
   while (1) {
    $23 = HEAP32[$$046 >> 2] ^ $20;
    if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
     $$137$lcssa66 = $$13745;
     $$in = $$046;
     break L13;
    }
    $29 = $$046 + 4 | 0;
    $30 = $$13745 + -4 | 0;
    if ($30 >>> 0 > 3) {
     $$046 = $29;
     $$13745 = $30;
    } else {
     $$0$lcssa = $29;
     $$137$lcssa = $30;
     label = 11;
     break;
    }
   }
  } else {
   $$0$lcssa = $$035$lcssa65;
   $$137$lcssa = $$036$lcssa64;
   label = 11;
  } while (0);
  if ((label | 0) == 11) if (!$$137$lcssa) {
   label = 16;
   break;
  } else {
   $$137$lcssa66 = $$137$lcssa;
   $$in = $$0$lcssa;
  }
  $$140 = $$in;
  $$23839 = $$137$lcssa66;
  while (1) {
   if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
    $39 = $$140;
    break L8;
   }
   $$23839 = $$23839 + -1 | 0;
   if (!$$23839) {
    label = 16;
    break;
   } else $$140 = $$140 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 16) $39 = 0;
 return $39 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $$01739 = 0, $$018$off037 = 0, $$1404753 = 0, $$141 = 0, $$pre$phi56Z2D = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $3 = 0, $33 = 0, $4 = 0, $5 = 0, $spec$select$i = 0, label = 0;
 if ($1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $3 = $0 + 11 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 << 24 >> 24 < 0;
 if ($5) {
  $12 = HEAP32[$0 + 4 >> 2] | 0;
  $18 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $12 = $4 & 255;
  $18 = 10;
 }
 $$sroa$speculated = $12 >>> 0 > $1 >>> 0 ? $12 : $1;
 $14 = $$sroa$speculated >>> 0 < 11;
 $spec$select$i = $14 ? 10 : ($$sroa$speculated + 16 & -16) + -1 | 0;
 L8 : do if (($spec$select$i | 0) != ($18 | 0)) {
  do if ($14) {
   $28 = HEAP32[$0 >> 2] | 0;
   if ($5) {
    $$01739 = $28;
    $$018$off037 = 0;
    $$141 = $0;
    label = 17;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $28, ($4 & 255) + 1 | 0) | 0;
    __ZdlPv($28);
    label = 20;
   }
  } else {
   $20 = $spec$select$i + 1 | 0;
   if ($spec$select$i >>> 0 > $18 >>> 0) $$016 = __Znwm($20) | 0; else {
    __THREW__ = 0;
    $22 = invoke_ii(79, $20 | 0) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    if ($23 & 1) {
     $25 = ___cxa_find_matching_catch_3(0) | 0;
     ___cxa_begin_catch($25 | 0) | 0;
     ___cxa_end_catch();
     break L8;
    } else $$016 = $22;
   }
   if ($5) {
    $$01739 = HEAP32[$0 >> 2] | 0;
    $$018$off037 = 1;
    $$141 = $$016;
    label = 17;
    break;
   } else {
    __ZNSt3__211char_traitsIcE4copyEPcPKcm($$016, $0, ($4 & 255) + 1 | 0) | 0;
    $$1404753 = $$016;
    $$pre$phi56Z2D = $20;
    $$pre$phiZ2D = $0 + 4 | 0;
    label = 19;
    break;
   }
  } while (0);
  if ((label | 0) == 17) {
   $33 = $0 + 4 | 0;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($$141, $$01739, (HEAP32[$33 >> 2] | 0) + 1 | 0) | 0;
   __ZdlPv($$01739);
   if ($$018$off037) {
    $$1404753 = $$141;
    $$pre$phi56Z2D = $spec$select$i + 1 | 0;
    $$pre$phiZ2D = $33;
    label = 19;
   } else label = 20;
  }
  if ((label | 0) == 19) {
   HEAP32[$0 + 8 >> 2] = $$pre$phi56Z2D | -2147483648;
   HEAP32[$$pre$phiZ2D >> 2] = $12;
   HEAP32[$0 >> 2] = $$1404753;
   break;
  } else if ((label | 0) == 20) {
   HEAP8[$3 >> 0] = $12;
   break;
  }
 } while (0);
 return;
}

function __ZNK3zim4unix2FD6readAtEPcNS_7zsize_tENS_8offset_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $22 = 0, $27 = 0, $28 = 0, $33 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $61 = 0, $64 = 0, $7 = 0, $70 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $85 = 0, $87 = 0, $9 = 0, $94 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 8 | 0;
 $9 = sp;
 $10 = sp + 24 | 0;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 $11 = HEAP32[$5 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 $12 = $2;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 $18 = $8;
 HEAP32[$18 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$18 + 4 >> 2] = $17;
 $22 = $3;
 $27 = HEAP32[$22 + 4 >> 2] | 0;
 $28 = $9;
 HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$28 + 4 >> 2] = $27;
 HEAP32[(___errno_location() | 0) >> 2] = 0;
 while (1) {
  $33 = $8;
  $38 = HEAP32[$33 + 4 >> 2] | 0;
  if (!($38 >>> 0 > 0 | ($38 | 0) == 0 & (HEAP32[$33 >> 2] | 0) >>> 0 > 0)) {
   label = 6;
   break;
  }
  HEAP32[$10 >> 2] = _pread(HEAP32[$11 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0) | 0;
  if ((HEAP32[$10 >> 2] | 0) == -1) {
   label = 4;
   break;
  }
  $61 = HEAP32[$10 >> 2] | 0;
  $64 = $8;
  $70 = _i64Subtract(HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0, $61 | 0, (($61 | 0) < 0) << 31 >> 31 | 0) | 0;
  $72 = $8;
  HEAP32[$72 >> 2] = $70;
  HEAP32[$72 + 4 >> 2] = tempRet0;
  $76 = HEAP32[$10 >> 2] | 0;
  $79 = $9;
  $85 = _i64Add(HEAP32[$79 >> 2] | 0, HEAP32[$79 + 4 >> 2] | 0, $76 | 0, (($76 | 0) < 0) << 31 >> 31 | 0) | 0;
  $87 = $9;
  HEAP32[$87 >> 2] = $85;
  HEAP32[$87 + 4 >> 2] = tempRet0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + (HEAP32[$10 >> 2] | 0);
 }
 if ((label | 0) == 4) {
  __ZN3zim7zsize_tC2Ey($4, -1, -1);
  $97 = $4;
  $98 = $97;
  $99 = HEAP32[$98 >> 2] | 0;
  $100 = $97 + 4 | 0;
  $101 = $100;
  $102 = HEAP32[$101 >> 2] | 0;
  tempRet0 = $102;
  STACKTOP = sp;
  return $99 | 0;
 } else if ((label | 0) == 6) {
  $94 = HEAP32[$7 >> 2] | 0;
  __ZN3zim7zsize_tC2Ey($4, $94, (($94 | 0) < 0) << 31 >> 31);
  $97 = $4;
  $98 = $97;
  $99 = HEAP32[$98 >> 2] | 0;
  $100 = $97 + 4 | 0;
  $101 = $100;
  $102 = HEAP32[$101 >> 2] | 0;
  tempRet0 = $102;
  STACKTOP = sp;
  return $99 | 0;
 }
 return 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $43 = 0, $56 = 0, $58 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = ($10 | 0) == ($2 | 0);
 do if ($11) {
  $14 = (HEAP32[$9 + 96 >> 2] | 0) == ($0 | 0);
  if (!$14) if ((HEAP32[$9 + 100 >> 2] | 0) != ($0 | 0)) {
   label = 5;
   break;
  }
  HEAP32[$3 >> 2] = $2 + 1;
  HEAP8[$2 >> 0] = $14 ? 43 : 45;
  HEAP32[$4 >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $21 = HEAP8[$6 + 11 >> 0] | 0;
  if (($0 | 0) == ($5 | 0) ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
   $29 = HEAP32[$8 >> 2] | 0;
   if (($29 - $7 | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $34 = HEAP32[$4 >> 2] | 0;
   HEAP32[$8 >> 2] = $29 + 4;
   HEAP32[$29 >> 2] = $34;
   HEAP32[$4 >> 2] = 0;
   $$1 = 0;
   break;
  }
  $36 = $9 + 104 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $9 + ($$0$i$idx << 2) | 0;
   if (($$0$i$idx | 0) == 26) {
    $$0$lcssa$i = $36;
    break;
   }
   if ((HEAP32[$$0$i$ptr >> 2] | 0) == ($0 | 0)) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $42 = $$0$lcssa$i - $9 | 0;
  $43 = $42 >> 2;
  if (($42 | 0) > 92) $$1 = -1; else {
   switch ($1 | 0) {
   case 10:
   case 8:
    {
     if (($43 | 0) >= ($1 | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($42 | 0) >= 88) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      if (($10 - $2 | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4 >> 2] = 0;
      $56 = HEAP8[40416 + $43 >> 0] | 0;
      HEAP32[$3 >> 2] = $10 + 1;
      HEAP8[$10 >> 0] = $56;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $58 = HEAP8[40416 + $43 >> 0] | 0;
   HEAP32[$3 >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $58;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $22 = 0, $26 = 0, $29 = 0, $32 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $49 = 0, $50 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 8 | 0;
 $15 = sp;
 $16 = sp + 20 | 0;
 $17 = sp + 16 | 0;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 HEAP32[$13 >> 2] = $2;
 $18 = $14;
 HEAP32[$18 >> 2] = $3;
 HEAP32[$18 + 4 >> 2] = $4;
 $22 = $15;
 HEAP32[$22 >> 2] = $5;
 HEAP32[$22 + 4 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 HEAP32[$17 >> 2] = $8;
 $26 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $29 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($26, HEAP32[$16 >> 2] | 0) | 0, 49661) | 0;
 $32 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($29, HEAP32[$17 >> 2] | 0) | 0, 49663) | 0;
 $35 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($32, HEAP32[$11 >> 2] | 0) | 0, 49666) | 0;
 $36 = $14;
 $43 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy($35, HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0) | 0, 49668) | 0;
 $46 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($43, HEAP32[$12 >> 2] | 0) | 0, 49671) | 0;
 $49 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($46, HEAP32[$13 >> 2] | 0) | 0, 49666) | 0;
 $50 = $15;
 HEAP32[$9 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy($49, HEAP32[$50 >> 2] | 0, HEAP32[$50 + 4 >> 2] | 0) | 0, 49673) | 0;
 HEAP32[$10 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$10 >> 2] & 127](HEAP32[$9 >> 2] | 0) | 0;
 _exit(1);
}

function __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $$0$i$idx = 0, $$0$i$ptr = 0, $$0$lcssa$i = 0, $$1 = 0, $10 = 0, $11 = 0, $14 = 0, $21 = 0, $29 = 0, $34 = 0, $36 = 0, $42 = 0, $55 = 0, $57 = 0, label = 0;
 $10 = HEAP32[$3 >> 2] | 0;
 $11 = ($10 | 0) == ($2 | 0);
 do if ($11) {
  $14 = (HEAP8[$9 + 24 >> 0] | 0) == $0 << 24 >> 24;
  if (!$14) if ((HEAP8[$9 + 25 >> 0] | 0) != $0 << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$3 >> 2] = $2 + 1;
  HEAP8[$2 >> 0] = $14 ? 43 : 45;
  HEAP32[$4 >> 2] = 0;
  $$1 = 0;
 } else label = 5; while (0);
 L6 : do if ((label | 0) == 5) {
  $21 = HEAP8[$6 + 11 >> 0] | 0;
  if ($0 << 24 >> 24 == $5 << 24 >> 24 ? (($21 << 24 >> 24 < 0 ? HEAP32[$6 + 4 >> 2] | 0 : $21 & 255) | 0) != 0 : 0) {
   $29 = HEAP32[$8 >> 2] | 0;
   if (($29 - $7 | 0) >= 160) {
    $$1 = 0;
    break;
   }
   $34 = HEAP32[$4 >> 2] | 0;
   HEAP32[$8 >> 2] = $29 + 4;
   HEAP32[$29 >> 2] = $34;
   HEAP32[$4 >> 2] = 0;
   $$1 = 0;
   break;
  }
  $36 = $9 + 26 | 0;
  $$0$i$idx = 0;
  while (1) {
   $$0$i$ptr = $9 + $$0$i$idx | 0;
   if (($$0$i$idx | 0) == 26) {
    $$0$lcssa$i = $36;
    break;
   }
   if ((HEAP8[$$0$i$ptr >> 0] | 0) == $0 << 24 >> 24) {
    $$0$lcssa$i = $$0$i$ptr;
    break;
   } else $$0$i$idx = $$0$i$idx + 1 | 0;
  }
  $42 = $$0$lcssa$i - $9 | 0;
  if (($42 | 0) > 23) $$1 = -1; else {
   switch ($1 | 0) {
   case 10:
   case 8:
    {
     if (($42 | 0) >= ($1 | 0)) {
      $$1 = -1;
      break L6;
     }
     break;
    }
   case 16:
    {
     if (($42 | 0) >= 22) {
      if ($11) {
       $$1 = -1;
       break L6;
      }
      if (($10 - $2 | 0) >= 3) {
       $$1 = -1;
       break L6;
      }
      if ((HEAP8[$10 + -1 >> 0] | 0) != 48) {
       $$1 = -1;
       break L6;
      }
      HEAP32[$4 >> 2] = 0;
      $55 = HEAP8[40416 + $42 >> 0] | 0;
      HEAP32[$3 >> 2] = $10 + 1;
      HEAP8[$10 >> 0] = $55;
      $$1 = 0;
      break L6;
     }
     break;
    }
   default:
    {}
   }
   $57 = HEAP8[40416 + $42 >> 0] | 0;
   HEAP32[$3 >> 2] = $10 + 1;
   HEAP8[$10 >> 0] = $57;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
   $$1 = 0;
  }
 } while (0);
 return $$1 | 0;
}

function __ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i25 = 0, $$0$i30 = 0, $$1 = 0, $$123 = 0, $10 = 0, $11 = 0, $16 = 0, $18 = 0, $21 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $42 = 0, $45 = 0, $46 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $10 = HEAP8[$5 + 11 >> 0] | 0;
 $11 = $10 << 24 >> 24 < 0;
 $16 = $11 ? HEAP32[$5 >> 2] | 0 : $5;
 $18 = $16 + ($11 ? HEAP32[$5 + 4 >> 2] | 0 : $10 & 255) | 0;
 $$0$i30 = $16;
 while (1) {
  if ($$0$i30 >>> 0 >= $18 >>> 0) {
   label = 8;
   break;
  }
  __THREW__ = 0;
  invoke_vii(47, $6 | 0, HEAP8[$$0$i30 >> 0] | 0);
  $21 = __THREW__;
  __THREW__ = 0;
  if ($21 & 1) {
   label = 9;
   break;
  }
  $$0$i30 = $$0$i30 + 1 | 0;
 }
 do if ((label | 0) == 8) {
  $32 = (HEAP8[$6 + 11 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6;
  $33 = _catgets(($2 | 0) == -1 ? -1 : $2 << 1, $3, $4, $32) | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $$0$i$i25 = 0;
  while (1) {
   if (($$0$i$i25 | 0) == 3) break;
   HEAP32[$0 + ($$0$i$i25 << 2) >> 2] = 0;
   $$0$i$i25 = $$0$i$i25 + 1 | 0;
  }
  $39 = $32 + (_strlen($33) | 0) | 0;
  $$0$i = $32;
  while (1) {
   if ($$0$i >>> 0 >= $39 >>> 0) {
    label = 17;
    break;
   }
   __THREW__ = 0;
   invoke_vii(47, $0 | 0, HEAP8[$$0$i >> 0] | 0);
   $42 = __THREW__;
   __THREW__ = 0;
   if ($42 & 1) {
    label = 16;
    break;
   }
   $$0$i = $$0$i + 1 | 0;
  }
  if ((label | 0) == 16) {
   $45 = ___cxa_find_matching_catch_2() | 0;
   $46 = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
   $$1 = $45;
   $$123 = $46;
   break;
  } else if ((label | 0) == 17) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   STACKTOP = sp;
   return;
  }
 } else if ((label | 0) == 9) {
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$1 = $34;
  $$123 = tempRet0;
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 ___resumeException($$1 | 0);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $15 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $scevgep44 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $1;
 $4 = sp;
 $5 = $0 + 11 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $39 = HEAP32[$0 + 4 >> 2] | 0;
  $40 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $39 = $6 & 255;
  $40 = 10;
 }
 $15 = $2 - $3 | 0;
 do if ($15 | 0) {
  if ($7) {
   $22 = HEAP32[$0 >> 2] | 0;
   $23 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $22 = $0;
   $23 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($1, $22, $22 + $23 | 0) | 0) {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($4, $1, $2);
   $26 = HEAP8[$4 + 11 >> 0] | 0;
   $27 = $26 << 24 >> 24 < 0;
   __THREW__ = 0;
   invoke_iiii(47, $0 | 0, ($27 ? HEAP32[$4 >> 2] | 0 : $4) | 0, ($27 ? HEAP32[$4 + 4 >> 2] | 0 : $26 & 255) | 0) | 0;
   $34 = __THREW__;
   __THREW__ = 0;
   if ($34 & 1) {
    $36 = ___cxa_find_matching_catch_2() | 0;
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    ___resumeException($36 | 0);
   } else {
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
    break;
   }
  }
  if (($40 - $39 | 0) >>> 0 < $15 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $40, $39 + $15 - $40 | 0, $39, $39, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $48 = HEAP32[$0 >> 2] | 0; else $48 = $0;
  $scevgep44 = $2 + ($39 - $3) | 0;
  $$0 = $48 + $39 | 0;
  $$040 = $1;
  while (1) {
   if (($$040 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $$040);
   $$0 = $$0 + 1 | 0;
   $$040 = $$040 + 1 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($48 + $scevgep44 | 0, $4);
  $53 = $39 + $15 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $53;
   break;
  } else {
   HEAP8[$5 >> 0] = $53;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$040 = 0, $15 = 0, $16 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $5 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $41 = HEAP32[$0 + 4 >> 2] | 0;
  $42 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
 } else {
  $41 = $6 & 255;
  $42 = 1;
 }
 $15 = $2 - $1 | 0;
 $16 = $15 >> 2;
 do if ($15 | 0) {
  if ($7) {
   $23 = HEAP32[$0 >> 2] | 0;
   $24 = HEAP32[$0 + 4 >> 2] | 0;
  } else {
   $23 = $0;
   $24 = $6 & 255;
  }
  if (__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($1, $23, $23 + ($24 << 2) | 0) | 0) {
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($3, $1, $2);
   $28 = HEAP8[$3 + 8 + 3 >> 0] | 0;
   $29 = $28 << 24 >> 24 < 0;
   __THREW__ = 0;
   invoke_iiii(52, $0 | 0, ($29 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($29 ? HEAP32[$3 + 4 >> 2] | 0 : $28 & 255) | 0) | 0;
   $36 = __THREW__;
   __THREW__ = 0;
   if ($36 & 1) {
    $38 = ___cxa_find_matching_catch_2() | 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
    ___resumeException($38 | 0);
   } else {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($3);
    break;
   }
  }
  if (($42 - $41 | 0) >>> 0 < $16 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $42, $41 + $16 - $42 | 0, $41, $41, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) $50 = HEAP32[$0 >> 2] | 0; else $50 = $0;
  $$0 = $50 + ($41 << 2) | 0;
  $$040 = $1;
  while (1) {
   if (($$040 | 0) == ($2 | 0)) break;
   __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $$040);
   $$0 = $$0 + 4 | 0;
   $$040 = $$040 + 4 | 0;
  }
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $3);
  $54 = $41 + $16 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $54;
   break;
  } else {
   HEAP8[$5 >> 0] = $54;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function _sparc_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[sp + 24 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP8[$7 >> 0] = $2 & 1;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if (((HEAP32[$10 >> 2] | 0) + 4 | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0 | 0) == 64) if (!((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) & 192)) label = 7; else label = 5; else label = 5;
  if ((label | 0) == 5) {
   label = 0;
   if ((HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0 | 0) == 127) if (((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) & 192 | 0) == 192) label = 7;
  }
  if ((label | 0) == 7) {
   label = 0;
   HEAP32[$11 >> 2] = (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] | 0) << 24 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) << 16 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0);
   HEAP32[$11 >> 2] = HEAP32[$11 >> 2] << 2;
   if (HEAP8[$7 >> 0] & 1) HEAP32[$12 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] | 0); else HEAP32[$12 >> 2] = (HEAP32[$11 >> 2] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0));
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 2;
   HEAP32[$12 >> 2] = 0 - ((HEAP32[$12 >> 2] | 0) >>> 22 & 1) << 22 & 1073741823 | HEAP32[$12 >> 2] & 4194303 | 1073741824;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 24;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 16;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 8;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] = HEAP32[$12 >> 2];
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 4;
 }
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function __ZNK3zim7Article10getClusterEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$8 >> 2] = $1;
 $14 = HEAP32[$8 >> 2] | 0;
 __ZNK3zim7Article9getDirentEv($9, $14);
 HEAP32[$7 >> 2] = $9;
 if (!(__ZNK3zim6Dirent10isRedirectEv(HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0)) {
  HEAP32[$6 >> 2] = $9;
  if (!(__ZNK3zim6Dirent12isLinktargetEv(HEAP32[HEAP32[$6 >> 2] >> 2] | 0) | 0)) {
   HEAP32[$5 >> 2] = $9;
   if (!(__ZNK3zim6Dirent9isDeletedEv(HEAP32[HEAP32[$5 >> 2] >> 2] | 0) | 0)) {
    HEAP32[$3 >> 2] = $14;
    $31 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
    HEAP32[$4 >> 2] = $9;
    __THREW__ = 0;
    $34 = invoke_ii(90, HEAP32[HEAP32[$4 >> 2] >> 2] | 0) | 0;
    $35 = __THREW__;
    __THREW__ = 0;
    if ($35 & 1) {
     $26 = ___cxa_find_matching_catch_2() | 0;
     $27 = tempRet0;
     HEAP32[$10 >> 2] = $26;
     HEAP32[$11 >> 2] = $27;
     __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($9);
     $28 = HEAP32[$10 >> 2] | 0;
     $29 = HEAP32[$11 >> 2] | 0;
     ___resumeException($28 | 0);
    }
    HEAP32[$13 >> 2] = $34;
    __THREW__ = 0;
    HEAP32[$$byval_copy >> 2] = HEAP32[$13 >> 2];
    invoke_viii(15, $0 | 0, $31 | 0, $$byval_copy | 0);
    $37 = __THREW__;
    __THREW__ = 0;
    if ($37 & 1) {
     $26 = ___cxa_find_matching_catch_2() | 0;
     $27 = tempRet0;
     HEAP32[$10 >> 2] = $26;
     HEAP32[$11 >> 2] = $27;
     __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($9);
     $28 = HEAP32[$10 >> 2] | 0;
     $29 = HEAP32[$11 >> 2] | 0;
     ___resumeException($28 | 0);
    }
    HEAP32[$12 >> 2] = 1;
    __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($9);
    STACKTOP = sp;
    return;
   }
  }
 }
 HEAP32[$2 >> 2] = $0;
 $24 = HEAP32[$2 >> 2] | 0;
 HEAP32[$24 >> 2] = 0;
 HEAP32[$24 + 4 >> 2] = 0;
 HEAP32[$12 >> 2] = 1;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($9);
 STACKTOP = sp;
 return;
}

function __Z15_on_assert_failIyjEvPKcS1_S1_T_T0_S1_i($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $38 = 0, $41 = 0, $44 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 $17 = $13;
 HEAP32[$17 >> 2] = $3;
 HEAP32[$17 + 4 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 $21 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $24 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21, HEAP32[$15 >> 2] | 0) | 0, 49661) | 0;
 $27 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($24, HEAP32[$16 >> 2] | 0) | 0, 49663) | 0;
 $30 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27, HEAP32[$10 >> 2] | 0) | 0, 49666) | 0;
 $31 = $13;
 $38 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy($30, HEAP32[$31 >> 2] | 0, HEAP32[$31 + 4 >> 2] | 0) | 0, 49668) | 0;
 $41 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($38, HEAP32[$11 >> 2] | 0) | 0, 49671) | 0;
 $44 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($41, HEAP32[$12 >> 2] | 0) | 0, 49666) | 0;
 HEAP32[$8 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($44, HEAP32[$14 >> 2] | 0) | 0, 49673) | 0;
 HEAP32[$9 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$9 >> 2] & 127](HEAP32[$8 >> 2] | 0) | 0;
 _exit(1);
}

function __Z15_on_assert_failIjyEvPKcS1_S1_T_T0_S1_i($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $21 = 0, $24 = 0, $27 = 0, $30 = 0, $33 = 0, $36 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 20 | 0;
 $13 = sp + 16 | 0;
 $14 = sp;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 $17 = $14;
 HEAP32[$17 >> 2] = $4;
 HEAP32[$17 + 4 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 $21 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $24 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($21, HEAP32[$15 >> 2] | 0) | 0, 49661) | 0;
 $27 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($24, HEAP32[$16 >> 2] | 0) | 0, 49663) | 0;
 $30 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($27, HEAP32[$10 >> 2] | 0) | 0, 49666) | 0;
 $33 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($30, HEAP32[$13 >> 2] | 0) | 0, 49668) | 0;
 $36 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($33, HEAP32[$11 >> 2] | 0) | 0, 49671) | 0;
 $39 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($36, HEAP32[$12 >> 2] | 0) | 0, 49666) | 0;
 $40 = $14;
 HEAP32[$8 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy($39, HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0) | 0, 49673) | 0;
 HEAP32[$9 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$9 >> 2] & 127](HEAP32[$8 >> 2] | 0) | 0;
 _exit(1);
}

function __ZNK3zim6Buffer10sub_bufferENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $4 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp + 76 | 0;
 $4 = sp + 72 | 0;
 $5 = sp + 68 | 0;
 $6 = sp;
 $7 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $14 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 24 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $20 = sp + 4 | 0;
 HEAP32[$15 >> 2] = $1;
 HEAP32[$13 >> 2] = (HEAP32[$15 >> 2] | 0) + 4;
 $23 = HEAP32[$13 >> 2] | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$14 >> 2];
 __ZNSt3__210shared_ptrIKN3zim6BufferEEC2IS2_EERKNS_8weak_ptrIT_EENS_9enable_ifIXsr14is_convertibleIPS7_PS3_EE5valueENS4_5__natEE4typeE($17, $23, $$byval_copy);
 HEAP32[$10 >> 2] = $17;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 $25 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$11 >> 2];
 $27 = HEAP32[$8 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
 __THREW__ = 0;
 invoke_viiii(19, $16 | 0, $25 | 0, $27 | 0, HEAP32[$7 >> 2] | 0);
 $30 = __THREW__;
 __THREW__ = 0;
 if ($30 & 1) {
  $42 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$18 >> 2] = $42;
  HEAP32[sp + 8 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($17);
  ___resumeException(HEAP32[$18 >> 2] | 0);
 } else {
  HEAP32[$20 >> 2] = 0;
  HEAP8[$6 >> 0] = HEAP8[$20 >> 0] | 0;
  HEAP8[$6 + 1 >> 0] = HEAP8[$20 + 1 >> 0] | 0;
  HEAP8[$6 + 2 >> 0] = HEAP8[$20 + 2 >> 0] | 0;
  HEAP8[$6 + 3 >> 0] = HEAP8[$20 + 3 >> 0] | 0;
  HEAP32[$4 >> 2] = $0;
  HEAP32[$5 >> 2] = $16;
  $32 = HEAP32[$4 >> 2] | 0;
  HEAP32[$32 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$32 + 4 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2];
  HEAP32[HEAP32[$5 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 0;
  __ZNSt3__210shared_ptrIN3zim9SubBufferEED2Ev($16);
  __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($17);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 HEAP32[$20 >> 2] = $0;
 HEAP32[$21 >> 2] = $1;
 $23 = HEAP32[$20 >> 2] | 0;
 if (!(HEAP32[$21 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($23, HEAP32[HEAP32[$21 >> 2] >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($23, HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$12 >> 2] = $23;
 HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$10 >> 2];
 $35 = HEAP32[$22 >> 2] | 0;
 HEAP32[$9 >> 2] = (HEAP32[$21 >> 2] | 0) + 16;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 $39 = HEAP32[$8 >> 2] | 0;
 HEAP32[$5 >> 2] = $35;
 HEAP32[$6 >> 2] = $39;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$6 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 80 >> 0] | 0;
 HEAP32[sp + 76 >> 2] = $40;
 HEAP32[sp + 72 >> 2] = $41;
 $43 = HEAP32[$21 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$18 >> 2] = $43;
 HEAP32[$19 >> 2] = 1;
 $45 = HEAP32[$18 >> 2] | 0;
 $46 = HEAP32[$19 >> 2] | 0;
 HEAP32[sp + 36 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $45;
 HEAP32[sp + 28 >> 2] = $46;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 __ZdlPv(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEEixERS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 104 | 0;
 $5 = sp + 100 | 0;
 $6 = sp + 96 | 0;
 $7 = sp + 92 | 0;
 $8 = sp + 88 | 0;
 $9 = sp + 84 | 0;
 $10 = sp + 80 | 0;
 $11 = sp + 76 | 0;
 $12 = sp + 72 | 0;
 $13 = sp + 68 | 0;
 $18 = sp + 64 | 0;
 $19 = sp + 60 | 0;
 $24 = sp + 56 | 0;
 $25 = sp + 52 | 0;
 $26 = sp + 48 | 0;
 $27 = sp + 44 | 0;
 $28 = sp + 40 | 0;
 $29 = sp + 32 | 0;
 $30 = sp + 28 | 0;
 HEAP32[$27 >> 2] = $0;
 HEAP32[$28 >> 2] = $1;
 $32 = HEAP32[$27 >> 2] | 0;
 $33 = HEAP32[$28 >> 2] | 0;
 HEAP32[$26 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$24 >> 2] = HEAP32[$26 >> 2];
 $36 = HEAP32[$24 >> 2] | 0;
 HEAP32[$18 >> 2] = $25;
 HEAP32[$19 >> 2] = $36;
 $37 = HEAP32[$18 >> 2] | 0;
 $38 = HEAP32[$19 >> 2] | 0;
 HEAP8[sp + 24 >> 0] = HEAP8[sp + 113 >> 0] | 0;
 HEAP8[sp + 16 >> 0] = HEAP8[sp + 114 >> 0] | 0;
 HEAP8[sp + 8 >> 0] = HEAP8[sp + 115 >> 0] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 116 >> 0] | 0;
 HEAP32[$12 >> 2] = $37;
 HEAP32[$13 >> 2] = $38;
 $39 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[$13 >> 2];
 $41 = HEAP32[$11 >> 2] | 0;
 HEAP32[$9 >> 2] = $39;
 HEAP32[$10 >> 2] = $41;
 $42 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$42 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$30 >> 2] = HEAP32[$25 >> 2];
 HEAP32[sp + 108 >> 2] = sp + 117;
 __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIcJRKNS_21piecewise_construct_tENS_5tupleIJRKcEEENSG_IJEEEEEENS_4pairINS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEEbEERKT_DpOT0_($29, $32, $33, 62810, $30, sp + 112 | 0);
 HEAP32[$7 >> 2] = $29;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[HEAP32[$6 >> 2] >> 2] | 0) + 16;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 STACKTOP = sp;
 return (HEAP32[$4 >> 2] | 0) + 4 | 0;
}

function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 $4 = $0 + 28 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAP32[$3 >> 2] = $5;
 $7 = $0 + 20 | 0;
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0;
 HEAP32[$3 + 4 >> 2] = $9;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $12 = $9 + $2 | 0;
 $13 = $0 + 60 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0;
 L1 : do if (($12 | 0) == ($17 | 0)) label = 3; else {
  $$04756 = 2;
  $$04855 = $12;
  $$04954 = $3;
  $26 = $17;
  while (1) {
   if (($26 | 0) < 0) break;
   $$04855 = $$04855 - $26 | 0;
   $37 = HEAP32[$$04954 + 4 >> 2] | 0;
   $38 = $26 >>> 0 > $37 >>> 0;
   $$150 = $38 ? $$04954 + 8 | 0 : $$04954;
   $$1 = $$04756 + ($38 << 31 >> 31) | 0;
   $$0 = $26 - ($38 ? $37 : 0) | 0;
   HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0;
   $44 = $$150 + 4 | 0;
   HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0;
   HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$vararg_buffer3 + 4 >> 2] = $$150;
   HEAP32[$vararg_buffer3 + 8 >> 2] = $$1;
   $26 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0;
   if (($$04855 | 0) == ($26 | 0)) {
    label = 3;
    break L1;
   } else {
    $$04756 = $$1;
    $$04954 = $$150;
   }
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
  if (($$04756 | 0) == 2) $$051 = 0; else $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0;
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0);
  $25 = $20;
  HEAP32[$4 >> 2] = $25;
  HEAP32[$7 >> 2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;
 return $$051 | 0;
}

function _lzma_filter_flags_decode($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $26 = 0, $31 = 0, $48 = 0, $5 = 0, $53 = 0, $6 = 0, $7 = 0, $72 = 0, $78 = 0, $8 = 0, $80 = 0, $83 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[$11 >> 2] = _lzma_vli_decode(HEAP32[$6 >> 2] | 0, 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
 if (HEAP32[$11 >> 2] | 0) {
  HEAP32[$5 >> 2] = HEAP32[$11 >> 2];
  $83 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $26 = HEAP32[$6 >> 2] | 0;
 $31 = HEAP32[$26 + 4 >> 2] | 0;
 if ($31 >>> 0 > 1073741824 | ($31 | 0) == 1073741824 & (HEAP32[$26 >> 2] | 0) >>> 0 >= 0) {
  HEAP32[$5 >> 2] = 9;
  $83 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 HEAP32[$13 >> 2] = _lzma_vli_decode($12, 0, HEAP32[$8 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
 if (HEAP32[$13 >> 2] | 0) {
  HEAP32[$5 >> 2] = HEAP32[$13 >> 2];
  $83 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $48 = $12;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 if (0 < $53 >>> 0 | (0 == ($53 | 0) ? ((HEAP32[$10 >> 2] | 0) - (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) | 0) >>> 0 < (HEAP32[$48 >> 2] | 0) >>> 0 : 0)) {
  HEAP32[$5 >> 2] = 9;
  $83 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 } else {
  HEAP32[$14 >> 2] = _lzma_properties_decode(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, (HEAP32[$8 >> 2] | 0) + (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) | 0, HEAP32[$12 >> 2] | 0) | 0;
  $72 = $12;
  $78 = HEAP32[$9 >> 2] | 0;
  $80 = _i64Add(HEAP32[$78 >> 2] | 0, 0, HEAP32[$72 >> 2] | 0, HEAP32[$72 + 4 >> 2] | 0) | 0;
  HEAP32[$78 >> 2] = $80;
  HEAP32[$5 >> 2] = HEAP32[$14 >> 2];
  $83 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $83 | 0;
 }
 return 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[53265] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53266] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53267] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53268] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53269] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53270] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 53271, 1, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit + 13 | 0;
 $15 = _llvm_stacksave() | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $14 | 0) + 15 & -16) | 0;
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $24 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($$lobit << 1 | 24) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(5, $16 | 0, $20 | 0, $19 | 0, $24 | 0, $6 | 0, $7 | 0, $$byval_copy | 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $31 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($31 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  $28 = HEAP32[$6 >> 2] | 0;
  $29 = HEAP32[$7 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $30 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $24, $28, $29, $2, $3) | 0;
  _llvm_stackrestore($15 | 0);
  STACKTOP = sp;
  return $30 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $5 = sp + 68 | 0;
 $6 = sp + 64 | 0;
 $8 = sp + 60 | 0;
 $9 = sp + 56 | 0;
 $10 = sp + 52 | 0;
 $11 = sp + 48 | 0;
 $12 = sp + 44 | 0;
 $13 = sp + 40 | 0;
 $15 = sp + 32 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 $21 = sp + 8 | 0;
 $22 = sp + 4 | 0;
 HEAP32[$20 >> 2] = $0;
 HEAP32[$21 >> 2] = $1;
 $23 = HEAP32[$20 >> 2] | 0;
 if (!(HEAP32[$21 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($23, HEAP32[HEAP32[$21 >> 2] >> 2] | 0);
 __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($23, HEAP32[(HEAP32[$21 >> 2] | 0) + 4 >> 2] | 0);
 HEAP32[$12 >> 2] = $23;
 HEAP32[$11 >> 2] = (HEAP32[$12 >> 2] | 0) + 4;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$22 >> 2] = HEAP32[$10 >> 2];
 $35 = HEAP32[$22 >> 2] | 0;
 HEAP32[$9 >> 2] = (HEAP32[$21 >> 2] | 0) + 16;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 $39 = HEAP32[$8 >> 2] | 0;
 HEAP32[$5 >> 2] = $35;
 HEAP32[$6 >> 2] = $39;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$6 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 80 >> 0] | 0;
 HEAP32[sp + 76 >> 2] = $40;
 HEAP32[sp + 72 >> 2] = $41;
 $43 = HEAP32[$21 >> 2] | 0;
 HEAP32[$17 >> 2] = HEAP32[$22 >> 2];
 HEAP32[$18 >> 2] = $43;
 HEAP32[$19 >> 2] = 1;
 $45 = HEAP32[$18 >> 2] | 0;
 $46 = HEAP32[$19 >> 2] | 0;
 HEAP32[sp + 36 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = $45;
 HEAP32[sp + 28 >> 2] = $46;
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 __ZdlPv(HEAP32[$13 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[53265] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53266] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53267] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53268] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53269] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53270] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 53271, 1, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit + 13 | 0;
 $15 = _llvm_stacksave() | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $14 | 0) + 15 & -16) | 0;
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $24 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($$lobit << 1 | 24) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(3, $16 | 0, $20 | 0, $19 | 0, $24 | 0, $6 | 0, $7 | 0, $$byval_copy | 0);
 $25 = __THREW__;
 __THREW__ = 0;
 if ($25 & 1) {
  $31 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($31 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  $28 = HEAP32[$6 >> 2] | 0;
  $29 = HEAP32[$7 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $30 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $24, $28, $29, $2, $3) | 0;
  _llvm_stackrestore($15 | 0);
  STACKTOP = sp;
  return $30 | 0;
 }
 return 0;
}

function _hash_append($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $101 = 0, $106 = 0, $107 = 0, $112 = 0, $117 = 0, $118 = 0, $13 = 0, $17 = 0, $23 = 0, $25 = 0, $26 = 0, $32 = 0, $34 = 0, $38 = 0, $45 = 0, $46 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $75 = 0, $8 = 0, $81 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $95 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 16 | 0;
 $8 = sp;
 HEAP32[$5 >> 2] = $0;
 $9 = $6;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$9 + 4 >> 2] = $2;
 $13 = $7;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$13 + 4 >> 2] = $4;
 $17 = $6;
 $23 = _vli_ceil4_666(HEAP32[$17 >> 2] | 0, HEAP32[$17 + 4 >> 2] | 0) | 0;
 $25 = HEAP32[$5 >> 2] | 0;
 $26 = $25;
 $32 = _i64Add(HEAP32[$26 >> 2] | 0, HEAP32[$26 + 4 >> 2] | 0, $23 | 0, tempRet0 | 0) | 0;
 $34 = $25;
 HEAP32[$34 >> 2] = $32;
 HEAP32[$34 + 4 >> 2] = tempRet0;
 $38 = $7;
 $45 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 $46 = $45;
 $52 = _i64Add(HEAP32[$46 >> 2] | 0, HEAP32[$46 + 4 >> 2] | 0, HEAP32[$38 >> 2] | 0, HEAP32[$38 + 4 >> 2] | 0) | 0;
 $54 = $45;
 HEAP32[$54 >> 2] = $52;
 HEAP32[$54 + 4 >> 2] = tempRet0;
 $58 = $6;
 $64 = _lzma_vli_size(HEAP32[$58 >> 2] | 0, HEAP32[$58 + 4 >> 2] | 0) | 0;
 $65 = $7;
 $72 = $64 + (_lzma_vli_size(HEAP32[$65 >> 2] | 0, HEAP32[$65 + 4 >> 2] | 0) | 0) | 0;
 $74 = (HEAP32[$5 >> 2] | 0) + 24 | 0;
 $75 = $74;
 $81 = _i64Add(HEAP32[$75 >> 2] | 0, HEAP32[$75 + 4 >> 2] | 0, $72 | 0, 0) | 0;
 $83 = $74;
 HEAP32[$83 >> 2] = $81;
 HEAP32[$83 + 4 >> 2] = tempRet0;
 $88 = (HEAP32[$5 >> 2] | 0) + 16 | 0;
 $89 = $88;
 $95 = _i64Add(HEAP32[$89 >> 2] | 0, HEAP32[$89 + 4 >> 2] | 0, 1, 0) | 0;
 $97 = $88;
 HEAP32[$97 >> 2] = $95;
 HEAP32[$97 + 4 >> 2] = tempRet0;
 $101 = $6;
 $106 = HEAP32[$101 + 4 >> 2] | 0;
 $107 = $8;
 HEAP32[$107 >> 2] = HEAP32[$101 >> 2];
 HEAP32[$107 + 4 >> 2] = $106;
 $112 = $7;
 $117 = HEAP32[$112 + 4 >> 2] | 0;
 $118 = $8 + 8 | 0;
 HEAP32[$118 >> 2] = HEAP32[$112 >> 2];
 HEAP32[$118 + 4 >> 2] = $117;
 _lzma_check_update((HEAP32[$5 >> 2] | 0) + 32 | 0, 10, $8, 16);
 STACKTOP = sp;
 return 0;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[53265] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53266] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53267] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53268] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53269] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53270] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 53271, 0, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit | 12;
 $15 = _llvm_stacksave() | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $14 | 0) + 15 & -16) | 0;
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($$lobit << 1 | 21) << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(5, $16 | 0, $20 | 0, $19 | 0, $23 | 0, $6 | 0, $7 | 0, $$byval_copy | 0);
 $24 = __THREW__;
 __THREW__ = 0;
 if ($24 & 1) {
  $30 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($30 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  $27 = HEAP32[$6 >> 2] | 0;
  $28 = HEAP32[$7 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $29 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $23, $27, $28, $2, $3) | 0;
  _llvm_stackrestore($15 | 0);
  STACKTOP = sp;
  return $29 | 0;
 }
 return 0;
}

function __Z15_on_assert_failItiEvPKcS1_S1_T_T0_S1_i($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP16[$12 >> 1] = $3;
 HEAP32[$13 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 $16 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $19 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($16, HEAP32[$14 >> 2] | 0) | 0, 49661) | 0;
 $22 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($19, HEAP32[$15 >> 2] | 0) | 0, 49663) | 0;
 $25 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22, HEAP32[$9 >> 2] | 0) | 0, 49666) | 0;
 $28 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEt($25, HEAP16[$12 >> 1] | 0) | 0, 49668) | 0;
 $31 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($28, HEAP32[$10 >> 2] | 0) | 0, 49671) | 0;
 $34 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($31, HEAP32[$11 >> 2] | 0) | 0, 49666) | 0;
 HEAP32[$7 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($34, HEAP32[$13 >> 2] | 0) | 0, 49673) | 0;
 HEAP32[$8 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$8 >> 2] & 127](HEAP32[$7 >> 2] | 0) | 0;
 _exit(1);
}

function __Z15_on_assert_failIjjEvPKcS1_S1_T_T0_S1_i($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $34 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAP32[$13 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 $16 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $19 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($16, HEAP32[$14 >> 2] | 0) | 0, 49661) | 0;
 $22 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($19, HEAP32[$15 >> 2] | 0) | 0, 49663) | 0;
 $25 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($22, HEAP32[$9 >> 2] | 0) | 0, 49666) | 0;
 $28 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($25, HEAP32[$12 >> 2] | 0) | 0, 49668) | 0;
 $31 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($28, HEAP32[$10 >> 2] | 0) | 0, 49671) | 0;
 $34 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($31, HEAP32[$11 >> 2] | 0) | 0, 49666) | 0;
 HEAP32[$7 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj($34, HEAP32[$13 >> 2] | 0) | 0, 49673) | 0;
 HEAP32[$8 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$8 >> 2] & 127](HEAP32[$7 >> 2] | 0) | 0;
 _exit(1);
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp + 8 | 0;
 HEAP8[$5 >> 0] = HEAP8[53265] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53266] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53267] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53268] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53269] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53270] | 0;
 $10 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($5 + 1 | 0, 53271, 0, HEAP32[$10 >> 2] | 0);
 $$lobit = (HEAP32[$10 >> 2] | 0) >>> 9 & 1;
 $14 = $$lobit | 12;
 $15 = _llvm_stacksave() | 0;
 $16 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $14 | 0) + 15 & -16) | 0;
 $17 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $19 = $16 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($16, $14, $17, $5, $$byval_copy) | 0) | 0;
 $20 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($16, $19, $2) | 0;
 $23 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * ($$lobit << 1 | 21) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(3, $16 | 0, $20 | 0, $19 | 0, $23 | 0, $6 | 0, $7 | 0, $$byval_copy | 0);
 $24 = __THREW__;
 __THREW__ = 0;
 if ($24 & 1) {
  $30 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($30 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  $27 = HEAP32[$6 >> 2] | 0;
  $28 = HEAP32[$7 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $29 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $23, $27, $28, $2, $3) | 0;
  _llvm_stackrestore($15 | 0);
  STACKTOP = sp;
  return $29 | 0;
 }
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $3 = 0, $39 = 0, $4 = 0, $48 = 0, $5 = 0, $52 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 $13 = HEAP32[$11 >> 2] | 0;
 do if (HEAP32[$13 + 64 >> 2] | 0) {
  HEAP32[$9 >> 2] = $13;
  $19 = HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] | 0;
  HEAP32[$8 >> 2] = $13;
  if ($19 >>> 0 < (HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) >>> 0) {
   $24 = HEAP32[$12 >> 2] | 0;
   if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($24, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
    HEAP32[$5 >> 2] = $13;
    HEAP32[$6 >> 2] = -1;
    $29 = (HEAP32[$5 >> 2] | 0) + 12 | 0;
    HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + (HEAP32[$6 >> 2] | 0);
    HEAP32[$10 >> 2] = __ZNSt3__211char_traitsIcE7not_eofEi(HEAP32[$12 >> 2] | 0) | 0;
    $58 = HEAP32[$10 >> 2] | 0;
    STACKTOP = sp;
    return $58 | 0;
   }
   if (!(HEAP32[$13 + 88 >> 2] & 16)) {
    $39 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$12 >> 2] | 0) | 0;
    HEAP32[$2 >> 2] = $13;
    if (!(__ZNSt3__211char_traitsIcE2eqEcc($39, HEAP8[(HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0) + -1 >> 0] | 0) | 0)) break;
   }
   HEAP32[$3 >> 2] = $13;
   HEAP32[$4 >> 2] = -1;
   $48 = (HEAP32[$3 >> 2] | 0) + 12 | 0;
   HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + (HEAP32[$4 >> 2] | 0);
   $52 = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$12 >> 2] | 0) | 0;
   HEAP32[$7 >> 2] = $13;
   HEAP8[HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] >> 0] = $52;
   HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
   $58 = HEAP32[$10 >> 2] | 0;
   STACKTOP = sp;
   return $58 | 0;
  }
 } while (0);
 HEAP32[$10 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $58 = HEAP32[$10 >> 2] | 0;
 STACKTOP = sp;
 return $58 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEEC2ERKSE_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$24 >> 2] = $0;
 HEAP32[$25 >> 2] = $1;
 $27 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $27 + 4;
 $29 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $29;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$20 >> 2] = $29;
 HEAP32[sp + 28 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 >> 2] = 0;
 $34 = HEAP32[$25 >> 2] | 0;
 HEAP32[$16 >> 2] = $27 + 8;
 HEAP32[$17 >> 2] = $26;
 HEAP32[$18 >> 2] = $34;
 $35 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $35;
 HEAP32[$10 >> 2] = $37;
 $38 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $43 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 52 >> 2] = $35;
 HEAP32[$14 >> 2] = $43;
 HEAP32[sp + 56 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = $27;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $50 = HEAP32[$2 >> 2] | 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEEC2ERKSF_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$24 >> 2] = $0;
 HEAP32[$25 >> 2] = $1;
 $27 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $27 + 4;
 $29 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $29;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$20 >> 2] = $29;
 HEAP32[sp + 28 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 >> 2] = 0;
 $34 = HEAP32[$25 >> 2] | 0;
 HEAP32[$16 >> 2] = $27 + 8;
 HEAP32[$17 >> 2] = $26;
 HEAP32[$18 >> 2] = $34;
 $35 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $35;
 HEAP32[$10 >> 2] = $37;
 $38 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $43 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 52 >> 2] = $35;
 HEAP32[$14 >> 2] = $43;
 HEAP32[sp + 56 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = $27;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $50 = HEAP32[$2 >> 2] | 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $3 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $48 = 0, $5 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$14 >> 2] = $0;
 $15 = HEAP32[$14 >> 2] | 0;
 if (HEAP32[$15 + 92 >> 2] & 16 | 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$10 >> 2] = $15;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 $20 = HEAP32[$10 >> 2] | 0;
 HEAP32[$20 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$20 + 12 >> 2] = HEAP32[$12 >> 2];
 HEAP32[$20 + 16 >> 2] = HEAP32[$13 >> 2];
 do if ((HEAP32[$15 + 52 >> 2] | 0) >>> 0 > 8) if (HEAP8[$15 + 98 >> 0] & 1) {
  $34 = HEAP32[$15 + 32 >> 2] | 0;
  $40 = (HEAP32[$15 + 32 >> 2] | 0) + ((HEAP32[$15 + 52 >> 2] | 0) - 1) | 0;
  HEAP32[$1 >> 2] = $15;
  HEAP32[$2 >> 2] = $34;
  HEAP32[$3 >> 2] = $40;
  $41 = HEAP32[$1 >> 2] | 0;
  $42 = HEAP32[$2 >> 2] | 0;
  HEAP32[$41 + 24 >> 2] = $42;
  HEAP32[$41 + 20 >> 2] = $42;
  HEAP32[$41 + 28 >> 2] = HEAP32[$3 >> 2];
  break;
 } else {
  $48 = HEAP32[$15 + 56 >> 2] | 0;
  $54 = (HEAP32[$15 + 56 >> 2] | 0) + ((HEAP32[$15 + 60 >> 2] | 0) - 1) | 0;
  HEAP32[$4 >> 2] = $15;
  HEAP32[$5 >> 2] = $48;
  HEAP32[$6 >> 2] = $54;
  $55 = HEAP32[$4 >> 2] | 0;
  $56 = HEAP32[$5 >> 2] | 0;
  HEAP32[$55 + 24 >> 2] = $56;
  HEAP32[$55 + 20 >> 2] = $56;
  HEAP32[$55 + 28 >> 2] = HEAP32[$6 >> 2];
  break;
 } else {
  HEAP32[$7 >> 2] = $15;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $61 = HEAP32[$7 >> 2] | 0;
  $62 = HEAP32[$8 >> 2] | 0;
  HEAP32[$61 + 24 >> 2] = $62;
  HEAP32[$61 + 20 >> 2] = $62;
  HEAP32[$61 + 28 >> 2] = HEAP32[$9 >> 2];
 } while (0);
 HEAP32[$15 + 92 >> 2] = 16;
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($0) {
 $0 = $0 | 0;
 var $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $29 = 0, $3 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp + 48 | 0;
 $13 = sp;
 HEAP32[$13 >> 2] = $0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (HEAP32[$14 + 92 >> 2] & 8 | 0) {
  HEAP8[$12 >> 0] = 0;
  $$pre_trunc = HEAP8[$12 >> 0] | 0;
  $67 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $67 | 0;
 }
 HEAP32[$9 >> 2] = $14;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$11 >> 2] = 0;
 $19 = HEAP32[$9 >> 2] | 0;
 $20 = HEAP32[$10 >> 2] | 0;
 HEAP32[$19 + 24 >> 2] = $20;
 HEAP32[$19 + 20 >> 2] = $20;
 HEAP32[$19 + 28 >> 2] = HEAP32[$11 >> 2];
 if (HEAP8[$14 + 98 >> 0] & 1) {
  $29 = HEAP32[$14 + 32 >> 2] | 0;
  $34 = (HEAP32[$14 + 32 >> 2] | 0) + (HEAP32[$14 + 52 >> 2] | 0) | 0;
  $39 = (HEAP32[$14 + 32 >> 2] | 0) + (HEAP32[$14 + 52 >> 2] | 0) | 0;
  HEAP32[$1 >> 2] = $14;
  HEAP32[$2 >> 2] = $29;
  HEAP32[$3 >> 2] = $34;
  HEAP32[$4 >> 2] = $39;
  $40 = HEAP32[$1 >> 2] | 0;
  HEAP32[$40 + 8 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$40 + 12 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$40 + 16 >> 2] = HEAP32[$4 >> 2];
 } else {
  $48 = HEAP32[$14 + 56 >> 2] | 0;
  $53 = (HEAP32[$14 + 56 >> 2] | 0) + (HEAP32[$14 + 60 >> 2] | 0) | 0;
  $58 = (HEAP32[$14 + 56 >> 2] | 0) + (HEAP32[$14 + 60 >> 2] | 0) | 0;
  HEAP32[$5 >> 2] = $14;
  HEAP32[$6 >> 2] = $48;
  HEAP32[$7 >> 2] = $53;
  HEAP32[$8 >> 2] = $58;
  $59 = HEAP32[$5 >> 2] | 0;
  HEAP32[$59 + 8 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$59 + 12 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$59 + 16 >> 2] = HEAP32[$8 >> 2];
 }
 HEAP32[$14 + 92 >> 2] = 8;
 HEAP8[$12 >> 0] = 1;
 $$pre_trunc = HEAP8[$12 >> 0] | 0;
 $67 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $67 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 dest_end = dest + num | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  aligned_dest_end = dest_end & -4 | 0;
  block_aligned_dest_end = aligned_dest_end - 64 | 0;
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2];
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2];
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2];
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2];
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2];
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2];
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2];
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2];
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2];
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2];
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2];
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2];
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2];
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2];
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2];
   dest = dest + 64 | 0;
   src = src + 64 | 0;
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0;
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0;
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0;
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 }
 return ret | 0;
}

function __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$sroa$0$2 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 $7 = HEAP32[$0 >> 2] | 0;
 L1 : do if (!$7) $$sroa$0$2 = 0; else {
  $9 = $3;
  $10 = $1;
  $12 = $9 - $10 >> 2;
  $13 = $4 + 12 | 0;
  $14 = HEAP32[$13 >> 2] | 0;
  $$0 = ($14 | 0) > ($12 | 0) ? $14 - $12 | 0 : 0;
  $17 = $2;
  $18 = $17 - $10 | 0;
  $19 = $18 >> 2;
  if (($18 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $1, $19) | 0) != ($19 | 0)) {
   HEAP32[$0 >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  do if (($$0 | 0) > 0) {
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$6 + 8 >> 2] = 0;
   __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($6, $$0, $5);
   __THREW__ = 0;
   $36 = invoke_iiii(HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0, $7 | 0, ((HEAP8[$6 + 8 + 3 >> 0] | 0) < 0 ? HEAP32[$6 >> 2] | 0 : $6) | 0, $$0 | 0) | 0;
   $37 = __THREW__;
   __THREW__ = 0;
   if ($37 & 1) {
    $40 = ___cxa_find_matching_catch_2() | 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
    ___resumeException($40 | 0);
   }
   if (($36 | 0) == ($$0 | 0)) {
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
    break;
   } else {
    HEAP32[$0 >> 2] = 0;
    __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($6);
    $$sroa$0$2 = 0;
    break L1;
   }
  } while (0);
  $42 = $9 - $17 | 0;
  $43 = $42 >> 2;
  if (($42 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] & 63]($7, $2, $43) | 0) != ($43 | 0)) {
   HEAP32[$0 >> 2] = 0;
   $$sroa$0$2 = 0;
   break;
  }
  HEAP32[$13 >> 2] = 0;
  $$sroa$0$2 = $7;
 } while (0);
 STACKTOP = sp;
 return $$sroa$0$2 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$24 >> 2] = $0;
 HEAP32[$25 >> 2] = $1;
 $27 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $27 + 4;
 $29 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $29;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$20 >> 2] = $29;
 HEAP32[sp + 28 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 >> 2] = 0;
 $34 = HEAP32[$25 >> 2] | 0;
 HEAP32[$16 >> 2] = $27 + 8;
 HEAP32[$17 >> 2] = $26;
 HEAP32[$18 >> 2] = $34;
 $35 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $35;
 HEAP32[$10 >> 2] = $37;
 $38 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $43 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 52 >> 2] = $35;
 HEAP32[$14 >> 2] = $43;
 HEAP32[sp + 56 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = $27;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $50 = HEAP32[$2 >> 2] | 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEEC2ERKSC_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$24 >> 2] = $0;
 HEAP32[$25 >> 2] = $1;
 $27 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $27 + 4;
 $29 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $29;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$20 >> 2] = $29;
 HEAP32[sp + 28 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 >> 2] = 0;
 $34 = HEAP32[$25 >> 2] | 0;
 HEAP32[$16 >> 2] = $27 + 8;
 HEAP32[$17 >> 2] = $26;
 HEAP32[$18 >> 2] = $34;
 $35 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $35;
 HEAP32[$10 >> 2] = $37;
 $38 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $43 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 52 >> 2] = $35;
 HEAP32[$14 >> 2] = $43;
 HEAP32[sp + 56 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = $27;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $50 = HEAP32[$2 >> 2] | 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 53262, 1, HEAP32[$15 >> 2] | 0);
 $$lobit = (HEAP32[$15 >> 2] | 0) >>> 9 & 1;
 $19 = $$lobit + 23 | 0;
 $20 = _llvm_stacksave() | 0;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $19 | 0) + 15 & -16) | 0;
 $22 = __ZNSt3__26__clocEv() | 0;
 $23 = $$byval_copy;
 HEAP32[$23 >> 2] = $4;
 HEAP32[$23 + 4 >> 2] = $5;
 $28 = $21 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21, $19, $22, $6, $$byval_copy) | 0) | 0;
 $29 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21, $28, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($$lobit << 1 | 44) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(5, $21 | 0, $29 | 0, $28 | 0, $33 | 0, $7 | 0, $8 | 0, $$byval_copy | 0);
 $34 = __THREW__;
 __THREW__ = 0;
 if ($34 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
  $37 = HEAP32[$7 >> 2] | 0;
  $38 = HEAP32[$8 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
  $39 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $37, $38, $2, $3) | 0;
  _llvm_stackrestore($20 | 0);
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$lobit = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $29 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 53262, 1, HEAP32[$15 >> 2] | 0);
 $$lobit = (HEAP32[$15 >> 2] | 0) >>> 9 & 1;
 $19 = $$lobit + 23 | 0;
 $20 = _llvm_stacksave() | 0;
 $21 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $19 | 0) + 15 & -16) | 0;
 $22 = __ZNSt3__26__clocEv() | 0;
 $23 = $$byval_copy;
 HEAP32[$23 >> 2] = $4;
 HEAP32[$23 + 4 >> 2] = $5;
 $28 = $21 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($21, $19, $22, $6, $$byval_copy) | 0) | 0;
 $29 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($21, $28, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($$lobit << 1 | 44) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(3, $21 | 0, $29 | 0, $28 | 0, $33 | 0, $7 | 0, $8 | 0, $$byval_copy | 0);
 $34 = __THREW__;
 __THREW__ = 0;
 if ($34 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
  $37 = HEAP32[$7 >> 2] | 0;
  $38 = HEAP32[$8 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
  $39 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $37, $38, $2, $3) | 0;
  _llvm_stackrestore($20 | 0);
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEEC2ERKS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $2 = sp + 96 | 0;
 $3 = sp + 92 | 0;
 $4 = sp + 88 | 0;
 $5 = sp + 84 | 0;
 $6 = sp + 80 | 0;
 $7 = sp + 76 | 0;
 $8 = sp + 72 | 0;
 $9 = sp + 68 | 0;
 $10 = sp + 64 | 0;
 $11 = sp + 60 | 0;
 $14 = sp + 48 | 0;
 $15 = sp + 44 | 0;
 $16 = sp + 40 | 0;
 $17 = sp + 36 | 0;
 $18 = sp + 32 | 0;
 $20 = sp + 24 | 0;
 $21 = sp + 20 | 0;
 $22 = sp + 16 | 0;
 $23 = sp + 12 | 0;
 $24 = sp + 8 | 0;
 $25 = sp + 4 | 0;
 $26 = sp;
 HEAP32[$24 >> 2] = $0;
 HEAP32[$25 >> 2] = $1;
 $27 = HEAP32[$24 >> 2] | 0;
 HEAP32[$23 >> 2] = $27 + 4;
 $29 = HEAP32[$23 >> 2] | 0;
 HEAP32[$22 >> 2] = $29;
 HEAP32[$21 >> 2] = HEAP32[$22 >> 2];
 HEAP32[HEAP32[$21 >> 2] >> 2] = 0;
 HEAP32[$20 >> 2] = $29;
 HEAP32[sp + 28 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$26 >> 2] = 0;
 $34 = HEAP32[$25 >> 2] | 0;
 HEAP32[$16 >> 2] = $27 + 8;
 HEAP32[$17 >> 2] = $26;
 HEAP32[$18 >> 2] = $34;
 $35 = HEAP32[$16 >> 2] | 0;
 HEAP32[$15 >> 2] = HEAP32[$17 >> 2];
 $37 = HEAP32[$15 >> 2] | 0;
 HEAP32[$9 >> 2] = $35;
 HEAP32[$10 >> 2] = $37;
 $38 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$11 >> 2] = HEAP32[$18 >> 2];
 $43 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 52 >> 2] = $35;
 HEAP32[$14 >> 2] = $43;
 HEAP32[sp + 56 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = $27;
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $50 = HEAP32[$2 >> 2] | 0;
 HEAP32[$7 >> 2] = $27;
 HEAP32[HEAP32[$7 >> 2] >> 2] = $50;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 53262, 0, HEAP32[$15 >> 2] | 0);
 $19 = (HEAP32[$15 >> 2] | 0) >>> 9 & 1 | 22;
 $20 = $19 + 1 | 0;
 $21 = _llvm_stacksave() | 0;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $20 | 0) + 15 & -16) | 0;
 $23 = __ZNSt3__26__clocEv() | 0;
 $24 = $$byval_copy;
 HEAP32[$24 >> 2] = $4;
 HEAP32[$24 + 4 >> 2] = $5;
 $29 = $22 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22, $20, $23, $6, $$byval_copy) | 0) | 0;
 $30 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22, $29, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($19 << 1) + -1 << 2) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(5, $22 | 0, $30 | 0, $29 | 0, $33 | 0, $7 | 0, $8 | 0, $$byval_copy | 0);
 $34 = __THREW__;
 __THREW__ = 0;
 if ($34 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
  $37 = HEAP32[$7 >> 2] | 0;
  $38 = HEAP32[$8 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
  $39 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $37, $38, $2, $3) | 0;
  _llvm_stackrestore($21 | 0);
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp;
 $7 = sp + 24 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 20 | 0;
 $10 = $6;
 HEAP32[$10 >> 2] = 37;
 HEAP32[$10 + 4 >> 2] = 0;
 $15 = $2 + 4 | 0;
 __ZNSt3__214__num_put_base12__format_intEPcPKcbj($6 + 1 | 0, 53262, 0, HEAP32[$15 >> 2] | 0);
 $19 = (HEAP32[$15 >> 2] | 0) >>> 9 & 1 | 22;
 $20 = $19 + 1 | 0;
 $21 = _llvm_stacksave() | 0;
 $22 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * $20 | 0) + 15 & -16) | 0;
 $23 = __ZNSt3__26__clocEv() | 0;
 $24 = $$byval_copy;
 HEAP32[$24 >> 2] = $4;
 HEAP32[$24 + 4 >> 2] = $5;
 $29 = $22 + (__ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($22, $20, $23, $6, $$byval_copy) | 0) | 0;
 $30 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($22, $29, $2) | 0;
 $33 = STACKTOP;
 STACKTOP = STACKTOP + ((1 * (($19 << 1) + -1 | 0) | 0) + 15 & -16) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 invoke_viiiiiii(3, $22 | 0, $30 | 0, $29 | 0, $33 | 0, $7 | 0, $8 | 0, $$byval_copy | 0);
 $34 = __THREW__;
 __THREW__ = 0;
 if ($34 & 1) {
  $40 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($40 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
  $37 = HEAP32[$7 >> 2] | 0;
  $38 = HEAP32[$8 >> 2] | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
  $39 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $33, $37, $38, $2, $3) | 0;
  _llvm_stackrestore($21 | 0);
  STACKTOP = sp;
  return $39 | 0;
 }
 return 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE3getERKS1_S5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $5 = 0, $54 = 0, $6 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 56 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 36 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 28 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 HEAP32[$13 >> 2] = $1;
 HEAP32[$14 >> 2] = $2;
 $19 = HEAP32[$13 >> 2] | 0;
 $20 = HEAP32[$14 >> 2] | 0;
 HEAP32[$11 >> 2] = $16;
 HEAP32[$12 >> 2] = $3;
 $21 = HEAP32[$11 >> 2] | 0;
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$12 >> 2] >> 2];
 HEAP32[$21 + 4 >> 2] = HEAP32[(HEAP32[$12 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$21 + 4 >> 2] | 0) {
  HEAP32[$10 >> 2] = HEAP32[$21 + 4 >> 2];
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$6 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
  $36 = HEAP32[$6 >> 2] | 0;
  HEAP32[$7 >> 2] = 1;
  $37 = HEAP32[$7 >> 2] | 0;
  $38 = HEAP32[$36 >> 2] | 0;
  HEAP32[$36 >> 2] = $38 + $37;
  HEAP32[sp + 52 >> 2] = $38 + $37;
 }
 __THREW__ = 0;
 invoke_viiii(23, $15 | 0, $19 | 0, $20 | 0, $16 | 0);
 $41 = __THREW__;
 __THREW__ = 0;
 if ($41 & 1) {
  $54 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$17 >> 2] = $54;
  HEAP32[sp >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($16);
  ___resumeException(HEAP32[$17 >> 2] | 0);
 } else {
  HEAP32[$4 >> 2] = $0;
  HEAP32[$5 >> 2] = $15 + 4;
  $44 = HEAP32[$4 >> 2] | 0;
  HEAP32[$44 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
  HEAP32[$44 + 4 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2];
  HEAP32[HEAP32[$5 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 0;
  __ZNSt3__24pairIbNS_10shared_ptrIN3zim7ClusterEEEED2Ev($15);
  __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($16);
  STACKTOP = sp;
  return;
 }
}

function __Z15_on_assert_failIN3zim8offset_tES1_EvPKcS3_S3_T_T0_S3_i($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $20 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = $6;
 $14 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $17 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($14, HEAP32[$12 >> 2] | 0) | 0, 49661) | 0;
 $20 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($17, HEAP32[$13 >> 2] | 0) | 0, 49663) | 0;
 $25 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20, HEAP32[$9 >> 2] | 0) | 0, 49666) | 0, $3) | 0, 49668) | 0;
 $28 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25, HEAP32[$10 >> 2] | 0) | 0, 49671) | 0;
 HEAP32[$7 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($28, HEAP32[$11 >> 2] | 0) | 0, 49666) | 0, $4) | 0, 49673) | 0;
 HEAP32[$8 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$8 >> 2] & 127](HEAP32[$7 >> 2] | 0) | 0;
 _exit(1);
}

function __Z15_on_assert_failIN3zim7zsize_tES1_EvPKcS3_S3_T_T0_S3_i($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $20 = 0, $25 = 0, $28 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $5;
 HEAP32[$13 >> 2] = $6;
 $14 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(61664, 49639) | 0;
 $17 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($14, HEAP32[$12 >> 2] | 0) | 0, 49661) | 0;
 $20 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi($17, HEAP32[$13 >> 2] | 0) | 0, 49663) | 0;
 $25 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($20, HEAP32[$9 >> 2] | 0) | 0, 49666) | 0, $3) | 0, 49668) | 0;
 $28 = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($25, HEAP32[$10 >> 2] | 0) | 0, 49671) | 0;
 HEAP32[$7 >> 2] = __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($28, HEAP32[$11 >> 2] | 0) | 0, 49666) | 0, $4) | 0, 49673) | 0;
 HEAP32[$8 >> 2] = 89;
 FUNCTION_TABLE_ii[HEAP32[$8 >> 2] & 127](HEAP32[$7 >> 2] | 0) | 0;
 _exit(1);
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $3 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0, $6 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 36 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$14 >> 2] = $0;
 $15 = HEAP32[$14 >> 2] | 0;
 $17 = HEAP32[$15 + 44 >> 2] | 0;
 HEAP32[$12 >> 2] = $15;
 if ($17 >>> 0 < (HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] | 0) >>> 0) {
  HEAP32[$11 >> 2] = $15;
  HEAP32[$15 + 44 >> 2] = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2];
 }
 if (HEAP32[$15 + 48 >> 2] & 8 | 0) {
  HEAP32[$10 >> 2] = $15;
  if ((HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] | 0) >>> 0 < (HEAP32[$15 + 44 >> 2] | 0) >>> 0) {
   HEAP32[$1 >> 2] = $15;
   $38 = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0;
   HEAP32[$2 >> 2] = $15;
   $41 = HEAP32[(HEAP32[$2 >> 2] | 0) + 12 >> 2] | 0;
   $43 = HEAP32[$15 + 44 >> 2] | 0;
   HEAP32[$3 >> 2] = $15;
   HEAP32[$4 >> 2] = $38;
   HEAP32[$5 >> 2] = $41;
   HEAP32[$6 >> 2] = $43;
   $44 = HEAP32[$3 >> 2] | 0;
   HEAP32[$44 + 8 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$44 + 12 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$44 + 16 >> 2] = HEAP32[$6 >> 2];
  }
  HEAP32[$7 >> 2] = $15;
  $53 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0;
  HEAP32[$8 >> 2] = $15;
  if ($53 >>> 0 < (HEAP32[(HEAP32[$8 >> 2] | 0) + 16 >> 2] | 0) >>> 0) {
   HEAP32[$9 >> 2] = $15;
   HEAP32[$13 >> 2] = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[HEAP32[(HEAP32[$9 >> 2] | 0) + 12 >> 2] >> 0] | 0) | 0;
   $64 = HEAP32[$13 >> 2] | 0;
   STACKTOP = sp;
   return $64 | 0;
  }
 }
 HEAP32[$13 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $64 = HEAP32[$13 >> 2] | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $22 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $5 = 0, $50 = 0, $54 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp;
 $10 = sp + 28 | 0;
 $12 = sp + 16 | 0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[sp + 24 >> 2] = $3;
 $13 = HEAP32[$10 >> 2] | 0;
 if (HEAP32[$13 + 64 >> 2] | 0) if (!(FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 127]($13) | 0)) {
  $39 = HEAP32[$13 + 64 >> 2] | 0;
  HEAP32[$4 >> 2] = $2;
  if (___fseeko($39, HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0, 0) | 0) {
   HEAP32[$5 >> 2] = $0;
   $50 = $6;
   HEAP32[$50 >> 2] = -1;
   HEAP32[$50 + 4 >> 2] = -1;
   $54 = HEAP32[$5 >> 2] | 0;
   HEAP32[$54 >> 2] = 0;
   HEAP32[$54 + 4 >> 2] = 0;
   $56 = $6;
   $61 = HEAP32[$56 + 4 >> 2] | 0;
   $62 = $54 + 8 | 0;
   HEAP32[$62 >> 2] = HEAP32[$56 >> 2];
   HEAP32[$62 + 4 >> 2] = $61;
   STACKTOP = sp;
   return;
  } else {
   HEAP32[$7 >> 2] = $2;
   $66 = HEAP32[$7 >> 2] | 0;
   HEAP32[$12 >> 2] = HEAP32[$66 >> 2];
   HEAP32[$12 + 4 >> 2] = HEAP32[$66 + 4 >> 2];
   $67 = $13 + 72 | 0;
   HEAP32[$67 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$67 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   STACKTOP = sp;
   return;
  }
 }
 HEAP32[$8 >> 2] = $0;
 $22 = $9;
 HEAP32[$22 >> 2] = -1;
 HEAP32[$22 + 4 >> 2] = -1;
 $26 = HEAP32[$8 >> 2] | 0;
 HEAP32[$26 >> 2] = 0;
 HEAP32[$26 + 4 >> 2] = 0;
 $28 = $9;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $26 + 8 | 0;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 STACKTOP = sp;
 return;
}

function _powerpc_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $103 = 0, $11 = 0, $112 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[sp + 24 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP8[$7 >> 0] = $2 & 1;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if (((HEAP32[$10 >> 2] | 0) + 4 | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) break;
  if (((HEAPU8[(HEAP32[$8 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) >> 0] | 0) >> 2 | 0) == 18) if (((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0) & 3 | 0) == 1) {
   HEAP32[$11 >> 2] = ((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] | 0) & 3) << 24 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) << 16 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0) & -4;
   if (HEAP8[$7 >> 0] & 1) HEAP32[$12 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + (HEAP32[$11 >> 2] | 0); else HEAP32[$12 >> 2] = (HEAP32[$11 >> 2] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0));
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] = 72 | (HEAP32[$12 >> 2] | 0) >>> 24 & 3;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 16;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 8;
   $103 = (HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) | 0;
   HEAP8[$103 >> 0] = (HEAPU8[$103 >> 0] | 0) & 3;
   $112 = (HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) | 0;
   HEAP8[$112 >> 0] = HEAPU8[$112 >> 0] | 0 | HEAP32[$12 >> 2];
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 4;
 }
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function _armthumb_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[sp + 24 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP8[$7 >> 0] = $2 & 1;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if (((HEAP32[$10 >> 2] | 0) + 4 | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) break;
  if (((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) & 248 | 0) == 240) if (((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0) & 248 | 0) == 248) {
   HEAP32[$11 >> 2] = ((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) & 7) << 19 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] | 0) << 11 | ((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0) & 7) << 8 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] | 0);
   HEAP32[$11 >> 2] = HEAP32[$11 >> 2] << 1;
   if (HEAP8[$7 >> 0] & 1) HEAP32[$12 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 4 + (HEAP32[$11 >> 2] | 0); else HEAP32[$12 >> 2] = (HEAP32[$11 >> 2] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 4);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 1;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] = 240 | (HEAP32[$12 >> 2] | 0) >>> 19 & 7;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 11;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] = 248 | (HEAP32[$12 >> 2] | 0) >>> 8 & 7;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] = HEAP32[$12 >> 2];
   HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 2;
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 2;
 }
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function ___fdopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $19 = 0, $2 = 0, $24 = 0, $29 = 0, $31 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $2 = sp + 56 | 0;
 if (!(_strchr(52260, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $8 = _malloc(1156) | 0;
  if (!$8) $$0 = 0; else {
   _memset($8 | 0, 0, 124) | 0;
   if (!(_strchr($1, 43) | 0)) HEAP32[$8 >> 2] = (HEAP8[$1 >> 0] | 0) == 114 ? 8 : 4;
   if (_strchr($1, 101) | 0) {
    HEAP32[$vararg_buffer >> 2] = $0;
    HEAP32[$vararg_buffer + 4 >> 2] = 2;
    HEAP32[$vararg_buffer + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer | 0) | 0;
   }
   if ((HEAP8[$1 >> 0] | 0) == 97) {
    HEAP32[$vararg_buffer3 >> 2] = $0;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 3;
    $19 = ___syscall221(221, $vararg_buffer3 | 0) | 0;
    if (!($19 & 1024)) {
     HEAP32[$vararg_buffer7 >> 2] = $0;
     HEAP32[$vararg_buffer7 + 4 >> 2] = 4;
     HEAP32[$vararg_buffer7 + 8 >> 2] = $19 | 1024;
     ___syscall221(221, $vararg_buffer7 | 0) | 0;
    }
    $24 = HEAP32[$8 >> 2] | 128;
    HEAP32[$8 >> 2] = $24;
    $31 = $24;
   } else $31 = HEAP32[$8 >> 2] | 0;
   HEAP32[$8 + 60 >> 2] = $0;
   HEAP32[$8 + 44 >> 2] = $8 + 132;
   HEAP32[$8 + 48 >> 2] = 1024;
   $29 = $8 + 75 | 0;
   HEAP8[$29 >> 0] = -1;
   if (!($31 & 8)) {
    HEAP32[$vararg_buffer12 >> 2] = $0;
    HEAP32[$vararg_buffer12 + 4 >> 2] = 21523;
    HEAP32[$vararg_buffer12 + 8 >> 2] = $2;
    if (!(___syscall54(54, $vararg_buffer12 | 0) | 0)) HEAP8[$29 >> 0] = 10;
   }
   HEAP32[$8 + 32 >> 2] = 16;
   HEAP32[$8 + 36 >> 2] = 17;
   HEAP32[$8 + 40 >> 2] = 15;
   HEAP32[$8 + 12 >> 2] = 16;
   if (!(HEAP32[15300] | 0)) HEAP32[$8 + 76 >> 2] = -1;
   ___ofl_add($8) | 0;
   $$0 = $8;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$13 >> 2] = $0;
 HEAP32[$14 >> 2] = $1;
 $17 = HEAP32[$13 >> 2] | 0;
 HEAP32[$11 >> 2] = $17;
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 24 >> 2] = $18;
 HEAP32[$18 >> 2] = 0;
 HEAP32[$18 + 4 >> 2] = 0;
 HEAP32[$12 >> 2] = 0;
 HEAP32[$8 >> 2] = $18 + 8;
 HEAP32[$9 >> 2] = $12;
 $21 = HEAP32[$8 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 $23 = HEAP32[$7 >> 2] | 0;
 HEAP32[$3 >> 2] = $21;
 HEAP32[$4 >> 2] = $23;
 $24 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 56 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$24 >> 2] = 0;
 HEAP32[$6 >> 2] = $21;
 HEAP32[sp + 44 >> 2] = HEAP32[$6 >> 2];
 if ((HEAP32[$14 >> 2] | 0) >>> 0 <= 0) {
  STACKTOP = sp;
  return;
 }
 __THREW__ = 0;
 invoke_vii(51, $17 | 0, HEAP32[$14 >> 2] | 0);
 $30 = __THREW__;
 __THREW__ = 0;
 if ($30 & 1) {
  $35 = ___cxa_find_matching_catch_2() | 0;
  $36 = tempRet0;
  HEAP32[$15 >> 2] = $35;
  HEAP32[$16 >> 2] = $36;
  __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($17);
  $37 = HEAP32[$15 >> 2] | 0;
  $38 = HEAP32[$16 >> 2] | 0;
  ___resumeException($37 | 0);
 }
 __THREW__ = 0;
 invoke_vii(52, $17 | 0, HEAP32[$14 >> 2] | 0);
 $33 = __THREW__;
 __THREW__ = 0;
 if ($33 & 1) {
  $35 = ___cxa_find_matching_catch_2() | 0;
  $36 = tempRet0;
  HEAP32[$15 >> 2] = $35;
  HEAP32[$16 >> 2] = $36;
  __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev($17);
  $37 = HEAP32[$15 >> 2] | 0;
  $38 = HEAP32[$16 >> 2] | 0;
  ___resumeException($37 | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function _lzma_crc32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $92 = 0, $95 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$5 >> 2] = ~HEAP32[$5 >> 2];
 L1 : do if ((HEAP32[$4 >> 2] | 0) >>> 0 > 8) {
  while (1) {
   $16 = HEAP32[$3 >> 2] | 0;
   if (!(HEAP32[$3 >> 2] & 7)) break;
   HEAP32[$3 >> 2] = $16 + 1;
   HEAP32[$5 >> 2] = HEAP32[5600 + (((HEAPU8[$16 >> 0] | 0) ^ HEAP32[$5 >> 2] & 255) << 2) >> 2] ^ (HEAP32[$5 >> 2] | 0) >>> 8;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -1;
  }
  HEAP32[$6 >> 2] = $16 + (HEAP32[$4 >> 2] & -8);
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & 7;
  while (1) {
   if ((HEAP32[$3 >> 2] | 0) >>> 0 >= (HEAP32[$6 >> 2] | 0) >>> 0) break L1;
   HEAP32[$5 >> 2] = HEAP32[$5 >> 2] ^ HEAP32[HEAP32[$3 >> 2] >> 2];
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
   HEAP32[$5 >> 2] = HEAP32[12768 + ((HEAP32[$5 >> 2] & 255) << 2) >> 2] ^ HEAP32[11744 + (((HEAP32[$5 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[10720 + (((HEAP32[$5 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[9696 + ((HEAP32[$5 >> 2] | 0) >>> 24 << 2) >> 2];
   HEAP32[$7 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
   HEAP32[$5 >> 2] = HEAP32[8672 + ((HEAP32[$7 >> 2] & 255) << 2) >> 2] ^ HEAP32[7648 + (((HEAP32[$7 >> 2] | 0) >>> 8 & 255) << 2) >> 2] ^ HEAP32[$5 >> 2] ^ HEAP32[6624 + (((HEAP32[$7 >> 2] | 0) >>> 16 & 255) << 2) >> 2] ^ HEAP32[5600 + ((HEAP32[$7 >> 2] | 0) >>> 24 << 2) >> 2];
  }
 } while (0);
 while (1) {
  $92 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $92 + -1;
  if (!$92) break;
  $95 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = $95 + 1;
  HEAP32[$5 >> 2] = HEAP32[5600 + (((HEAPU8[$95 >> 0] | 0) ^ HEAP32[$5 >> 2] & 255) << 2) >> 2] ^ (HEAP32[$5 >> 2] | 0) >>> 8;
 }
 STACKTOP = sp;
 return ~HEAP32[$5 >> 2] | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE13__lower_boundIS3_EENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEERKT_SN_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISL_EEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$16 >> 2] = $0;
 HEAP32[$17 >> 2] = $1;
 HEAP32[$18 >> 2] = $2;
 HEAP32[$19 >> 2] = $3;
 $20 = HEAP32[$16 >> 2] | 0;
 while (1) {
  if (!(HEAP32[$18 >> 2] | 0)) break;
  HEAP32[$14 >> 2] = $20;
  HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  $28 = (HEAP32[$18 >> 2] | 0) + 16 | 0;
  $29 = HEAP32[$17 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$8 >> 2] = $28;
  HEAP32[$9 >> 2] = $29;
  $31 = HEAP32[$8 >> 2] | 0;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = $31;
  HEAP32[$6 >> 2] = $32;
  $35 = __ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $36 = HEAP32[$18 >> 2] | 0;
  if ($35) HEAP32[$18 >> 2] = HEAP32[$36 + 4 >> 2]; else {
   HEAP32[$19 >> 2] = $36;
   HEAP32[$18 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
  }
 }
 $41 = HEAP32[$19 >> 2] | 0;
 HEAP32[$10 >> 2] = $15;
 HEAP32[$11 >> 2] = $41;
 HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$11 >> 2];
 STACKTOP = sp;
 return HEAP32[$15 >> 2] | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE13__lower_boundIS3_EENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEERKT_SO_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISM_EEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $4 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$16 >> 2] = $0;
 HEAP32[$17 >> 2] = $1;
 HEAP32[$18 >> 2] = $2;
 HEAP32[$19 >> 2] = $3;
 $20 = HEAP32[$16 >> 2] | 0;
 while (1) {
  if (!(HEAP32[$18 >> 2] | 0)) break;
  HEAP32[$14 >> 2] = $20;
  HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  $28 = (HEAP32[$18 >> 2] | 0) + 16 | 0;
  $29 = HEAP32[$17 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$8 >> 2] = $28;
  HEAP32[$9 >> 2] = $29;
  $31 = HEAP32[$8 >> 2] | 0;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = $31;
  HEAP32[$6 >> 2] = $32;
  $35 = __ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $36 = HEAP32[$18 >> 2] | 0;
  if ($35) HEAP32[$18 >> 2] = HEAP32[$36 + 4 >> 2]; else {
   HEAP32[$19 >> 2] = $36;
   HEAP32[$18 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
  }
 }
 $41 = HEAP32[$19 >> 2] | 0;
 HEAP32[$10 >> 2] = $15;
 HEAP32[$11 >> 2] = $41;
 HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$11 >> 2];
 STACKTOP = sp;
 return HEAP32[$15 >> 2] | 0;
}

function __ZN3zim4unix2FS8openFileERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $24 = 0, $3 = 0, $4 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 72 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 64 | 0;
 $6 = sp + 60 | 0;
 $7 = sp + 56 | 0;
 $8 = sp + 52 | 0;
 $9 = sp + 48 | 0;
 $10 = sp + 44 | 0;
 $11 = sp + 40 | 0;
 $12 = sp + 36 | 0;
 $13 = sp + 32 | 0;
 $14 = sp + 28 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 20 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 HEAP32[$17 >> 2] = $1;
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$14 >> 2] = HEAP32[$15 >> 2];
 $24 = HEAP32[$14 >> 2] | 0;
 HEAP32[$13 >> 2] = $24;
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 if ((HEAPU8[(HEAP32[$11 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$5 >> 2] = $24;
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  $42 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 } else {
  HEAP32[$10 >> 2] = $24;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
  $42 = HEAP32[$6 >> 2] | 0;
 }
 HEAP32[$2 >> 2] = $42;
 HEAP32[$18 >> 2] = _open(HEAP32[$2 >> 2] | 0, 0, sp) | 0;
 if ((HEAP32[$18 >> 2] | 0) != -1) {
  __ZN3zim4unix2FDC2Ei($0, HEAP32[$18 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 $47 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(60, $47 | 0, 62819);
 $48 = __THREW__;
 __THREW__ = 0;
 if ($48 & 1) {
  $50 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$19 >> 2] = $50;
  HEAP32[sp + 4 >> 2] = tempRet0;
  ___cxa_free_exception($47 | 0);
  ___resumeException(HEAP32[$19 >> 2] | 0);
 } else ___cxa_throw($47 | 0, 42792, 178);
}

function _internal_memalign($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0100 = 0, $$099 = 0, $$1 = 0, $$198 = 0, $14 = 0, $17 = 0, $19 = 0, $30 = 0, $32 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $48 = 0, $54 = 0, $63 = 0, $64 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $79 = 0, $spec$select = 0;
 $spec$select = $0 >>> 0 > 16 ? $0 : 16;
 if (!($spec$select + -1 & $spec$select)) $$1 = $spec$select; else {
  $$099 = 16;
  while (1) if ($$099 >>> 0 < $spec$select >>> 0) $$099 = $$099 << 1; else {
   $$1 = $$099;
   break;
  }
 }
 if ((-64 - $$1 | 0) >>> 0 <= $1 >>> 0) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $$198 = 0;
  return $$198 | 0;
 }
 $14 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
 $17 = _malloc($14 + 12 + $$1 | 0) | 0;
 if (!$17) {
  $$198 = 0;
  return $$198 | 0;
 }
 $19 = $17 + -8 | 0;
 do if (!($$1 + -1 & $17)) {
  $$0100 = $19;
  $72 = $19;
 } else {
  $30 = ($17 + $$1 + -1 & 0 - $$1) + -8 | 0;
  $32 = $19;
  $36 = ($30 - $32 | 0) >>> 0 > 15 ? $30 : $30 + $$1 | 0;
  $38 = $36 - $32 | 0;
  $39 = $17 + -4 | 0;
  $40 = HEAP32[$39 >> 2] | 0;
  $42 = ($40 & -8) - $38 | 0;
  if (!($40 & 3)) {
   HEAP32[$36 >> 2] = (HEAP32[$19 >> 2] | 0) + $38;
   HEAP32[$36 + 4 >> 2] = $42;
   $$0100 = $36;
   $72 = $36;
   break;
  } else {
   $48 = $36 + 4 | 0;
   HEAP32[$48 >> 2] = $42 | HEAP32[$48 >> 2] & 1 | 2;
   $54 = $36 + $42 + 4 | 0;
   HEAP32[$54 >> 2] = HEAP32[$54 >> 2] | 1;
   HEAP32[$39 >> 2] = $38 | HEAP32[$39 >> 2] & 1 | 2;
   HEAP32[$48 >> 2] = HEAP32[$48 >> 2] | 1;
   _dispose_chunk($19, $38);
   $$0100 = $36;
   $72 = $36;
   break;
  }
 } while (0);
 $63 = $$0100 + 4 | 0;
 $64 = HEAP32[$63 >> 2] | 0;
 if ($64 & 3 | 0) {
  $67 = $64 & -8;
  if ($67 >>> 0 > ($14 + 16 | 0) >>> 0) {
   $70 = $67 - $14 | 0;
   $71 = $72 + $14 | 0;
   HEAP32[$63 >> 2] = $14 | $64 & 1 | 2;
   HEAP32[$71 + 4 >> 2] = $70 | 3;
   $79 = $72 + $67 + 4 | 0;
   HEAP32[$79 >> 2] = HEAP32[$79 >> 2] | 1;
   _dispose_chunk($71, $70);
  }
 }
 $$198 = $72 + 8 | 0;
 return $$198 | 0;
}

function __ZNSt3__210__stdinbufIwE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 $7 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
 $8 = $0 + 52 | 0;
 $10 = (HEAP8[$8 >> 0] | 0) != 0;
 do if ($7) if ($10) $$1 = $1; else {
  $12 = HEAP32[$0 + 48 >> 2] | 0;
  HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIwE11eq_int_typeEjj($12, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) ^ 1) & 1;
  $$1 = $12;
 } else {
  if ($10) {
   $17 = $0 + 48 | 0;
   HEAP32[$4 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj(HEAP32[$17 >> 2] | 0) | 0;
   $21 = HEAP32[$0 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 4 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$2 >> 0] = HEAP32[$17 >> 2];
     HEAP32[$3 >> 2] = $2 + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $33 = $0 + 32 | 0;
    while (1) {
     $34 = HEAP32[$3 >> 2] | 0;
     if ($34 >>> 0 <= $2 >>> 0) {
      $$0 = 1;
      $$07 = 0;
      break L9;
     }
     $36 = $34 + -1 | 0;
     HEAP32[$3 >> 2] = $36;
     if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0 = 0;
    $$07 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   }
   if ($$0) $$pre$phiZ2D = $17; else {
    $$1 = $$07;
    break;
   }
  } else $$pre$phiZ2D = $0 + 48 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $1;
  HEAP8[$8 >> 0] = 1;
  $$1 = $1;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _lzma_delta_coder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $22 = 0, $24 = 0, $3 = 0, $32 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 52 | 0;
 $8 = sp;
 $9 = sp + 48 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 do if (!(HEAP32[$7 >> 2] | 0)) {
  HEAP32[$7 >> 2] = _lzma_alloc(312, HEAP32[$5 >> 2] | 0) | 0;
  if (HEAP32[$7 >> 2] | 0) {
   HEAP32[HEAP32[$4 >> 2] >> 2] = HEAP32[$7 >> 2];
   HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] = 53;
   $22 = HEAP32[$7 >> 2] | 0;
   dest = $8;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $24 = $8 + 8 | 0;
   HEAP32[$24 >> 2] = -1;
   HEAP32[$24 + 4 >> 2] = -1;
   HEAP32[$8 + 16 >> 2] = 0;
   dest = $22;
   src = $8;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   break;
  }
  HEAP32[$3 >> 2] = 5;
  $54 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 } while (0);
 $32 = _lzma_delta_coder_memusage(HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] | 0) | 0;
 if (($32 | 0) == -1 & (tempRet0 | 0) == -1) {
  HEAP32[$3 >> 2] = 8;
  $54 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 } else {
  HEAP32[$9 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2];
  HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
  HEAP8[(HEAP32[$7 >> 2] | 0) + 52 >> 0] = 0;
  _memset((HEAP32[$7 >> 2] | 0) + 53 | 0, 0, 256) | 0;
  HEAP32[$3 >> 2] = _lzma_next_filter_init(HEAP32[$7 >> 2] | 0, HEAP32[$5 >> 2] | 0, (HEAP32[$6 >> 2] | 0) + 16 | 0) | 0;
  $54 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 return 0;
}

function __ZNSt3__210__stdinbufIcE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$07 = 0, $$1 = 0, $$pre$phiZ2D = 0, $10 = 0, $12 = 0, $17 = 0, $2 = 0, $21 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $7 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
 $8 = $0 + 52 | 0;
 $10 = (HEAP8[$8 >> 0] | 0) != 0;
 do if ($7) if ($10) $$1 = $1; else {
  $12 = HEAP32[$0 + 48 >> 2] | 0;
  HEAP8[$8 >> 0] = ((__ZNSt3__211char_traitsIcE11eq_int_typeEii($12, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) ^ 1) & 1;
  $$1 = $12;
 } else {
  if ($10) {
   $17 = $0 + 48 | 0;
   HEAP8[$4 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi(HEAP32[$17 >> 2] | 0) | 0;
   $21 = HEAP32[$0 + 36 >> 2] | 0;
   switch (FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 15]($21, HEAP32[$0 + 40 >> 2] | 0, $4, $4 + 1 | 0, $5, $2, $2 + 8 | 0, $3) | 0) {
   case 1:
   case 2:
    {
     label = 11;
     break;
    }
   case 3:
    {
     HEAP8[$2 >> 0] = HEAP32[$17 >> 2];
     HEAP32[$3 >> 2] = $2 + 1;
     label = 8;
     break;
    }
   default:
    label = 8;
   }
   L9 : do if ((label | 0) == 8) {
    $33 = $0 + 32 | 0;
    while (1) {
     $34 = HEAP32[$3 >> 2] | 0;
     if ($34 >>> 0 <= $2 >>> 0) {
      $$0 = 1;
      $$07 = 0;
      break L9;
     }
     $36 = $34 + -1 | 0;
     HEAP32[$3 >> 2] = $36;
     if ((_ungetc(HEAP8[$36 >> 0] | 0, HEAP32[$33 >> 2] | 0) | 0) == -1) {
      label = 11;
      break;
     }
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0 = 0;
    $$07 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   }
   if ($$0) $$pre$phiZ2D = $17; else {
    $$1 = $$07;
    break;
   }
  } else $$pre$phiZ2D = $0 + 48 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $1;
  HEAP8[$8 >> 0] = 1;
  $$1 = $1;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function _inflateInit2_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (HEAP32[$7 >> 2] | 0) if (!((HEAP32[$8 >> 2] | 0) != 56 ? 1 : (HEAP8[HEAP32[$7 >> 2] >> 0] | 0) != (HEAP8[50777] | 0))) {
  if (!(HEAP32[$5 >> 2] | 0)) {
   HEAP32[$4 >> 2] = -2;
   $72 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $72 | 0;
  }
  HEAP32[(HEAP32[$5 >> 2] | 0) + 24 >> 2] = 0;
  if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0)) {
   HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] = 44;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] = 0;
  }
  if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0)) HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] = 62;
  HEAP32[$10 >> 2] = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] & 63](HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] | 0, 1, 7120) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) {
   HEAP32[$4 >> 2] = -4;
   $72 = HEAP32[$4 >> 2] | 0;
   STACKTOP = sp;
   return $72 | 0;
  }
  HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = HEAP32[$10 >> 2];
  HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$5 >> 2];
  HEAP32[(HEAP32[$10 >> 2] | 0) + 56 >> 2] = 0;
  HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] = 16180;
  HEAP32[$9 >> 2] = _inflateReset2(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  if (HEAP32[$9 >> 2] | 0) {
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] & 127](HEAP32[(HEAP32[$5 >> 2] | 0) + 40 >> 2] | 0, HEAP32[$10 >> 2] | 0);
   HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] = 0;
  }
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  $72 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $72 | 0;
 }
 HEAP32[$4 >> 2] = -6;
 $72 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $72 | 0;
}

function __ZNK3zim4File17getArticleByTitleEj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp + 64 | 0;
 $3 = sp + 60 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 16 | 0;
 $14 = sp + 12 | 0;
 $15 = sp + 8 | 0;
 $17 = sp;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[$9 >> 2] = $13;
 HEAP32[$10 >> 2] = $18;
 $19 = HEAP32[$9 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$19 + 4 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
 if (HEAP32[$19 + 4 >> 2] | 0) {
  HEAP32[$8 >> 2] = HEAP32[$19 + 4 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$4 >> 2] = (HEAP32[$7 >> 2] | 0) + 4;
  $34 = HEAP32[$4 >> 2] | 0;
  HEAP32[$5 >> 2] = 1;
  $35 = HEAP32[$5 >> 2] | 0;
  $36 = HEAP32[$34 >> 2] | 0;
  HEAP32[$34 >> 2] = $36 + $35;
  HEAP32[sp + 48 >> 2] = $36 + $35;
 }
 HEAP32[$3 >> 2] = $18;
 $40 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 __ZN3zim15article_index_tC2Ej($14, HEAP32[$12 >> 2] | 0);
 __THREW__ = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$14 >> 2];
 $42 = invoke_iii(51, $40 | 0, $$byval_copy | 0) | 0;
 $43 = __THREW__;
 __THREW__ = 0;
 if ($43 & 1) {
  $46 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $46;
  HEAP32[sp + 4 >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($13);
  ___resumeException(HEAP32[$15 >> 2] | 0);
 } else {
  HEAP32[$17 >> 2] = $42;
  __ZN3zim7ArticleC2ENSt3__210shared_ptrINS_8FileImplEEEj($0, $13, __ZNK12REAL_TYPEDEFIjEcvjEv($17) | 0);
  __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($13);
  STACKTOP = sp;
  return;
 }
}

function __ZNK3zim7Cluster4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $34 = 0, $4 = 0, $40 = 0, $42 = 0, $5 = 0, $50 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 40 | 0;
 $2 = sp + 36 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 HEAP32[$6 >> 2] = $0;
 $9 = HEAP32[$6 >> 2] | 0;
 $13 = $9 + 16 | 0;
 if (HEAP8[$9 + 12 >> 0] & 1) {
  HEAP32[$4 >> 2] = $13;
  $14 = HEAP32[$4 >> 2] | 0;
  $22 = (((HEAP32[$14 + 4 >> 2] | 0) - (HEAP32[$14 >> 2] | 0) | 0) / 8 | 0) << 3;
  HEAP32[$3 >> 2] = $9 + 28;
  $25 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
  $28 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$25 >> 2] >> 2] & 127]($25) | 0;
  $30 = $7;
  HEAP32[$30 >> 2] = $28;
  HEAP32[$30 + 4 >> 2] = tempRet0;
  $34 = $7;
  $40 = _i64Add($22 | 0, 0, HEAP32[$34 >> 2] | 0, HEAP32[$34 + 4 >> 2] | 0) | 0;
  __ZN3zim7zsize_tC2Ey($5, $40, tempRet0);
  $70 = $5;
  $71 = $70;
  $72 = HEAP32[$71 >> 2] | 0;
  $73 = $70 + 4 | 0;
  $74 = $73;
  $75 = HEAP32[$74 >> 2] | 0;
  tempRet0 = $75;
  STACKTOP = sp;
  return $72 | 0;
 } else {
  HEAP32[$2 >> 2] = $13;
  $42 = HEAP32[$2 >> 2] | 0;
  $50 = (((HEAP32[$42 + 4 >> 2] | 0) - (HEAP32[$42 >> 2] | 0) | 0) / 8 | 0) << 2;
  HEAP32[$1 >> 2] = $9 + 28;
  $53 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
  $56 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$53 >> 2] >> 2] & 127]($53) | 0;
  $58 = $8;
  HEAP32[$58 >> 2] = $56;
  HEAP32[$58 + 4 >> 2] = tempRet0;
  $62 = $8;
  $68 = _i64Add($50 | 0, 0, HEAP32[$62 >> 2] | 0, HEAP32[$62 + 4 >> 2] | 0) | 0;
  __ZN3zim7zsize_tC2Ey($5, $68, tempRet0);
  $70 = $5;
  $71 = $70;
  $72 = HEAP32[$71 >> 2] | 0;
  $73 = $70 + 4 | 0;
  $74 = $73;
  $75 = HEAP32[$74 >> 2] | 0;
  tempRet0 = $75;
  STACKTOP = sp;
  return $72 | 0;
 }
 return 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $33 = 0, $43 = 0, $45 = 0, label = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else {
  if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
   $45 = HEAP32[$0 + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$45 >> 2] | 0) + 24 >> 2] & 7]($45, $1, $2, $3, $4);
   break;
  }
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    $19 = $1 + 44 | 0;
    if ((HEAP32[$19 >> 2] | 0) == 4) break;
    $22 = $1 + 52 | 0;
    HEAP8[$22 >> 0] = 0;
    $23 = $1 + 53 | 0;
    HEAP8[$23 >> 0] = 0;
    $25 = HEAP32[$0 + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] & 15]($25, $1, $2, $2, 1, $4);
    if (!(HEAP8[$23 >> 0] | 0)) {
     $$037$off038 = 0;
     label = 11;
    } else if (!(HEAP8[$22 >> 0] | 0)) {
     $$037$off038 = 1;
     label = 11;
    } else label = 15;
    do if ((label | 0) == 11) {
     HEAP32[$13 >> 2] = $2;
     $33 = $1 + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
      HEAP8[$1 + 54 >> 0] = 1;
      if ($$037$off038) {
       label = 15;
       break;
      } else {
       $43 = 4;
       break;
      }
     }
     if ($$037$off038) label = 15; else $43 = 4;
    } while (0);
    if ((label | 0) == 15) $43 = 3;
    HEAP32[$19 >> 2] = $43;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _update_size($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$pre_trunc = 0, $13 = 0, $17 = 0, $22 = 0, $27 = 0, $30 = 0, $34 = 0, $39 = 0, $41 = 0, $46 = 0, $5 = 0, $52 = 0, $59 = 0, $6 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $72 = 0, $78 = 0, $8 = 0, $84 = 0, $85 = 0, $9 = 0, $91 = 0, $93 = 0, $97 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 HEAP32[$6 >> 2] = $0;
 $9 = $7;
 HEAP32[$9 >> 2] = $1;
 HEAP32[$9 + 4 >> 2] = $2;
 $13 = $8;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$13 + 4 >> 2] = $4;
 $17 = $8;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $27 = $22 >>> 0 > 2147483647 | ($22 | 0) == 2147483647 & (HEAP32[$17 >> 2] | 0) >>> 0 > 4294967295;
 $30 = $8;
 HEAP32[$30 >> 2] = $27 ? -1 : $3;
 HEAP32[$30 + 4 >> 2] = $27 ? 2147483647 : $4;
 $34 = $8;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 $41 = HEAP32[$6 >> 2] | 0;
 $46 = HEAP32[$41 + 4 >> 2] | 0;
 if (!($39 >>> 0 < $46 >>> 0 | (($39 | 0) == ($46 | 0) ? (HEAP32[$34 >> 2] | 0) >>> 0 < (HEAP32[$41 >> 2] | 0) >>> 0 : 0))) {
  $52 = $8;
  $59 = HEAP32[$6 >> 2] | 0;
  $65 = _i64Subtract(HEAP32[$52 >> 2] | 0, HEAP32[$52 + 4 >> 2] | 0, HEAP32[$59 >> 2] | 0, HEAP32[$59 + 4 >> 2] | 0) | 0;
  $66 = tempRet0;
  $67 = $7;
  $72 = HEAP32[$67 + 4 >> 2] | 0;
  if (!($66 >>> 0 < $72 >>> 0 | (($66 | 0) == ($72 | 0) ? $65 >>> 0 < (HEAP32[$67 >> 2] | 0) >>> 0 : 0))) {
   $78 = $7;
   $84 = HEAP32[$6 >> 2] | 0;
   $85 = $84;
   $91 = _i64Add(HEAP32[$85 >> 2] | 0, HEAP32[$85 + 4 >> 2] | 0, HEAP32[$78 >> 2] | 0, HEAP32[$78 + 4 >> 2] | 0) | 0;
   $93 = $84;
   HEAP32[$93 >> 2] = $91;
   HEAP32[$93 + 4 >> 2] = tempRet0;
   HEAP8[$5 >> 0] = 0;
   $$pre_trunc = HEAP8[$5 >> 0] | 0;
   $97 = $$pre_trunc & 1;
   STACKTOP = sp;
   return $97 | 0;
  }
 }
 HEAP8[$5 >> 0] = 1;
 $$pre_trunc = HEAP8[$5 >> 0] | 0;
 $97 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $97 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSM_SM_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 20 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 $18 = sp;
 HEAP32[$15 >> 2] = $0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$17 >> 2] = $2;
 HEAP32[$18 >> 2] = $3;
 $19 = HEAP32[$15 >> 2] | 0;
 HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$17 >> 2] >> 2] = HEAP32[$18 >> 2];
 HEAP32[$14 >> 2] = $19;
 if (HEAP32[HEAP32[HEAP32[$14 >> 2] >> 2] >> 2] | 0) {
  HEAP32[$10 >> 2] = $19;
  $34 = HEAP32[HEAP32[HEAP32[$10 >> 2] >> 2] >> 2] | 0;
  HEAP32[$4 >> 2] = $19;
  HEAP32[HEAP32[$4 >> 2] >> 2] = $34;
 }
 HEAP32[$9 >> 2] = $19;
 HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[HEAP32[$17 >> 2] >> 2] | 0);
 HEAP32[$13 >> 2] = $19;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 8;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $48 = HEAP32[$11 >> 2] | 0;
 HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSN_SN_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 20 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 $18 = sp;
 HEAP32[$15 >> 2] = $0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$17 >> 2] = $2;
 HEAP32[$18 >> 2] = $3;
 $19 = HEAP32[$15 >> 2] | 0;
 HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$17 >> 2] >> 2] = HEAP32[$18 >> 2];
 HEAP32[$14 >> 2] = $19;
 if (HEAP32[HEAP32[HEAP32[$14 >> 2] >> 2] >> 2] | 0) {
  HEAP32[$10 >> 2] = $19;
  $34 = HEAP32[HEAP32[HEAP32[$10 >> 2] >> 2] >> 2] | 0;
  HEAP32[$4 >> 2] = $19;
  HEAP32[HEAP32[$4 >> 2] >> 2] = $34;
 }
 HEAP32[$9 >> 2] = $19;
 HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[HEAP32[$17 >> 2] >> 2] | 0);
 HEAP32[$13 >> 2] = $19;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 8;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $48 = HEAP32[$11 >> 2] | 0;
 HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $11 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $31 = 0, $32 = 0, $34 = 0, $37 = 0, $38 = 0, $46 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 if ((1073741806 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $11 = $0 + 8 | 0;
 if ((HEAP8[$11 + 3 >> 0] | 0) < 0) $34 = HEAP32[$0 >> 2] | 0; else $34 = $0;
 if ($1 >>> 0 < 536870887) {
  $17 = $2 + $1 | 0;
  $18 = $1 << 1;
  $$sroa$speculated = $17 >>> 0 < $18 >>> 0 ? $18 : $17;
  $23 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($23 >>> 0 > 1073741823) {
   $25 = ___cxa_allocate_exception(8) | 0;
   __THREW__ = 0;
   invoke_vii(49, $25 | 0, 55296);
   $26 = __THREW__;
   __THREW__ = 0;
   if ($26 & 1) {
    $28 = ___cxa_find_matching_catch_2() | 0;
    ___cxa_free_exception($25 | 0);
    ___resumeException($28 | 0);
   } else {
    HEAP32[$25 >> 2] = 48176;
    ___cxa_throw($25 | 0, 42808, 176);
   }
  } else $31 = $23;
 } else $31 = 1073741807;
 $32 = __Znwm($31 << 2) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($32, $34, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($32 + ($4 << 2) | 0, $7, $6) | 0;
 $37 = $3 - $5 | 0;
 $38 = $37 - $4 | 0;
 if ($38 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($32 + ($4 << 2) + ($6 << 2) | 0, $34 + ($4 << 2) + ($5 << 2) | 0, $38) | 0;
 if (($1 | 0) != 1) __ZdlPv($34);
 HEAP32[$0 >> 2] = $32;
 HEAP32[$11 >> 2] = $31 | -2147483648;
 $46 = $37 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $46;
 HEAP32[$8 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($32 + ($46 << 2) | 0, $8);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE13__lower_boundIcEENS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEElEERKT_SH_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISF_EEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $4 = 0, $40 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$16 >> 2] = $0;
 HEAP32[$17 >> 2] = $1;
 HEAP32[$18 >> 2] = $2;
 HEAP32[$19 >> 2] = $3;
 $20 = HEAP32[$16 >> 2] | 0;
 while (1) {
  if (!(HEAP32[$18 >> 2] | 0)) break;
  HEAP32[$14 >> 2] = $20;
  HEAP32[$13 >> 2] = (HEAP32[$14 >> 2] | 0) + 8;
  HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
  $28 = (HEAP32[$18 >> 2] | 0) + 16 | 0;
  $29 = HEAP32[$17 >> 2] | 0;
  HEAP32[$7 >> 2] = HEAP32[$12 >> 2];
  HEAP32[$8 >> 2] = $28;
  HEAP32[$9 >> 2] = $29;
  $31 = HEAP32[$8 >> 2] | 0;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$5 >> 2] = $31;
  HEAP32[$6 >> 2] = $32;
  $40 = HEAP32[$18 >> 2] | 0;
  if ((HEAP8[HEAP32[$5 >> 2] >> 0] | 0) < (HEAP8[HEAP32[$6 >> 2] >> 0] | 0)) HEAP32[$18 >> 2] = HEAP32[$40 + 4 >> 2]; else {
   HEAP32[$19 >> 2] = $40;
   HEAP32[$18 >> 2] = HEAP32[HEAP32[$18 >> 2] >> 2];
  }
 }
 $45 = HEAP32[$19 >> 2] | 0;
 HEAP32[$10 >> 2] = $15;
 HEAP32[$11 >> 2] = $45;
 HEAP32[HEAP32[$10 >> 2] >> 2] = HEAP32[$11 >> 2];
 STACKTOP = sp;
 return HEAP32[$15 >> 2] | 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_dropLooserEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 HEAP32[$11 >> 2] = $0;
 $14 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 >> 2] = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE10_getOldestEb($14, 0) | 0;
 HEAP8[$10 >> 0] = HEAP8[$12 >> 0] | 0;
 HEAP8[$10 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
 HEAP8[$10 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
 HEAP8[$10 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
 HEAP32[$6 >> 2] = $14;
 $16 = HEAP32[$6 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 HEAP8[$4 >> 0] = HEAP8[$9 >> 0] | 0;
 HEAP8[$4 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
 HEAP8[$4 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
 HEAP8[$4 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
 HEAP32[$3 >> 2] = $8;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE5eraseENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEElEE($16, $$byval_copy) | 0;
 HEAP8[$2 >> 0] = HEAP8[$7 >> 0] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
 HEAP32[$1 >> 2] = $5;
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[sp + 20 >> 2] = HEAP32[$5 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_dropLooserEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 60 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 HEAP32[$11 >> 2] = $0;
 $14 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 >> 2] = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE10_getOldestEb($14, 0) | 0;
 HEAP8[$10 >> 0] = HEAP8[$12 >> 0] | 0;
 HEAP8[$10 + 1 >> 0] = HEAP8[$12 + 1 >> 0] | 0;
 HEAP8[$10 + 2 >> 0] = HEAP8[$12 + 2 >> 0] | 0;
 HEAP8[$10 + 3 >> 0] = HEAP8[$12 + 3 >> 0] | 0;
 HEAP32[$6 >> 2] = $14;
 $16 = HEAP32[$6 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 HEAP8[$4 >> 0] = HEAP8[$9 >> 0] | 0;
 HEAP8[$4 + 1 >> 0] = HEAP8[$9 + 1 >> 0] | 0;
 HEAP8[$4 + 2 >> 0] = HEAP8[$9 + 2 >> 0] | 0;
 HEAP8[$4 + 3 >> 0] = HEAP8[$9 + 3 >> 0] | 0;
 HEAP32[$3 >> 2] = $8;
 HEAP32[HEAP32[$3 >> 2] >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE5eraseENS_21__tree_const_iteratorISB_PNS_11__tree_nodeISB_PvEElEE($16, $$byval_copy) | 0;
 HEAP8[$2 >> 0] = HEAP8[$7 >> 0] | 0;
 HEAP8[$2 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
 HEAP8[$2 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
 HEAP8[$2 + 3 >> 0] = HEAP8[$7 + 3 >> 0] | 0;
 HEAP32[$1 >> 2] = $5;
 HEAP32[HEAP32[$1 >> 2] >> 2] = HEAP32[$2 >> 2];
 HEAP32[sp + 20 >> 2] = HEAP32[$5 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSK_SK_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 20 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 $18 = sp;
 HEAP32[$15 >> 2] = $0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$17 >> 2] = $2;
 HEAP32[$18 >> 2] = $3;
 $19 = HEAP32[$15 >> 2] | 0;
 HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$17 >> 2] >> 2] = HEAP32[$18 >> 2];
 HEAP32[$14 >> 2] = $19;
 if (HEAP32[HEAP32[HEAP32[$14 >> 2] >> 2] >> 2] | 0) {
  HEAP32[$10 >> 2] = $19;
  $34 = HEAP32[HEAP32[HEAP32[$10 >> 2] >> 2] >> 2] | 0;
  HEAP32[$4 >> 2] = $19;
  HEAP32[HEAP32[$4 >> 2] >> 2] = $34;
 }
 HEAP32[$9 >> 2] = $19;
 HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[HEAP32[$17 >> 2] >> 2] | 0);
 HEAP32[$13 >> 2] = $19;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 8;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $48 = HEAP32[$11 >> 2] | 0;
 HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $23 = 0, $3 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 if (HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) {
  $23 = HEAP32[$7 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2];
  HEAP32[$6 >> 2] = $23;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = HEAP32[$6 >> 2];
 }
 HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
 $39 = HEAP32[$8 >> 2] | 0;
 $40 = HEAP32[$7 >> 2] | 0;
 if ((HEAP32[$4 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] >> 2] | 0)) {
  HEAP32[HEAP32[$40 + 8 >> 2] >> 2] = $39;
  $47 = HEAP32[$7 >> 2] | 0;
  $48 = HEAP32[$8 >> 2] | 0;
  HEAP32[$48 >> 2] = $47;
  $49 = HEAP32[$7 >> 2] | 0;
  $50 = HEAP32[$8 >> 2] | 0;
  HEAP32[$2 >> 2] = $49;
  HEAP32[$3 >> 2] = $50;
  $51 = HEAP32[$2 >> 2] | 0;
  $52 = HEAP32[$3 >> 2] | 0;
  $53 = $51 + 8 | 0;
  HEAP32[$53 >> 2] = $52;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$1 >> 2] = $40;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] = $39;
  $47 = HEAP32[$7 >> 2] | 0;
  $48 = HEAP32[$8 >> 2] | 0;
  HEAP32[$48 >> 2] = $47;
  $49 = HEAP32[$7 >> 2] | 0;
  $50 = HEAP32[$8 >> 2] | 0;
  HEAP32[$2 >> 2] = $49;
  HEAP32[$3 >> 2] = $50;
  $51 = HEAP32[$2 >> 2] | 0;
  $52 = HEAP32[$3 >> 2] | 0;
  $53 = $51 + 8 | 0;
  HEAP32[$53 >> 2] = $52;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__211__stdoutbufIwE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 do if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($1, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) label = 15; else {
  HEAP32[$3 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($1) | 0;
  if (HEAP8[$0 + 44 >> 0] | 0) {
   if ((_fwrite($3, 4, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
  HEAP32[$4 >> 2] = $2;
  $17 = $3 + 4 | 0;
  $18 = $0 + 36 | 0;
  $19 = $0 + 40 | 0;
  $20 = $2 + 8 | 0;
  $21 = $2;
  $22 = $0 + 32 | 0;
  $$032 = $3;
  while (1) {
   $23 = HEAP32[$18 >> 2] | 0;
   $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0;
   if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 3) {
    label = 8;
    break;
   }
   if ($28 >>> 0 >= 2) {
    label = 14;
    break;
   }
   $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0;
   if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 1) $$032 = HEAP32[$5 >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $$4 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $$4 = __ZNSt3__211char_traitsIwE7not_eofEj($1) | 0;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__211__stdoutbufIcE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$032 = 0, $$4 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 do if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($1, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) label = 15; else {
  HEAP8[$3 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($1) | 0;
  if (HEAP8[$0 + 44 >> 0] | 0) {
   if ((_fwrite($3, 1, 1, HEAP32[$0 + 32 >> 2] | 0) | 0) == 1) {
    label = 15;
    break;
   }
   $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
  HEAP32[$4 >> 2] = $2;
  $17 = $3 + 1 | 0;
  $18 = $0 + 36 | 0;
  $19 = $0 + 40 | 0;
  $20 = $2 + 8 | 0;
  $21 = $2;
  $22 = $0 + 32 | 0;
  $$032 = $3;
  while (1) {
   $23 = HEAP32[$18 >> 2] | 0;
   $28 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$23 >> 2] | 0) + 12 >> 2] & 15]($23, HEAP32[$19 >> 2] | 0, $$032, $17, $5, $2, $20, $4) | 0;
   if ((HEAP32[$5 >> 2] | 0) == ($$032 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 3) {
    label = 8;
    break;
   }
   if ($28 >>> 0 >= 2) {
    label = 14;
    break;
   }
   $38 = (HEAP32[$4 >> 2] | 0) - $21 | 0;
   if ((_fwrite($2, 1, $38, HEAP32[$22 >> 2] | 0) | 0) != ($38 | 0)) {
    label = 14;
    break;
   }
   if (($28 | 0) == 1) $$032 = HEAP32[$5 >> 2] | 0; else {
    label = 13;
    break;
   }
  }
  if ((label | 0) == 8) if ((_fwrite($$032, 1, 1, HEAP32[$22 >> 2] | 0) | 0) == 1) label = 13; else label = 14;
  if ((label | 0) == 13) {
   label = 15;
   break;
  } else if ((label | 0) == 14) {
   $$4 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
   break;
  }
 } while (0);
 if ((label | 0) == 15) $$4 = __ZNSt3__211char_traitsIcE7not_eofEi($1) | 0;
 STACKTOP = sp;
 return $$4 | 0;
}

function __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 $17 = HEAP32[$11 >> 2] | 0;
 $18 = HEAP32[$12 >> 2] | 0;
 HEAP32[$10 >> 2] = $17;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 $20 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = $20;
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 8;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 if ($18 >>> 0 <= (((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) - (HEAP32[$20 >> 2] | 0) | 0) / 8 | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = $17;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
 $36 = HEAP32[$12 >> 2] | 0;
 HEAP32[$2 >> 2] = $17;
 $37 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEEC2EmmS5_($14, $36, ((HEAP32[$37 + 4 >> 2] | 0) - (HEAP32[$37 >> 2] | 0) | 0) / 8 | 0, HEAP32[$13 >> 2] | 0);
 __THREW__ = 0;
 invoke_vii(57, $17 | 0, $14 | 0);
 $46 = __THREW__;
 __THREW__ = 0;
 if ($46 & 1) {
  $48 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $48;
  HEAP32[sp >> 2] = tempRet0;
  __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEED2Ev($14);
  ___resumeException(HEAP32[$15 >> 2] | 0);
 }
 __ZNSt3__214__split_bufferIN3zim8offset_tERNS_9allocatorIS2_EEED2Ev($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSG_SG_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $34 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 56 | 0;
 $5 = sp + 52 | 0;
 $6 = sp + 48 | 0;
 $7 = sp + 44 | 0;
 $8 = sp + 40 | 0;
 $9 = sp + 36 | 0;
 $10 = sp + 32 | 0;
 $11 = sp + 28 | 0;
 $12 = sp + 24 | 0;
 $13 = sp + 20 | 0;
 $14 = sp + 16 | 0;
 $15 = sp + 12 | 0;
 $16 = sp + 8 | 0;
 $17 = sp + 4 | 0;
 $18 = sp;
 HEAP32[$15 >> 2] = $0;
 HEAP32[$16 >> 2] = $1;
 HEAP32[$17 >> 2] = $2;
 HEAP32[$18 >> 2] = $3;
 $19 = HEAP32[$15 >> 2] | 0;
 HEAP32[HEAP32[$18 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$18 >> 2] | 0) + 8 >> 2] = HEAP32[$16 >> 2];
 HEAP32[HEAP32[$17 >> 2] >> 2] = HEAP32[$18 >> 2];
 HEAP32[$14 >> 2] = $19;
 if (HEAP32[HEAP32[HEAP32[$14 >> 2] >> 2] >> 2] | 0) {
  HEAP32[$10 >> 2] = $19;
  $34 = HEAP32[HEAP32[HEAP32[$10 >> 2] >> 2] >> 2] | 0;
  HEAP32[$4 >> 2] = $19;
  HEAP32[HEAP32[$4 >> 2] >> 2] = $34;
 }
 HEAP32[$9 >> 2] = $19;
 HEAP32[$8 >> 2] = (HEAP32[$9 >> 2] | 0) + 4;
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 __ZNSt3__227__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[HEAP32[$17 >> 2] >> 2] | 0);
 HEAP32[$13 >> 2] = $19;
 HEAP32[$12 >> 2] = (HEAP32[$13 >> 2] | 0) + 8;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $48 = HEAP32[$11 >> 2] | 0;
 HEAP32[$48 >> 2] = (HEAP32[$48 >> 2] | 0) + 1;
 STACKTOP = sp;
 return;
}

function __ZNK3zim12BufferReader4readENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $16 = 0, $17 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $4 = 0, $40 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 32 | 0;
 $2 = sp + 48 | 0;
 $3 = sp + 44 | 0;
 $4 = sp + 40 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 52 | 0;
 $9 = sp;
 HEAP32[$4 >> 2] = $0;
 $10 = HEAP32[$4 >> 2] | 0;
 $11 = $1;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $17 = $5;
 HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$17 + 4 >> 2] = $16;
 HEAP32[$3 >> 2] = $10 + 4;
 $24 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$3 >> 2] >> 2] | 0) | 0;
 $26 = $7;
 HEAP32[$26 >> 2] = $24;
 HEAP32[$26 + 4 >> 2] = tempRet0;
 $30 = $7;
 $35 = HEAP32[$30 + 4 >> 2] | 0;
 $36 = $6;
 HEAP32[$36 >> 2] = HEAP32[$30 >> 2];
 HEAP32[$36 + 4 >> 2] = $35;
 $40 = $5;
 $45 = HEAP32[$40 + 4 >> 2] | 0;
 $46 = $6;
 $51 = HEAP32[$46 + 4 >> 2] | 0;
 if (!($45 >>> 0 < $51 >>> 0 | (($45 | 0) == ($51 | 0) ? (HEAP32[$40 >> 2] | 0) >>> 0 < (HEAP32[$46 >> 2] | 0) >>> 0 : 0))) {
  $57 = $5;
  $63 = $6;
  __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 50980, 49464, HEAP32[$57 >> 2] | 0, HEAP32[$57 + 4 >> 2] | 0, HEAP32[$63 >> 2] | 0, HEAP32[$63 + 4 >> 2] | 0, 48618, 341);
 }
 HEAP32[$2 >> 2] = $10 + 4;
 $71 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$9 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$9 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$9 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$9 + 4 >> 2];
 HEAP8[$8 >> 0] = HEAP8[(FUNCTION_TABLE_iii[$74 & 63]($71, $$byval_copy) | 0) >> 0] | 0;
 STACKTOP = sp;
 return HEAP8[$8 >> 0] | 0;
}

function __ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 29 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$9 >> 2] = $0;
 $10 = HEAP32[$9 >> 2] | 0;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$4 >> 2] = $11 + (HEAP32[(HEAP32[$11 >> 2] | 0) + -12 >> 2] | 0);
 HEAP8[$5 >> 0] = 10;
 __ZNKSt3__28ios_base6getlocEv($6, HEAP32[$4 >> 2] | 0);
 HEAP32[$3 >> 2] = $6;
 __THREW__ = 0;
 $18 = invoke_iii(32, HEAP32[$3 >> 2] | 0, 62368) | 0;
 $19 = __THREW__;
 __THREW__ = 0;
 if ($19 & 1) {
  $30 = ___cxa_find_matching_catch_2() | 0;
  $31 = tempRet0;
  HEAP32[$7 >> 2] = $30;
  HEAP32[$8 >> 2] = $31;
  __ZNSt3__26localeD2Ev($6);
  $32 = HEAP32[$7 >> 2] | 0;
  $33 = HEAP32[$8 >> 2] | 0;
  ___resumeException($32 | 0);
 }
 $21 = HEAP8[$5 >> 0] | 0;
 HEAP32[$1 >> 2] = $18;
 HEAP8[$2 >> 0] = $21;
 $22 = HEAP32[$1 >> 2] | 0;
 __THREW__ = 0;
 $27 = invoke_iii(HEAP32[(HEAP32[$22 >> 2] | 0) + 28 >> 2] | 0, $22 | 0, HEAP8[$2 >> 0] | 0) | 0;
 $28 = __THREW__;
 __THREW__ = 0;
 if ($28 & 1) {
  $30 = ___cxa_find_matching_catch_2() | 0;
  $31 = tempRet0;
  HEAP32[$7 >> 2] = $30;
  HEAP32[$8 >> 2] = $31;
  __ZNSt3__26localeD2Ev($6);
  $32 = HEAP32[$7 >> 2] | 0;
  $33 = HEAP32[$8 >> 2] | 0;
  ___resumeException($32 | 0);
 } else {
  __ZNSt3__26localeD2Ev($6);
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc($10, $27) | 0;
  __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv(HEAP32[$9 >> 2] | 0) | 0;
  STACKTOP = sp;
  return HEAP32[$9 >> 2] | 0;
 }
 return 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $8 = HEAP32[$3 >> 2] | 0;
 HEAP32[$6 >> 2] = 0;
 do if (!(HEAP32[$8 + 64 >> 2] | 0)) {
  HEAP32[$6 >> 2] = $8;
  do switch (HEAP32[$5 >> 2] & -3 | 0) {
  case 48:
  case 16:
   {
    HEAP32[$7 >> 2] = 48479;
    break;
   }
  case 1:
  case 17:
   {
    HEAP32[$7 >> 2] = 48481;
    break;
   }
  case 8:
   {
    HEAP32[$7 >> 2] = 48483;
    break;
   }
  case 24:
   {
    HEAP32[$7 >> 2] = 48485;
    break;
   }
  case 56:
   {
    HEAP32[$7 >> 2] = 48488;
    break;
   }
  case 9:
  case 25:
   {
    HEAP32[$7 >> 2] = 48491;
    break;
   }
  case 52:
  case 20:
   {
    HEAP32[$7 >> 2] = 48494;
    break;
   }
  case 5:
  case 21:
   {
    HEAP32[$7 >> 2] = 48497;
    break;
   }
  case 12:
   {
    HEAP32[$7 >> 2] = 48500;
    break;
   }
  case 28:
   {
    HEAP32[$7 >> 2] = 48503;
    break;
   }
  case 60:
   {
    HEAP32[$7 >> 2] = 48507;
    break;
   }
  case 13:
  case 29:
   {
    HEAP32[$7 >> 2] = 48511;
    break;
   }
  default:
   HEAP32[$6 >> 2] = 0;
  } while (0);
  if (HEAP32[$6 >> 2] | 0) {
   HEAP32[$8 + 64 >> 2] = _fopen(HEAP32[$4 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
   if (!(HEAP32[$8 + 64 >> 2] | 0)) {
    HEAP32[$6 >> 2] = 0;
    break;
   }
   HEAP32[$8 + 88 >> 2] = HEAP32[$5 >> 2];
   if (HEAP32[$5 >> 2] & 2 | 0) if (_fseek(HEAP32[$8 + 64 >> 2] | 0, 0, 2) | 0) {
    _fclose(HEAP32[$8 + 64 >> 2] | 0) | 0;
    HEAP32[$8 + 64 >> 2] = 0;
    HEAP32[$6 >> 2] = 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $18 = 0, $22 = 0, $23 = 0, $29 = 0, $33 = 0, $35 = 0, $37 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 L1 : do if (HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0) {
  __THREW__ = 0;
  invoke_vii(45, $1 | 0, $0 | 0);
  $9 = __THREW__;
  __THREW__ = 0;
  L3 : do if ($9 & 1) {
   $35 = ___cxa_find_matching_catch_3(0) | 0;
   $$0 = $35;
  } else {
   do if (HEAP8[$1 >> 0] | 0) {
    $18 = HEAP32[$0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
    __THREW__ = 0;
    $22 = invoke_ii(HEAP32[(HEAP32[$18 >> 2] | 0) + 24 >> 2] | 0, $18 | 0) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    if (!($23 & 1)) {
     if (($22 | 0) != -1) break;
     $29 = $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0;
     __THREW__ = 0;
     invoke_vii(46, $29 | 0, HEAP32[$29 + 16 >> 2] | 1 | 0);
     $33 = __THREW__;
     __THREW__ = 0;
     if (!($33 & 1)) break;
    }
    $37 = ___cxa_find_matching_catch_3(0) | 0;
    __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
    $$0 = $37;
    break L3;
   } while (0);
   __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($1);
   break L1;
  } while (0);
  ___cxa_begin_catch($$0 | 0) | 0;
  __THREW__ = 0;
  invoke_vi(186, $0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
  $43 = __THREW__;
  __THREW__ = 0;
  if (!($43 & 1)) {
   ___cxa_end_catch();
   break;
  }
  $45 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $47 = __THREW__;
  __THREW__ = 0;
  if ($47 & 1) {
   $49 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($49);
  } else ___resumeException($45 | 0);
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZN3zim4BlobC2ENSt3__210shared_ptrIKNS_6BufferEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp + 16 | 0;
 $2 = sp + 60 | 0;
 $3 = sp + 56 | 0;
 $4 = sp + 52 | 0;
 $6 = sp + 44 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 32 | 0;
 $10 = sp + 28 | 0;
 $11 = sp + 24 | 0;
 $12 = sp + 8 | 0;
 $13 = sp;
 HEAP32[$11 >> 2] = $0;
 $14 = HEAP32[$11 >> 2] | 0;
 HEAP32[$10 >> 2] = $1;
 $16 = HEAP32[HEAP32[$10 >> 2] >> 2] | 0;
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($12, 0, 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$12 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$12 + 4 >> 2];
 HEAP32[$14 >> 2] = FUNCTION_TABLE_iii[$19 & 63]($16, $$byval_copy) | 0;
 HEAP32[$2 >> 2] = $1;
 $24 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 $26 = $13;
 HEAP32[$26 >> 2] = $24;
 HEAP32[$26 + 4 >> 2] = tempRet0;
 $30 = __ZNK12REAL_TYPEDEFIyEcvyEv($13) | 0;
 $32 = $14 + 8 | 0;
 HEAP32[$32 >> 2] = $30;
 HEAP32[$32 + 4 >> 2] = tempRet0;
 HEAP32[$8 >> 2] = $14 + 16;
 HEAP32[$9 >> 2] = $1;
 $37 = HEAP32[$8 >> 2] | 0;
 HEAP32[$37 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$37 + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[$37 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$7 >> 2] = HEAP32[$37 + 4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$3 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 $52 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = 1;
 $53 = HEAP32[$4 >> 2] | 0;
 $54 = HEAP32[$52 >> 2] | 0;
 HEAP32[$52 >> 2] = $54 + $53;
 HEAP32[sp + 48 >> 2] = $54 + $53;
 STACKTOP = sp;
 return;
}

function _lzma2_decoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $27 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 32 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$5 >> 2] >> 2];
 do if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$9 >> 2] = _lzma_alloc(136, HEAP32[$6 >> 2] | 0) | 0;
  if (HEAP32[$9 >> 2] | 0) {
   HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$9 >> 2];
   HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 29;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 16 >> 2] = 66;
   $27 = (HEAP32[$9 >> 2] | 0) + 8 | 0;
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$10 + 8 >> 2] = 0;
   HEAP32[$10 + 12 >> 2] = 0;
   HEAP32[$10 + 16 >> 2] = 0;
   HEAP32[$27 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$27 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
   HEAP32[$27 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
   HEAP32[$27 + 12 >> 2] = HEAP32[$10 + 12 >> 2];
   HEAP32[$27 + 16 >> 2] = HEAP32[$10 + 16 >> 2];
   break;
  }
  HEAP32[$4 >> 2] = 5;
  $50 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 } while (0);
 HEAP32[$11 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$9 >> 2] >> 2] = 0;
 HEAP8[(HEAP32[$9 >> 2] | 0) + 36 >> 0] = 1;
 if (!(HEAP32[(HEAP32[$11 >> 2] | 0) + 4 >> 2] | 0)) $43 = 1; else $43 = (HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] | 0) == 0;
 HEAP8[(HEAP32[$9 >> 2] | 0) + 37 >> 0] = $43 & 1;
 HEAP32[$4 >> 2] = _lzma_lzma_decoder_create((HEAP32[$9 >> 2] | 0) + 8 | 0, HEAP32[$6 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
 $50 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $50 | 0;
}

function _copy_or_code($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $63 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $9 = sp + 40 | 0;
 $10 = sp + 36 | 0;
 $11 = sp + 32 | 0;
 $12 = sp + 28 | 0;
 $13 = sp + 24 | 0;
 $14 = sp + 20 | 0;
 $15 = sp + 16 | 0;
 $16 = sp + 12 | 0;
 $17 = sp + 8 | 0;
 $18 = sp + 4 | 0;
 $19 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 HEAP32[$13 >> 2] = $3;
 HEAP32[$14 >> 2] = $4;
 HEAP32[$15 >> 2] = $5;
 HEAP32[$16 >> 2] = $6;
 HEAP32[$17 >> 2] = $7;
 HEAP32[$18 >> 2] = $8;
 do if (!(HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0)) {
  _lzma_bufcpy(HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
  if (HEAP8[(HEAP32[$10 >> 2] | 0) + 49 >> 0] & 1 & (HEAP32[$18 >> 2] | 0) == 3) if ((HEAP32[HEAP32[$13 >> 2] >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) HEAP8[(HEAP32[$10 >> 2] | 0) + 48 >> 0] = 1;
 } else {
  HEAP32[$19 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 7](HEAP32[HEAP32[$10 >> 2] >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$18 >> 2] | 0) | 0;
  if ((HEAP32[$19 >> 2] | 0) == 1) {
   HEAP8[(HEAP32[$10 >> 2] | 0) + 48 >> 0] = 1;
   break;
  }
  if (HEAP32[$19 >> 2] | 0) {
   HEAP32[$9 >> 2] = HEAP32[$19 >> 2];
   $63 = HEAP32[$9 >> 2] | 0;
   STACKTOP = sp;
   return $63 | 0;
  }
 } while (0);
 HEAP32[$9 >> 2] = 0;
 $63 = HEAP32[$9 >> 2] | 0;
 STACKTOP = sp;
 return $63 | 0;
}

function _lzma_index_hash_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $21 = 0, $28 = 0, $3 = 0, $35 = 0, $4 = 0, $41 = 0, $48 = 0, $55 = 0, $62 = 0, $68 = 0, $74 = 0, $89 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[$3 >> 2] | 0)) {
  HEAP32[$3 >> 2] = _lzma_alloc(312, HEAP32[$4 >> 2] | 0) | 0;
  if (!(HEAP32[$3 >> 2] | 0)) {
   HEAP32[$2 >> 2] = 0;
   $89 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $89 | 0;
  }
 }
 HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
 $14 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 $21 = (HEAP32[$3 >> 2] | 0) + 8 + 8 | 0;
 HEAP32[$21 >> 2] = 0;
 HEAP32[$21 + 4 >> 2] = 0;
 $28 = (HEAP32[$3 >> 2] | 0) + 8 + 16 | 0;
 HEAP32[$28 >> 2] = 0;
 HEAP32[$28 + 4 >> 2] = 0;
 $35 = (HEAP32[$3 >> 2] | 0) + 8 + 24 | 0;
 HEAP32[$35 >> 2] = 0;
 HEAP32[$35 + 4 >> 2] = 0;
 $41 = (HEAP32[$3 >> 2] | 0) + 144 | 0;
 HEAP32[$41 >> 2] = 0;
 HEAP32[$41 + 4 >> 2] = 0;
 $48 = (HEAP32[$3 >> 2] | 0) + 144 + 8 | 0;
 HEAP32[$48 >> 2] = 0;
 HEAP32[$48 + 4 >> 2] = 0;
 $55 = (HEAP32[$3 >> 2] | 0) + 144 + 16 | 0;
 HEAP32[$55 >> 2] = 0;
 HEAP32[$55 + 4 >> 2] = 0;
 $62 = (HEAP32[$3 >> 2] | 0) + 144 + 24 | 0;
 HEAP32[$62 >> 2] = 0;
 HEAP32[$62 + 4 >> 2] = 0;
 $68 = (HEAP32[$3 >> 2] | 0) + 288 | 0;
 HEAP32[$68 >> 2] = 0;
 HEAP32[$68 + 4 >> 2] = 0;
 $74 = (HEAP32[$3 >> 2] | 0) + 296 | 0;
 HEAP32[$74 >> 2] = 0;
 HEAP32[$74 + 4 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 304 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 308 >> 2] = 0;
 _lzma_check_init((HEAP32[$3 >> 2] | 0) + 8 + 32 | 0, 10);
 _lzma_check_init((HEAP32[$3 >> 2] | 0) + 144 + 32 | 0, 10);
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $89 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $89 | 0;
}

function __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sink11$index = 0, $$sink11$index2 = 0, $12 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5, $1);
 __THREW__ = 0;
 $6 = invoke_iii(32, $5 | 0, 62400) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 if ($7 & 1) label = 8; else {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] | 0, $6 | 0, 40416, 40448, $2 | 0) | 0;
  $12 = __THREW__;
  __THREW__ = 0;
  if ($12 & 1) label = 8; else {
   __THREW__ = 0;
   $14 = invoke_iii(32, $5 | 0, 62408) | 0;
   $15 = __THREW__;
   __THREW__ = 0;
   if (!($15 & 1)) {
    __THREW__ = 0;
    $20 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] | 0, $14 | 0) | 0;
    $21 = __THREW__;
    __THREW__ = 0;
    if (!($21 & 1)) {
     HEAP32[$3 >> 2] = $20;
     __THREW__ = 0;
     $26 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] | 0, $14 | 0) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     if (!($27 & 1)) {
      HEAP32[$4 >> 2] = $26;
      __THREW__ = 0;
      invoke_vii(HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $14 | 0);
      $32 = __THREW__;
      __THREW__ = 0;
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;
       return;
      }
     }
    }
   }
   $36 = ___cxa_find_matching_catch_2() | 0;
   $$sink11$index = $36;
   $$sink11$index2 = tempRet0;
  }
 }
 if ((label | 0) == 8) {
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$sink11$index = $34;
  $$sink11$index2 = tempRet0;
 }
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($$sink11$index | 0);
}

function __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$sink11$index = 0, $$sink11$index2 = 0, $12 = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 __ZNKSt3__28ios_base6getlocEv($5, $1);
 __THREW__ = 0;
 $6 = invoke_iii(32, $5 | 0, 62368) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 if ($7 & 1) label = 8; else {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] | 0, $6 | 0, 40416, 40448, $2 | 0) | 0;
  $12 = __THREW__;
  __THREW__ = 0;
  if ($12 & 1) label = 8; else {
   __THREW__ = 0;
   $14 = invoke_iii(32, $5 | 0, 62384) | 0;
   $15 = __THREW__;
   __THREW__ = 0;
   if (!($15 & 1)) {
    __THREW__ = 0;
    $20 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] | 0, $14 | 0) | 0;
    $21 = __THREW__;
    __THREW__ = 0;
    if (!($21 & 1)) {
     HEAP8[$3 >> 0] = $20;
     __THREW__ = 0;
     $26 = invoke_ii(HEAP32[(HEAP32[$14 >> 2] | 0) + 16 >> 2] | 0, $14 | 0) | 0;
     $27 = __THREW__;
     __THREW__ = 0;
     if (!($27 & 1)) {
      HEAP8[$4 >> 0] = $26;
      __THREW__ = 0;
      invoke_vii(HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $14 | 0);
      $32 = __THREW__;
      __THREW__ = 0;
      if (!($32 & 1)) {
       __ZNSt3__26localeD2Ev($5);
       STACKTOP = sp;
       return;
      }
     }
    }
   }
   $36 = ___cxa_find_matching_catch_2() | 0;
   $$sink11$index = $36;
   $$sink11$index2 = tempRet0;
  }
 }
 if ((label | 0) == 8) {
  $34 = ___cxa_find_matching_catch_2() | 0;
  $$sink11$index = $34;
  $$sink11$index2 = tempRet0;
 }
 __ZNSt3__26localeD2Ev($5);
 ___resumeException($$sink11$index | 0);
}

function __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $30 = 0, $7 = 0, $9 = 0;
 _pthread_mutex_lock(62720) | 0;
 while (1) {
  if ((HEAP32[$0 >> 2] | 0) != 1) break;
  _pthread_cond_wait(62748, 62720) | 0;
 }
 do if (!(HEAP32[$0 >> 2] | 0)) {
  HEAP32[$0 >> 2] = 1;
  __THREW__ = 0;
  invoke_ii(92, 62720) | 0;
  $7 = __THREW__;
  __THREW__ = 0;
  if (!($7 & 1)) {
   __THREW__ = 0;
   invoke_vi($2 | 0, $1 | 0);
   $9 = __THREW__;
   __THREW__ = 0;
   if (!($9 & 1)) {
    __THREW__ = 0;
    invoke_ii(95, 62720) | 0;
    $11 = __THREW__;
    __THREW__ = 0;
    if (!($11 & 1)) {
     HEAP32[$0 >> 2] = -1;
     __THREW__ = 0;
     invoke_ii(92, 62720) | 0;
     $13 = __THREW__;
     __THREW__ = 0;
     if (!($13 & 1)) {
      __THREW__ = 0;
      invoke_ii(101, 62748) | 0;
      $15 = __THREW__;
      __THREW__ = 0;
      if (!($15 & 1)) break;
     }
    }
   }
  }
  $17 = ___cxa_find_matching_catch_3(0) | 0;
  ___cxa_begin_catch($17 | 0) | 0;
  __THREW__ = 0;
  invoke_ii(95, 62720) | 0;
  $19 = __THREW__;
  __THREW__ = 0;
  if (!($19 & 1)) {
   HEAP32[$0 >> 2] = 0;
   __THREW__ = 0;
   invoke_ii(92, 62720) | 0;
   $21 = __THREW__;
   __THREW__ = 0;
   if (!($21 & 1)) {
    __THREW__ = 0;
    invoke_ii(101, 62748) | 0;
    $23 = __THREW__;
    __THREW__ = 0;
    if (!($23 & 1)) {
     __THREW__ = 0;
     invoke_v(4);
     __THREW__ = 0;
    }
   }
  }
  $26 = ___cxa_find_matching_catch_2() | 0;
  __THREW__ = 0;
  invoke_v(3);
  $28 = __THREW__;
  __THREW__ = 0;
  if ($28 & 1) {
   $30 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($30);
  } else ___resumeException($26 | 0);
 } else _pthread_mutex_unlock(62720) | 0; while (0);
 return;
}

function __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208 | 0;
 $$byval_copy = sp + 184 | 0;
 $5 = sp + 192 | 0;
 $6 = sp + 160 | 0;
 $7 = sp;
 $8 = sp + 188 | 0;
 HEAP8[$5 >> 0] = HEAP8[53254] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53255] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53256] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53257] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53258] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53259] | 0;
 $9 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0;
 $11 = $6 + $10 | 0;
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 $13 = invoke_iii(32, $$byval_copy | 0, 62400) | 0;
 $14 = __THREW__;
 __THREW__ = 0;
 if ($14 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($27 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 48 >> 2] & 31]($13, $6, $11, $7) | 0;
  $19 = $7 + ($10 << 2) | 0;
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $26 = __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, ($12 | 0) == ($11 | 0) ? $19 : $7 + ($12 - $6 << 2) | 0, $19, $2, $3) | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}

function __ZNK3zim4File15getArticleByUrlERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $21 = 0, $22 = 0, $3 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 8 | 0;
 $14 = sp;
 $15 = sp + 56 | 0;
 HEAP32[$11 >> 2] = $1;
 HEAP32[$12 >> 2] = $2;
 $16 = HEAP32[$11 >> 2] | 0;
 HEAP32[$10 >> 2] = $16;
 __ZN3zim8FileImpl5findxERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($13, HEAP32[HEAP32[$10 >> 2] >> 2] | 0, HEAP32[$12 >> 2] | 0);
 $21 = HEAP8[$13 >> 0] & 1;
 HEAP8[$15 >> 0] = 0;
 if ($21) {
  HEAP32[$8 >> 2] = $14;
  HEAP32[$9 >> 2] = $16;
  $22 = HEAP32[$8 >> 2] | 0;
  HEAP32[$22 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
  HEAP32[$22 + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
  if (HEAP32[$22 + 4 >> 2] | 0) {
   HEAP32[$7 >> 2] = HEAP32[$22 + 4 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$3 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
   $37 = HEAP32[$3 >> 2] | 0;
   HEAP32[$4 >> 2] = 1;
   $38 = HEAP32[$4 >> 2] | 0;
   $39 = HEAP32[$37 >> 2] | 0;
   HEAP32[$37 >> 2] = $39 + $38;
   HEAP32[$5 >> 2] = $39 + $38;
  }
  HEAP8[$15 >> 0] = 1;
  __ZN3zim7ArticleC2ENSt3__210shared_ptrINS_8FileImplEEEj($0, $14, __ZNK12REAL_TYPEDEFIjEcvjEv($13 + 4 | 0) | 0);
 } else __ZN3zim7ArticleC2Ev($0);
 if (!(HEAP8[$15 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($14);
 STACKTOP = sp;
 return;
}

function _lzma_stream_flags_compare($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $28 = 0, $3 = 0, $39 = 0, $4 = 0, $54 = 0, $62 = 0, $71 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAP32[HEAP32[$3 >> 2] >> 2] | 0)) if (!(HEAP32[HEAP32[$4 >> 2] >> 2] | 0)) {
  if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) >>> 0 <= 15) if ((HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0) >>> 0 <= 15) {
   if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) != (HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0)) {
    HEAP32[$2 >> 2] = 9;
    $71 = HEAP32[$2 >> 2] | 0;
    STACKTOP = sp;
    return $71 | 0;
   }
   $28 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   do if ((HEAP32[$28 >> 2] | 0) != -1 ? 1 : (HEAP32[$28 + 4 >> 2] | 0) != -1) {
    $39 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) != -1 ? 1 : (HEAP32[$39 + 4 >> 2] | 0) != -1) {
     if (_is_backward_size_valid_627(HEAP32[$3 >> 2] | 0) | 0) if (_is_backward_size_valid_627(HEAP32[$4 >> 2] | 0) | 0) {
      $54 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
      $62 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
      if (!((HEAP32[$54 >> 2] | 0) != (HEAP32[$62 >> 2] | 0) ? 1 : (HEAP32[$54 + 4 >> 2] | 0) != (HEAP32[$62 + 4 >> 2] | 0))) break;
      HEAP32[$2 >> 2] = 9;
      $71 = HEAP32[$2 >> 2] | 0;
      STACKTOP = sp;
      return $71 | 0;
     }
     HEAP32[$2 >> 2] = 11;
     $71 = HEAP32[$2 >> 2] | 0;
     STACKTOP = sp;
     return $71 | 0;
    }
   } while (0);
   HEAP32[$2 >> 2] = 0;
   $71 = HEAP32[$2 >> 2] | 0;
   STACKTOP = sp;
   return $71 | 0;
  }
  HEAP32[$2 >> 2] = 11;
  $71 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $71 | 0;
 }
 HEAP32[$2 >> 2] = 8;
 $71 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $71 | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE7reserveEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $35 = 0, $36 = 0, $4 = 0, $44 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 72 | 0;
 $3 = sp + 68 | 0;
 $4 = sp + 64 | 0;
 $5 = sp + 60 | 0;
 $6 = sp + 56 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 HEAP32[$11 >> 2] = $0;
 HEAP32[$12 >> 2] = $1;
 $17 = HEAP32[$11 >> 2] | 0;
 $18 = HEAP32[$12 >> 2] | 0;
 HEAP32[$10 >> 2] = $17;
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 $20 = HEAP32[$9 >> 2] | 0;
 HEAP32[$8 >> 2] = $20;
 HEAP32[$7 >> 2] = (HEAP32[$8 >> 2] | 0) + 8;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 if ($18 >>> 0 <= ((HEAP32[HEAP32[$6 >> 2] >> 2] | 0) - (HEAP32[$20 >> 2] | 0) | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$5 >> 2] = $17;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 8;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
 $35 = HEAP32[$12 >> 2] | 0;
 HEAP32[$2 >> 2] = $17;
 $36 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEEC2EmmS3_($14, $35, (HEAP32[$36 + 4 >> 2] | 0) - (HEAP32[$36 >> 2] | 0) | 0, HEAP32[$13 >> 2] | 0);
 __THREW__ = 0;
 invoke_vii(71, $17 | 0, $14 | 0);
 $44 = __THREW__;
 __THREW__ = 0;
 if ($44 & 1) {
  $46 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$15 >> 2] = $46;
  HEAP32[sp >> 2] = tempRet0;
  __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($14);
  ___resumeException(HEAP32[$15 >> 2] | 0);
 }
 __ZNSt3__214__split_bufferIcRNS_9allocatorIcEEED2Ev($14);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 72 | 0;
 $5 = sp + 80 | 0;
 $6 = sp + 48 | 0;
 $7 = sp;
 $8 = sp + 76 | 0;
 HEAP8[$5 >> 0] = HEAP8[53254] | 0;
 HEAP8[$5 + 1 >> 0] = HEAP8[53255] | 0;
 HEAP8[$5 + 2 >> 0] = HEAP8[53256] | 0;
 HEAP8[$5 + 3 >> 0] = HEAP8[53257] | 0;
 HEAP8[$5 + 4 >> 0] = HEAP8[53258] | 0;
 HEAP8[$5 + 5 >> 0] = HEAP8[53259] | 0;
 $9 = __ZNSt3__26__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $4;
 $10 = __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($6, 20, $9, $5, $$byval_copy) | 0;
 $11 = $6 + $10 | 0;
 $12 = __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($6, $11, $2) | 0;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $2);
 __THREW__ = 0;
 $13 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
 $14 = __THREW__;
 __THREW__ = 0;
 if ($14 & 1) {
  $27 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($27 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 32 >> 2] & 31]($13, $6, $11, $7) | 0;
  $19 = $7 + $10 | 0;
  HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$8 >> 2];
  $26 = __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($$byval_copy, $7, ($12 | 0) == ($11 | 0) ? $19 : $7 + ($12 - $6) | 0, $19, $2, $3) | 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0;
}

function __ZNSt3__2L11init_wweeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60136] | 0)) if (___cxa_guard_acquire(60136) | 0) {
  $4 = 59792;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 59960);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59792, 46404) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59804, 46432) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59816, 46460) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59828, 46492) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59840, 46532) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59852, 46568) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59864, 46596) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59876, 46632) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59888, 46648) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59900, 46664) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59912, 46680) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59924, 46696) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59936, 46712) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59948, 46728) | 0;
 return;
}

function __ZNSt3__2L10init_weeksEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60056] | 0)) if (___cxa_guard_acquire(60056) | 0) {
  $4 = 59040;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 59208);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59040, 53665) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59052, 53672) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59064, 53679) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59076, 53687) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59088, 53697) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59100, 53706) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59112, 53713) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59124, 53722) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59136, 53726) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59148, 53730) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59160, 53734) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59172, 53738) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59184, 53742) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(59196, 53746) | 0;
 return;
}

function _lzma_strm_init($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $2 = 0, $22 = 0, $24 = 0, $3 = 0, $32 = 0, $43 = 0, $49 = 0, $53 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 52 | 0;
 $2 = sp + 48 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  HEAP32[$1 >> 2] = 11;
  $53 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $53 | 0;
 }
 do if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0)) {
  $13 = _lzma_alloc(64, HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) | 0;
  HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] = $13;
  if (HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) {
   $22 = HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0;
   dest = $3;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   $24 = $3 + 8 | 0;
   HEAP32[$24 >> 2] = -1;
   HEAP32[$24 + 4 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = 0;
   dest = $22;
   src = $3;
   stop = dest + 48 | 0;
   do {
    HEAP32[dest >> 2] = HEAP32[src >> 2];
    dest = dest + 4 | 0;
    src = src + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   break;
  }
  HEAP32[$1 >> 2] = 5;
  $53 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $53 | 0;
 } while (0);
 $32 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) + 56 | 0;
 HEAP32[$32 >> 2] = 0;
 HEAP8[$32 + 4 >> 0] = 0;
 HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) + 48 >> 2] = 0;
 HEAP8[(HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) + 61 >> 0] = 0;
 $43 = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 HEAP32[$43 >> 2] = 0;
 HEAP32[$43 + 4 >> 2] = 0;
 $49 = (HEAP32[$2 >> 2] | 0) + 24 | 0;
 HEAP32[$49 >> 2] = 0;
 HEAP32[$49 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 $53 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $53 | 0;
}

function __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i$i = 0, $$029 = 0, $$030 = 0, $$07$i$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond32 = 0, label = 0;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $7 = $0 + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $5 & 255;
 do if (($5 << 24 >> 24 < 0 ? $8 : $9) | 0) {
  if (($1 | 0) == ($2 | 0)) {
   $$pre$phiZ2D = $9;
   $18 = $5;
   $22 = $8;
  } else {
   $$0$i$i = $2;
   $$07$i$i = $1;
   while (1) {
    $13 = $$0$i$i + -4 | 0;
    if ($$07$i$i >>> 0 >= $13 >>> 0) break;
    $15 = HEAP32[$$07$i$i >> 2] | 0;
    HEAP32[$$07$i$i >> 2] = HEAP32[$13 >> 2];
    HEAP32[$13 >> 2] = $15;
    $$0$i$i = $13;
    $$07$i$i = $$07$i$i + 4 | 0;
   }
   $$pre = HEAP8[$4 >> 0] | 0;
   $$pre$phiZ2D = $$pre & 255;
   $18 = $$pre;
   $22 = HEAP32[$7 >> 2] | 0;
  }
  $19 = $18 << 24 >> 24 < 0;
  $21 = $19 ? HEAP32[$0 >> 2] | 0 : $0;
  $25 = $2 + -4 | 0;
  $26 = $21 + ($19 ? $22 : $$pre$phiZ2D) | 0;
  $$029 = $1;
  $$030 = $21;
  while (1) {
   $28 = HEAP8[$$030 >> 0] | 0;
   $or$cond32 = $28 << 24 >> 24 > 0 & $28 << 24 >> 24 != 127;
   if ($$029 >>> 0 >= $25 >>> 0) break;
   if ($or$cond32) if ((HEAP32[$$029 >> 2] | 0) != ($28 << 24 >> 24 | 0)) {
    label = 11;
    break;
   }
   $$029 = $$029 + 4 | 0;
   $$030 = ($26 - $$030 | 0) > 1 ? $$030 + 1 | 0 : $$030;
  }
  if ((label | 0) == 11) {
   HEAP32[$3 >> 2] = 4;
   break;
  }
  if ($or$cond32) if (((HEAP32[$25 >> 2] | 0) + -1 | 0) >>> 0 >= $28 << 24 >> 24 >>> 0) HEAP32[$3 >> 2] = 4;
 } while (0);
 return;
}

function __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE13__lower_boundIS3_EENS_21__tree_const_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEERKT_SL_PNS_15__tree_end_nodeIPNS_16__tree_node_baseISJ_EEEE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$13 >> 2] = $0;
 HEAP32[$14 >> 2] = $1;
 HEAP32[$15 >> 2] = $2;
 HEAP32[$16 >> 2] = $3;
 $17 = HEAP32[$13 >> 2] | 0;
 while (1) {
  if (!(HEAP32[$15 >> 2] | 0)) break;
  HEAP32[$11 >> 2] = $17;
  HEAP32[$10 >> 2] = (HEAP32[$11 >> 2] | 0) + 8;
  HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
  $25 = (HEAP32[$15 >> 2] | 0) + 16 | 0;
  $26 = HEAP32[$14 >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$5 >> 2] = $25;
  HEAP32[$6 >> 2] = $26;
  $30 = __ZNK3zim10less_rangeclERKNS_5RangeES3_(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $31 = HEAP32[$15 >> 2] | 0;
  if ($30) HEAP32[$15 >> 2] = HEAP32[$31 + 4 >> 2]; else {
   HEAP32[$16 >> 2] = $31;
   HEAP32[$15 >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
  }
 }
 $36 = HEAP32[$16 >> 2] | 0;
 HEAP32[$7 >> 2] = $12;
 HEAP32[$8 >> 2] = $36;
 HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[$8 >> 2];
 STACKTOP = sp;
 return HEAP32[$12 >> 2] | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 48 | 0;
 $8 = sp + 44 | 0;
 $9 = sp + 40 | 0;
 $10 = sp;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 73 | 0;
 $14 = sp + 28 | 0;
 $15 = sp + 24 | 0;
 $16 = sp + 20 | 0;
 $17 = sp + 16 | 0;
 $18 = sp + 12 | 0;
 $19 = sp + 8 | 0;
 $20 = sp + 4 | 0;
 $21 = sp + 72 | 0;
 HEAP32[$18 >> 2] = $0;
 HEAP32[$19 >> 2] = $1;
 $22 = HEAP32[$18 >> 2] | 0;
 HEAP32[$17 >> 2] = $22;
 HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$20 >> 2] = HEAP32[$15 >> 2];
 do {
  HEAP32[$2 >> 2] = $21;
  HEAP32[$3 >> 2] = $22;
  HEAP32[$4 >> 2] = 1;
  $27 = HEAP32[$20 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[$22 + 4 >> 2];
  $30 = HEAP32[$5 >> 2] | 0;
  HEAP32[$11 >> 2] = $27;
  HEAP32[$12 >> 2] = $30;
  $31 = HEAP32[$11 >> 2] | 0;
  $32 = HEAP32[$12 >> 2] | 0;
  HEAP8[$10 >> 0] = HEAP8[$13 >> 0] | 0;
  HEAP32[$8 >> 2] = $31;
  HEAP32[$9 >> 2] = $32;
  $34 = HEAP32[$9 >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$7 >> 2] = $34;
  HEAP8[HEAP32[$7 >> 2] >> 0] = 0;
  $36 = $22 + 4 | 0;
  HEAP32[$36 >> 2] = (HEAP32[$36 >> 2] | 0) + 1;
  HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + -1;
  HEAP32[$14 >> 2] = $21;
 } while ((HEAP32[$19 >> 2] | 0) >>> 0 > 0);
 STACKTOP = sp;
 return;
}

function _mbtowc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $25 = 0, $3 = 0, $33 = 0, $34 = 0, $42 = 0, $47 = 0, $50 = 0, $55 = 0, $7 = 0, $spec$select = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 L1 : do if (!$1) $$0 = 0; else {
  do if ($2 | 0) {
   $spec$select = ($0 | 0) == 0 ? $3 : $0;
   $7 = HEAP8[$1 >> 0] | 0;
   if ($7 << 24 >> 24 > -1) {
    HEAP32[$spec$select >> 2] = $7 & 255;
    $$0 = $7 << 24 >> 24 != 0 & 1;
    break L1;
   }
   $16 = (HEAP32[HEAP32[(___pthread_self_727() | 0) + 188 >> 2] >> 2] | 0) == 0;
   $17 = HEAP8[$1 >> 0] | 0;
   if ($16) {
    HEAP32[$spec$select >> 2] = $17 << 24 >> 24 & 57343;
    $$0 = 1;
    break L1;
   }
   $21 = ($17 & 255) + -194 | 0;
   if ($21 >>> 0 <= 50) {
    $23 = $1 + 1 | 0;
    $25 = HEAP32[33568 + ($21 << 2) >> 2] | 0;
    if ($2 >>> 0 < 4) if ($25 & -2147483648 >>> (($2 * 6 | 0) + -6 | 0) | 0) break;
    $33 = HEAPU8[$23 >> 0] | 0;
    $34 = $33 >>> 3;
    if (($34 + -16 | $34 + ($25 >> 26)) >>> 0 <= 7) {
     $42 = $33 + -128 | $25 << 6;
     if (($42 | 0) >= 0) {
      HEAP32[$spec$select >> 2] = $42;
      $$0 = 2;
      break L1;
     }
     $47 = (HEAPU8[$1 + 2 >> 0] | 0) + -128 | 0;
     if ($47 >>> 0 <= 63) {
      $50 = $47 | $42 << 6;
      if (($50 | 0) >= 0) {
       HEAP32[$spec$select >> 2] = $50;
       $$0 = 3;
       break L1;
      }
      $55 = (HEAPU8[$1 + 3 >> 0] | 0) + -128 | 0;
      if ($55 >>> 0 <= 63) {
       HEAP32[$spec$select >> 2] = $55 | $50 << 6;
       $$0 = 4;
       break L1;
      }
     }
    }
   }
  } while (0);
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK3zim9SubBuffer4dataENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 $6 = HEAP32[$3 >> 2] | 0;
 $7 = $1;
 $12 = HEAP32[$7 + 4 >> 2] | 0;
 $13 = $4;
 HEAP32[$13 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$13 + 4 >> 2] = $12;
 $18 = $6 + 16 | 0;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $24 = $5;
 HEAP32[$24 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$24 + 4 >> 2] = $23;
 $28 = $4;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $5;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 if ($33 >>> 0 < $39 >>> 0 | (($33 | 0) == ($39 | 0) ? (HEAP32[$28 >> 2] | 0) >>> 0 <= (HEAP32[$34 >> 2] | 0) >>> 0 : 0)) {
  $57 = $6 + 24 | 0;
  HEAP32[$2 >> 2] = $57;
  $58 = HEAP32[$2 >> 2] | 0;
  $59 = HEAP32[$58 >> 2] | 0;
  $60 = $1;
  $61 = $60;
  $62 = HEAP32[$61 >> 2] | 0;
  $63 = $60 + 4 | 0;
  $64 = $63;
  $65 = HEAP32[$64 >> 2] | 0;
  $66 = $59 + $62 | 0;
  STACKTOP = sp;
  return $66 | 0;
 }
 $45 = $4;
 $51 = $5;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 51100, 50982, HEAP32[$45 >> 2] | 0, HEAP32[$45 + 4 >> 2] | 0, HEAP32[$51 >> 2] | 0, HEAP32[$51 + 4 >> 2] | 0, 50990, 115);
 $57 = $6 + 24 | 0;
 HEAP32[$2 >> 2] = $57;
 $58 = HEAP32[$2 >> 2] | 0;
 $59 = HEAP32[$58 >> 2] | 0;
 $60 = $1;
 $61 = $60;
 $62 = HEAP32[$61 >> 2] | 0;
 $63 = $60 + 4 | 0;
 $64 = $63;
 $65 = HEAP32[$64 >> 2] | 0;
 $66 = $59 + $62 | 0;
 STACKTOP = sp;
 return $66 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$2 >> 2] = $16 + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $27 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $33 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $33;
  $34 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $34;
  $35 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $35;
  $36 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $36;
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$28 >> 2] | 0) + 4 >> 2] & 255]($28);
 $33 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $33;
 $34 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $34;
 $35 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $35;
 $36 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $36;
 STACKTOP = sp;
 return;
}

function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $3 = sp + 208 | 0;
 $4 = sp + 160 | 0;
 $5 = sp + 80 | 0;
 $6 = sp;
 dest = $4;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) $$0 = -1; else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $39 = ___lockfile($0) | 0; else $39 = 0;
  $13 = HEAP32[$0 >> 2] | 0;
  $14 = $13 & 32;
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) HEAP32[$0 >> 2] = $13 & -33;
  $19 = $0 + 48 | 0;
  if (!(HEAP32[$19 >> 2] | 0)) {
   $23 = $0 + 44 | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = $6;
   $25 = $0 + 28 | 0;
   HEAP32[$25 >> 2] = $6;
   $26 = $0 + 20 | 0;
   HEAP32[$26 >> 2] = $6;
   HEAP32[$19 >> 2] = 80;
   $28 = $0 + 16 | 0;
   HEAP32[$28 >> 2] = $6 + 80;
   $29 = _printf_core($0, $1, $3, $5, $4) | 0;
   if (!$24) $$1 = $29; else {
    FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0;
    $spec$select = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29;
    HEAP32[$23 >> 2] = $24;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$28 >> 2] = 0;
    HEAP32[$25 >> 2] = 0;
    HEAP32[$26 >> 2] = 0;
    $$1 = $spec$select;
   }
  } else $$1 = _printf_core($0, $1, $3, $5, $4) | 0;
  $35 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $35 | $14;
  if ($39 | 0) ___unlockfile($0);
  $$0 = ($35 & 32 | 0) == 0 ? $$1 : -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$2 >> 2] = $16 + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $27 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $33 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $33;
  $34 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $34;
  $35 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $35;
  $36 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $36;
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] & 255]($28);
 $33 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $33;
 $34 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $34;
 $35 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $35;
 $36 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $36;
 STACKTOP = sp;
 return;
}

function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0;
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0;
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0;
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0;
 L1 : do if ($7 >>> 0 < $1 >>> 2 >>> 0) {
  $17 = $1 - ($7 << 2) | 0;
  if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) if (!(($13 | $10) & 3)) {
   $23 = $10 >>> 2;
   $24 = $13 >>> 2;
   $$090 = 0;
   $$094 = $7;
   while (1) {
    $25 = $$094 >>> 1;
    $26 = $$090 + $25 | 0;
    $27 = $26 << 1;
    $28 = $27 + $23 | 0;
    $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0;
    $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0;
    if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
     $$4 = 0;
     break L1;
    }
    if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
     $$4 = 0;
     break L1;
    }
    $44 = _strcmp($2, $0 + $35 | 0) | 0;
    if (!$44) break;
    $63 = ($44 | 0) < 0;
    if (($$094 | 0) == 1) {
     $$4 = 0;
     break L1;
    }
    $$090 = $63 ? $$090 : $26;
    $$094 = $63 ? $25 : $$094 - $25 | 0;
   }
   $46 = $27 + $24 | 0;
   $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0;
   $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0;
   if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; else $$4 = 0;
  } else $$4 = 0; else $$4 = 0;
 } else $$4 = 0; while (0);
 return $$4 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$2 >> 2] = $16 + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $27 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $33 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $33;
  $34 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $34;
  $35 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $35;
  $36 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $36;
  STACKTOP = sp;
  return;
 }
 FUNCTION_TABLE_vi[HEAP32[(HEAP32[$28 >> 2] | 0) + 8 >> 2] & 255]($28);
 $33 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $33;
 $34 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $34;
 $35 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $35;
 $36 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $36;
 STACKTOP = sp;
 return;
}

function _stream_decoder_memconfig($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $18 = 0, $23 = 0, $25 = 0, $31 = 0, $36 = 0, $38 = 0, $42 = 0, $5 = 0, $51 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $7 = 0, $70 = 0, $75 = 0, $78 = 0, $8 = 0, $82 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 24 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 $10 = sp + 8 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 $11 = $9;
 HEAP32[$11 >> 2] = $3;
 HEAP32[$11 + 4 >> 2] = $4;
 HEAP32[$10 >> 2] = HEAP32[$6 >> 2];
 $18 = (HEAP32[$10 >> 2] | 0) + 320 | 0;
 $23 = HEAP32[$18 + 4 >> 2] | 0;
 $25 = HEAP32[$7 >> 2] | 0;
 HEAP32[$25 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$25 + 4 >> 2] = $23;
 $31 = (HEAP32[$10 >> 2] | 0) + 312 | 0;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $38 = HEAP32[$8 >> 2] | 0;
 HEAP32[$38 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$38 + 4 >> 2] = $36;
 $42 = $9;
 do if ((HEAP32[$42 >> 2] | 0) != 0 | (HEAP32[$42 + 4 >> 2] | 0) != 0) {
  $51 = $9;
  $56 = HEAP32[$51 + 4 >> 2] | 0;
  $59 = (HEAP32[$10 >> 2] | 0) + 320 | 0;
  $64 = HEAP32[$59 + 4 >> 2] | 0;
  if (!($56 >>> 0 < $64 >>> 0 | (($56 | 0) == ($64 | 0) ? (HEAP32[$51 >> 2] | 0) >>> 0 < (HEAP32[$59 >> 2] | 0) >>> 0 : 0))) {
   $70 = $9;
   $75 = HEAP32[$70 + 4 >> 2] | 0;
   $78 = (HEAP32[$10 >> 2] | 0) + 312 | 0;
   HEAP32[$78 >> 2] = HEAP32[$70 >> 2];
   HEAP32[$78 + 4 >> 2] = $75;
   break;
  }
  HEAP32[$5 >> 2] = 6;
  $82 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $82 | 0;
 } while (0);
 HEAP32[$5 >> 2] = 0;
 $82 = HEAP32[$5 >> 2] | 0;
 STACKTOP = sp;
 return $82 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $16 + 12;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $27 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $30 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $30;
  $31 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $31;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $32;
  $33 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $33;
  STACKTOP = sp;
  return;
 }
 __ZN3zim12FileCompoundD2Ev($28);
 __ZdlPv($28);
 $30 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $30;
 $31 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $31;
 $32 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $32;
 $33 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $33;
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $16 + 12;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $27 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $30 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $30;
  $31 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $31;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $32;
  $33 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $33;
  STACKTOP = sp;
  return;
 }
 __ZN3zim8FileImplD2Ev($28);
 __ZdlPv($28);
 $30 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $30;
 $31 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $31;
 $32 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $32;
 $33 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $33;
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 56 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp + 44 | 0;
 $5 = sp + 40 | 0;
 $6 = sp + 36 | 0;
 $8 = sp + 28 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 20 | 0;
 $11 = sp + 16 | 0;
 $12 = sp + 12 | 0;
 $13 = sp + 8 | 0;
 $14 = sp + 4 | 0;
 $15 = sp;
 HEAP32[$15 >> 2] = $0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$14 >> 2] = $16 + 12;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 $21 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $16 + 12;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $27 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $21;
 HEAP32[$8 >> 2] = $27;
 $28 = HEAP32[$8 >> 2] | 0;
 if (!$28) {
  $30 = $16 + 12 | 0;
  HEAP32[$10 >> 2] = $30;
  $31 = HEAP32[$10 >> 2] | 0;
  HEAP32[$9 >> 2] = $31;
  $32 = HEAP32[$9 >> 2] | 0;
  HEAP32[$12 >> 2] = $32;
  $33 = HEAP32[$12 >> 2] | 0;
  HEAP32[$11 >> 2] = $33;
  STACKTOP = sp;
  return;
 }
 __ZN3zim7ClusterD2Ev($28);
 __ZdlPv($28);
 $30 = $16 + 12 | 0;
 HEAP32[$10 >> 2] = $30;
 $31 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $31;
 $32 = HEAP32[$9 >> 2] | 0;
 HEAP32[$12 >> 2] = $32;
 $33 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $33;
 STACKTOP = sp;
 return;
}

function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $4 = sp;
 $5 = HEAP32[$0 >> 2] | 0;
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0;
 $10 = HEAP32[$5 + -4 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $3;
 $14 = $4 + 16 | 0;
 $15 = $4 + 20 | 0;
 $16 = $4 + 24 | 0;
 $17 = $4 + 28 | 0;
 $18 = $4 + 32 | 0;
 $19 = $4 + 40 | 0;
 dest = $14;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0;
 HEAP8[$14 + 38 >> 0] = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
  HEAP32[$4 + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $4, $8, $8, 1, 0);
  $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 7]($10, $4, $8, 1, 0);
  switch (HEAP32[$4 + 36 >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0;
    break L1;
    break;
   }
  case 1:
   break;
  default:
   {
    $$0 = 0;
    break L1;
   }
  }
  if ((HEAP32[$16 >> 2] | 0) != 1) if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
   $$0 = 0;
   break;
  }
  $$0 = HEAP32[$14 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _arm_code($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[sp + 24 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP8[$7 >> 0] = $2 & 1;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 HEAP32[$10 >> 2] = 0;
 while (1) {
  if (((HEAP32[$10 >> 2] | 0) + 4 | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) break;
  if ((HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 3) >> 0] | 0 | 0) == 235) {
   HEAP32[$11 >> 2] = (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] | 0) << 16 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] | 0) << 8 | (HEAPU8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] | 0);
   HEAP32[$11 >> 2] = HEAP32[$11 >> 2] << 2;
   if (HEAP8[$7 >> 0] & 1) HEAP32[$12 >> 2] = (HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 8 + (HEAP32[$11 >> 2] | 0); else HEAP32[$12 >> 2] = (HEAP32[$11 >> 2] | 0) - ((HEAP32[$6 >> 2] | 0) + (HEAP32[$10 >> 2] | 0) + 8);
   HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 2;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 2) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 16;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 1) >> 0] = (HEAP32[$12 >> 2] | 0) >>> 8;
   HEAP8[(HEAP32[$8 >> 2] | 0) + ((HEAP32[$10 >> 2] | 0) + 0) >> 0] = HEAP32[$12 >> 2];
  }
  HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + 4;
 }
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $3 = 0, $30 = 0, $32 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp;
 $3 = $0 + 8 | 0;
 $5 = $0 + 4 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 do if ((HEAP32[$3 >> 2] | 0) - $6 >> 2 >>> 0 < $1 >>> 0) {
  $13 = ($6 - (HEAP32[$0 >> 2] | 0) >> 2) + $1 | 0;
  $14 = __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) | 0;
  if ($14 >>> 0 < $13 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  $18 = HEAP32[$0 >> 2] | 0;
  $19 = (HEAP32[$3 >> 2] | 0) - $18 | 0;
  $23 = $19 >> 1;
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($2, $19 >> 2 >>> 0 < $14 >>> 1 >>> 0 ? ($23 >>> 0 < $13 >>> 0 ? $13 : $23) : $14, (HEAP32[$5 >> 2] | 0) - $18 >> 2, $0 + 16 | 0);
  __THREW__ = 0;
  invoke_vii(123, $2 | 0, $1 | 0);
  $28 = __THREW__;
  __THREW__ = 0;
  if (!($28 & 1)) {
   __THREW__ = 0;
   invoke_vii(124, $0 | 0, $2 | 0);
   $30 = __THREW__;
   __THREW__ = 0;
   if (!($30 & 1)) {
    __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
    break;
   }
  }
  $32 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($2);
  ___resumeException($32 | 0);
 } else __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1); while (0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim12MemoryBufferILb1EE4dataENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 $5 = HEAP32[$2 >> 2] | 0;
 $6 = $1;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 $12 = $3;
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$12 + 4 >> 2] = $11;
 $17 = $5 + 16 | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = $4;
 HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$23 + 4 >> 2] = $22;
 $27 = $3;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $4;
 $38 = HEAP32[$33 + 4 >> 2] | 0;
 if ($32 >>> 0 < $38 >>> 0 | (($32 | 0) == ($38 | 0) ? (HEAP32[$27 >> 2] | 0) >>> 0 <= (HEAP32[$33 >> 2] | 0) >>> 0 : 0)) {
  $56 = $5 + 24 | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  $58 = $1;
  $59 = $58;
  $60 = HEAP32[$59 >> 2] | 0;
  $61 = $58 + 4 | 0;
  $62 = $61;
  $63 = HEAP32[$62 >> 2] | 0;
  $64 = $57 + $60 | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 $44 = $3;
 $50 = $4;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 51100, 50982, HEAP32[$44 >> 2] | 0, HEAP32[$44 + 4 >> 2] | 0, HEAP32[$50 >> 2] | 0, HEAP32[$50 + 4 >> 2] | 0, 50990, 79);
 $56 = $5 + 24 | 0;
 $57 = HEAP32[$56 >> 2] | 0;
 $58 = $1;
 $59 = $58;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = $58 + 4 | 0;
 $62 = $61;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = $57 + $60 | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function __ZNK3zim12MemoryBufferILb0EE4dataENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $50 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 $5 = HEAP32[$2 >> 2] | 0;
 $6 = $1;
 $11 = HEAP32[$6 + 4 >> 2] | 0;
 $12 = $3;
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$12 + 4 >> 2] = $11;
 $17 = $5 + 16 | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = $4;
 HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$23 + 4 >> 2] = $22;
 $27 = $3;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 $33 = $4;
 $38 = HEAP32[$33 + 4 >> 2] | 0;
 if ($32 >>> 0 < $38 >>> 0 | (($32 | 0) == ($38 | 0) ? (HEAP32[$27 >> 2] | 0) >>> 0 <= (HEAP32[$33 >> 2] | 0) >>> 0 : 0)) {
  $56 = $5 + 24 | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  $58 = $1;
  $59 = $58;
  $60 = HEAP32[$59 >> 2] | 0;
  $61 = $58 + 4 | 0;
  $62 = $61;
  $63 = HEAP32[$62 >> 2] | 0;
  $64 = $57 + $60 | 0;
  STACKTOP = sp;
  return $64 | 0;
 }
 $44 = $3;
 $50 = $4;
 __Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i(51091, 51100, 50982, HEAP32[$44 >> 2] | 0, HEAP32[$44 + 4 >> 2] | 0, HEAP32[$50 >> 2] | 0, HEAP32[$50 + 4 >> 2] | 0, 50990, 79);
 $56 = $5 + 24 | 0;
 $57 = HEAP32[$56 >> 2] | 0;
 $58 = $1;
 $59 = $58;
 $60 = HEAP32[$59 >> 2] | 0;
 $61 = $58 + 4 | 0;
 $62 = $61;
 $63 = HEAP32[$62 >> 2] | 0;
 $64 = $57 + $60 | 0;
 STACKTOP = sp;
 return $64 | 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_makeLooserEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$15 >> 2] = $0;
 $17 = HEAP32[$15 >> 2] | 0;
 HEAP32[$16 >> 2] = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE10_getOldestEb($17, 1) | 0;
 HEAP32[$14 >> 2] = $16;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$11 >> 2] = (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) + 16;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP8[(HEAP32[$8 >> 2] | 0) + 4 >> 0] = 0;
 $29 = __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE11_nextSerialEv($17) | 0;
 HEAP32[$7 >> 2] = $16;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + 16;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + 4 >> 2] = $29;
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_makeLooserEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $1 = sp + 60 | 0;
 $2 = sp + 56 | 0;
 $3 = sp + 52 | 0;
 $4 = sp + 48 | 0;
 $5 = sp + 44 | 0;
 $6 = sp + 40 | 0;
 $7 = sp + 36 | 0;
 $8 = sp + 32 | 0;
 $9 = sp + 28 | 0;
 $10 = sp + 24 | 0;
 $11 = sp + 20 | 0;
 $12 = sp + 16 | 0;
 $13 = sp + 12 | 0;
 $14 = sp + 8 | 0;
 $15 = sp + 4 | 0;
 $16 = sp;
 HEAP32[$15 >> 2] = $0;
 $17 = HEAP32[$15 >> 2] | 0;
 HEAP32[$16 >> 2] = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE10_getOldestEb($17, 1) | 0;
 HEAP32[$14 >> 2] = $16;
 HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
 HEAP32[$12 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$11 >> 2] = (HEAP32[HEAP32[$12 >> 2] >> 2] | 0) + 16;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$9 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP8[(HEAP32[$8 >> 2] | 0) + 4 >> 0] = 0;
 $29 = __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE11_nextSerialEv($17) | 0;
 HEAP32[$7 >> 2] = $16;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) + 16;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 + 4 >> 2] = $29;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $9 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $9 = $1 + 52 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $1 + 53 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $15 = HEAP32[$0 + 12 >> 2] | 0;
  $16 = $0 + 16 + ($15 << 3) | 0;
  HEAP8[$9 >> 0] = 0;
  HEAP8[$11 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5);
  L4 : do if (($15 | 0) > 1) {
   $19 = $1 + 24 | 0;
   $20 = $0 + 8 | 0;
   $21 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    if (HEAP8[$21 >> 0] | 0) break L4;
    if (!(HEAP8[$9 >> 0] | 0)) {
     if (HEAP8[$11 >> 0] | 0) if (!(HEAP32[$20 >> 2] & 1)) break L4;
    } else {
     if ((HEAP32[$19 >> 2] | 0) == 1) break L4;
     if (!(HEAP32[$20 >> 2] & 2)) break L4;
    }
    HEAP8[$9 >> 0] = 0;
    HEAP8[$11 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5);
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $16 >>> 0);
  } while (0);
  HEAP8[$9 >> 0] = $10;
  HEAP8[$11 >> 0] = $12;
 }
 return;
}

function __ZN3zim6BufferC2ENS_7zsize_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $27 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 HEAP32[$5 >> 2] = $0;
 $10 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $10 + 4;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $13 = HEAP32[$3 >> 2] | 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$13 + 4 >> 2] = 0;
 HEAP32[$10 >> 2] = 43224;
 $15 = $10 + 16 | 0;
 HEAP32[$15 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$15 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $17 = $10 + 16 | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 $23 = $6;
 HEAP32[$23 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$23 + 4 >> 2] = $22;
 HEAP32[$7 >> 2] = -1;
 $27 = $6;
 $32 = HEAP32[$27 + 4 >> 2] | 0;
 if ($32 >>> 0 < 0 | (($32 | 0) == 0 ? (HEAP32[$27 >> 2] | 0) >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0 : 0)) {
  STACKTOP = sp;
  return;
 }
 $39 = $6;
 __THREW__ = 0;
 invoke_viiiiiiii(1, 50982, 50980, 49035, HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0, 50990, 42);
 $46 = __THREW__;
 __THREW__ = 0;
 if ($46 & 1) {
  $48 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$8 >> 2] = $48;
  HEAP32[sp + 8 >> 2] = tempRet0;
  HEAP32[$2 >> 2] = $10 + 4;
  __ZNSt3__28weak_ptrIN3zim6BufferEED2Ev(HEAP32[$2 >> 2] | 0);
  ___resumeException(HEAP32[$8 >> 2] | 0);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $7 = sp;
 $8 = sp + 400 | 0;
 HEAP32[$8 >> 2] = $7 + 400;
 __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6);
 $11 = HEAP32[$8 >> 2] | 0;
 $$0$i$i = $7;
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) break;
  $14 = HEAP32[$$0$i$i >> 2] | 0;
  if (!$$sroa$04$0$i) $$sroa$04$1$i = 0; else {
   $16 = $$sroa$04$0$i + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0;
    $24 = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0;
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 63]($$sroa$04$0$i, $24) | 0;
   } else {
    HEAP32[$16 >> 2] = $17 + 4;
    HEAP32[$17 >> 2] = $14;
    $$0$i$i$i$i = __ZNSt3__211char_traitsIwE11to_int_typeEw($14) | 0;
   }
   $29 = __ZNSt3__211char_traitsIwE11eq_int_typeEjj($$0$i$i$i$i, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0;
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i;
  }
  $$0$i$i = $$0$i$i + 4 | 0;
  $$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;
 return $$sroa$04$0$i | 0;
}

function __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$sroa$04$0$i = 0, $$sroa$04$1$i = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $29 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $7 = sp;
 $8 = sp + 100 | 0;
 HEAP32[$8 >> 2] = $7 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0 + 8 | 0, $7, $8, $4, $5, $6);
 $11 = HEAP32[$8 >> 2] | 0;
 $$0$i$i = $7;
 $$sroa$04$0$i = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$0$i$i | 0) == ($11 | 0)) break;
  $14 = HEAP8[$$0$i$i >> 0] | 0;
  if (!$$sroa$04$0$i) $$sroa$04$1$i = 0; else {
   $16 = $$sroa$04$0$i + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (($17 | 0) == (HEAP32[$$sroa$04$0$i + 28 >> 2] | 0)) {
    $23 = HEAP32[(HEAP32[$$sroa$04$0$i >> 2] | 0) + 52 >> 2] | 0;
    $24 = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0;
    $$0$i$i$i$i = FUNCTION_TABLE_iii[$23 & 63]($$sroa$04$0$i, $24) | 0;
   } else {
    HEAP32[$16 >> 2] = $17 + 1;
    HEAP8[$17 >> 0] = $14;
    $$0$i$i$i$i = __ZNSt3__211char_traitsIcE11to_int_typeEc($14) | 0;
   }
   $29 = __ZNSt3__211char_traitsIcE11eq_int_typeEii($$0$i$i$i$i, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0;
   $$sroa$04$1$i = $29 ? 0 : $$sroa$04$0$i;
  }
  $$0$i$i = $$0$i$i + 1 | 0;
  $$sroa$04$0$i = $$sroa$04$1$i;
 }
 STACKTOP = sp;
 return $$sroa$04$0$i | 0;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $3 = 0, $30 = 0, $34 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $0 = sp + 36 | 0;
 $1 = ___cxa_get_globals_fast() | 0;
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0;
  if ($3 | 0) {
   $7 = $3 + 48 | 0;
   $9 = HEAP32[$7 >> 2] | 0;
   $12 = HEAP32[$7 + 4 >> 2] | 0;
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 55751;
    _abort_message(55701, $vararg_buffer7);
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) $22 = HEAP32[$3 + 44 >> 2] | 0; else $22 = $3 + 80 | 0;
   HEAP32[$0 >> 2] = $22;
   $23 = HEAP32[$3 >> 2] | 0;
   $25 = HEAP32[$23 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[10674] | 0) + 16 >> 2] & 63](42696, $23, $0) | 0) {
    $30 = HEAP32[$0 >> 2] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$30 >> 2] | 0) + 8 >> 2] & 127]($30) | 0;
    HEAP32[$vararg_buffer >> 2] = 55751;
    HEAP32[$vararg_buffer + 4 >> 2] = $25;
    HEAP32[$vararg_buffer + 8 >> 2] = $34;
    _abort_message(55615, $vararg_buffer);
   } else {
    HEAP32[$vararg_buffer3 >> 2] = 55751;
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25;
    _abort_message(55660, $vararg_buffer3);
   }
  }
 }
 _abort_message(55739, $vararg_buffer10);
}

function _lzma_lzma2_props_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $41 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if ((HEAP32[$8 >> 2] | 0) != 1) {
  HEAP32[$4 >> 2] = 8;
  $50 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 if ((HEAPU8[HEAP32[$7 >> 2] >> 0] | 0) & 192 | 0) {
  HEAP32[$4 >> 2] = 8;
  $50 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 if ((HEAPU8[HEAP32[$7 >> 2] >> 0] | 0 | 0) > 40) {
  HEAP32[$4 >> 2] = 8;
  $50 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 HEAP32[$9 >> 2] = _lzma_alloc(96, HEAP32[$6 >> 2] | 0) | 0;
 if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$4 >> 2] = 5;
  $50 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $50 | 0;
 }
 if ((HEAPU8[HEAP32[$7 >> 2] >> 0] | 0 | 0) == 40) HEAP32[HEAP32[$9 >> 2] >> 2] = -1; else {
  HEAP32[HEAP32[$9 >> 2] >> 2] = 2 | (HEAPU8[HEAP32[$7 >> 2] >> 0] | 0) & 1;
  $41 = HEAP32[$9 >> 2] | 0;
  HEAP32[$41 >> 2] = HEAP32[$41 >> 2] << ((HEAPU8[HEAP32[$7 >> 2] >> 0] | 0 | 0) / 2 | 0) + 11;
 }
 HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$9 >> 2];
 HEAP32[$4 >> 2] = 0;
 $50 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $50 | 0;
}

function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 HEAP32[$18 >> 2] = $0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 $26 = HEAP32[$13 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 76 >> 0] | 0;
 HEAP32[$11 >> 2] = $26;
 HEAP32[sp + 44 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$19 >> 2] = 357913941;
 HEAP32[$20 >> 2] = 2147483647;
 HEAP32[$7 >> 2] = $19;
 HEAP32[$8 >> 2] = $20;
 $28 = HEAP32[$7 >> 2] | 0;
 $29 = HEAP32[$8 >> 2] | 0;
 HEAP8[$6 >> 0] = HEAP8[sp + 77 >> 0] | 0;
 HEAP32[$4 >> 2] = $28;
 HEAP32[$5 >> 2] = $29;
 $30 = HEAP32[$5 >> 2] | 0;
 $31 = HEAP32[$4 >> 2] | 0;
 HEAP32[sp + 72 >> 2] = $6;
 HEAP32[$2 >> 2] = $30;
 HEAP32[$3 >> 2] = $31;
 STACKTOP = sp;
 return HEAP32[((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$5 >> 2] | 0 : HEAP32[$4 >> 2] | 0) >> 2] | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $15 = 0, $16 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $9 = 0;
 if ((1073741807 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 $9 = $0 + 8 | 0;
 if ((HEAP8[$9 + 3 >> 0] | 0) < 0) $32 = HEAP32[$0 >> 2] | 0; else $32 = $0;
 if ($1 >>> 0 < 536870887) {
  $15 = $2 + $1 | 0;
  $16 = $1 << 1;
  $$sroa$speculated = $15 >>> 0 < $16 >>> 0 ? $16 : $15;
  $21 = $$sroa$speculated >>> 0 < 2 ? 2 : $$sroa$speculated + 4 & -4;
  if ($21 >>> 0 > 1073741823) {
   $23 = ___cxa_allocate_exception(8) | 0;
   __THREW__ = 0;
   invoke_vii(49, $23 | 0, 55296);
   $24 = __THREW__;
   __THREW__ = 0;
   if ($24 & 1) {
    $26 = ___cxa_find_matching_catch_2() | 0;
    ___cxa_free_exception($23 | 0);
    ___resumeException($26 | 0);
   } else {
    HEAP32[$23 >> 2] = 48176;
    ___cxa_throw($23 | 0, 42808, 176);
   }
  } else $29 = $21;
 } else $29 = 1073741807;
 $30 = __Znwm($29 << 2) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($30, $32, $4) | 0;
 $34 = $3 - $5 - $4 | 0;
 if ($34 | 0) __ZNSt3__211char_traitsIwE4copyEPwPKwm($30 + ($4 << 2) + ($6 << 2) | 0, $32 + ($4 << 2) + ($5 << 2) | 0, $34) | 0;
 if (($1 | 0) != 1) __ZdlPv($32);
 HEAP32[$0 >> 2] = $30;
 HEAP32[$9 >> 2] = $29 | -2147483648;
 return;
}

function _lzma_sha256_finish($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $2 = 0, $23 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $36 = 0, $38 = 0, $45 = 0, $51 = 0, $55 = 0, $67 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 64 + 32 >> 2] & 63;
 $14 = HEAP32[$1 >> 2] | 0;
 $15 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $15 + 1;
 HEAP8[$14 + $15 >> 0] = -128;
 while (1) {
  if ((HEAP32[$2 >> 2] | 0) == 56) break;
  if ((HEAP32[$2 >> 2] | 0) == 64) {
   _process(HEAP32[$1 >> 2] | 0);
   HEAP32[$2 >> 2] = 0;
  }
  $23 = HEAP32[$1 >> 2] | 0;
  $24 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $24 + 1;
  HEAP8[$23 + $24 >> 0] = 0;
 }
 $29 = (HEAP32[$1 >> 2] | 0) + 64 + 32 | 0;
 $30 = $29;
 $36 = ___muldi3(HEAP32[$30 >> 2] | 0, HEAP32[$30 + 4 >> 2] | 0, 8, 0) | 0;
 $38 = $29;
 HEAP32[$38 >> 2] = $36;
 HEAP32[$38 + 4 >> 2] = tempRet0;
 $45 = (HEAP32[$1 >> 2] | 0) + 64 + 32 | 0;
 $51 = ___bswap_64(HEAP32[$45 >> 2] | 0, HEAP32[$45 + 4 >> 2] | 0) | 0;
 $55 = (HEAP32[$1 >> 2] | 0) + 56 | 0;
 HEAP32[$55 >> 2] = $51;
 HEAP32[$55 + 4 >> 2] = tempRet0;
 _process(HEAP32[$1 >> 2] | 0);
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= 8) break;
  $67 = ___bswap_32(HEAP32[(HEAP32[$1 >> 2] | 0) + 64 + (HEAP32[$3 >> 2] << 2) >> 2] | 0) | 0;
  HEAP32[(HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) >> 2] = $67;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 HEAP32[$18 >> 2] = $0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 $26 = HEAP32[$13 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 76 >> 0] | 0;
 HEAP32[$11 >> 2] = $26;
 HEAP32[sp + 44 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$19 >> 2] = 536870911;
 HEAP32[$20 >> 2] = 2147483647;
 HEAP32[$7 >> 2] = $19;
 HEAP32[$8 >> 2] = $20;
 $28 = HEAP32[$7 >> 2] | 0;
 $29 = HEAP32[$8 >> 2] | 0;
 HEAP8[$6 >> 0] = HEAP8[sp + 77 >> 0] | 0;
 HEAP32[$4 >> 2] = $28;
 HEAP32[$5 >> 2] = $29;
 $30 = HEAP32[$5 >> 2] | 0;
 $31 = HEAP32[$4 >> 2] | 0;
 HEAP32[sp + 72 >> 2] = $6;
 HEAP32[$2 >> 2] = $30;
 HEAP32[$3 >> 2] = $31;
 STACKTOP = sp;
 return HEAP32[((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$5 >> 2] | 0 : HEAP32[$4 >> 2] | 0) >> 2] | 0;
}

function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $9 = 0;
 $2 = $1 & 255;
 L1 : do if (!$2) $$0 = $0 + (_strlen($0) | 0) | 0; else {
  if (!($0 & 3)) $$030$lcssa = $0; else {
   $9 = $1 & 255;
   $$03039 = $0;
   while (1) {
    $10 = HEAP8[$$03039 >> 0] | 0;
    if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $9 << 24 >> 24) {
     $$0 = $$03039;
     break L1;
    }
    $13 = $$03039 + 1 | 0;
    if (!($13 & 3)) {
     $$030$lcssa = $13;
     break;
    } else $$03039 = $13;
   }
  }
  $17 = Math_imul($2, 16843009) | 0;
  $18 = HEAP32[$$030$lcssa >> 2] | 0;
  L10 : do if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
   $$02936 = $$030$lcssa;
   $25 = $18;
   while (1) {
    $24 = $25 ^ $17;
    if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
     $$029$lcssa = $$02936;
     break L10;
    }
    $31 = $$02936 + 4 | 0;
    $25 = HEAP32[$31 >> 2] | 0;
    if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
     $$029$lcssa = $31;
     break;
    } else $$02936 = $31;
   }
  } else $$029$lcssa = $$030$lcssa; while (0);
  $38 = $1 & 255;
  $$1 = $$029$lcssa;
  while (1) {
   $39 = HEAP8[$$1 >> 0] | 0;
   if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
    $$0 = $$1;
    break;
   } else $$1 = $$1 + 1 | 0;
  }
 } while (0);
 return $$0 | 0;
}

function _inflateReset2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $58 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (_inflateStateCheck(HEAP32[$3 >> 2] | 0) | 0) {
  HEAP32[$2 >> 2] = -2;
  $58 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 HEAP32[$6 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2];
 if ((HEAP32[$4 >> 2] | 0) < 0) {
  HEAP32[$5 >> 2] = 0;
  HEAP32[$4 >> 2] = 0 - (HEAP32[$4 >> 2] | 0);
 } else {
  HEAP32[$5 >> 2] = (HEAP32[$4 >> 2] >> 4) + 5;
  if ((HEAP32[$4 >> 2] | 0) < 48) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] & 15;
 }
 if (HEAP32[$4 >> 2] | 0) if ((HEAP32[$4 >> 2] | 0) < 8 | (HEAP32[$4 >> 2] | 0) > 15) {
  HEAP32[$2 >> 2] = -2;
  $58 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $58 | 0;
 }
 if (HEAP32[(HEAP32[$6 >> 2] | 0) + 56 >> 2] | 0) if ((HEAP32[(HEAP32[$6 >> 2] | 0) + 40 >> 2] | 0) != (HEAP32[$4 >> 2] | 0)) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] & 127](HEAP32[(HEAP32[$3 >> 2] | 0) + 40 >> 2] | 0, HEAP32[(HEAP32[$6 >> 2] | 0) + 56 >> 2] | 0);
  HEAP32[(HEAP32[$6 >> 2] | 0) + 56 >> 2] = 0;
 }
 HEAP32[(HEAP32[$6 >> 2] | 0) + 12 >> 2] = HEAP32[$5 >> 2];
 HEAP32[(HEAP32[$6 >> 2] | 0) + 40 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = _inflateReset(HEAP32[$3 >> 2] | 0) | 0;
 $58 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $58 | 0;
}

function __ZN3zim8FilePartINS_4unix2FSEEC2ERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($6, HEAP32[$3 >> 2] | 0);
 $8 = $6 + 12 | 0;
 __THREW__ = 0;
 invoke_vii(86, $8 | 0, HEAP32[$3 >> 2] | 0);
 $10 = __THREW__;
 __THREW__ = 0;
 if ($10 & 1) {
  $22 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$4 >> 2] = $22;
  HEAP32[$5 >> 2] = tempRet0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
  $26 = HEAP32[$4 >> 2] | 0;
  $27 = HEAP32[$5 >> 2] | 0;
  ___resumeException($26 | 0);
 }
 __THREW__ = 0;
 $14 = invoke_ii(100, $6 + 12 | 0) | 0;
 $15 = tempRet0;
 $16 = __THREW__;
 __THREW__ = 0;
 if (!($16 & 1)) {
  $18 = $6 + 16 | 0;
  HEAP32[$18 >> 2] = $14;
  HEAP32[$18 + 4 >> 2] = $15;
  STACKTOP = sp;
  return;
 }
 $24 = ___cxa_find_matching_catch_2() | 0;
 HEAP32[$4 >> 2] = $24;
 HEAP32[$5 >> 2] = tempRet0;
 __ZN3zim4unix2FDD2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 $26 = HEAP32[$4 >> 2] | 0;
 $27 = HEAP32[$5 >> 2] | 0;
 ___resumeException($26 | 0);
}

function _rc_read_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $41 = 0, $45 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 while (1) {
  if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) >>> 0 <= 0) {
   label = 9;
   break;
  }
  if ((HEAP32[HEAP32[$7 >> 2] >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
   label = 4;
   break;
  }
  if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) == 5) if (HEAPU8[(HEAP32[$6 >> 2] | 0) + (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >> 0] | 0 | 0) {
   label = 7;
   break;
  }
  HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] << 8 | (HEAPU8[(HEAP32[$6 >> 2] | 0) + (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) >> 0] | 0);
  $41 = HEAP32[$7 >> 2] | 0;
  HEAP32[$41 >> 2] = (HEAP32[$41 >> 2] | 0) + 1;
  $45 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
  HEAP32[$45 >> 2] = (HEAP32[$45 >> 2] | 0) + -1;
 }
 if ((label | 0) == 4) {
  HEAP32[$4 >> 2] = 0;
  $48 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 } else if ((label | 0) == 7) {
  HEAP32[$4 >> 2] = 9;
  $48 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 } else if ((label | 0) == 9) {
  HEAP32[$4 >> 2] = 1;
  $48 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $48 | 0;
 }
 return 0;
}

function __ZNKSt3__26vectorIcNS_9allocatorIcEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $2 = sp + 68 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 60 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 52 | 0;
 $8 = sp + 48 | 0;
 $11 = sp + 40 | 0;
 $13 = sp + 36 | 0;
 $15 = sp + 32 | 0;
 $16 = sp + 28 | 0;
 $17 = sp + 24 | 0;
 $18 = sp + 20 | 0;
 $19 = sp + 16 | 0;
 $20 = sp + 12 | 0;
 HEAP32[$18 >> 2] = $0;
 HEAP32[$17 >> 2] = HEAP32[$18 >> 2];
 HEAP32[$16 >> 2] = (HEAP32[$17 >> 2] | 0) + 8;
 HEAP32[$15 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$13 >> 2] = HEAP32[$15 >> 2];
 $26 = HEAP32[$13 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 76 >> 0] | 0;
 HEAP32[$11 >> 2] = $26;
 HEAP32[sp + 44 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$19 >> 2] = -1;
 HEAP32[$20 >> 2] = 2147483647;
 HEAP32[$7 >> 2] = $19;
 HEAP32[$8 >> 2] = $20;
 $28 = HEAP32[$7 >> 2] | 0;
 $29 = HEAP32[$8 >> 2] | 0;
 HEAP8[$6 >> 0] = HEAP8[sp + 77 >> 0] | 0;
 HEAP32[$4 >> 2] = $28;
 HEAP32[$5 >> 2] = $29;
 $30 = HEAP32[$5 >> 2] | 0;
 $31 = HEAP32[$4 >> 2] | 0;
 HEAP32[sp + 72 >> 2] = $6;
 HEAP32[$2 >> 2] = $30;
 HEAP32[$3 >> 2] = $31;
 STACKTOP = sp;
 return HEAP32[((HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0 ? HEAP32[$5 >> 2] | 0 : HEAP32[$4 >> 2] | 0) >> 2] | 0;
}

function __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$03 = 0, $11 = 0, $16 = 0, $17 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($4, $2, __ZNSt3__211char_traitsIcE6lengthEPKc($2) | 0);
 __THREW__ = 0;
 invoke_viii(34, $3 | 0, $1 | 0, $4 | 0);
 $6 = __THREW__;
 __THREW__ = 0;
 do if ($6 & 1) {
  $21 = ___cxa_find_matching_catch_2() | 0;
  $$0 = tempRet0;
  $$03 = $21;
 } else {
  __THREW__ = 0;
  invoke_vii(85, $0 | 0, $3 | 0);
  $8 = __THREW__;
  __THREW__ = 0;
  if ($8 & 1) {
   $23 = ___cxa_find_matching_catch_2() | 0;
   $24 = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$0 = $24;
   $$03 = $23;
   break;
  } else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   HEAP32[$0 >> 2] = 47992;
   $11 = $1;
   $16 = HEAP32[$11 + 4 >> 2] | 0;
   $17 = $0 + 8 | 0;
   HEAP32[$17 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$17 + 4 >> 2] = $16;
   STACKTOP = sp;
   return;
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 ___resumeException($$03 | 0);
}

function _fread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $20 = 0, $29 = 0, $33 = 0, $36 = 0, $4 = 0, $40 = 0, $spec$select = 0, label = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) $36 = ___lockfile($3) | 0; else $36 = 0;
 $10 = $3 + 74 | 0;
 $12 = HEAP8[$10 >> 0] | 0;
 HEAP8[$10 >> 0] = $12 + 255 | $12;
 $18 = $3 + 4 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 $20 = (HEAP32[$3 + 8 >> 2] | 0) - $19 | 0;
 if (($20 | 0) > 0) {
  $$ = $20 >>> 0 < $4 >>> 0 ? $20 : $4;
  _memcpy($0 | 0, $19 | 0, $$ | 0) | 0;
  HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $$;
  $$054 = $4 - $$ | 0;
  $$056 = $0 + $$ | 0;
 } else {
  $$054 = $4;
  $$056 = $0;
 }
 L7 : do if (!$$054) label = 13; else {
  $29 = $3 + 32 | 0;
  $$15759 = $$056;
  $$160 = $$054;
  while (1) {
   if (___toread($3) | 0) break;
   $33 = FUNCTION_TABLE_iiii[HEAP32[$29 >> 2] & 63]($3, $$15759, $$160) | 0;
   if (($33 + 1 | 0) >>> 0 < 2) break;
   $40 = $$160 - $33 | 0;
   if (!$40) {
    label = 13;
    break L7;
   } else {
    $$15759 = $$15759 + $33 | 0;
    $$160 = $40;
   }
  }
  if ($36 | 0) ___unlockfile($3);
  $$0 = (($4 - $$160 | 0) >>> 0) / ($1 >>> 0) | 0;
 } while (0);
 if ((label | 0) == 13) if (!$36) $$0 = $spec$select; else {
  ___unlockfile($3);
  $$0 = $spec$select;
 }
 return $$0 | 0;
}

function _lzma_stream_footer_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $24 = 0, $27 = 0, $3 = 0, $33 = 0, $39 = 0, $4 = 0, $41 = 0, $45 = 0, $49 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (_memcmp((HEAP32[$4 >> 2] | 0) + 8 + 2 | 0, 49567, 2) | 0) {
  HEAP32[$2 >> 2] = 7;
  $49 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 HEAP32[$5 >> 2] = _lzma_crc32((HEAP32[$4 >> 2] | 0) + 4 | 0, 6, 0) | 0;
 $14 = HEAP32[$5 >> 2] | 0;
 if (($14 | 0) != (_read32le(HEAP32[$4 >> 2] | 0) | 0)) {
  HEAP32[$2 >> 2] = 9;
  $49 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 if (_stream_flags_decode(HEAP32[$3 >> 2] | 0, (HEAP32[$4 >> 2] | 0) + 8 | 0) | 0) {
  HEAP32[$2 >> 2] = 8;
  $49 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 } else {
  $24 = _read32le((HEAP32[$4 >> 2] | 0) + 4 | 0) | 0;
  $27 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$27 >> 2] = $24;
  HEAP32[$27 + 4 >> 2] = 0;
  $33 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  $39 = _i64Add(HEAP32[$33 >> 2] | 0, HEAP32[$33 + 4 >> 2] | 0, 1, 0) | 0;
  $41 = ___muldi3($39 | 0, tempRet0 | 0, 4, 0) | 0;
  $45 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
  HEAP32[$45 >> 2] = $41;
  HEAP32[$45 + 4 >> 2] = tempRet0;
  HEAP32[$2 >> 2] = 0;
  $49 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $49 | 0;
 }
 return 0;
}

function _inflateResetKeep($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $43 = 0, $54 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (_inflateStateCheck(HEAP32[$2 >> 2] | 0) | 0) {
  HEAP32[$1 >> 2] = -2;
  $54 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $54 | 0;
 }
 HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2];
 HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] = 0;
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] & 1;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 16180;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] = 32768;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 60 >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 64 >> 2] = 0;
 $43 = (HEAP32[$3 >> 2] | 0) + 1332 | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 112 >> 2] = $43;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 84 >> 2] = $43;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 80 >> 2] = $43;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 7108 >> 2] = 1;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 7112 >> 2] = -1;
 HEAP32[$1 >> 2] = 0;
 $54 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $54 | 0;
}

function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$03846 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) if (!(___towrite($2) | 0)) {
  $12 = HEAP32[$3 >> 2] | 0;
  label = 5;
 } else $$1 = 0; else {
  $12 = $4;
  label = 5;
 }
 L5 : do if ((label | 0) == 5) {
  $9 = $2 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $14 = $10;
  if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
   $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 63]($2, $0, $1) | 0;
   break;
  }
  L10 : do if ((HEAP8[$2 + 75 >> 0] | 0) < 0 | ($1 | 0) == 0) {
   $$139 = 0;
   $$141 = $0;
   $$143 = $1;
   $32 = $14;
  } else {
   $$03846 = $1;
   while (1) {
    $22 = $$03846 + -1 | 0;
    if ((HEAP8[$0 + $22 >> 0] | 0) == 10) break;
    if (!$22) {
     $$139 = 0;
     $$141 = $0;
     $$143 = $1;
     $32 = $14;
     break L10;
    } else $$03846 = $22;
   }
   $29 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 63]($2, $0, $$03846) | 0;
   if ($29 >>> 0 < $$03846 >>> 0) {
    $$1 = $29;
    break L5;
   }
   $$139 = $$03846;
   $$141 = $0 + $$03846 | 0;
   $$143 = $1 - $$03846 | 0;
   $32 = HEAP32[$9 >> 2] | 0;
  } while (0);
  _memcpy($32 | 0, $$141 | 0, $$143 | 0) | 0;
  HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143;
  $$1 = $$139 + $$143 | 0;
 } while (0);
 return $$1 | 0;
}

function __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $15 = 0, $16 = 0, $23 = 0, $25 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 do if (HEAP32[$1 >> 2] | 0) {
  $7 = HEAP8[$2 + 11 >> 0] | 0;
  if ($7 << 24 >> 24 < 0) $12 = HEAP32[$2 + 4 >> 2] | 0; else $12 = $7 & 255;
  if ($12 | 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($2, 55605) | 0;
  __ZNKSt3__210error_code7messageEv($3, $1);
  $15 = HEAP8[$3 + 11 >> 0] | 0;
  $16 = $15 << 24 >> 24 < 0;
  __THREW__ = 0;
  invoke_iiii(47, $2 | 0, ($16 ? HEAP32[$3 >> 2] | 0 : $3) | 0, ($16 ? HEAP32[$3 + 4 >> 2] | 0 : $15 & 255) | 0) | 0;
  $23 = __THREW__;
  __THREW__ = 0;
  if ($23 & 1) {
   $25 = ___cxa_find_matching_catch_2() | 0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   ___resumeException($25 | 0);
  } else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$2 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$03 = 0, $10 = 0, $15 = 0, $16 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4, $2);
 __THREW__ = 0;
 invoke_viii(34, $3 | 0, $1 | 0, $4 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 do if ($5 & 1) {
  $20 = ___cxa_find_matching_catch_2() | 0;
  $$0 = tempRet0;
  $$03 = $20;
 } else {
  __THREW__ = 0;
  invoke_vii(85, $0 | 0, $3 | 0);
  $7 = __THREW__;
  __THREW__ = 0;
  if ($7 & 1) {
   $22 = ___cxa_find_matching_catch_2() | 0;
   $23 = tempRet0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   $$0 = $23;
   $$03 = $22;
   break;
  } else {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
   HEAP32[$0 >> 2] = 47992;
   $10 = $1;
   $15 = HEAP32[$10 + 4 >> 2] | 0;
   $16 = $0 + 8 | 0;
   HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$16 + 4 >> 2] = $15;
   STACKTOP = sp;
   return;
  }
 } while (0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 ___resumeException($$03 | 0);
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $7 = $2 - $1 >> 2;
 if ($7 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($7 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $7;
  $$1$ph = $0;
 } else {
  $14 = $7 + 4 & -4;
  if ($14 >>> 0 <= 1073741823) {
   $22 = __Znwm($14 << 2) | 0;
   HEAP32[$0 >> 2] = $22;
   HEAP32[$0 + 8 >> 2] = $14 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $7;
   $$1$ph = $22;
   break;
  }
  $16 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(49, $16 | 0, 55296);
  $17 = __THREW__;
  __THREW__ = 0;
  if ($17 & 1) {
   $19 = ___cxa_find_matching_catch_2() | 0;
   ___cxa_free_exception($16 | 0);
   ___resumeException($19 | 0);
  } else {
   HEAP32[$16 >> 2] = 48176;
   ___cxa_throw($16 | 0, 42808, 176);
  }
 } while (0);
 $$0 = $1;
 $$1 = $$1$ph;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $$0);
  $$0 = $$0 + 4 | 0;
  $$1 = $$1 + 4 | 0;
 }
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$1 = 0, $$1$ph = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $7 = $2 - $1 >> 2;
 if ($7 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($7 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $7;
  $$1$ph = $0;
 } else {
  $14 = $7 + 4 & -4;
  if ($14 >>> 0 <= 1073741823) {
   $22 = __Znwm($14 << 2) | 0;
   HEAP32[$0 >> 2] = $22;
   HEAP32[$0 + 8 >> 2] = $14 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $7;
   $$1$ph = $22;
   break;
  }
  $16 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(49, $16 | 0, 55296);
  $17 = __THREW__;
  __THREW__ = 0;
  if ($17 & 1) {
   $19 = ___cxa_find_matching_catch_2() | 0;
   ___cxa_free_exception($16 | 0);
   ___resumeException($19 | 0);
  } else {
   HEAP32[$16 >> 2] = 48176;
   ___cxa_throw($16 | 0, 42808, 176);
  }
 } while (0);
 $$0 = $1;
 $$1 = $$1$ph;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $$0);
  $$0 = $$0 + 4 | 0;
  $$1 = $$1 + 4 | 0;
 }
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$1, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$sroa$speculated = 0, $16 = 0, $17 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $38 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp;
 if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $25 = HEAP32[$0 >> 2] | 0; else $25 = $0;
 if ($1 >>> 0 < 2147483623) {
  $16 = $2 + $1 | 0;
  $17 = $1 << 1;
  $$sroa$speculated = $16 >>> 0 < $17 >>> 0 ? $17 : $16;
  $22 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $22 = -17;
 $23 = __Znwm($22) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23, $25, $4) | 0;
 if ($6 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 | 0, $7, $6) | 0;
 $28 = $3 - $5 | 0;
 $29 = $28 - $4 | 0;
 if ($29 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($23 + $4 + $6 | 0, $25 + $4 + $5 | 0, $29) | 0;
 if (($1 | 0) != 10) __ZdlPv($25);
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 8 >> 2] = $22 | -2147483648;
 $38 = $28 + $6 | 0;
 HEAP32[$0 + 4 >> 2] = $38;
 HEAP8[$8 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($23 + $38 | 0, $8);
 STACKTOP = sp;
 return;
}

function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert28 = 0, $$pre = 0, $1 = 0, $10 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $37 = 0, $42 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!$2) label = 3; else if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) label = 3; else label = 4;
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0;
  if (($7 | 0) < 0) label = 4; else {
   $10 = HEAP32[$1 >> 2] | 0;
   $$pre = HEAP32[$0 + 8 >> 2] | 0;
   if (!$10) {
    $42 = $$pre;
    label = 9;
   } else {
    $14 = HEAP32[$0 + 4 >> 2] | 0;
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0;
    $21 = $$pre;
    if (($$pre - $14 | 0) < ($19 | 0)) {
     $42 = $21;
     label = 9;
    } else {
     HEAP32[$0 + 100 >> 2] = $14 + ($19 + -1);
     $26 = $21;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$0 + 100 >> 2] = $$pre;
    $26 = $42;
   }
   $$phi$trans$insert28 = $0 + 4 | 0;
   if (!$26) $37 = HEAP32[$$phi$trans$insert28 >> 2] | 0; else {
    $28 = HEAP32[$$phi$trans$insert28 >> 2] | 0;
    $30 = $0 + 108 | 0;
    HEAP32[$30 >> 2] = $26 + 1 - $28 + (HEAP32[$30 >> 2] | 0);
    $37 = $28;
   }
   $36 = $37 + -1 | 0;
   if (($7 | 0) == (HEAPU8[$36 >> 0] | 0 | 0)) $$0 = $7; else {
    HEAP8[$36 >> 0] = $7;
    $$0 = $7;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _delta_decode($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $9 = sp + 44 | 0;
 $10 = sp + 40 | 0;
 $11 = sp + 36 | 0;
 $12 = sp + 32 | 0;
 $13 = sp + 28 | 0;
 $14 = sp + 24 | 0;
 $15 = sp + 20 | 0;
 $16 = sp + 16 | 0;
 $17 = sp + 12 | 0;
 $18 = sp + 8 | 0;
 $19 = sp + 4 | 0;
 $20 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$11 >> 2] = $2;
 HEAP32[$12 >> 2] = $3;
 HEAP32[$13 >> 2] = $4;
 HEAP32[$14 >> 2] = $5;
 HEAP32[$15 >> 2] = $6;
 HEAP32[$16 >> 2] = $7;
 HEAP32[$17 >> 2] = $8;
 HEAP32[$18 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$15 >> 2] >> 2];
 HEAP32[$20 >> 2] = FUNCTION_TABLE_iiiiiiiiii[HEAP32[(HEAP32[$18 >> 2] | 0) + 20 >> 2] & 7](HEAP32[HEAP32[$18 >> 2] >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, HEAP32[$13 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$15 >> 2] | 0, HEAP32[$16 >> 2] | 0, HEAP32[$17 >> 2] | 0) | 0;
 _decode_buffer(HEAP32[$18 >> 2] | 0, (HEAP32[$14 >> 2] | 0) + (HEAP32[$19 >> 2] | 0) | 0, (HEAP32[HEAP32[$15 >> 2] >> 2] | 0) - (HEAP32[$19 >> 2] | 0) | 0);
 STACKTOP = sp;
 return HEAP32[$20 >> 2] | 0;
}

function __ZNK3zim6Dirent8getTitleEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $3 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp + 20 | 0;
 $8 = sp + 16 | 0;
 $9 = sp + 12 | 0;
 $10 = sp + 8 | 0;
 $11 = sp + 4 | 0;
 $12 = sp;
 HEAP32[$12 >> 2] = $0;
 $13 = HEAP32[$12 >> 2] | 0;
 HEAP32[$11 >> 2] = $13 + 24;
 HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
 $16 = HEAP32[$10 >> 2] | 0;
 HEAP32[$9 >> 2] = $16;
 HEAP32[$8 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 if ((HEAPU8[(HEAP32[$7 >> 2] | 0) + 11 >> 0] | 0) & 128 | 0) {
  HEAP32[$3 >> 2] = $16;
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  $36 = HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0;
  $37 = ($36 | 0) == 0;
  $38 = $13 + 36 | 0;
  $39 = $13 + 24 | 0;
  $40 = $37 ? $38 : $39;
  STACKTOP = sp;
  return $40 | 0;
 } else {
  HEAP32[$6 >> 2] = $16;
  HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
  $36 = HEAPU8[(HEAP32[$4 >> 2] | 0) + 11 >> 0] | 0;
  $37 = ($36 | 0) == 0;
  $38 = $13 + 36 | 0;
  $39 = $13 + 24 | 0;
  $40 = $37 ? $38 : $39;
  STACKTOP = sp;
  return $40 | 0;
 }
 return 0;
}

function __ZNK3zim4File14const_iteratordeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = $0 + 8 | 0;
 $3 = $0 + 16 | 0;
 if ((HEAP32[$3 >> 2] | 0) != -1) {
  STACKTOP = sp;
  return $2 | 0;
 }
 $9 = HEAP32[$0 >> 2] | 0;
 $11 = HEAP32[$0 + 4 >> 2] | 0;
 if (!(HEAP32[$0 + 20 >> 2] | 0)) __ZNK3zim4File10getArticleEj($1, $9, $11); else __ZNK3zim4File17getArticleByTitleEj($1, $9, $11);
 $12 = HEAP32[$1 >> 2] | 0;
 $13 = $1 + 4 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$13 >> 2] = 0;
 HEAP32[$2 >> 2] = $12;
 $15 = $0 + 12 | 0;
 $16 = HEAP32[$15 >> 2] | 0;
 HEAP32[$15 >> 2] = $14;
 if ($16 | 0) {
  $18 = $16 + 4 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  HEAP32[$18 >> 2] = $19 + -1;
  if (!$19) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$16 >> 2] | 0) + 8 >> 2] & 255]($16);
   __ZNSt3__219__shared_weak_count14__release_weakEv($16);
  }
 }
 HEAP32[$3 >> 2] = HEAP32[$1 + 8 >> 2];
 $27 = HEAP32[$13 >> 2] | 0;
 if ($27 | 0) {
  $29 = $27 + 4 | 0;
  $30 = HEAP32[$29 >> 2] | 0;
  HEAP32[$29 >> 2] = $30 + -1;
  if (!$30) {
   FUNCTION_TABLE_vi[HEAP32[(HEAP32[$27 >> 2] | 0) + 8 >> 2] & 255]($27);
   __ZNSt3__219__shared_weak_count14__release_weakEv($27);
  }
 }
 STACKTOP = sp;
 return $2 | 0;
}

function __ZNSt3__219__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $20 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
 HEAP32[HEAP32[$7 >> 2] >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
 if (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) {
  $20 = HEAP32[$7 >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[HEAP32[$7 >> 2] >> 2];
  HEAP32[$6 >> 2] = $20;
  HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = HEAP32[$6 >> 2];
 }
 HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
 $36 = HEAP32[$8 >> 2] | 0;
 $37 = HEAP32[$7 >> 2] | 0;
 if ((HEAP32[$4 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] >> 2] | 0)) HEAP32[HEAP32[$37 + 8 >> 2] >> 2] = $36; else {
  HEAP32[$1 >> 2] = $37;
  HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] | 0) + 4 >> 2] = $36;
 }
 HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] = HEAP32[$7 >> 2];
 $48 = HEAP32[$8 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$3 >> 2] = $48;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EbjRKS5_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $23 = 0, $24 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$11 >> 2] = $0;
 HEAP8[$12 >> 0] = $1 & 1;
 HEAP32[$13 >> 2] = $2;
 HEAP32[$14 >> 2] = $3;
 $16 = HEAP32[$11 >> 2] | 0;
 HEAP8[$16 >> 0] = HEAP8[$12 >> 0] & 1;
 HEAP32[$16 + 4 >> 2] = HEAP32[$13 >> 2];
 $23 = HEAP32[$14 >> 2] | 0;
 HEAP32[$9 >> 2] = $16 + 8;
 HEAP32[$10 >> 2] = $23;
 $24 = HEAP32[$9 >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$24 + 4 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[$24 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$8 >> 2] = HEAP32[$24 + 4 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$7 >> 2] | 0) + 4;
 $39 = HEAP32[$4 >> 2] | 0;
 HEAP32[$5 >> 2] = 1;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$39 >> 2] | 0;
 HEAP32[$39 >> 2] = $41 + $40;
 HEAP32[sp + 28 >> 2] = $41 + $40;
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EbjRKS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $23 = 0, $24 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 20 | 0;
 $9 = sp + 16 | 0;
 $10 = sp + 12 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 40 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$11 >> 2] = $0;
 HEAP8[$12 >> 0] = $1 & 1;
 HEAP32[$13 >> 2] = $2;
 HEAP32[$14 >> 2] = $3;
 $16 = HEAP32[$11 >> 2] | 0;
 HEAP8[$16 >> 0] = HEAP8[$12 >> 0] & 1;
 HEAP32[$16 + 4 >> 2] = HEAP32[$13 >> 2];
 $23 = HEAP32[$14 >> 2] | 0;
 HEAP32[$9 >> 2] = $16 + 8;
 HEAP32[$10 >> 2] = $23;
 $24 = HEAP32[$9 >> 2] | 0;
 HEAP32[$24 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
 HEAP32[$24 + 4 >> 2] = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[$24 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$8 >> 2] = HEAP32[$24 + 4 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$7 >> 2] | 0) + 4;
 $39 = HEAP32[$4 >> 2] | 0;
 HEAP32[$5 >> 2] = 1;
 $40 = HEAP32[$5 >> 2] | 0;
 $41 = HEAP32[$39 >> 2] | 0;
 HEAP32[$39 >> 2] = $41 + $40;
 HEAP32[sp + 28 >> 2] = $41 + $40;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $14 = 0, $21 = 0, $27 = 0, $28 = 0, $37 = 0, $39 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 127]($7) | 0;
 $14 = HEAP8[$11 + 8 + 3 >> 0] | 0;
 if ($14 << 24 >> 24 < 0) $28 = HEAP32[$11 + 4 >> 2] | 0; else $28 = $14 & 255;
 $21 = HEAP8[$11 + 20 + 3 >> 0] | 0;
 if ($21 << 24 >> 24 < 0) $27 = HEAP32[$11 + 16 >> 2] | 0; else $27 = $21 & 255;
 do if (($28 | 0) == (0 - $27 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; else {
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  $37 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 24 | 0, $5, $4, 0) | 0) - $11 | 0;
  $39 = HEAP32[$1 >> 2] | 0;
  if (($39 | 0) == 12 & ($37 | 0) == 0) {
   HEAP32[$1 >> 2] = 0;
   break;
  }
  if (($39 | 0) < 12 & ($37 | 0) == 12) HEAP32[$1 >> 2] = $39 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $20 = 0, $26 = 0, $27 = 0, $36 = 0, $38 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] & 127]($7) | 0;
 $13 = HEAP8[$11 + 11 >> 0] | 0;
 if ($13 << 24 >> 24 < 0) $27 = HEAP32[$11 + 4 >> 2] | 0; else $27 = $13 & 255;
 $20 = HEAP8[$11 + 12 + 11 >> 0] | 0;
 if ($20 << 24 >> 24 < 0) $26 = HEAP32[$11 + 16 >> 2] | 0; else $26 = $20 & 255;
 do if (($27 | 0) == (0 - $26 | 0)) HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; else {
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  $36 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 24 | 0, $5, $4, 0) | 0) - $11 | 0;
  $38 = HEAP32[$1 >> 2] | 0;
  if (($38 | 0) == 12 & ($36 | 0) == 0) {
   HEAP32[$1 >> 2] = 0;
   break;
  }
  if (($38 | 0) < 12 & ($36 | 0) == 12) HEAP32[$1 >> 2] = $38 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $16 = 0, $18 = 0, $2 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = HEAP32[$1 >> 2] | 0;
 HEAP32[$4 >> 2] = 42968;
 __THREW__ = 0;
 invoke_ii(87, $4 | 0) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 if ($5 & 1) {
  $7 = ___cxa_find_matching_catch_3(0) | 0;
  HEAP32[$2 >> 2] = $7;
  HEAP32[$3 >> 2] = tempRet0;
  ___cxa_begin_catch(HEAP32[$2 >> 2] | 0) | 0;
  __THREW__ = 0;
  invoke_v(3);
  $10 = __THREW__;
  __THREW__ = 0;
  if ($10 & 1) {
   $18 = ___cxa_find_matching_catch_3(0) | 0;
   HEAP32[$2 >> 2] = $18;
   HEAP32[$3 >> 2] = tempRet0;
   __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
   ___clang_call_terminate(HEAP32[$2 >> 2] | 0);
  }
 }
 if (HEAP8[$4 + 96 >> 0] & 1) {
  $16 = HEAP32[$4 + 32 >> 2] | 0;
  if ($16 | 0) __ZdaPv($16);
 }
 if (!(HEAP8[$4 + 97 >> 0] & 1)) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
  STACKTOP = sp;
  return;
 }
 $25 = HEAP32[$4 + 56 >> 2] | 0;
 if (!$25) {
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
  STACKTOP = sp;
  return;
 }
 __ZdaPv($25);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($4);
 STACKTOP = sp;
 return;
}

function __ZN3zim6Reader8can_readENS_8offset_tENS_7zsize_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $15 = 0, $17 = 0, $21 = 0, $26 = 0, $3 = 0, $32 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $5 = 0, $50 = 0, $54 = 0, $59 = 0, $6 = 0, $65 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 $6 = HEAP32[$3 >> 2] | 0;
 $7 = $1;
 $9 = HEAP32[$7 >> 2] | 0;
 $12 = HEAP32[$7 + 4 >> 2] | 0;
 $15 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6) | 0;
 $17 = $4;
 HEAP32[$17 >> 2] = $15;
 HEAP32[$17 + 4 >> 2] = tempRet0;
 $21 = $4;
 $26 = HEAP32[$21 + 4 >> 2] | 0;
 if (!($12 >>> 0 < $26 >>> 0 | (($12 | 0) == ($26 | 0) ? $9 >>> 0 <= (HEAP32[$21 >> 2] | 0) >>> 0 : 0))) {
  $65 = 0;
  STACKTOP = sp;
  return $65 | 0;
 }
 $32 = $1;
 $38 = $2;
 $44 = _i64Add(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, HEAP32[$38 >> 2] | 0, HEAP32[$38 + 4 >> 2] | 0) | 0;
 $45 = tempRet0;
 $48 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$6 >> 2] >> 2] & 127]($6) | 0;
 $50 = $5;
 HEAP32[$50 >> 2] = $48;
 HEAP32[$50 + 4 >> 2] = tempRet0;
 $54 = $5;
 $59 = HEAP32[$54 + 4 >> 2] | 0;
 $65 = $45 >>> 0 < $59 >>> 0 | (($45 | 0) == ($59 | 0) ? $44 >>> 0 <= (HEAP32[$54 >> 2] | 0) >>> 0 : 0);
 STACKTOP = sp;
 return $65 | 0;
}

function _lzma_lzma_props_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $22 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if ((HEAP32[$8 >> 2] | 0) != 5) {
  HEAP32[$4 >> 2] = 8;
  $32 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 HEAP32[$9 >> 2] = _lzma_alloc(96, HEAP32[$6 >> 2] | 0) | 0;
 if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$4 >> 2] = 5;
  $32 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 if (_lzma_lzma_lclppb_decode(HEAP32[$9 >> 2] | 0, HEAP8[HEAP32[$7 >> 2] >> 0] | 0) | 0) {
  _lzma_free(HEAP32[$9 >> 2] | 0, HEAP32[$6 >> 2] | 0);
  HEAP32[$4 >> 2] = 8;
  $32 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 } else {
  $22 = _read32le_709((HEAP32[$7 >> 2] | 0) + 1 | 0) | 0;
  HEAP32[HEAP32[$9 >> 2] >> 2] = $22;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2] = 0;
  HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$9 >> 2];
  HEAP32[$4 >> 2] = 0;
  $32 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0;
}

function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $4 = 0, $5 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $4 = sp + 124 | 0;
 $5 = sp;
 dest = $5;
 src = 44388;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) if (!$1) {
  $$014 = $4;
  $$015 = 1;
  label = 4;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
 } else {
  $$014 = $0;
  $$015 = $1;
  label = 4;
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0;
  $spec$select = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015;
  HEAP32[$5 + 48 >> 2] = $spec$select;
  $14 = $5 + 20 | 0;
  HEAP32[$14 >> 2] = $$014;
  HEAP32[$5 + 44 >> 2] = $$014;
  $16 = $$014 + $spec$select | 0;
  $17 = $5 + 16 | 0;
  HEAP32[$17 >> 2] = $16;
  HEAP32[$5 + 28 >> 2] = $16;
  $19 = _vfprintf($5, $2, $3) | 0;
  if (!$spec$select) $$0 = $19; else {
   $21 = HEAP32[$14 >> 2] | 0;
   HEAP8[$21 + ((($21 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $13 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $11 = tempRet0;
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$13) HEAP32[(___errno_location() | 0) >> 2] = $7;
  L7 : do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) {
   do if (($13 | 0) == 34) {
    HEAP32[$2 >> 2] = 4;
    if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0) {
     $$0 = 2147483647;
     break L7;
    }
   } else {
    if (($11 | 0) < -1 | ($11 | 0) == -1 & $10 >>> 0 < 2147483648) {
     HEAP32[$2 >> 2] = 4;
     break;
    }
    if (($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 2147483647) {
     HEAP32[$2 >> 2] = 4;
     $$0 = 2147483647;
     break L7;
    } else {
     $$0 = $10;
     break L7;
    }
   } while (0);
   $$0 = -2147483648;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function _lzma_bufcpy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $39 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $6 = sp + 32 | 0;
 $7 = sp + 28 | 0;
 $8 = sp + 24 | 0;
 $9 = sp + 20 | 0;
 $10 = sp + 16 | 0;
 $11 = sp + 12 | 0;
 $12 = sp + 8 | 0;
 $13 = sp + 4 | 0;
 $14 = sp;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$7 >> 2] = $1;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $3;
 HEAP32[$10 >> 2] = $4;
 HEAP32[$11 >> 2] = $5;
 HEAP32[$12 >> 2] = (HEAP32[$8 >> 2] | 0) - (HEAP32[HEAP32[$7 >> 2] >> 2] | 0);
 HEAP32[$13 >> 2] = (HEAP32[$11 >> 2] | 0) - (HEAP32[HEAP32[$10 >> 2] >> 2] | 0);
 HEAP32[$14 >> 2] = (HEAP32[$12 >> 2] | 0) >>> 0 < (HEAP32[$13 >> 2] | 0) >>> 0 ? HEAP32[$12 >> 2] | 0 : HEAP32[$13 >> 2] | 0;
 _memcpy((HEAP32[$9 >> 2] | 0) + (HEAP32[HEAP32[$10 >> 2] >> 2] | 0) | 0, (HEAP32[$6 >> 2] | 0) + (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0, HEAP32[$14 >> 2] | 0) | 0;
 $39 = HEAP32[$7 >> 2] | 0;
 HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
 $43 = HEAP32[$10 >> 2] | 0;
 HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + (HEAP32[$14 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$14 >> 2] | 0;
}

function _lzma_stream_decoder($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $25 = 0, $35 = 0, $4 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 HEAP32[$5 >> 2] = $0;
 $10 = $6;
 HEAP32[$10 >> 2] = $1;
 HEAP32[$10 + 4 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$8 >> 2] = _lzma_strm_init(HEAP32[$5 >> 2] | 0) | 0;
 if (HEAP32[$8 >> 2] | 0) {
  HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
  $45 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $25 = $6;
 HEAP32[$9 >> 2] = _lzma_stream_decoder_init(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 32 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
 $35 = HEAP32[$5 >> 2] | 0;
 if (HEAP32[$9 >> 2] | 0) {
  _lzma_end($35);
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  $45 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 } else {
  HEAP8[(HEAP32[$35 + 36 >> 2] | 0) + 56 >> 0] = 1;
  HEAP8[(HEAP32[(HEAP32[$5 >> 2] | 0) + 36 >> 2] | 0) + 56 + 3 >> 0] = 1;
  HEAP32[$4 >> 2] = 0;
  $45 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $45 | 0;
 }
 return 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $29 = 0, $32 = 0, $36 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $6 = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $6 = $2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0;
 do if (HEAP32[$6 + 24 >> 2] | 0) if (!(HEAP32[$6 + 16 >> 2] | 0)) if (HEAP32[$6 + 4 >> 2] & 8192 | 0) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $18 = HEAP32[$1 >> 2] | 0;
  $24 = HEAP32[$18 + (HEAP32[(HEAP32[$18 >> 2] | 0) + -12 >> 2] | 0) + 24 >> 2] | 0;
  __THREW__ = 0;
  $28 = invoke_ii(HEAP32[(HEAP32[$24 >> 2] | 0) + 24 >> 2] | 0, $24 | 0) | 0;
  $29 = __THREW__;
  __THREW__ = 0;
  if (!($29 & 1)) {
   if (($28 | 0) != -1) break;
   $32 = HEAP32[$1 >> 2] | 0;
   $36 = $32 + (HEAP32[(HEAP32[$32 >> 2] | 0) + -12 >> 2] | 0) | 0;
   __THREW__ = 0;
   invoke_vii(46, $36 | 0, HEAP32[$36 + 16 >> 2] | 1 | 0);
   $40 = __THREW__;
   __THREW__ = 0;
   if (!($40 & 1)) break;
  }
  $42 = ___cxa_find_matching_catch_3(0) | 0;
  ___cxa_begin_catch($42 | 0) | 0;
  __THREW__ = 0;
  invoke_v(3);
  $44 = __THREW__;
  __THREW__ = 0;
  if ($44 & 1) {
   $46 = ___cxa_find_matching_catch_3(0) | 0;
   ___clang_call_terminate($46);
  }
 } while (0);
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0;
 value = value & 255;
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value;
   ptr = ptr + 1 | 0;
  }
  aligned_end = end & -4 | 0;
  block_aligned_end = aligned_end - 64 | 0;
  value4 = value | value << 8 | value << 16 | value << 24;
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   HEAP32[ptr + 4 >> 2] = value4;
   HEAP32[ptr + 8 >> 2] = value4;
   HEAP32[ptr + 12 >> 2] = value4;
   HEAP32[ptr + 16 >> 2] = value4;
   HEAP32[ptr + 20 >> 2] = value4;
   HEAP32[ptr + 24 >> 2] = value4;
   HEAP32[ptr + 28 >> 2] = value4;
   HEAP32[ptr + 32 >> 2] = value4;
   HEAP32[ptr + 36 >> 2] = value4;
   HEAP32[ptr + 40 >> 2] = value4;
   HEAP32[ptr + 44 >> 2] = value4;
   HEAP32[ptr + 48 >> 2] = value4;
   HEAP32[ptr + 52 >> 2] = value4;
   HEAP32[ptr + 56 >> 2] = value4;
   HEAP32[ptr + 60 >> 2] = value4;
   ptr = ptr + 64 | 0;
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return end - num | 0;
}

function _lzma_sha256_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $40 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >>> 0 <= 0) break;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 64 + 32 >> 2] & 63;
  HEAP32[$7 >> 2] = 64 - (HEAP32[$6 >> 2] | 0);
  if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$4 >> 2] | 0) >>> 0) HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
  _memcpy((HEAP32[$5 >> 2] | 0) + (HEAP32[$6 >> 2] | 0) | 0, HEAP32[$3 >> 2] | 0, HEAP32[$7 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + (HEAP32[$7 >> 2] | 0);
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - (HEAP32[$7 >> 2] | 0);
  $40 = (HEAP32[$5 >> 2] | 0) + 64 + 32 | 0;
  $41 = $40;
  $47 = _i64Add(HEAP32[$41 >> 2] | 0, HEAP32[$41 + 4 >> 2] | 0, HEAP32[$7 >> 2] | 0, 0) | 0;
  $49 = $40;
  HEAP32[$49 >> 2] = $47;
  HEAP32[$49 + 4 >> 2] = tempRet0;
  if (0 == 0 ? (HEAP32[(HEAP32[$5 >> 2] | 0) + 64 + 32 >> 2] & 63 | 0) == 0 : 0) _process(HEAP32[$5 >> 2] | 0);
 }
 STACKTOP = sp;
 return;
}

function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $12 = 0, $14 = 0, $30 = 0, $8 = 0, $9 = 0, $8$looptemp = 0, $9$looptemp = 0, $$012$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2;
  $8 = $0;
  $9 = $1;
  do {
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0;
   $9$looptemp = $9;
   $9 = tempRet0;
   $12 = ___muldi3($8 | 0, $9 | 0, 10, 0) | 0;
   $14 = _i64Subtract($8$looptemp | 0, $9$looptemp | 0, $12 | 0, tempRet0 | 0) | 0;
   $$0914 = $$0914 + -1 | 0;
   HEAP8[$$0914 >> 0] = $14 & 255 | 48;
  } while ($9$looptemp >>> 0 > 9 | ($9$looptemp | 0) == 9 & $8$looptemp >>> 0 > 4294967295);
  $$010$lcssa$off0 = $8;
  $$09$lcssa = $$0914;
 } else {
  $$010$lcssa$off0 = $0;
  $$09$lcssa = $2;
 }
 if (!$$010$lcssa$off0) $$1$lcssa = $$09$lcssa; else {
  $$012 = $$010$lcssa$off0;
  $$111 = $$09$lcssa;
  while (1) {
   $$012$looptemp = $$012;
   $$012 = ($$012 >>> 0) / 10 | 0;
   $30 = $$111 + -1 | 0;
   HEAP8[$30 >> 0] = $$012$looptemp - ($$012 * 10 | 0) | 48;
   if ($$012$looptemp >>> 0 < 10) {
    $$1$lcssa = $30;
    break;
   } else $$111 = $30;
  }
 }
 return $$1$lcssa | 0;
}

function __ZN3zim7ArticleC2ENSt3__210shared_ptrINS_8FileImplEEEj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $3 = sp + 32 | 0;
 $4 = sp + 28 | 0;
 $6 = sp + 20 | 0;
 $7 = sp + 16 | 0;
 $8 = sp + 12 | 0;
 $9 = sp + 8 | 0;
 $10 = sp + 4 | 0;
 $11 = sp;
 HEAP32[$10 >> 2] = $0;
 HEAP32[$11 >> 2] = $2;
 $12 = HEAP32[$10 >> 2] | 0;
 HEAP32[$8 >> 2] = $12;
 HEAP32[$9 >> 2] = $1;
 $13 = HEAP32[$8 >> 2] | 0;
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[$13 + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[$13 + 4 >> 2] | 0)) {
  $33 = $12 + 8 | 0;
  $34 = HEAP32[$11 >> 2] | 0;
  HEAP32[$33 >> 2] = $34;
  STACKTOP = sp;
  return;
 }
 HEAP32[$7 >> 2] = HEAP32[$13 + 4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$3 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 $28 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = 1;
 $29 = HEAP32[$4 >> 2] | 0;
 $30 = HEAP32[$28 >> 2] | 0;
 HEAP32[$28 >> 2] = $30 + $29;
 HEAP32[sp + 24 >> 2] = $30 + $29;
 $33 = $12 + 8 | 0;
 $34 = HEAP32[$11 >> 2] | 0;
 HEAP32[$33 >> 2] = $34;
 STACKTOP = sp;
 return;
}

function ___stdio_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$cast = 0, $11 = 0, $18 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $1;
 $4 = $3 + 4 | 0;
 $5 = $0 + 48 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$4 >> 2] = $2 - (($6 | 0) != 0 & 1);
 $11 = $0 + 44 | 0;
 HEAP32[$3 + 8 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$3 + 12 >> 2] = $6;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $3;
 HEAP32[$vararg_buffer + 8 >> 2] = 2;
 $18 = ___syscall_ret(___syscall145(145, $vararg_buffer | 0) | 0) | 0;
 if (($18 | 0) < 1) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $18 & 48 ^ 16;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4 >> 2] | 0;
  if ($18 >>> 0 > $24 >>> 0) {
   $27 = HEAP32[$11 >> 2] | 0;
   $28 = $0 + 4 | 0;
   HEAP32[$28 >> 2] = $27;
   $$cast = $27;
   HEAP32[$0 + 8 >> 2] = $$cast + ($18 - $24);
   if (!(HEAP32[$5 >> 2] | 0)) $$0 = $2; else {
    HEAP32[$28 >> 2] = $$cast + 1;
    HEAP8[$1 + ($2 + -1) >> 0] = HEAP8[$$cast >> 0] | 0;
    $$0 = $2;
   }
  } else $$0 = $18;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK3zim6Reader10sub_readerENS_8offset_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $13 = 0, $15 = 0, $19 = 0, $25 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy1 = sp + 32 | 0;
 $$byval_copy = sp + 24 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $1;
 $7 = HEAP32[$3 >> 2] | 0;
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 $13 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7) | 0;
 $15 = $6;
 HEAP32[$15 >> 2] = $13;
 HEAP32[$15 + 4 >> 2] = tempRet0;
 $19 = $6;
 $25 = $2;
 $31 = _i64Subtract(HEAP32[$19 >> 2] | 0, HEAP32[$19 + 4 >> 2] | 0, HEAP32[$25 >> 2] | 0, HEAP32[$25 + 4 >> 2] | 0) | 0;
 __ZN3zim7zsize_tC2Ey($5, $31, tempRet0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 FUNCTION_TABLE_viiii[$10 & 31]($0, $7, $$byval_copy, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function _lzma_lzma_decoder_create($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 do if (!(HEAP32[HEAP32[$5 >> 2] >> 2] | 0)) {
  $14 = _lzma_alloc(28344, HEAP32[$6 >> 2] | 0) | 0;
  HEAP32[HEAP32[$5 >> 2] >> 2] = $14;
  if (HEAP32[HEAP32[$5 >> 2] >> 2] | 0) {
   HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] = 30;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = 68;
   HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] = 22;
   break;
  }
  HEAP32[$4 >> 2] = 5;
  $39 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $39 | 0;
 } while (0);
 HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
 HEAP32[HEAP32[$8 >> 2] >> 2] = HEAP32[HEAP32[$9 >> 2] >> 2];
 HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2];
 HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 8 >> 2];
 HEAP32[$4 >> 2] = 0;
 $39 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $39 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $1;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $6 & 255;
  $$019 = 1;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEmmmmmm($0, $$019, 1, $$019, $$019, 0, 0);
  if ((HEAP8[$5 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($7) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$5 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + ($$018 << 2) | 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0, $2);
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + 4 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $4 = $0 + 24 | 0;
 $5 = $0 + 28 | 0;
 $$0 = $1;
 $$021 = 0;
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) break;
  $7 = HEAP32[$4 >> 2] | 0;
  $8 = HEAP32[$5 >> 2] | 0;
  if ($7 >>> 0 < $8 >>> 0) {
   $22 = $8 - $7 >> 2;
   $23 = $2 - $$021 | 0;
   $$sroa$speculated = ($23 | 0) < ($22 | 0) ? $23 : $22;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($7, $$0, $$sroa$speculated) | 0;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + ($$sroa$speculated << 2);
   $$0$be = $$0 + ($$sroa$speculated << 2) | 0;
   $$021$be = $$sroa$speculated + $$021 | 0;
  } else {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$0 >> 2] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$12 & 63]($0, $14) | 0) == ($3 | 0)) break;
   $$0$be = $$0 + 4 | 0;
   $$021$be = $$021 + 1 | 0;
  }
  $$0 = $$0$be;
  $$021 = $$021$be;
 }
 return $$021 | 0;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($2 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($2 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $2 + 4 & -4;
  if ($10 >>> 0 <= 1073741823) {
   $18 = __Znwm($10 << 2) | 0;
   HEAP32[$0 >> 2] = $18;
   HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $2;
   $$0 = $18;
   break;
  }
  $12 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(49, $12 | 0, 55296);
  $13 = __THREW__;
  __THREW__ = 0;
  if ($13 & 1) {
   $15 = ___cxa_find_matching_catch_2() | 0;
   ___cxa_free_exception($12 | 0);
   ___resumeException($15 | 0);
  } else {
   HEAP32[$12 >> 2] = 48176;
   ___cxa_throw($12 | 0, 42808, 176);
  }
 } while (0);
 __ZNSt3__211char_traitsIwE4copyEPwPKwm($$0, $1, $2) | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + ($2 << 2) | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($1 >>> 0 > 1073741807) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 do if ($1 >>> 0 < 2) {
  HEAP8[$0 + 8 + 3 >> 0] = $1;
  $$0 = $0;
 } else {
  $10 = $1 + 4 & -4;
  if ($10 >>> 0 <= 1073741823) {
   $18 = __Znwm($10 << 2) | 0;
   HEAP32[$0 >> 2] = $18;
   HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
   HEAP32[$0 + 4 >> 2] = $1;
   $$0 = $18;
   break;
  }
  $12 = ___cxa_allocate_exception(8) | 0;
  __THREW__ = 0;
  invoke_vii(49, $12 | 0, 55296);
  $13 = __THREW__;
  __THREW__ = 0;
  if ($13 & 1) {
   $15 = ___cxa_find_matching_catch_2() | 0;
   ___cxa_free_exception($12 | 0);
   ___resumeException($15 | 0);
  } else {
   HEAP32[$12 >> 2] = 48176;
   ___cxa_throw($12 | 0, 42808, 176);
  }
 } while (0);
 __ZNSt3__211char_traitsIwE6assignEPwmw($$0, $1, $2) | 0;
 HEAP32[$3 >> 2] = 0;
 __ZNSt3__211char_traitsIwE6assignERwRKw($$0 + ($1 << 2) | 0, $3);
 STACKTOP = sp;
 return;
}

function ___newlocale($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$03338 = 0, $$03439 = 0, $$036 = 0, $$13537 = 0, $$pre41 = 0, $12 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp;
 L1 : do if (!(___loc_is_allocated($2) | 0)) {
  $12 = ($2 | 0) != 0;
  $$03338 = 0;
  $$13537 = 0;
  do {
   $$pre41 = 1 << $$13537 & $0;
   if ($12 & ($$pre41 | 0) == 0) $$0 = HEAP32[$2 + ($$13537 << 2) >> 2] | 0; else $$0 = ___get_locale($$13537, ($$pre41 | 0) == 0 ? 62819 : $1) | 0;
   $$03338 = $$03338 + (($$0 | 0) != 0 & 1) | 0;
   HEAP32[$3 + ($$13537 << 2) >> 2] = $$0;
   $$13537 = $$13537 + 1 | 0;
  } while (($$13537 | 0) != 6);
  switch ($$03338 & 2147483647 | 0) {
  case 0:
   {
    $$036 = 61260;
    break L1;
    break;
   }
  case 1:
   {
    if ((HEAP32[$3 >> 2] | 0) == 44084) {
     $$036 = 44112;
     break L1;
    }
    break;
   }
  default:
   {}
  }
  $$036 = $2;
 } else {
  $$03439 = 0;
  do {
   if (1 << $$03439 & $0 | 0) HEAP32[$2 + ($$03439 << 2) >> 2] = ___get_locale($$03439, $1) | 0;
   $$03439 = $$03439 + 1 | 0;
  } while (($$03439 | 0) != 6);
  $$036 = $2;
 } while (0);
 STACKTOP = sp;
 return $$036 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$be = 0, $$021 = 0, $$021$be = 0, $$sroa$speculated = 0, $12 = 0, $14 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0;
 $3 = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $4 = $0 + 24 | 0;
 $5 = $0 + 28 | 0;
 $$0 = $1;
 $$021 = 0;
 while (1) {
  if (($$021 | 0) >= ($2 | 0)) break;
  $7 = HEAP32[$4 >> 2] | 0;
  $8 = HEAP32[$5 >> 2] | 0;
  if ($7 >>> 0 < $8 >>> 0) {
   $21 = $8 - $7 | 0;
   $22 = $2 - $$021 | 0;
   $$sroa$speculated = ($22 | 0) < ($21 | 0) ? $22 : $21;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($7, $$0, $$sroa$speculated) | 0;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $$sroa$speculated;
   $$0$be = $$0 + $$sroa$speculated | 0;
   $$021$be = $$sroa$speculated + $$021 | 0;
  } else {
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$0 >> 0] | 0) | 0;
   if ((FUNCTION_TABLE_iii[$12 & 63]($0, $14) | 0) == ($3 | 0)) break;
   $$0$be = $$0 + 1 | 0;
   $$021$be = $$021 + 1 | 0;
  }
  $$0 = $$0$be;
  $$021 = $$021$be;
 }
 return $$021 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 1 | 0;
 HEAP8[$2 >> 0] = $1;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $$018 = HEAP32[$0 + 4 >> 2] | 0;
  $$019 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $$018 = $5 & 255;
  $$019 = 10;
 }
 if (($$018 | 0) == ($$019 | 0)) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $$019, 1, $$019, $$019, 0, 0);
  if ((HEAP8[$4 >> 0] | 0) < 0) label = 8; else label = 7;
 } else if ($6) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$4 >> 0] = $$018 + 1;
  $$pn = $0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 + 4 >> 2] = $$018 + 1;
  $$pn = $19;
 }
 $$0 = $$pn + $$018 | 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0, $2);
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + 1 | 0, $3);
 STACKTOP = sp;
 return;
}

function _dict_write($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$9 >> 2] = $4;
 if (((HEAP32[$8 >> 2] | 0) - (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) | 0) >>> 0 > (HEAP32[HEAP32[$9 >> 2] >> 2] | 0) >>> 0) HEAP32[$8 >> 2] = (HEAP32[HEAP32[$7 >> 2] >> 2] | 0) + (HEAP32[HEAP32[$9 >> 2] >> 2] | 0);
 $32 = _lzma_bufcpy(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0, HEAP32[HEAP32[$5 >> 2] >> 2] | 0, (HEAP32[$5 >> 2] | 0) + 4 | 0, HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0) | 0;
 $33 = HEAP32[$9 >> 2] | 0;
 HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) - $32;
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= (HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) >>> 0) {
  STACKTOP = sp;
  return;
 }
 HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__num_put_base14__format_floatEPcPKcj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$022 = 0, $$023$off0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $11 = 0, $14 = 0, $25 = 0, $9 = 0;
 if (!($2 & 2048)) $$0 = $0; else {
  HEAP8[$0 >> 0] = 43;
  $$0 = $0 + 1 | 0;
 }
 if (!($2 & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $9 = $2 & 260;
 $10 = $2 & 16384;
 $11 = ($9 | 0) == 260;
 if ($11) {
  $$023$off0 = 0;
  $$2 = $$1;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$023$off0 = 1;
  $$2 = $$1 + 2 | 0;
 }
 $$022 = $1;
 $$3 = $$2;
 while (1) {
  $14 = HEAP8[$$022 >> 0] | 0;
  if (!($14 << 24 >> 24)) break;
  HEAP8[$$3 >> 0] = $14;
  $$022 = $$022 + 1 | 0;
  $$3 = $$3 + 1 | 0;
 }
 L14 : do switch ($9 & 511) {
 case 4:
  {
   $$sink = $10 >>> 9 & 255 ^ 102;
   break;
  }
 case 256:
  {
   $$sink = $10 >>> 9 & 255 ^ 101;
   break;
  }
 default:
  {
   $25 = $10 >>> 9 & 255;
   if ($11) {
    $$sink = $25 ^ 97;
    break L14;
   } else {
    $$sink = $25 ^ 103;
    break L14;
   }
  }
 } while (0);
 HEAP8[$$3 >> 0] = $$sink;
 return $$023$off0 | 0;
}

function _lzma_properties_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] = 0;
 $13 = HEAP32[$5 >> 2] | 0;
 HEAP32[$9 >> 2] = _decoder_find(HEAP32[$13 >> 2] | 0, HEAP32[$13 + 4 >> 2] | 0) | 0;
 if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$4 >> 2] = 8;
  $38 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 if (!(HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] | 0)) {
  HEAP32[$4 >> 2] = (HEAP32[$8 >> 2] | 0) == 0 ? 0 : 8;
  $38 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 } else {
  HEAP32[$4 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 16 >> 2] & 31]((HEAP32[$5 >> 2] | 0) + 8 | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
  $38 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $38 | 0;
 }
 return 0;
}

function __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $15 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $21 = 0;
  $22 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $21 = 0;
   $22 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = tempRet0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if (($15 | 0) == 34) {
   $23 = -1;
   $24 = -1;
   label = 8;
  } else {
   $25 = $12;
   $26 = $13;
  } else {
   $23 = 0;
   $24 = 0;
   label = 8;
  }
  if ((label | 0) == 8) {
   HEAP32[$2 >> 2] = 4;
   $25 = $23;
   $26 = $24;
  }
  $21 = $26;
  $22 = $25;
 } while (0);
 tempRet0 = $21;
 STACKTOP = sp;
 return $22 | 0;
}

function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $25 = 0, $29 = 0, $7 = 0, $phitmp = 0;
 do if (!$0) {
  if (!(HEAP32[10956] | 0)) $29 = 0; else $29 = _fflush(HEAP32[10956] | 0) | 0;
  $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0;
  if (!$$02325) $$024$lcssa = $29; else {
   $$02327 = $$02325;
   $$02426 = $29;
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) $25 = ___lockfile($$02327) | 0; else $25 = 0;
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) $$1 = ___fflush_unlocked($$02327) | 0 | $$02426; else $$1 = $$02426;
    if ($25 | 0) ___unlockfile($$02327);
    $$02327 = HEAP32[$$02327 + 56 >> 2] | 0;
    if (!$$02327) {
     $$024$lcssa = $$1;
     break;
    } else $$02426 = $$1;
   }
  }
  ___ofl_unlock();
  $$0 = $$024$lcssa;
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
   $$0 = ___fflush_unlocked($0) | 0;
   break;
  }
  $phitmp = (___lockfile($0) | 0) == 0;
  $7 = ___fflush_unlocked($0) | 0;
  if ($phitmp) $$0 = $7; else {
   ___unlockfile($0);
   $$0 = $7;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $17 = 0, $18 = 0, $23 = 0, $25 = 0, $26 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = $0 + 8 | 0;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 127]($8) | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 $17 = HEAP8[$12 + 8 + 3 >> 0] | 0;
 $18 = $17 << 24 >> 24 < 0;
 $23 = $18 ? HEAP32[$12 >> 2] | 0 : $12;
 $25 = $23 + (($18 ? HEAP32[$12 + 4 >> 2] | 0 : $17 & 255) << 2) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $26 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $23, $25) | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $25 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 191;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 4 : $11) : -1;
 $16 = (HEAP32[$1 >> 2] | 0) - $8 >> 2;
 $17 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$17) __ZSt17__throw_bad_allocv();
 do if ($5) {
  HEAP32[$0 >> 2] = $17;
  $29 = $17;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $17;
  if (!$$pr) $29 = $17; else {
   __THREW__ = 0;
   invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0);
   $23 = __THREW__;
   __THREW__ = 0;
   if ($23 & 1) {
    $25 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($25);
   } else {
    $29 = HEAP32[$0 >> 2] | 0;
    break;
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 193;
 HEAP32[$1 >> 2] = $29 + ($16 << 2);
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($13 >>> 2 << 2);
 return;
}

function __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $25 = 0, $29 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 191;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 4 : $11) : -1;
 $16 = (HEAP32[$1 >> 2] | 0) - $8 >> 2;
 $17 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$17) __ZSt17__throw_bad_allocv();
 do if ($5) {
  HEAP32[$0 >> 2] = $17;
  $29 = $17;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $17;
  if (!$$pr) $29 = $17; else {
   __THREW__ = 0;
   invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0);
   $23 = __THREW__;
   __THREW__ = 0;
   if ($23 & 1) {
    $25 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($25);
   } else {
    $29 = HEAP32[$0 >> 2] | 0;
    break;
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 193;
 HEAP32[$1 >> 2] = $29 + ($16 << 2);
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + ($13 >>> 2 << 2);
 return;
}

function __ZNSt3__211__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $2 = 0, $27 = 0, $3 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = $0;
 if (HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0) {
  HEAP32[$4 >> 2] = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2];
  while (1) {
   $17 = HEAP32[$4 >> 2] | 0;
   if (!(HEAP32[HEAP32[$4 >> 2] >> 2] | 0)) break;
   HEAP32[$4 >> 2] = HEAP32[$17 >> 2];
  }
  HEAP32[$5 >> 2] = $17;
  $34 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $34 | 0;
 } else {
  while (1) {
   HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
   $27 = HEAP32[$6 >> 2] | 0;
   if (!((HEAP32[$3 >> 2] | 0) == (HEAP32[HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] >> 2] | 0) ^ 1)) break;
   HEAP32[$1 >> 2] = $27;
   HEAP32[$6 >> 2] = HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2];
  }
  HEAP32[$2 >> 2] = $27;
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2];
  $34 = HEAP32[$5 >> 2] | 0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $12 = 0, $16 = 0, $17 = 0, $22 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 $8 = $0 + 8 | 0;
 $12 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 127]($8) | 0;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 $16 = HEAP8[$12 + 11 >> 0] | 0;
 $17 = $16 << 24 >> 24 < 0;
 $22 = $17 ? HEAP32[$12 >> 2] | 0 : $12;
 $24 = $22 + ($17 ? HEAP32[$12 + 4 >> 2] | 0 : $16 & 255) | 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $25 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, $22, $24) | 0;
 STACKTOP = sp;
 return $25 | 0;
}

function _lzma_check_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $21 = 0, $27 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 switch (HEAP32[$5 >> 2] | 0) {
 case 1:
  {
   $14 = _lzma_crc32(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] | 0) | 0;
   HEAP32[(HEAP32[$4 >> 2] | 0) + 64 >> 2] = $14;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   $21 = (HEAP32[$4 >> 2] | 0) + 64 | 0;
   $27 = _lzma_crc64(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0;
   $31 = (HEAP32[$4 >> 2] | 0) + 64 | 0;
   HEAP32[$31 >> 2] = $27;
   HEAP32[$31 + 4 >> 2] = tempRet0;
   STACKTOP = sp;
   return;
  }
 case 10:
  {
   _lzma_sha256_update(HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$4 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pr = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $22 = 0, $24 = 0, $27 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0 + 4 | 0;
 $5 = (HEAP32[$3 >> 2] | 0) != 191;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $7;
 $9 = (HEAP32[$2 >> 2] | 0) - $8 | 0;
 $11 = $9 << 1;
 $13 = $9 >>> 0 < 2147483647 ? (($11 | 0) == 0 ? 1 : $11) : -1;
 $15 = (HEAP32[$1 >> 2] | 0) - $8 | 0;
 $16 = _realloc($5 ? $7 : 0, $13) | 0;
 if (!$16) __ZSt17__throw_bad_allocv();
 do if ($5) {
  HEAP32[$0 >> 2] = $16;
  $27 = $16;
 } else {
  $$pr = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $16;
  if (!$$pr) $27 = $16; else {
   __THREW__ = 0;
   invoke_vi(HEAP32[$3 >> 2] | 0, $$pr | 0);
   $22 = __THREW__;
   __THREW__ = 0;
   if ($22 & 1) {
    $24 = ___cxa_find_matching_catch_3(0) | 0;
    ___clang_call_terminate($24);
   } else {
    $27 = HEAP32[$0 >> 2] | 0;
    break;
   }
  }
 } while (0);
 HEAP32[$3 >> 2] = 193;
 HEAP32[$1 >> 2] = $27 + $15;
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) + $13;
 return;
}
function _decode_buffer($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $28 = 0, $3 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2];
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$5 >> 2] | 0) >>> 0) break;
  $28 = (HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) | 0;
  HEAP8[$28 >> 0] = (HEAPU8[$28 >> 0] | 0) + (HEAPU8[(HEAP32[$3 >> 2] | 0) + 53 + ((HEAP32[$6 >> 2] | 0) + (HEAPU8[(HEAP32[$3 >> 2] | 0) + 52 >> 0] | 0) & 255) >> 0] | 0);
  $36 = HEAP8[(HEAP32[$4 >> 2] | 0) + (HEAP32[$7 >> 2] | 0) >> 0] | 0;
  $38 = (HEAP32[$3 >> 2] | 0) + 53 | 0;
  $40 = (HEAP32[$3 >> 2] | 0) + 52 | 0;
  $41 = HEAP8[$40 >> 0] | 0;
  HEAP8[$40 >> 0] = $41 + -1 << 24 >> 24;
  HEAP8[$38 + ($41 & 255) >> 0] = $36;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do if (!$0) $$0 = 1; else {
  if ($1 >>> 0 < 128) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  }
  if (!(HEAP32[HEAP32[(___pthread_self_741() | 0) + 188 >> 2] >> 2] | 0)) if (($1 & -128 | 0) == 57216) {
   HEAP8[$0 >> 0] = $1;
   $$0 = 1;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
  if ($1 >>> 0 < 2048) {
   HEAP8[$0 >> 0] = $1 >>> 6 | 192;
   HEAP8[$0 + 1 >> 0] = $1 & 63 | 128;
   $$0 = 2;
   break;
  }
  if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
   HEAP8[$0 >> 0] = $1 >>> 12 | 224;
   HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 & 63 | 128;
   $$0 = 3;
   break;
  }
  if (($1 + -65536 | 0) >>> 0 < 1048576) {
   HEAP8[$0 >> 0] = $1 >>> 18 | 240;
   HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128;
   HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128;
   HEAP8[$0 + 3 >> 0] = $1 & 63 | 128;
   $$0 = 4;
   break;
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 84;
   $$0 = -1;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim12FileCompoundEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim10FileReaderEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim9SubBufferEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim8FileImplEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim7ClusterEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim6BufferEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $20 = 0, $24 = 0, $25 = 0, $3 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($1 | 0) {
  $5 = $0 + 11 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  if ($6 << 24 >> 24 < 0) {
   $15 = HEAP32[$0 + 4 >> 2] | 0;
   $16 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
  } else {
   $15 = $6 & 255;
   $16 = 10;
  }
  if (($16 - $15 | 0) >>> 0 < $1 >>> 0) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $16, $15 + $1 - $16 | 0, $15, $15, 0, 0);
   $20 = HEAP8[$5 >> 0] | 0;
  } else $20 = $6;
  if ($20 << 24 >> 24 < 0) $24 = HEAP32[$0 >> 2] | 0; else $24 = $0;
  __ZNSt3__211char_traitsIcE6assignEPcmc($24 + $15 | 0, $1, $2) | 0;
  $25 = $15 + $1 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $25; else HEAP8[$5 >> 0] = $25;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($24 + $25 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _lzma_decoder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if (!(_is_lclppb_valid_704(HEAP32[$7 >> 2] | 0) | 0)) {
  HEAP32[$4 >> 2] = 11;
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAP32[$9 >> 2] = _lzma_lzma_decoder_create(HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] | 0) | 0;
 if (HEAP32[$9 >> 2] | 0) {
  HEAP32[$4 >> 2] = HEAP32[$9 >> 2];
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  _lzma_decoder_reset(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, HEAP32[$7 >> 2] | 0);
  _lzma_decoder_uncompressed(HEAP32[HEAP32[$5 >> 2] >> 2] | 0, -1, -1);
  HEAP32[$4 >> 2] = 0;
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0;
}

function _fopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $15 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 if (!(_strchr(52260, HEAP8[$1 >> 0] | 0) | 0)) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $$0 = 0;
 } else {
  $7 = ___fmodeflags($1) | 0;
  HEAP32[$vararg_buffer >> 2] = $0;
  HEAP32[$vararg_buffer + 4 >> 2] = $7 | 32768;
  HEAP32[$vararg_buffer + 8 >> 2] = 438;
  $11 = ___syscall_ret(___syscall5(5, $vararg_buffer | 0) | 0) | 0;
  if (($11 | 0) < 0) $$0 = 0; else {
   if ($7 & 524288 | 0) {
    HEAP32[$vararg_buffer3 >> 2] = $11;
    HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
    HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
    ___syscall221(221, $vararg_buffer3 | 0) | 0;
   }
   $15 = ___fdopen($11, $1) | 0;
   if (!$15) {
    HEAP32[$vararg_buffer8 >> 2] = $11;
    ___syscall6(6, $vararg_buffer8 | 0) | 0;
    $$0 = 0;
   } else $$0 = $15;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__210shared_ptrIKcED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!(HEAP32[$8 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$8 + 4 >> 2];
 $14 = HEAP32[$6 >> 2] | 0;
 HEAP32[$5 >> 2] = $14;
 $15 = HEAP32[$5 >> 2] | 0;
 HEAP32[$1 >> 2] = $15 + 4;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = -1;
 $18 = HEAP32[$2 >> 2] | 0;
 $19 = HEAP32[$17 >> 2] | 0;
 HEAP32[$17 >> 2] = $19 + $18;
 HEAP32[$3 >> 2] = $19 + $18;
 if ((HEAP32[$3 >> 2] | 0) == -1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] & 255]($15);
  HEAP8[$4 >> 0] = 1;
 } else HEAP8[$4 >> 0] = 0;
 if (!(HEAP8[$4 >> 0] & 1)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv($14);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) {
  $14 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0;
 } else {
  $14 = $6 & 255;
  $15 = 1;
 }
 if (($15 - $14 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $15, $14 + $2 - $15 | 0, $14, $14, 0, $2, $1); else if ($2 | 0) {
  if ($7) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIwE4copyEPwPKwm($20 + ($14 << 2) | 0, $1, $2) | 0;
  $21 = $14 + $2 | 0;
  if ((HEAP8[$5 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$5 >> 0] = $21;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($20 + ($21 << 2) | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function _lzma_lzma_lclppb_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre_trunc = 0, $2 = 0, $3 = 0, $4 = 0, $44 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 5 | 0;
 $3 = sp;
 $4 = sp + 4 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP8[$4 >> 0] = $1;
 if ((HEAPU8[$4 >> 0] | 0 | 0) > 224) {
  HEAP8[$2 >> 0] = 1;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $44 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $44 | 0;
 } else {
  HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] = (HEAPU8[$4 >> 0] | 0 | 0) / 45 | 0;
  HEAP8[$4 >> 0] = (HEAPU8[$4 >> 0] | 0) - (((HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] | 0) * 9 | 0) * 5 | 0);
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = (HEAPU8[$4 >> 0] | 0 | 0) / 9 | 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] = (HEAPU8[$4 >> 0] | 0) - ((HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) * 9 | 0);
  HEAP8[$2 >> 0] = ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0) | 0) >>> 0 > 4 & 1;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $44 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $44 | 0;
 }
 return 0;
}

function _lzma_next_filter_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $16 = 0, $26 = 0, $3 = 0, $4 = 0, $43 = 0, $5 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 $8 = HEAP32[$6 >> 2] | 0;
 $16 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 if ((HEAP32[$8 >> 2] | 0) != (HEAP32[$16 >> 2] | 0) ? 1 : (HEAP32[$8 + 4 >> 2] | 0) != (HEAP32[$16 + 4 >> 2] | 0)) {
  HEAP32[$3 >> 2] = 11;
  $43 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 $26 = HEAP32[$6 >> 2] | 0;
 if ((HEAP32[$26 >> 2] | 0) == -1 ? (HEAP32[$26 + 4 >> 2] | 0) == -1 : 0) {
  HEAP32[$3 >> 2] = 0;
  $43 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 } else {
  HEAP32[$3 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 40 >> 2] & 31](HEAP32[HEAP32[$4 >> 2] >> 2] | 0, HEAP32[$5 >> 2] | 0, 0, HEAP32[$6 >> 2] | 0) | 0;
  $43 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $43 | 0;
 }
 return 0;
}

function __ZNK3zim7Cluster11getBlobSizeENS_12blob_index_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $28 = 0, $3 = 0, $34 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 24 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp;
 $7 = sp + 8 | 0;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 $11 = (__ZNK12REAL_TYPEDEFIjEcvjEv($1) | 0) + 1 | 0;
 HEAP32[$4 >> 2] = $8 + 16;
 HEAP32[$5 >> 2] = $11;
 $16 = (HEAP32[HEAP32[$4 >> 2] >> 2] | 0) + (HEAP32[$5 >> 2] << 3) | 0;
 $18 = HEAP32[$16 >> 2] | 0;
 $21 = HEAP32[$16 + 4 >> 2] | 0;
 $23 = __ZNK12REAL_TYPEDEFIjEcvjEv($1) | 0;
 HEAP32[$2 >> 2] = $8 + 16;
 HEAP32[$3 >> 2] = $23;
 $28 = (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + (HEAP32[$3 >> 2] << 3) | 0;
 $34 = _i64Subtract($18 | 0, $21 | 0, HEAP32[$28 >> 2] | 0, HEAP32[$28 + 4 >> 2] | 0) | 0;
 __ZN3zim7zsize_tC2Ey($6, $34, tempRet0);
 $36 = $6;
 tempRet0 = HEAP32[$36 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$36 >> 2] | 0;
}

function __ZN3zim12BufferReaderC2ENSt3__210shared_ptrIKNS_6BufferEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 28 | 0;
 $3 = sp + 24 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$9 >> 2] = $0;
 $10 = HEAP32[$9 >> 2] | 0;
 __ZN3zim6ReaderC2Ev($10);
 HEAP32[$10 >> 2] = 43372;
 HEAP32[$7 >> 2] = $10 + 4;
 HEAP32[$8 >> 2] = $1;
 $12 = HEAP32[$7 >> 2] | 0;
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$8 >> 2] >> 2];
 HEAP32[$12 + 4 >> 2] = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2];
 if (!(HEAP32[$12 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 HEAP32[$6 >> 2] = HEAP32[$12 + 4 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $27 = HEAP32[$2 >> 2] | 0;
 HEAP32[$3 >> 2] = 1;
 $28 = HEAP32[$3 >> 2] | 0;
 $29 = HEAP32[$27 >> 2] | 0;
 HEAP32[$27 >> 2] = $29 + $28;
 HEAP32[sp + 20 >> 2] = $29 + $28;
 STACKTOP = sp;
 return;
}

function _lzma_next_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $21 = 0, $23 = 0, $3 = 0, $4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 52 | 0;
 $3 = sp + 48 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $13 = HEAP32[$2 >> 2] | 0;
 if (HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[$13 + 24 >> 2] & 127](HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[$3 >> 2] | 0); else _lzma_free(HEAP32[$13 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 $21 = HEAP32[$2 >> 2] | 0;
 dest = $4;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $23 = $4 + 8 | 0;
 HEAP32[$23 >> 2] = -1;
 HEAP32[$23 + 4 >> 2] = -1;
 HEAP32[$4 + 16 >> 2] = 0;
 dest = $21;
 src = $4;
 stop = dest + 48 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $15 = 0, $17 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $3 = 0, $6 = 0, $9 = 0;
 $3 = $1 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 $6 = $0 + 8 | 0;
 $9 = HEAP32[$6 >> 2] | 0;
 do if ((HEAP32[$0 + 12 >> 2] | 0) - $9 >> 2 >>> 0 > $2 >>> 0) {
  $$pre$phiZ2D = $6;
  $21 = $9;
 } else {
  __THREW__ = 0;
  invoke_vii(122, $6 | 0, $2 + 1 | 0);
  $15 = __THREW__;
  __THREW__ = 0;
  if (!($15 & 1)) {
   $$pre$phiZ2D = $6;
   $21 = HEAP32[$6 >> 2] | 0;
   break;
  }
  $17 = ___cxa_find_matching_catch_2() | 0;
  if ($1 | 0) __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($1);
  ___resumeException($17 | 0);
 } while (0);
 $22 = HEAP32[$21 + ($2 << 2) >> 2] | 0;
 if ($22 | 0) {
  $24 = $22 + 4 | 0;
  $25 = HEAP32[$24 >> 2] | 0;
  HEAP32[$24 >> 2] = $25 + -1;
  if (!$25) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$22 >> 2] | 0) + 8 >> 2] & 255]($22);
 }
 HEAP32[(HEAP32[$$pre$phiZ2D >> 2] | 0) + ($2 << 2) >> 2] = $1;
 return;
}

function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i$i = 0, $12 = 0, $14 = 0, $20 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 $5 = __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0;
 $6 = $2 + 11 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $12 = $7 << 24 >> 24 < 0 ? HEAP32[$2 + 4 >> 2] | 0 : $7 & 255;
 __THREW__ = 0;
 invoke_viiii(26, $0 | 0, $1 | 0, $5 | 0, $12 + $5 | 0);
 $14 = __THREW__;
 __THREW__ = 0;
 if (!($14 & 1)) {
  __THREW__ = 0;
  invoke_iiii(47, $0 | 0, ((HEAP8[$6 >> 0] | 0) < 0 ? HEAP32[$2 >> 2] | 0 : $2) | 0, $12 | 0) | 0;
  $20 = __THREW__;
  __THREW__ = 0;
  if (!($20 & 1)) return;
 }
 $22 = ___cxa_find_matching_catch_2() | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 ___resumeException($22 | 0);
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 8 | 0;
 $5 = $4 + 3 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 if ($7) $10 = (HEAP32[$4 >> 2] & 2147483647) + -1 | 0; else $10 = 1;
 do if ($10 >>> 0 < $2 >>> 0) {
  if ($7) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $6 & 255;
  __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEmmmmmmPKw($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($7) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIwE4moveEPwPKwm($13, $1, $2) | 0;
  HEAP32[$3 >> 2] = 0;
  __ZNSt3__211char_traitsIwE6assignERwRKw($13 + ($2 << 2) | 0, $3);
  if ((HEAP8[$5 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$5 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $26 = 0;
  $27 = 0;
 } else {
  $7 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $10 = _strtoll_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $11 = tempRet0;
  $13 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$13) HEAP32[(___errno_location() | 0) >> 2] = $7;
  if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if (($13 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $23 = ($11 | 0) > 0 | ($11 | 0) == 0 & $10 >>> 0 > 0;
   $28 = $23 ? -1 : 0;
   $29 = $23 ? 2147483647 : -2147483648;
  } else {
   $28 = $10;
   $29 = $11;
  } else {
   HEAP32[$2 >> 2] = 4;
   $28 = 0;
   $29 = 0;
  }
  $26 = $29;
  $27 = $28;
 }
 tempRet0 = $26;
 STACKTOP = sp;
 return $27 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = tempRet0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 65535 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12 & 65535;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = tempRet0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$1 = 0, $12 = 0, $13 = 0, $15 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 do if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0;
 } else {
  if ((HEAP8[$0 >> 0] | 0) == 45) {
   HEAP32[$2 >> 2] = 4;
   $$1 = 0;
   break;
  }
  $9 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $12 = _strtoull_l($0, $4, $3, __ZNSt3__26__clocEv() | 0) | 0;
  $13 = tempRet0;
  $15 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$15) HEAP32[(___errno_location() | 0) >> 2] = $9;
  do if ((HEAP32[$4 >> 2] | 0) == ($1 | 0)) if ($13 >>> 0 > 0 | ($13 | 0) == 0 & $12 >>> 0 > 4294967295 | ($15 | 0) == 34) {
   HEAP32[$2 >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $12;
   break;
  } else {
   HEAP32[$2 >> 2] = 4;
   $$0 = 0;
  } while (0);
  $$1 = $$0;
 } while (0);
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $15 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) {
  $14 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0;
 } else {
  $14 = $5 & 255;
  $15 = 10;
 }
 if (($15 - $14 | 0) >>> 0 < $2 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $15, $14 + $2 - $15 | 0, $14, $14, 0, $2, $1); else if ($2 | 0) {
  if ($6) $20 = HEAP32[$0 >> 2] | 0; else $20 = $0;
  __ZNSt3__211char_traitsIcE4copyEPcPKcm($20 + $14 | 0, $1, $2) | 0;
  $21 = $14 + $2 | 0;
  if ((HEAP8[$4 >> 0] | 0) < 0) HEAP32[$0 + 4 >> 2] = $21; else HEAP8[$4 >> 0] = $21;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($20 + $21 | 0, $3);
 }
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNK3zim12BufferReader10get_bufferENS_8offset_tENS_7zsize_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $11 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy1 = sp + 24 | 0;
 $$byval_copy = sp + 16 | 0;
 $4 = sp + 36 | 0;
 $5 = sp + 32 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 $11 = HEAP32[HEAP32[$4 >> 2] >> 2] | 0;
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$7 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy1 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 FUNCTION_TABLE_viiii[$14 & 31]($0, $11, $$byval_copy, $$byval_copy1);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$sroa$speculated = 0, $14 = 0, $15 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0;
 if ((-17 - $1 | 0) >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) $23 = HEAP32[$0 >> 2] | 0; else $23 = $0;
 if ($1 >>> 0 < 2147483623) {
  $14 = $2 + $1 | 0;
  $15 = $1 << 1;
  $$sroa$speculated = $14 >>> 0 < $15 >>> 0 ? $15 : $14;
  $20 = $$sroa$speculated >>> 0 < 11 ? 11 : $$sroa$speculated + 16 & -16;
 } else $20 = -17;
 $21 = __Znwm($20) | 0;
 if ($4 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21, $23, $4) | 0;
 $25 = $3 - $5 - $4 | 0;
 if ($25 | 0) __ZNSt3__211char_traitsIcE4copyEPcPKcm($21 + $4 + $6 | 0, $23 + $4 + $5 | 0, $25) | 0;
 if (($1 | 0) != 10) __ZdlPv($23);
 HEAP32[$0 >> 2] = $21;
 HEAP32[$0 + 8 >> 2] = $20 | -2147483648;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$pn = 0, $12 = 0, $13 = 0, $15 = 0, $22 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIwE3eofEv() | 0;
 $3 = $0 + 12 | 0;
 $4 = $0 + 16 | 0;
 $$0 = $1;
 $$023 = 0;
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) break;
  $6 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  if ($6 >>> 0 < $7 >>> 0) {
   $12 = $7 - $6 >> 2;
   $13 = $2 - $$023 | 0;
   $15 = ($13 | 0) < ($12 | 0) ? $13 : $12;
   __ZNSt3__211char_traitsIwE4copyEPwPKwm($$0, $6, $15) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + ($15 << 2);
   $$1 = $$0 + ($15 << 2) | 0;
   $$pn = $15;
  } else {
   $22 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 127]($0) | 0;
   if (($22 | 0) == -1) break;
   HEAP32[$$0 >> 2] = __ZNSt3__211char_traitsIwE12to_char_typeEj($22) | 0;
   $$1 = $$0 + 4 | 0;
   $$pn = 1;
  }
  $$0 = $$1;
  $$023 = $$pn + $$023 | 0;
 }
 return $$023 | 0;
}

function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $33 = 0, $7 = 0, $8 = 0, label = 0;
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($1) | 0)) label = 3; else {
  $20 = $0 & 255;
  $21 = $0 & 255;
  if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) label = 10; else {
   $26 = $1 + 20 | 0;
   $27 = HEAP32[$26 >> 2] | 0;
   if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$26 >> 2] = $27 + 1;
    HEAP8[$27 >> 0] = $20;
    $33 = $21;
   } else label = 10;
  }
  if ((label | 0) == 10) $33 = ___overflow($1, $0) | 0;
  ___unlockfile($1);
  $$0 = $33;
 }
 do if ((label | 0) == 3) {
  $7 = $0 & 255;
  $8 = $0 & 255;
  if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
   $13 = $1 + 20 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
    HEAP32[$13 >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $7;
    $$0 = $8;
    break;
   }
  }
  $$0 = ___overflow($1, $0) | 0;
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $13 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $10 = (HEAP32[$0 + 8 >> 2] & 2147483647) + -1 | 0; else $10 = 10;
 do if ($10 >>> 0 < $2 >>> 0) {
  if ($6) $23 = HEAP32[$0 + 4 >> 2] | 0; else $23 = $5 & 255;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0, $10, $2 - $10 | 0, $23, 0, $23, $2, $1);
 } else {
  if ($6) $13 = HEAP32[$0 >> 2] | 0; else $13 = $0;
  __ZNSt3__211char_traitsIcE4moveEPcPKcm($13, $1, $2) | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($13 + $2 | 0, $3);
  if ((HEAP8[$4 >> 0] | 0) < 0) {
   HEAP32[$0 + 4 >> 2] = $2;
   break;
  } else {
   HEAP8[$4 >> 0] = $2;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phiZ2D = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $5 = $1 + 4 | 0;
 $7 = (HEAP32[$3 >> 2] | 0) - $2 | 0;
 $11 = (HEAP32[$5 >> 2] | 0) + (0 - ($7 >> 2) << 2) | 0;
 HEAP32[$5 >> 2] = $11;
 if (($7 | 0) > 0) {
  _memcpy($11 | 0, $2 | 0, $7 | 0) | 0;
  $$pre$phiZ2D = $5;
  $15 = HEAP32[$5 >> 2] | 0;
 } else {
  $$pre$phiZ2D = $5;
  $15 = $11;
 }
 $14 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$$pre$phiZ2D >> 2] = $14;
 $16 = $1 + 8 | 0;
 $17 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$16 >> 2];
 HEAP32[$16 >> 2] = $17;
 $19 = $0 + 8 | 0;
 $20 = $1 + 12 | 0;
 $21 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = HEAP32[$20 >> 2];
 HEAP32[$20 >> 2] = $21;
 HEAP32[$1 >> 2] = HEAP32[$$pre$phiZ2D >> 2];
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$021 = 0, $$1 = 0, $12 = 0, $13 = 0, $18 = 0, $3 = 0, $4 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = $1;
 $4 = sp;
 $6 = $2 - $3 | 0;
 if ($6 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($6 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $6;
  $$021 = $0;
 } else {
  $12 = $6 + 16 & -16;
  $13 = __Znwm($12) | 0;
  HEAP32[$0 >> 2] = $13;
  HEAP32[$0 + 8 >> 2] = $12 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $6;
  $$021 = $13;
 }
 $18 = $2 - $3 | 0;
 $$0 = $1;
 $$1 = $$021;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  __ZNSt3__211char_traitsIcE6assignERcRKc($$1, $$0);
  $$0 = $$0 + 1 | 0;
  $$1 = $$1 + 1 | 0;
 }
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$021 + $18 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62400) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 16 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62400) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 24 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 16 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 24 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$023 = 0, $$1 = 0, $$pn = 0, $11 = 0, $12 = 0, $14 = 0, $21 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 __ZNSt3__211char_traitsIcE3eofEv() | 0;
 $3 = $0 + 12 | 0;
 $4 = $0 + 16 | 0;
 $$0 = $1;
 $$023 = 0;
 while (1) {
  if (($$023 | 0) >= ($2 | 0)) break;
  $6 = HEAP32[$3 >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  if ($6 >>> 0 < $7 >>> 0) {
   $11 = $7 - $6 | 0;
   $12 = $2 - $$023 | 0;
   $14 = ($12 | 0) < ($11 | 0) ? $12 : $11;
   __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $6, $14) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $14;
   $$1 = $$0 + $14 | 0;
   $$pn = $14;
  } else {
   $21 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 40 >> 2] & 127]($0) | 0;
   if (($21 | 0) == -1) break;
   HEAP8[$$0 >> 0] = __ZNSt3__211char_traitsIcE12to_char_typeEi($21) | 0;
   $$1 = $$0 + 1 | 0;
   $$pn = 1;
  }
  $$0 = $$1;
  $$023 = $$pn + $$023 | 0;
 }
 return $$023 | 0;
}

function __ZNKSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 40792;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _dict_put($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre_trunc = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $32 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 5 | 0;
 $3 = sp;
 $4 = sp + 4 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP8[$4 >> 0] = $1;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) == (HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0)) {
  HEAP8[$2 >> 0] = 1;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $32 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $32 | 0;
 }
 $12 = HEAP8[$4 >> 0] | 0;
 $14 = HEAP32[HEAP32[$3 >> 2] >> 2] | 0;
 $16 = (HEAP32[$3 >> 2] | 0) + 4 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = $17 + 1;
 HEAP8[$14 + $17 >> 0] = $12;
 if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > (HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0) >>> 0) HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP8[$2 >> 0] = 0;
 $$pre_trunc = HEAP8[$2 >> 0] | 0;
 $32 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $32 | 0;
}

function _lzma_simple_props_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $19 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 do if (!(HEAP32[$8 >> 2] | 0)) HEAP32[$4 >> 2] = 0; else {
  if ((HEAP32[$8 >> 2] | 0) != 4) {
   HEAP32[$4 >> 2] = 8;
   break;
  }
  HEAP32[$9 >> 2] = _lzma_alloc(4, HEAP32[$6 >> 2] | 0) | 0;
  if (!(HEAP32[$9 >> 2] | 0)) {
   HEAP32[$4 >> 2] = 5;
   break;
  }
  $19 = _read32le_744(HEAP32[$7 >> 2] | 0) | 0;
  HEAP32[HEAP32[$9 >> 2] >> 2] = $19;
  $24 = HEAP32[$9 >> 2] | 0;
  if (!(HEAP32[HEAP32[$9 >> 2] >> 2] | 0)) _lzma_free($24, HEAP32[$6 >> 2] | 0); else HEAP32[HEAP32[$5 >> 2] >> 2] = $24;
  HEAP32[$4 >> 2] = 0;
 } while (0);
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1;
 do if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
  HEAP8[$1 + 52 >> 0] = 1;
  $10 = $1 + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  if (!$11) {
   HEAP32[$10 >> 2] = $2;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 36 >> 2] = 1;
   if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  if (($11 | 0) != ($2 | 0)) {
   $30 = $1 + 36 | 0;
   HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $21 = $1 + 24 | 0;
  $22 = HEAP32[$21 >> 2] | 0;
  if (($22 | 0) == 2) {
   HEAP32[$21 >> 2] = $4;
   $27 = $4;
  } else $27 = $22;
  if (($27 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) HEAP8[$1 + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNKSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 41200;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($8, HEAP32[HEAP32[$1 >> 2] >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE7destroyEPNS_11__tree_nodeISB_PvEE($8, HEAP32[HEAP32[$1 >> 2] >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62400) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $5 + 20 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 __ZNKSt3__28ios_base6getlocEv($$byval_copy, $3);
 __THREW__ = 0;
 $7 = invoke_iii(32, $$byval_copy | 0, 62368) | 0;
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($$byval_copy);
  ___resumeException($12 | 0);
 } else {
  __ZNSt3__26localeD2Ev($$byval_copy);
  HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $5 + 20 | 0, $1, $$byval_copy, $4, $7);
  STACKTOP = sp;
  return HEAP32[$1 >> 2] | 0;
 }
 return 0;
}

function __ZNKSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 41176;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNKSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 41152;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function _lzma_next_filter_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $23 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $46 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if ((HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0) != (HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] | 0)) _lzma_next_end(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0);
 HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2];
 $23 = HEAP32[$5 >> 2] | 0;
 $28 = HEAP32[$23 + 4 >> 2] | 0;
 $31 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
 HEAP32[$31 >> 2] = HEAP32[$23 >> 2];
 HEAP32[$31 + 4 >> 2] = $28;
 if (!(HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0)) {
  $46 = 0;
  STACKTOP = sp;
  return $46 | 0;
 }
 $46 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] & 63](HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $46 | 0;
}

function __ZNKSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 41056;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function __ZNKSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $2 = sp + 32 | 0;
 $3 = sp + 28 | 0;
 $4 = sp + 24 | 0;
 $5 = sp + 20 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 12 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$10 >> 2] = $1;
 $11 = HEAP32[$9 >> 2] | 0;
 HEAP32[$7 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$8 >> 2] = 41080;
 if ((HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0) != (HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0)) {
  $26 = 0;
  STACKTOP = sp;
  return $26 | 0;
 }
 HEAP32[$3 >> 2] = $11 + 12;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
 $26 = HEAP32[$6 >> 2] | 0;
 STACKTOP = sp;
 return $26 | 0;
}

function _lzma_delta_props_decode($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $25 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$8 >> 2] = $3;
 if ((HEAP32[$8 >> 2] | 0) != 1) {
  HEAP32[$4 >> 2] = 8;
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 HEAP32[$9 >> 2] = _lzma_alloc(32, HEAP32[$6 >> 2] | 0) | 0;
 if (!(HEAP32[$9 >> 2] | 0)) {
  HEAP32[$4 >> 2] = 5;
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  HEAP32[HEAP32[$9 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$9 >> 2] | 0) + 4 >> 2] = (HEAPU8[HEAP32[$7 >> 2] >> 0] | 0) + 1;
  HEAP32[HEAP32[$5 >> 2] >> 2] = HEAP32[$9 >> 2];
  HEAP32[$4 >> 2] = 0;
  $25 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0;
}

function __ZN3zim4FileC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 20 | 0;
 $2 = sp + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $6 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = HEAP32[$2 >> 2] | 0;
 $8 = __Znwm(368) | 0;
 __THREW__ = 0;
 invoke_vii(78, $8 | 0, HEAP32[$3 >> 2] | 0);
 $10 = __THREW__;
 __THREW__ = 0;
 if ($10 & 1) {
  $12 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$4 >> 2] = $12;
  HEAP32[sp + 4 >> 2] = tempRet0;
  __ZdlPv($8);
  ___resumeException(HEAP32[$4 >> 2] | 0);
 } else {
  HEAP32[$6 >> 2] = 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
  __ZNSt3__210shared_ptrIN3zim8FileImplEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE($7, $8, $$byval_copy);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 16;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 16;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $22 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $2 = sp + 44 | 0;
 $3 = sp + 40 | 0;
 $4 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $9 = sp + 16 | 0;
 $11 = sp + 8 | 0;
 $12 = sp + 4 | 0;
 $13 = sp;
 $14 = sp + 52 | 0;
 HEAP32[$13 >> 2] = $0;
 $15 = HEAP32[$13 >> 2] | 0;
 HEAP32[$12 >> 2] = $15 + 12;
 HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
 $18 = HEAP32[$11 >> 2] | 0;
 HEAP32[sp + 32 >> 2] = $14;
 HEAP32[sp + 28 >> 2] = $18;
 HEAP32[$2 >> 2] = $15 + 12;
 HEAP32[sp + 48 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$4 >> 2] = $15;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 $22 = HEAP32[$3 >> 2] | 0;
 HEAP32[sp + 20 >> 2] = $14;
 HEAP32[$9 >> 2] = $22;
 HEAP32[sp + 12 >> 2] = 1;
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 __ZdlPv(HEAP32[$7 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _lzma_vli_size($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $20 = 0, $26 = 0, $28 = 0, $3 = 0, $34 = 0, $4 = 0, $44 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 $4 = sp + 8 | 0;
 $5 = $3;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $1;
 $9 = $3;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 if ($14 >>> 0 > 2147483647 | ($14 | 0) == 2147483647 & (HEAP32[$9 >> 2] | 0) >>> 0 > 4294967295) {
  HEAP32[$2 >> 2] = 0;
  $44 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $44 | 0;
 }
 HEAP32[$4 >> 2] = 0;
 do {
  $20 = $3;
  $26 = _bitshift64Lshr(HEAP32[$20 >> 2] | 0, HEAP32[$20 + 4 >> 2] | 0, 7) | 0;
  $28 = $3;
  HEAP32[$28 >> 2] = $26;
  HEAP32[$28 + 4 >> 2] = tempRet0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
  $34 = $3;
 } while ((HEAP32[$34 >> 2] | 0) != 0 | (HEAP32[$34 + 4 >> 2] | 0) != 0);
 HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
 $44 = HEAP32[$2 >> 2] | 0;
 STACKTOP = sp;
 return $44 | 0;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $3 = 0, $6 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $3 = sp;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) $$2 = 1; else if (!$1) $$2 = 0; else {
  $6 = ___dynamic_cast($1, 42720, 42704, 0) | 0;
  if (!$6) $$2 = 0; else {
   dest = $3 + 4 | 0;
   stop = dest + 52 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 8 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 31]($6, $3, HEAP32[$2 >> 2] | 0, 1);
   if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
    HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2];
    $$0 = 1;
   } else $$0 = 0;
   $$2 = $$0;
  }
 }
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); else if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
  if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
   $13 = $1 + 20 | 0;
   if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
    HEAP32[$1 + 32 >> 2] = $3;
    HEAP32[$13 >> 2] = $2;
    $19 = $1 + 40 | 0;
    HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1;
    if ((HEAP32[$1 + 36 >> 2] | 0) == 1) if ((HEAP32[$1 + 24 >> 2] | 0) == 2) HEAP8[$1 + 54 >> 0] = 1;
    HEAP32[$1 + 44 >> 2] = 4;
    break;
   }
  }
  if (($3 | 0) == 1) HEAP32[$1 + 32 >> 2] = 1;
 } while (0);
 return;
}

function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $1 = 0, $10 = 0, $19 = 0, $22 = 0, $6 = 0, label = 0;
 $1 = $0;
 L1 : do if (!($1 & 3)) {
  $$015$lcssa = $0;
  label = 5;
 } else {
  $$01518 = $0;
  $22 = $1;
  while (1) {
   if (!(HEAP8[$$01518 >> 0] | 0)) {
    $$pn = $22;
    break L1;
   }
   $6 = $$01518 + 1 | 0;
   $22 = $6;
   if (!($22 & 3)) {
    $$015$lcssa = $6;
    label = 5;
    break;
   } else $$01518 = $6;
  }
 } while (0);
 if ((label | 0) == 5) {
  $$0 = $$015$lcssa;
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0;
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) $$0 = $$0 + 4 | 0; else break;
  }
  if (!(($10 & 255) << 24 >> 24)) $$1$lcssa = $$0; else {
   $$pn29 = $$0;
   while (1) {
    $19 = $$pn29 + 1 | 0;
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19;
     break;
    } else $$pn29 = $19;
   }
  }
  $$pn = $$1$lcssa;
 }
 return $$pn - $1 | 0;
}

function __ZNSt3__28ios_base5clearEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$index = 0, $$index2 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $5 = (HEAP32[$0 + 24 >> 2] | 0) == 0;
 HEAP32[$0 + 16 >> 2] = $5 & 1 | $1;
 if (!(HEAP32[$0 + 20 >> 2] & ($5 & 1 | $1))) {
  STACKTOP = sp;
  return;
 }
 $14 = ___cxa_allocate_exception(16) | 0;
 __ZNSt3__217iostream_categoryEv() | 0;
 HEAP32[$2 >> 2] = 1;
 HEAP32[$2 + 4 >> 2] = 44932;
 __THREW__ = 0;
 invoke_viii(29, $14 | 0, 52830, $2 | 0);
 $15 = __THREW__;
 __THREW__ = 0;
 if ($15 & 1) {
  $20 = ___cxa_find_matching_catch_2() | 0;
  $21 = tempRet0;
  ___cxa_free_exception($14 | 0);
  $$index = $20;
  $$index2 = $21;
 } else {
  __THREW__ = 0;
  invoke_viii(11, $14 | 0, 41376, 93);
  __THREW__ = 0;
  $18 = ___cxa_find_matching_catch_2() | 0;
  $$index = $18;
  $$index2 = tempRet0;
 }
 ___resumeException($$index | 0);
}

function _open($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $14 = 0, $18 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $2 = sp;
 if (!($1 & 4194368)) $$0 = 0; else {
  HEAP32[$2 >> 2] = $varargs;
  $10 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $11 = HEAP32[$10 >> 2] | 0;
  HEAP32[$2 >> 2] = $10 + 4;
  $$0 = $11;
 }
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = $1 | 32768;
 HEAP32[$vararg_buffer + 8 >> 2] = $$0;
 $14 = ___syscall5(5, $vararg_buffer | 0) | 0;
 if (!(($1 & 524288 | 0) == 0 | ($14 | 0) < 0)) {
  HEAP32[$vararg_buffer3 >> 2] = $14;
  HEAP32[$vararg_buffer3 + 4 >> 2] = 2;
  HEAP32[$vararg_buffer3 + 8 >> 2] = 1;
  ___syscall221(221, $vararg_buffer3 | 0) | 0;
 }
 $18 = ___syscall_ret($14) | 0;
 STACKTOP = sp;
 return $18 | 0;
}

function _decoder_find($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $19 = 0, $2 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp;
 $4 = sp + 8 | 0;
 $5 = $3;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$5 + 4 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >>> 0 >= 9) {
   label = 6;
   break;
  }
  $13 = 33296 + ((HEAP32[$4 >> 2] | 0) * 24 | 0) | 0;
  $19 = $3;
  $28 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$13 >> 2] | 0) == (HEAP32[$19 >> 2] | 0) ? (HEAP32[$13 + 4 >> 2] | 0) == (HEAP32[$19 + 4 >> 2] | 0) : 0) {
   label = 4;
   break;
  }
  HEAP32[$4 >> 2] = $28 + 1;
 }
 if ((label | 0) == 4) {
  HEAP32[$2 >> 2] = 33296 + ($28 * 24 | 0);
  $31 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 } else if ((label | 0) == 6) {
  HEAP32[$2 >> 2] = 0;
  $31 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 return 0;
}

function __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE7destroyEPNS_11__tree_nodeIS9_PvEE($8, HEAP32[HEAP32[$1 >> 2] >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $9 = 0;
 L1 : do if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $9 = HEAP32[$0 + 12 >> 2] | 0;
  $10 = $0 + 16 + ($9 << 3) | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3);
  if (($9 | 0) > 1) {
   $13 = $1 + 54 | 0;
   $$0 = $0 + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3);
    if (HEAP8[$13 >> 0] | 0) break L1;
    $$0 = $$0 + 8 | 0;
   } while ($$0 >>> 0 < $10 >>> 0);
  }
 } while (0);
 return;
}

function _index_stream_size($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $13 = 0, $17 = 0, $21 = 0, $27 = 0, $28 = 0, $29 = 0, $35 = 0, $41 = 0, $43 = 0, $45 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $6 = sp + 16 | 0;
 $7 = sp + 8 | 0;
 $8 = sp;
 $9 = $6;
 HEAP32[$9 >> 2] = $0;
 HEAP32[$9 + 4 >> 2] = $1;
 $13 = $7;
 HEAP32[$13 >> 2] = $2;
 HEAP32[$13 + 4 >> 2] = $3;
 $17 = $8;
 HEAP32[$17 >> 2] = $4;
 HEAP32[$17 + 4 >> 2] = $5;
 $21 = $6;
 $27 = _i64Add(12, 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0;
 $28 = tempRet0;
 $29 = $7;
 $35 = $8;
 $41 = _index_size_664(HEAP32[$29 >> 2] | 0, HEAP32[$29 + 4 >> 2] | 0, HEAP32[$35 >> 2] | 0, HEAP32[$35 + 4 >> 2] | 0) | 0;
 $43 = _i64Add($27 | 0, $28 | 0, $41 | 0, tempRet0 | 0) | 0;
 $45 = _i64Add($43 | 0, tempRet0 | 0, 12, 0) | 0;
 STACKTOP = sp;
 return $45 | 0;
}

function _lz_decoder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $18 = 0, $2 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_next_end((HEAP32[$4 >> 2] | 0) + 48 | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[HEAP32[$4 >> 2] >> 2] | 0, HEAP32[$3 >> 2] | 0);
 $18 = (HEAP32[$4 >> 2] | 0) + 24 | 0;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 24 + 16 >> 2] | 0) {
  FUNCTION_TABLE_vii[HEAP32[$18 + 16 >> 2] & 127](HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  $27 = HEAP32[$4 >> 2] | 0;
  $28 = HEAP32[$3 >> 2] | 0;
  _lzma_free($27, $28);
  STACKTOP = sp;
  return;
 } else {
  _lzma_free(HEAP32[$18 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  $27 = HEAP32[$4 >> 2] | 0;
  $28 = HEAP32[$3 >> 2] | 0;
  _lzma_free($27, $28);
  STACKTOP = sp;
  return;
 }
}

function _x86_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 20 | 0;
 $5 = sp + 16 | 0;
 $6 = sp + 12 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 8 | 0;
 $9 = sp + 4 | 0;
 $10 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 HEAP32[$8 >> 2] = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 26, 8, 5, 1, HEAP8[$7 >> 0] & 1) | 0;
 if (HEAP32[$8 >> 2] | 0) {
  $28 = HEAP32[$8 >> 2] | 0;
  STACKTOP = sp;
  return $28 | 0;
 }
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 HEAP32[$10 >> 2] = HEAP32[(HEAP32[$9 >> 2] | 0) + 56 >> 2];
 HEAP32[HEAP32[$10 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] = -5;
 $28 = HEAP32[$8 >> 2] | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $13 = 0, $20 = 0, $21 = 0, $5 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $5 = sp;
 HEAP32[$4 >> 2] = $2;
 $8 = ___uselocale(HEAP32[$0 + 8 >> 2] | 0) | 0;
 $9 = _wcrtomb($5, 0, $1) | 0;
 if ($8 | 0) ___uselocale($8) | 0;
 L4 : do if (($9 + 1 | 0) >>> 0 < 2) $$019 = 2; else {
  $13 = $9 + -1 | 0;
  if ($13 >>> 0 > ($3 - (HEAP32[$4 >> 2] | 0) | 0) >>> 0) $$019 = 1; else {
   $$0 = $5;
   $$018 = $13;
   while (1) {
    if (!$$018) {
     $$019 = 0;
     break L4;
    }
    $20 = HEAP8[$$0 >> 0] | 0;
    $21 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $21 + 1;
    HEAP8[$21 >> 0] = $20;
    $$0 = $$0 + 1 | 0;
    $$018 = $$018 + -1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$019 | 0;
}

function _fstat($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer6 = sp + 40 | 0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 32 | 0;
 $2 = $1;
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = $2;
 $3 = ___syscall197(197, $vararg_buffer | 0) | 0;
 if (($3 | 0) == -9) {
  HEAP32[$vararg_buffer2 >> 2] = $0;
  HEAP32[$vararg_buffer2 + 4 >> 2] = 1;
  if ((___syscall221(221, $vararg_buffer2 | 0) | 0) < 0) label = 3; else {
   ___procfdname($vararg_buffer2, $0);
   HEAP32[$vararg_buffer6 >> 2] = $vararg_buffer2;
   HEAP32[$vararg_buffer6 + 4 >> 2] = $2;
   $$0 = ___syscall_ret(___syscall195(195, $vararg_buffer6 | 0) | 0) | 0;
  }
 } else label = 3;
 if ((label | 0) == 3) $$0 = ___syscall_ret($3) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lzma_stream_header_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 do if (_memcmp(HEAP32[$4 >> 2] | 0, 49553, 6) | 0) HEAP32[$2 >> 2] = 7; else {
  HEAP32[$5 >> 2] = _lzma_crc32((HEAP32[$4 >> 2] | 0) + 6 | 0, 2, 0) | 0;
  $12 = HEAP32[$5 >> 2] | 0;
  if (($12 | 0) != (_read32le((HEAP32[$4 >> 2] | 0) + 6 + 2 | 0) | 0)) {
   HEAP32[$2 >> 2] = 9;
   break;
  }
  if (_stream_flags_decode(HEAP32[$3 >> 2] | 0, (HEAP32[$4 >> 2] | 0) + 6 | 0) | 0) {
   HEAP32[$2 >> 2] = 8;
   break;
  } else {
   $24 = (HEAP32[$3 >> 2] | 0) + 8 | 0;
   HEAP32[$24 >> 2] = -1;
   HEAP32[$24 + 4 >> 2] = -1;
   HEAP32[$2 >> 2] = 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZNSt3__211__stdoutbufIwE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = $0 + 36 | 0;
 $4 = $0 + 40 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1;
 $7 = $0 + 32 | 0;
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0;
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0;
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0;
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($13 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__211__stdoutbufIcE4syncEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $1 = 0, $13 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp;
 $3 = $0 + 36 | 0;
 $4 = $0 + 40 | 0;
 $5 = $1 + 8 | 0;
 $6 = $1;
 $7 = $0 + 32 | 0;
 L1 : while (1) {
  $8 = HEAP32[$3 >> 2] | 0;
  $13 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 31]($8, HEAP32[$4 >> 2] | 0, $1, $5, $2) | 0;
  $15 = (HEAP32[$2 >> 2] | 0) - $6 | 0;
  if ((_fwrite($1, 1, $15, HEAP32[$7 >> 2] | 0) | 0) != ($15 | 0)) {
   $$2 = -1;
   break;
  }
  switch ($13 | 0) {
  case 1:
   break;
  case 2:
   {
    $$2 = -1;
    break L1;
    break;
   }
  default:
   {
    label = 4;
    break L1;
   }
  }
 }
 if ((label | 0) == 4) $$2 = ((_fflush(HEAP32[$7 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$2 | 0;
}

function __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseERw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $16 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 __THREW__ = 0;
 $4 = invoke_iii(32, $3 | 0, 62408) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 if (!($5 & 1)) {
  __THREW__ = 0;
  $10 = invoke_ii(HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0, $4 | 0) | 0;
  $11 = __THREW__;
  __THREW__ = 0;
  if (!($11 & 1)) {
   HEAP32[$2 >> 2] = $10;
   __THREW__ = 0;
   invoke_vii(HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $4 | 0);
   $16 = __THREW__;
   __THREW__ = 0;
   if (!($16 & 1)) {
    __ZNSt3__26localeD2Ev($3);
    STACKTOP = sp;
    return;
   }
  }
 }
 $18 = ___cxa_find_matching_catch_2() | 0;
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($18 | 0);
}

function __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseERc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $11 = 0, $16 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 __THREW__ = 0;
 $4 = invoke_iii(32, $3 | 0, 62384) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 if (!($5 & 1)) {
  __THREW__ = 0;
  $10 = invoke_ii(HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0, $4 | 0) | 0;
  $11 = __THREW__;
  __THREW__ = 0;
  if (!($11 & 1)) {
   HEAP8[$2 >> 0] = $10;
   __THREW__ = 0;
   invoke_vii(HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0, $0 | 0, $4 | 0);
   $16 = __THREW__;
   __THREW__ = 0;
   if (!($16 & 1)) {
    __ZNSt3__26localeD2Ev($3);
    STACKTOP = sp;
    return;
   }
  }
 }
 $18 = ___cxa_find_matching_catch_2() | 0;
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($18 | 0);
}

function __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$4 >> 2] = (HEAP32[$5 >> 2] | 0) + 4;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($8, HEAP32[HEAP32[$1 >> 2] >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _inflateEnd($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $34 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (_inflateStateCheck(HEAP32[$2 >> 2] | 0) | 0) {
  HEAP32[$1 >> 2] = -2;
  $34 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $34 | 0;
 }
 HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2];
 if (HEAP32[(HEAP32[$3 >> 2] | 0) + 56 >> 2] | 0) FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127](HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 56 >> 2] | 0);
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] & 127](HEAP32[(HEAP32[$2 >> 2] | 0) + 40 >> 2] | 0, HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] | 0);
 HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] = 0;
 HEAP32[$1 >> 2] = 0;
 $34 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $34 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $16 = 0, $18 = 0, $19 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $6 = sp;
 $7 = sp + 116 | 0;
 $8 = sp + 104 | 0;
 $9 = sp + 112 | 0;
 HEAP32[$7 >> 2] = $6 + 100;
 __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $6, $7, $3, $4, $5);
 $11 = $8;
 HEAP32[$11 >> 2] = 0;
 HEAP32[$11 + 4 >> 2] = 0;
 HEAP32[$9 >> 2] = $6;
 $16 = __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0;
 $18 = ___uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $19 = _mbsrtowcs($1, $9, $16, $8) | 0;
 if ($18 | 0) ___uselocale($18) | 0;
 if (($19 | 0) == -1) __ZNSt3__221__throw_runtime_errorEPKc(54113); else {
  HEAP32[$2 >> 2] = $1 + ($19 << 2);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 288 | 0, $5, $4, 0) | 0) - $11 | 0;
 if (($17 | 0) < 288) HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $11 = 0, $17 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $17 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $11, $11 + 288 | 0, $5, $4, 0) | 0) - $11 | 0;
 if (($17 | 0) < 288) HEAP32[$1 >> 2] = (($17 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $6 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0;
 while (1) {
  if ((HEAPU8[34080 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 4;
   break;
  }
  $6 = $$016 + 1 | 0;
  if (($6 | 0) == 87) {
   $$115$ph = 87;
   label = 5;
   break;
  } else $$016 = $6;
 }
 if ((label | 0) == 4) if (!$$016) $$012$lcssa = 34176; else {
  $$115$ph = $$016;
  label = 5;
 }
 if ((label | 0) == 5) {
  $$01214 = 34176;
  $$115 = $$115$ph;
  while (1) {
   $$113 = $$01214;
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0;
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0;
   if (!$$115) {
    $$012$lcssa = $$113;
    break;
   } else $$01214 = $$113;
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0;
}

function __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0 >> 2] = 45072;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIwE3eofEv() | 0;
 HEAP8[$0 + 52 >> 0] = 0;
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 __THREW__ = 0;
 invoke_vii($11 | 0, $0 | 0, $3 | 0);
 $13 = __THREW__;
 __THREW__ = 0;
 if ($13 & 1) {
  $15 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($15 | 0);
 } else {
  __ZNSt3__26localeD2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $13 = 0, $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0 >> 2] = 45136;
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = __ZNSt3__211char_traitsIcE3eofEv() | 0;
 HEAP8[$0 + 52 >> 0] = 0;
 $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 __THREW__ = 0;
 invoke_vii($11 | 0, $0 | 0, $3 | 0);
 $13 = __THREW__;
 __THREW__ = 0;
 if ($13 & 1) {
  $15 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($15 | 0);
 } else {
  __ZNSt3__26localeD2Ev($3);
  STACKTOP = sp;
  return;
 }
}

function _inflateStateCheck($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $31 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (HEAP32[$2 >> 2] | 0) if (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) if (HEAP32[(HEAP32[$2 >> 2] | 0) + 36 >> 2] | 0) {
  HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2];
  if (HEAP32[$3 >> 2] | 0) if ((HEAP32[HEAP32[$3 >> 2] >> 2] | 0) == (HEAP32[$2 >> 2] | 0)) if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 >= 16180) if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 <= 16211) {
   HEAP32[$1 >> 2] = 0;
   $31 = HEAP32[$1 >> 2] | 0;
   STACKTOP = sp;
   return $31 | 0;
  }
  HEAP32[$1 >> 2] = 1;
  $31 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $31 | 0;
 }
 HEAP32[$1 >> 2] = 1;
 $31 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return $31 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $10 + 168 | 0, $5, $4, 0) | 0) - $10 | 0;
 if (($16 | 0) < 168) HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $10 = 0, $16 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 $7 = $0 + 8 | 0;
 $10 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$7 >> 2] >> 2] & 127]($7) | 0;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $16 = (__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($2, $$byval_copy, $10, $10 + 168 | 0, $5, $4, 0) | 0) - $10 | 0;
 if (($16 | 0) < 168) HEAP32[$1 >> 2] = (($16 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $17 = 0, $3 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0);
 HEAP32[$0 >> 2] = 44944;
 HEAP32[$0 + 32 >> 2] = $1;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 __THREW__ = 0;
 $6 = invoke_iii(32, $3 | 0, 62680) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 if ($7 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
  ___resumeException($17 | 0);
 } else {
  __ZNSt3__26localeD2Ev($3);
  HEAP32[$0 + 36 >> 2] = $6;
  HEAP32[$0 + 40 >> 2] = $2;
  HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1;
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $17 = 0, $3 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0);
 HEAP32[$0 >> 2] = 45008;
 HEAP32[$0 + 32 >> 2] = $1;
 __ZNSt3__26localeC2ERKS0_($3, $0 + 4 | 0);
 __THREW__ = 0;
 $6 = invoke_iii(32, $3 | 0, 62672) | 0;
 $7 = __THREW__;
 __THREW__ = 0;
 if ($7 & 1) {
  $17 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26localeD2Ev($3);
  __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
  ___resumeException($17 | 0);
 } else {
  __ZNSt3__26localeD2Ev($3);
  HEAP32[$0 + 36 >> 2] = $6;
  HEAP32[$0 + 40 >> 2] = $2;
  HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] & 127]($6) | 0) & 1;
  STACKTOP = sp;
  return;
 }
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 21 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 $9 = HEAP32[$7 >> 2] | 0;
 HEAP32[$4 >> 2] = $9;
 $10 = HEAP32[$4 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 20 >> 0] | 0;
 HEAP32[sp + 16 >> 2] = $5;
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEEC2ERKSE_($10, $5);
 HEAP32[$9 + 12 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[$8 >> 2] & 1);
 HEAP32[$9 + 16 >> 2] = 0;
 HEAP32[$9 + 20 >> 2] = 0;
 HEAP32[$9 + 24 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 21 | 0;
 $7 = sp + 8 | 0;
 $8 = sp + 4 | 0;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$8 >> 2] = $1;
 $9 = HEAP32[$7 >> 2] | 0;
 HEAP32[$4 >> 2] = $9;
 $10 = HEAP32[$4 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 20 >> 0] | 0;
 HEAP32[sp + 16 >> 2] = $5;
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEEC2ERKSF_($10, $5);
 HEAP32[$9 + 12 >> 2] = (HEAP32[$8 >> 2] | 0) + (HEAP32[$8 >> 2] & 1);
 HEAP32[$9 + 16 >> 2] = 0;
 HEAP32[$9 + 20 >> 2] = 0;
 HEAP32[$9 + 24 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6BufferEEC2IS2_EERKNS_8weak_ptrIT_EENS_9enable_ifIXsr14is_convertibleIPS7_PS3_EE5valueENS4_5__natEE4typeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $17 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[HEAP32[$4 >> 2] >> 2];
 $15 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0;
 if (HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0) $17 = __ZNSt3__219__shared_weak_count4lockEv($15) | 0; else $17 = $15;
 HEAP32[$5 + 4 >> 2] = $17;
 if (!(HEAP32[$5 + 4 >> 2] | 0)) {
  $21 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$21 >> 2] = 0;
  __ZNSt3__212bad_weak_ptrC2Ev($21);
  ___cxa_throw($21 | 0, 42576, 158);
 } else {
  STACKTOP = sp;
  return;
 }
}

function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $1 & 255;
 HEAP8[$2 >> 0] = $3;
 $4 = $0 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (!$5) if (!(___towrite($0) | 0)) {
  $12 = HEAP32[$4 >> 2] | 0;
  label = 4;
 } else $$0 = -1; else {
  $12 = $5;
  label = 4;
 }
 do if ((label | 0) == 4) {
  $9 = $0 + 20 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $13 = $1 & 255;
   if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
    HEAP32[$9 >> 2] = $10 + 1;
    HEAP8[$10 >> 0] = $3;
    $$0 = $13;
    break;
   }
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, $2, 1) | 0) == 1) $$0 = HEAPU8[$2 >> 0] | 0; else $$0 = -1;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtold_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtof_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0.0, $$0$ph = 0.0, $$1 = 0.0, $11 = 0, $3 = 0, $6 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if (($0 | 0) == ($1 | 0)) {
  HEAP32[$2 >> 2] = 4;
  $$1 = 0.0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  HEAP32[(___errno_location() | 0) >> 2] = 0;
  $9 = +_strtod_l($0, $3, __ZNSt3__26__clocEv() | 0);
  $11 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  if (!$11) HEAP32[(___errno_location() | 0) >> 2] = $6;
  if ((HEAP32[$3 >> 2] | 0) == ($1 | 0)) if (($11 | 0) == 34) {
   $$0$ph = $9;
   label = 6;
  } else $$0 = $9; else {
   $$0$ph = 0.0;
   label = 6;
  }
  if ((label | 0) == 6) {
   HEAP32[$2 >> 2] = 4;
   $$0 = $$0$ph;
  }
  $$1 = $$0;
 }
 STACKTOP = sp;
 return +$$1;
}

function _literal_init_701($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $6 = sp + 8 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = 1 << (HEAP32[$4 >> 2] | 0) + (HEAP32[$5 >> 2] | 0);
 HEAP32[$7 >> 2] = 0;
 while (1) {
  if ((HEAP32[$7 >> 2] | 0) >>> 0 >= (HEAP32[$6 >> 2] | 0) >>> 0) break;
  HEAP32[$8 >> 2] = 0;
  while (1) {
   if ((HEAP32[$8 >> 2] | 0) >>> 0 >= 768) break;
   HEAP16[(HEAP32[$3 >> 2] | 0) + ((HEAP32[$7 >> 2] | 0) * 1536 | 0) + (HEAP32[$8 >> 2] << 1) >> 1] = 1024;
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + 1;
  }
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function _ungetc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$pr = 0, $14 = 0, $16 = 0, $19 = 0, $7 = 0, $8 = 0, label = 0;
 do if (($0 | 0) == -1) $$1 = -1; else {
  if ((HEAP32[$1 + 76 >> 2] | 0) > -1) $16 = ___lockfile($1) | 0; else $16 = 0;
  $7 = $1 + 4 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if (!$8) {
   ___toread($1) | 0;
   $$pr = HEAP32[$7 >> 2] | 0;
   if ($$pr | 0) {
    $14 = $$pr;
    label = 6;
   }
  } else {
   $14 = $8;
   label = 6;
  }
  if ((label | 0) == 6) if ($14 >>> 0 > ((HEAP32[$1 + 44 >> 2] | 0) + -8 | 0) >>> 0) {
   $19 = $14 + -1 | 0;
   HEAP32[$7 >> 2] = $19;
   HEAP8[$19 >> 0] = $0;
   HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -17;
   if (!$16) {
    $$1 = $0;
    break;
   }
   ___unlockfile($1);
   $$1 = $0;
   break;
  }
  if (!$16) $$1 = -1; else {
   ___unlockfile($1);
   $$1 = -1;
  }
 } while (0);
 return $$1 | 0;
}

function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8988465674311579538646525.0e283;
  $5 = ($1 | 0) > 2046;
  $7 = $1 + -2046 | 0;
  $$0 = $5 ? $3 * 8988465674311579538646525.0e283 : $3;
  $$020 = $5 ? (($7 | 0) < 1023 ? $7 : 1023) : $1 + -1023 | 0;
 } else if (($1 | 0) < -1022) {
  $10 = $0 * 2.2250738585072014e-308;
  $12 = ($1 | 0) < -2044;
  $14 = $1 + 2044 | 0;
  $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10;
  $$020 = $12 ? (($14 | 0) > -1022 ? $14 : -1022) : $1 + 1022 | 0;
 } else {
  $$0 = $0;
  $$020 = $1;
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0;
 $18 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $17;
 HEAP32[tempDoublePtr + 4 >> 2] = $18;
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 $4 = $0 + 11 | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 << 24 >> 24 < 0;
 if ($6) $10 = HEAP32[$0 + 4 >> 2] | 0; else $10 = $5 & 255;
 do if ($10 >>> 0 < $1 >>> 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEmc($0, $1 - $10 | 0, $2) | 0; else if ($6) {
  $14 = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($14, $3);
  HEAP32[$0 + 4 >> 2] = $1;
  break;
 } else {
  HEAP8[$3 >> 0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($0 + $1 | 0, $3);
  HEAP8[$4 >> 0] = $1;
  break;
 } while (0);
 STACKTOP = sp;
 return;
}

function ___procfdname($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02324 = 0, $$027 = 0, $$126 = 0, $$225 = 0, dest = 0, src = 0, stop = 0, $$02324$looptemp = 0;
 dest = $0;
 src = 52245;
 stop = dest + 15 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!$1) {
  HEAP8[$0 + 14 >> 0] = 48;
  HEAP8[$0 + 15 >> 0] = 0;
 } else {
  $$027 = $1;
  $$126 = 14;
  while (1) {
   $$126 = $$126 + 1 | 0;
   if ($$027 >>> 0 < 10) break; else $$027 = ($$027 >>> 0) / 10 | 0;
  }
  HEAP8[$0 + $$126 >> 0] = 0;
  $$02324 = $1;
  $$225 = $$126;
  do {
   $$02324$looptemp = $$02324;
   $$02324 = ($$02324 >>> 0) / 10 | 0;
   $$225 = $$225 + -1 | 0;
   HEAP8[$0 + $$225 >> 0] = $$02324$looptemp - ($$02324 * 10 | 0) | 48;
  } while ($$02324$looptemp >>> 0 >= 10);
 }
 return;
}

function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709551616.0, $1);
    $$016 = $9;
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0;
   } else {
    $$016 = $0;
    $storemerge = 0;
   }
   HEAP32[$1 >> 2] = $storemerge;
   $$0 = $$016;
   break;
  }
 case 2047:
  {
   $$0 = $0;
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022;
   HEAP32[tempDoublePtr >> 2] = $2;
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
  }
 }
 return +$$0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EOS7_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 $6 = HEAP32[$4 >> 2] | 0;
 $7 = HEAP32[$5 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $10 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAP32[$2 >> 2] = $6 + 8;
 HEAP32[$3 >> 2] = $10;
 $11 = HEAP32[$2 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$11 + 4 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EOS8_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 $6 = HEAP32[$4 >> 2] | 0;
 $7 = HEAP32[$5 >> 2] | 0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$6 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $10 = (HEAP32[$5 >> 2] | 0) + 8 | 0;
 HEAP32[$2 >> 2] = $6 + 8;
 HEAP32[$3 >> 2] = $10;
 $11 = HEAP32[$2 >> 2] | 0;
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 HEAP32[$11 + 4 >> 2] = HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2];
 HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNK3zim7Article7getDataEy($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $14 = 0, $20 = 0, $22 = 0, $26 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 8 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $1;
 $7 = $5;
 HEAP32[$7 >> 2] = $2;
 HEAP32[$7 + 4 >> 2] = $3;
 $11 = HEAP32[$4 >> 2] | 0;
 $12 = __ZNK3zim7Article14getArticleSizeEv($11) | 0;
 $14 = $5;
 $20 = _i64Subtract($12 | 0, tempRet0 | 0, HEAP32[$14 >> 2] | 0, HEAP32[$14 + 4 >> 2] | 0) | 0;
 $22 = $6;
 HEAP32[$22 >> 2] = $20;
 HEAP32[$22 + 4 >> 2] = tempRet0;
 $26 = $5;
 $32 = $6;
 __ZNK3zim7Article7getDataEyy($0, $11, HEAP32[$26 >> 2] | 0, HEAP32[$26 + 4 >> 2] | 0, HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function ___fseeko_unlocked($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$019 = 0, $10 = 0, $12 = 0, label = 0;
 if (($2 | 0) == 1) $$019 = $1 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) | 0; else $$019 = $1;
 $10 = $0 + 20 | 0;
 $12 = $0 + 28 | 0;
 if ((HEAP32[$10 >> 2] | 0) >>> 0 > (HEAP32[$12 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0;
  if (!(HEAP32[$10 >> 2] | 0)) $$0 = -1; else label = 5;
 } else label = 5;
 if ((label | 0) == 5) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, $$019, $2) | 0) < 0) $$0 = -1; else {
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] & -17;
   $$0 = 0;
  }
 }
 return $$0 | 0;
}

function __ZNK3zim7Article8getTitleEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZNK3zim7Article9getDirentEv($4, HEAP32[$3 >> 2] | 0);
 HEAP32[$2 >> 2] = $4;
 $10 = __ZNK3zim6Dirent8getTitleEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_vii(55, $0 | 0, $10 | 0);
 $11 = __THREW__;
 __THREW__ = 0;
 if ($11 & 1) {
  $13 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$5 >> 2] = $13;
  HEAP32[sp >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($4);
  ___resumeException(HEAP32[$5 >> 2] | 0);
 } else {
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($4);
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $vararg_buffer = sp + 1024 | 0;
 $2 = sp;
 $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 $6 = __ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc(_strerror_r($1, $2, 1024) | 0, $2) | 0;
 if (!(HEAP8[$6 >> 0] | 0)) {
  HEAP32[$vararg_buffer >> 2] = $1;
  _snprintf($2, 1024, 55399, $vararg_buffer) | 0;
  $$0 = $2;
 } else $$0 = $6;
 HEAP32[(___errno_location() | 0) >> 2] = $4;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, $$0, __ZNSt3__211char_traitsIcE6lengthEPKc($$0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim7Article6getUrlEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZNK3zim7Article9getDirentEv($4, HEAP32[$3 >> 2] | 0);
 HEAP32[$2 >> 2] = $4;
 $10 = __ZNK3zim6Dirent6getUrlEv(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 __THREW__ = 0;
 invoke_vii(55, $0 | 0, $10 | 0);
 $11 = __THREW__;
 __THREW__ = 0;
 if ($11 & 1) {
  $13 = ___cxa_find_matching_catch_2() | 0;
  HEAP32[$5 >> 2] = $13;
  HEAP32[sp >> 2] = tempRet0;
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($4);
  ___resumeException(HEAP32[$5 >> 2] | 0);
 } else {
  __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($4);
  STACKTOP = sp;
  return;
 }
}

function __ZN3zim16fromLittleEndianIyEET_PKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$1 >> 2] = $0;
 $4 = $2;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= 8) break;
  $17 = _bitshift64Shl(HEAPU8[(HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) >> 0] | 0 | 0, 0, HEAP32[$3 >> 2] << 3 | 0) | 0;
  $19 = $2;
  $26 = HEAP32[$19 + 4 >> 2] | tempRet0;
  $27 = $2;
  HEAP32[$27 >> 2] = HEAP32[$19 >> 2] | $17;
  HEAP32[$27 + 4 >> 2] = $26;
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 $33 = $2;
 tempRet0 = HEAP32[$33 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$33 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 40640, 40672) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($0, $$byval_copy, $$byval_copy1, $3, $4, $5, 53790, 53798) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _fclose($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $15 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $7 = 0, $8 = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) $29 = ___lockfile($0) | 0; else $29 = 0;
 ___unlist_locked_file($0);
 $7 = (HEAP32[$0 >> 2] & 1 | 0) != 0;
 if (!$7) {
  $8 = ___ofl_lock() | 0;
  $10 = HEAP32[$0 + 52 >> 2] | 0;
  $$pre = $0 + 56 | 0;
  if ($10 | 0) HEAP32[$10 + 56 >> 2] = HEAP32[$$pre >> 2];
  $15 = HEAP32[$$pre >> 2] | 0;
  if ($15 | 0) HEAP32[$15 + 52 >> 2] = $10;
  if ((HEAP32[$8 >> 2] | 0) == ($0 | 0)) HEAP32[$8 >> 2] = $15;
  ___ofl_unlock();
 }
 $21 = _fflush($0) | 0;
 $25 = FUNCTION_TABLE_ii[HEAP32[$0 + 12 >> 2] & 127]($0) | 0 | $21;
 $27 = HEAP32[$0 + 92 >> 2] | 0;
 if ($27 | 0) _free($27);
 if ($7) {
  if ($29 | 0) ___unlockfile($0);
 } else _free($0);
 return $25 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 HEAP32[$$byval_copy1 >> 2] = HEAP32[$7 >> 2];
 $10 = __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($0, $$byval_copy, $$byval_copy1, $3, $4, $5) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNSt3__26chrono12steady_clock3nowEv() {
 var $0 = 0, $1 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __THREW__ = 0;
 $1 = invoke_iii(52, 1, $0 | 0) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 do if (!($2 & 1)) if (!$1) {
  $8 = HEAP32[$0 >> 2] | 0;
  $12 = HEAP32[$0 + 4 >> 2] | 0;
  $15 = ___muldi3($8 | 0, (($8 | 0) < 0) << 31 >> 31 | 0, 1e9, 0) | 0;
  $17 = _i64Add($15 | 0, tempRet0 | 0, $12 | 0, (($12 | 0) < 0) << 31 >> 31 | 0) | 0;
  STACKTOP = sp;
  return $17 | 0;
 } else {
  $6 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  __THREW__ = 0;
  invoke_vii(87, $6 | 0, 52303);
  __THREW__ = 0;
  break;
 } while (0);
 $19 = ___cxa_find_matching_catch_3(0) | 0;
 ___clang_call_terminate($19);
 return 0;
}

function __ZN3zim8FileImpl9getOffsetEPKNS_6ReaderEm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $11 = 0, $13 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy = sp + 16 | 0;
 $3 = sp + 8 | 0;
 $5 = sp + 28 | 0;
 $6 = sp + 24 | 0;
 $7 = sp;
 HEAP32[sp + 32 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 $8 = HEAP32[$5 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($7, HEAP32[$6 >> 2] << 3, 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$7 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$7 + 4 >> 2];
 $11 = __ZNK3zim6Reader4readIyEET_NS_8offset_tE($8, $$byval_copy) | 0;
 __ZN3zim8offset_tC2Ey($3, $11, tempRet0);
 $13 = $3;
 tempRet0 = HEAP32[$13 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$13 >> 2] | 0;
}

function _lzma_delta_coder_memusage($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 if (!(HEAP32[$3 >> 2] | 0)) label = 5; else if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) label = 5; else if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 < 1) label = 5; else if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) >>> 0 > 256) label = 5; else {
  $22 = $1;
  HEAP32[$22 >> 2] = 312;
  HEAP32[$22 + 4 >> 2] = 0;
 }
 if ((label | 0) == 5) {
  $18 = $1;
  HEAP32[$18 >> 2] = -1;
  HEAP32[$18 + 4 >> 2] = -1;
 }
 $26 = $1;
 tempRet0 = HEAP32[$26 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$26 >> 2] | 0;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0, tempRet0, 0) | 0) ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$029 = 0, $$030 = 0, $$034 = 0, $$sink = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0;
 $5 = $3;
 $6 = $0 + 8 | 0;
 $$029 = 0;
 $$030 = 0;
 $$034 = $2;
 L1 : while (1) {
  if (($$034 | 0) == ($3 | 0) | $$029 >>> 0 >= $4 >>> 0) break;
  $12 = ___uselocale(HEAP32[$6 >> 2] | 0) | 0;
  $13 = _mbrlen($$034, $5 - $$034 | 0, $1) | 0;
  if ($12 | 0) ___uselocale($12) | 0;
  switch ($13 | 0) {
  case -2:
  case -1:
   {
    break L1;
    break;
   }
  case 0:
   {
    $$sink = 1;
    break;
   }
  default:
   $$sink = $13;
  }
  $$029 = $$029 + 1 | 0;
  $$030 = $$sink + $$030 | 0;
  $$034 = $$034 + $$sink | 0;
 }
 return $$030 | 0;
}

function __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $6 = 0, label = 0;
 L1 : do switch ((HEAP32[$2 + 4 >> 2] & 176) << 24 >> 24) {
 case 16:
  {
   $6 = HEAP8[$0 >> 0] | 0;
   switch ($6 << 24 >> 24) {
   case 43:
   case 45:
    {
     $$0 = $0 + 1 | 0;
     break L1;
     break;
    }
   default:
    {}
   }
   if (($1 - $0 | 0) > 1 & $6 << 24 >> 24 == 48) {
    switch (HEAP8[$0 + 1 >> 0] | 0) {
    case 88:
    case 120:
     break;
    default:
     {
      label = 7;
      break L1;
     }
    }
    $$0 = $0 + 2 | 0;
   } else label = 7;
   break;
  }
 case 32:
  {
   $$0 = $1;
   break;
  }
 default:
  label = 7;
 } while (0);
 if ((label | 0) == 7) $$0 = $0;
 return $$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) $$0 = $8 + 2e3 | 0; else $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8;
  HEAP32[$1 >> 2] = $$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) {
  if (($8 | 0) < 69) $$0 = $8 + 2e3 | 0; else $$0 = ($8 | 0) < 100 ? $8 + 1900 | 0 : $8;
  HEAP32[$1 >> 2] = $$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZN3zim6Dirent10setArticleEtNS_15cluster_index_tENS_12blob_index_tE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp + 10 | 0;
 $6 = sp + 8 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP16[$5 >> 1] = $1;
 $8 = HEAP32[$4 >> 2] | 0;
 HEAP16[$6 >> 1] = HEAP16[$8 >> 1] | 0;
 HEAP32[$7 >> 2] = 0;
 if ((HEAPU16[$6 >> 1] | 0 | 0) != (HEAP32[$7 >> 2] | 0)) __Z15_on_assert_failItiEvPKcS1_S1_T_T0_S1_i(50949, 50958, 50961, HEAP16[$6 >> 1] | 0, HEAP32[$7 >> 2] | 0, 50963, 138);
 HEAP16[$8 >> 1] = HEAP16[$5 >> 1] | 0;
 HEAP32[$8 + 8 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$8 + 12 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__26locale5__impD2Ev($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 47344;
 $1 = $0 + 8 | 0;
 $2 = $0 + 12 | 0;
 $$0 = 0;
 while (1) {
  $4 = HEAP32[$1 >> 2] | 0;
  if ($$0 >>> 0 >= (HEAP32[$2 >> 2] | 0) - $4 >> 2 >>> 0) break;
  $11 = HEAP32[$4 + ($$0 << 2) >> 2] | 0;
  if ($11 | 0) {
   $13 = $11 + 4 | 0;
   $14 = HEAP32[$13 >> 2] | 0;
   HEAP32[$13 >> 2] = $14 + -1;
   if (!$14) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$11 >> 2] | 0) + 8 >> 2] & 255]($11);
  }
  $$0 = $$0 + 1 | 0;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 144 | 0);
 __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($1);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function _free_properties($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = 0;
 while (1) {
  if ((HEAP32[$4 >> 2] | 0) >>> 0 >= 4) break;
  _lzma_free(HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$4 >> 2] << 4) + 8 >> 2] | 0, HEAP32[$3 >> 2] | 0);
  $20 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$4 >> 2] << 4) | 0;
  HEAP32[$20 >> 2] = -1;
  HEAP32[$20 + 4 >> 2] = -1;
  HEAP32[(HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0) + (HEAP32[$4 >> 2] << 4) + 8 >> 2] = 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return;
}

function __ZNK3zim12BufferReader6offsetEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $11 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 16 | 0;
 $1 = sp + 28 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 24 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
 $8 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0;
 __ZN3zim8offset_tC2Ey($4, 0, 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 __ZN3zim8offset_tC2Ey($2, FUNCTION_TABLE_iii[$11 & 63]($8, $$byval_copy) | 0, 0);
 $14 = $2;
 tempRet0 = HEAP32[$14 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$14 >> 2] | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 12 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function _lzma_check_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $16 = 0, $18 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 switch (HEAP32[$3 >> 2] | 0) {
 case 1:
  {
   HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2];
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   $11 = (HEAP32[$2 >> 2] | 0) + 64 | 0;
   $16 = HEAP32[$11 + 4 >> 2] | 0;
   $18 = HEAP32[$2 >> 2] | 0;
   HEAP32[$18 >> 2] = HEAP32[$11 >> 2];
   HEAP32[$18 + 4 >> 2] = $16;
   STACKTOP = sp;
   return;
  }
 case 10:
  {
   _lzma_sha256_finish(HEAP32[$2 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNKSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE10__root_ptrEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE10__root_ptrEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 if ($3 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($3 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $10 = $3 + 16 & -16;
  $11 = __Znwm($10) | 0;
  HEAP32[$0 >> 2] = $11;
  HEAP32[$0 + 8 >> 2] = $10 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $11;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$4 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $4);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 + -1 | 0) >>> 0 < 31 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 3) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 366 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8 + -1; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 13 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8 + -1; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZN3zim8FileImpl16getClusterOffsetENS_15cluster_index_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $16 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp;
 $6 = sp + 8 | 0;
 HEAP32[$6 >> 2] = $0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$4 >> 2] = $7 + 156;
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $14 = __ZN3zim8FileImpl9getOffsetEPKNS_6ReaderEm($7, HEAP32[HEAP32[$2 >> 2] >> 2] | 0, HEAP32[$1 >> 2] | 0) | 0;
 $16 = $5;
 HEAP32[$16 >> 2] = $14;
 HEAP32[$16 + 4 >> 2] = tempRet0;
 $20 = $5;
 tempRet0 = HEAP32[$20 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$20 >> 2] | 0;
}

function _dict_get($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
 $11 = (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) - 1 | 0;
 if ((HEAP32[$3 >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0) >>> 0) {
  $21 = 0;
  $20 = $11 + $21 | 0;
  $22 = $5 + $20 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 $21 = HEAP32[(HEAP32[$2 >> 2] | 0) + 16 >> 2] | 0;
 $20 = $11 + $21 | 0;
 $22 = $5 + $20 | 0;
 $23 = HEAP8[$22 >> 0] | 0;
 STACKTOP = sp;
 return $23 | 0;
}

function _crc32_z($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 do if (!(HEAP32[$5 >> 2] | 0)) HEAP32[$3 >> 2] = 0; else {
  HEAP32[$7 >> 2] = 1;
  $12 = HEAP32[$4 >> 2] | 0;
  $13 = HEAP32[$5 >> 2] | 0;
  $14 = HEAP32[$6 >> 2] | 0;
  if (HEAP8[$7 >> 0] | 0) {
   HEAP32[$3 >> 2] = _crc32_little($12, $13, $14) | 0;
   break;
  } else {
   HEAP32[$3 >> 2] = _crc32_big($12, $13, $14) | 0;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return HEAP32[$3 >> 2] | 0;
}

function __ZNSt3__214__num_put_base12__format_intEPcPKcbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$013 = 0, $$2 = 0, $$2$ph = 0, $$sink = 0, $10 = 0;
 if (!($3 & 2048)) $$0 = $0; else {
  HEAP8[$0 >> 0] = 43;
  $$0 = $0 + 1 | 0;
 }
 if (!($3 & 512)) $$2$ph = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$2$ph = $$0 + 1 | 0;
 }
 $$013 = $1;
 $$2 = $$2$ph;
 while (1) {
  $10 = HEAP8[$$013 >> 0] | 0;
  if (!($10 << 24 >> 24)) break;
  HEAP8[$$2 >> 0] = $10;
  $$013 = $$013 + 1 | 0;
  $$2 = $$2 + 1 | 0;
 }
 switch ($3 & 74) {
 case 64:
  {
   $$sink = 111;
   break;
  }
 case 8:
  {
   $$sink = $3 >>> 9 & 32 ^ 120;
   break;
  }
 default:
  $$sink = $2 ? 100 : 117;
 }
 HEAP8[$$2 >> 0] = $$sink;
 return;
}

function __ZNSt3__211__stdoutbufIwE6xsputnEPKwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do if (!(HEAP8[$0 + 44 >> 0] | 0)) {
  $$0 = 0;
  $$011 = $1;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) {
    $$010 = $$0;
    break L1;
   }
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$$011 >> 2] | 0) | 0;
   $15 = FUNCTION_TABLE_iii[$12 & 63]($0, $14) | 0;
   if (($15 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) {
    $$010 = $$0;
    break L1;
   }
   $$0 = $$0 + 1 | 0;
   $$011 = $$011 + 4 | 0;
  }
 } else $$010 = _fwrite($1, 4, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; while (0);
 return $$010 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 1) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 7 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 61 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 60 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZN3zim10FileheaderC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $2 = 0, $20 = 0, $27 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP16[$2 >> 1] = HEAP16[24134] | 0;
 HEAP16[$2 + 2 >> 1] = HEAP16[31404] | 0;
 __ZN3zim4UuidC2Ev($2 + 4 | 0);
 HEAP32[$2 + 20 >> 2] = 0;
 $9 = $2 + 24 | 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$9 + 4 >> 2] = 0;
 $14 = $2 + 32 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$14 + 4 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 $20 = $2 + 56 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP32[$20 + 4 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = -1;
 HEAP32[$2 + 68 >> 2] = -1;
 $27 = $2 + 72 | 0;
 HEAP32[$27 >> 2] = -1;
 HEAP32[$27 + 4 >> 2] = -1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__211__stdoutbufIcE6xsputnEPKcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $12 = 0, $14 = 0, $15 = 0;
 L1 : do if (!(HEAP8[$0 + 44 >> 0] | 0)) {
  $$0 = 0;
  $$011 = $1;
  while (1) {
   if (($$0 | 0) >= ($2 | 0)) {
    $$010 = $$0;
    break L1;
   }
   $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0;
   $14 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$$011 >> 0] | 0) | 0;
   $15 = FUNCTION_TABLE_iii[$12 & 63]($0, $14) | 0;
   if (($15 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) {
    $$010 = $$0;
    break L1;
   }
   $$0 = $$0 + 1 | 0;
   $$011 = $$011 + 1 | 0;
  }
 } else $$010 = _fwrite($1, 1, $2, HEAP32[$0 + 32 >> 2] | 0) | 0; while (0);
 return $$010 | 0;
}

function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, label = 0;
 $1 = $0 + 20 | 0;
 $3 = $0 + 28 | 0;
 if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0;
  if (!(HEAP32[$1 >> 2] | 0)) $$0 = -1; else label = 3;
 } else label = 3;
 if ((label | 0) == 3) {
  $10 = $0 + 4 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $0 + 8 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($11 >>> 0 < $13 >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, $11 - $13 | 0, 1) | 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$10 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 2) | 0;
 $9 = HEAP32[$4 >> 2] | 0;
 if (($8 | 0) < 24 & ($9 & 4 | 0) == 0) HEAP32[$1 >> 2] = $8; else HEAP32[$4 >> 2] = $9 | 4;
 STACKTOP = sp;
 return;
}

function _stream_decoder_reset($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $19 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 $9 = _lzma_index_hash_init(HEAP32[(HEAP32[$3 >> 2] | 0) + 304 >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 304 >> 2] = $9;
 if (!(HEAP32[(HEAP32[$3 >> 2] | 0) + 304 >> 2] | 0)) {
  HEAP32[$2 >> 2] = 5;
  $19 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 336 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  $19 = HEAP32[$2 >> 2] | 0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0;
}

function __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 __ZNKSt3__28ios_base6getlocEv($3, $1);
 __THREW__ = 0;
 $4 = invoke_iii(32, $3 | 0, 62400) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 if (!($5 & 1)) {
  __THREW__ = 0;
  invoke_iiiii(HEAP32[(HEAP32[$4 >> 2] | 0) + 48 >> 2] | 0, $4 | 0, 40416, 40442, $2 | 0) | 0;
  $10 = __THREW__;
  __THREW__ = 0;
  if (!($10 & 1)) {
   __ZNSt3__26localeD2Ev($3);
   STACKTOP = sp;
   return $2 | 0;
  }
 }
 $12 = ___cxa_find_matching_catch_2() | 0;
 __ZNSt3__26localeD2Ev($3);
 ___resumeException($12 | 0);
 return 0;
}

function _stream_flags_decode($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre_trunc = 0, $2 = 0, $23 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 if (!(HEAPU8[HEAP32[$4 >> 2] >> 0] | 0)) if (!((HEAPU8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] | 0) & 240)) {
  HEAP32[HEAP32[$3 >> 2] >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 16 >> 2] = (HEAPU8[(HEAP32[$4 >> 2] | 0) + 1 >> 0] | 0) & 15;
  HEAP8[$2 >> 0] = 0;
  $$pre_trunc = HEAP8[$2 >> 0] | 0;
  $23 = $$pre_trunc & 1;
  STACKTOP = sp;
  return $23 | 0;
 }
 HEAP8[$2 >> 0] = 1;
 $$pre_trunc = HEAP8[$2 >> 0] | 0;
 $23 = $$pre_trunc & 1;
 STACKTOP = sp;
 return $23 | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($2 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $2;
  $$0 = $0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $2;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE4copyEPcPKcm($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $2 | 0, $3);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 if ($1 >>> 0 > 4294967279) __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
 if ($1 >>> 0 < 11) {
  HEAP8[$0 + 11 >> 0] = $1;
  $$0 = $0;
 } else {
  $9 = $1 + 16 & -16;
  $10 = __Znwm($9) | 0;
  HEAP32[$0 >> 2] = $10;
  HEAP32[$0 + 8 >> 2] = $9 | -2147483648;
  HEAP32[$0 + 4 >> 2] = $1;
  $$0 = $10;
 }
 __ZNSt3__211char_traitsIcE6assignEPcmc($$0, $1, $2) | 0;
 HEAP8[$3 >> 0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0 + $1 | 0, $3);
 STACKTOP = sp;
 return;
}

function _call_filter($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[$6 >> 2] = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] & 31](HEAP32[(HEAP32[$3 >> 2] | 0) + 56 >> 2] | 0, HEAP32[(HEAP32[$3 >> 2] | 0) + 60 >> 2] | 0, HEAP8[(HEAP32[$3 >> 2] | 0) + 49 >> 0] & 1, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 $25 = (HEAP32[$3 >> 2] | 0) + 60 | 0;
 HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + (HEAP32[$6 >> 2] | 0);
 STACKTOP = sp;
 return HEAP32[$6 >> 2] | 0;
}

function __ZNKSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE10__root_ptrEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__220__throw_system_errorEiPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $2 = sp;
 $3 = ___cxa_allocate_exception(16) | 0;
 __ZNSt3__215system_categoryEv() | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = 47980;
 __THREW__ = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 invoke_viii(35, $3 | 0, $$byval_copy | 0, $1 | 0);
 $5 = __THREW__;
 __THREW__ = 0;
 if ($5 & 1) {
  $7 = ___cxa_find_matching_catch_2() | 0;
  ___cxa_free_exception($3 | 0);
  ___resumeException($7 | 0);
 } else ___cxa_throw($3 | 0, 42680, 165);
}

function _getc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $15 = 0, $16 = 0, $24 = 0, $6 = 0, $7 = 0, label = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) < 0) label = 3; else if (!(___lockfile($0) | 0)) label = 3; else {
  $15 = $0 + 4 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
   HEAP32[$15 >> 2] = $16 + 1;
   $24 = HEAPU8[$16 >> 0] | 0;
  } else $24 = ___uflow($0) | 0;
  ___unlockfile($0);
  $$0 = $24;
 }
 do if ((label | 0) == 3) {
  $6 = $0 + 4 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  if ($7 >>> 0 < (HEAP32[$0 + 8 >> 2] | 0) >>> 0) {
   HEAP32[$6 >> 2] = $7 + 1;
   $$0 = HEAPU8[$7 >> 0] | 0;
   break;
  } else {
   $$0 = ___uflow($0) | 0;
   break;
  }
 } while (0);
 return $$0 | 0;
}

function _strtox_199($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0.0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $4 = $3 + 4 | 0;
 HEAP32[$4 >> 2] = $0;
 $5 = $3 + 8 | 0;
 HEAP32[$5 >> 2] = -1;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 ___shlim($3, 0);
 $8 = +___floatscan($3, $2, 1);
 $14 = (HEAP32[$4 >> 2] | 0) - (HEAP32[$5 >> 2] | 0) + (HEAP32[$3 + 108 >> 2] | 0) | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = ($14 | 0) == 0 ? $0 : $0 + $14 | 0;
 STACKTOP = sp;
 return +$8;
}

function __ZNKSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEE10__root_ptrEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$7 >> 2] = $0;
 HEAP32[$6 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$5 >> 2] = (HEAP32[$6 >> 2] | 0) + 4;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _is_backward_size_valid_627($0) {
 $0 = $0 | 0;
 var $1 = 0, $17 = 0, $22 = 0, $4 = 0, $40 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 if (!($9 >>> 0 > 0 | ($9 | 0) == 0 & (HEAP32[$4 >> 2] | 0) >>> 0 >= 4)) {
  $40 = 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 $17 = (HEAP32[$1 >> 2] | 0) + 8 | 0;
 $22 = HEAP32[$17 + 4 >> 2] | 0;
 if (!($22 >>> 0 < 4 | ($22 | 0) == 4 & (HEAP32[$17 >> 2] | 0) >>> 0 <= 0)) {
  $40 = 0;
  STACKTOP = sp;
  return $40 | 0;
 }
 $40 = 0 == 0 ? (HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 3 | 0) == 0 : 0;
 STACKTOP = sp;
 return $40 | 0;
}

function _inflateReset($0) {
 $0 = $0 | 0;
 var $1 = 0, $18 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 if (_inflateStateCheck(HEAP32[$2 >> 2] | 0) | 0) {
  HEAP32[$1 >> 2] = -2;
  $18 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  HEAP32[$3 >> 2] = HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2];
  HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] = 0;
  HEAP32[(HEAP32[$3 >> 2] | 0) + 52 >> 2] = 0;
  HEAP32[$1 >> 2] = _inflateResetKeep(HEAP32[$2 >> 2] | 0) | 0;
  $18 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_mmRKS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $16 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $6 = HEAP8[$1 + 11 >> 0] | 0;
 $7 = $6 << 24 >> 24 < 0;
 $11 = $7 ? HEAP32[$1 + 4 >> 2] | 0 : $6 & 255;
 if ($11 >>> 0 < $2 >>> 0) __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0); else {
  $16 = $11 - $2 | 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, ($7 ? HEAP32[$1 >> 2] | 0 : $1) + $2 | 0, $16 >>> 0 < $3 >>> 0 ? $16 : $3);
  return;
 }
}

function __ZNSt3__26locale2id5__getEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $$byval_copy = sp + 32 | 0;
 $1 = sp + 24 | 0;
 $2 = sp;
 $3 = sp + 16 | 0;
 HEAP32[$3 >> 2] = 189;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($2, $$byval_copy, $0);
 if ((HEAP32[$0 >> 2] | 0) != -1) {
  HEAP32[$$byval_copy >> 2] = $2;
  HEAP32[$1 >> 2] = $$byval_copy;
  __ZNSt3__211__call_onceERVmPvPFvS2_E($0, $1, 190);
 }
 STACKTOP = sp;
 return (HEAP32[$0 + 4 >> 2] | 0) + -1 | 0;
}

function __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3;
 $$012 = $1;
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7;
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1;
   break;
  }
  $7 = HEAP8[$$012 >> 0] | 0;
  $8 = HEAP8[$$011 >> 0] | 0;
  if ($7 << 24 >> 24 < $8 << 24 >> 24) {
   $$0 = -1;
   break;
  }
  if ($8 << 24 >> 24 < $7 << 24 >> 24) {
   $$0 = 1;
   break;
  }
  $$011 = $$011 + 1 | 0;
  $$012 = $$012 + 1 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$012 | 0) != ($2 | 0) & 1;
 return $$0 | 0;
}

function __ZN3zim12MemoryBufferILb1EEC2EPKcNS_7zsize_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 $6 = HEAP32[$3 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 __ZN3zim6BufferC2ENS_7zsize_tE($6, $$byval_copy);
 HEAP32[$6 >> 2] = 43140;
 HEAP32[$6 + 24 >> 2] = HEAP32[$4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim12MemoryBufferILb0EEC2EPKcNS_7zsize_tE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$byval_copy = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $3 = sp + 20 | 0;
 $4 = sp + 16 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 $6 = HEAP32[$3 >> 2] | 0;
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2];
 __ZN3zim6BufferC2ENS_7zsize_tE($6, $$byval_copy);
 HEAP32[$6 >> 2] = 43592;
 HEAP32[$6 + 24 >> 2] = HEAP32[$4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 __THREW__ = 0;
 invoke_v($0 | 0);
 $1 = __THREW__;
 __THREW__ = 0;
 if (!($1 & 1)) {
  __THREW__ = 0;
  invoke_vii(126, 56042, sp | 0);
  __THREW__ = 0;
 }
 $4 = ___cxa_find_matching_catch_3(0) | 0;
 ___cxa_begin_catch($4 | 0) | 0;
 __THREW__ = 0;
 invoke_vii(126, 56082, sp + 8 | 0);
 __THREW__ = 0;
 $7 = ___cxa_find_matching_catch_3(0) | 0;
 __THREW__ = 0;
 invoke_v(3);
 $9 = __THREW__;
 __THREW__ = 0;
 if ($9 & 1) {
  $11 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($11);
 } else ___clang_call_terminate($7);
}

function _lzma_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $21 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (!(HEAP32[$2 >> 2] | 0)) HEAP32[$2 >> 2] = 1;
 if (HEAP32[$3 >> 2] | 0) if (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) {
  HEAP32[$4 >> 2] = FUNCTION_TABLE_iiii[HEAP32[HEAP32[$3 >> 2] >> 2] & 63](HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0, 1, HEAP32[$2 >> 2] | 0) | 0;
  $21 = HEAP32[$4 >> 2] | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 HEAP32[$4 >> 2] = _malloc(HEAP32[$2 >> 2] | 0) | 0;
 $21 = HEAP32[$4 >> 2] | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _is_size_valid($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $14 = 0, $23 = 0, $29 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = $4;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$6 + 4 >> 2] = $1;
 $10 = $5;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$10 + 4 >> 2] = $3;
 $14 = $5;
 if ((HEAP32[$14 >> 2] | 0) == -1 ? (HEAP32[$14 + 4 >> 2] | 0) == -1 : 0) {
  $38 = 1;
  STACKTOP = sp;
  return $38 | 0;
 }
 $23 = $5;
 $29 = $4;
 $38 = (HEAP32[$23 >> 2] | 0) == (HEAP32[$29 >> 2] | 0) ? (HEAP32[$23 + 4 >> 2] | 0) == (HEAP32[$29 + 4 >> 2] | 0) : 0;
 STACKTOP = sp;
 return $38 | 0;
}

function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = $0 + 20 | 0;
 $9 = $0 + 28 | 0;
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 63]($0, 0, 0) | 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$9 >> 2] = 0;
 HEAP32[$7 >> 2] = 0;
 $15 = HEAP32[$0 >> 2] | 0;
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0;
  HEAP32[$0 + 8 >> 2] = $23;
  HEAP32[$0 + 4 >> 2] = $23;
  $$0 = $15 << 27 >> 31;
 } else {
  HEAP32[$0 >> 2] = $15 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $6 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 128 >> 0] = 0;
 do if ($1 | 0) {
  __THREW__ = 0;
  invoke_vii(120, $0 | 0, $1 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if (!($6 & 1)) {
   __THREW__ = 0;
   invoke_vii(121, $0 | 0, $1 | 0);
   $8 = __THREW__;
   __THREW__ = 0;
   if (!($8 & 1)) break;
  }
  $10 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0);
  ___resumeException($10 | 0);
 } while (0);
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) HEAP32[$1 >> 2] = $8 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$byval_copy = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $6 = sp;
 HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2];
 $8 = __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($2, $$byval_copy, $4, $5, 4) | 0;
 if (!(HEAP32[$4 >> 2] & 4)) HEAP32[$1 >> 2] = $8 + -1900;
 STACKTOP = sp;
 return;
}

function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0;
  return $$1 | 0;
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $$1 = 0;
  return $$1 | 0;
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0;
 if ($11 | 0) {
  $$1 = $11 + 8 | 0;
  return $$1 | 0;
 }
 $14 = _malloc($1) | 0;
 if (!$14) {
  $$1 = 0;
  return $$1 | 0;
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0;
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0;
 _free($0);
 $$1 = $14;
 return $$1 | 0;
}

function __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$011 = 0, $$012 = 0, $7 = 0, $8 = 0, label = 0;
 $$011 = $3;
 $$012 = $1;
 while (1) {
  if (($$011 | 0) == ($4 | 0)) {
   label = 7;
   break;
  }
  if (($$012 | 0) == ($2 | 0)) {
   $$0 = -1;
   break;
  }
  $7 = HEAP32[$$012 >> 2] | 0;
  $8 = HEAP32[$$011 >> 2] | 0;
  if (($7 | 0) < ($8 | 0)) {
   $$0 = -1;
   break;
  }
  if (($8 | 0) < ($7 | 0)) {
   $$0 = 1;
   break;
  }
  $$011 = $$011 + 4 | 0;
  $$012 = $$012 + 4 | 0;
 }
 if ((label | 0) == 7) $$0 = ($$012 | 0) != ($2 | 0) & 1;
 return $$0 | 0;
}

function __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $6 = sp;
 HEAP8[$6 >> 0] = 37;
 $7 = $6 + 1 | 0;
 HEAP8[$7 >> 0] = $4;
 $8 = $6 + 2 | 0;
 HEAP8[$8 >> 0] = $5;
 HEAP8[$6 + 3 >> 0] = 0;
 if ($5 << 24 >> 24) {
  HEAP8[$7 >> 0] = $5;
  HEAP8[$8 >> 0] = $4;
 }
 $12 = __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($1, HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = $1 + (_strftime_l($1 | 0, $12 | 0, $6 | 0, $3 | 0, HEAP32[$0 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $3;
 $7 = HEAP32[$5 >> 2] | 0;
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 16 >> 2] | 0;
 HEAP32[$4 >> 2] = $2;
 $13 = (HEAP32[$4 >> 2] | 0) + 8 | 0;
 FUNCTION_TABLE_viiiiii[$10 & 15]($0, $7, HEAP32[$13 >> 2] | 0, HEAP32[$13 + 4 >> 2] | 0, 0, HEAP32[$6 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _index_size_unpadded_665($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = $4;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$6 + 4 >> 2] = $1;
 $10 = $5;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$10 + 4 >> 2] = $3;
 $14 = $4;
 $21 = 1 + (_lzma_vli_size(HEAP32[$14 >> 2] | 0, HEAP32[$14 + 4 >> 2] | 0) | 0) | 0;
 $22 = $5;
 $28 = _i64Add($21 | 0, 0, HEAP32[$22 >> 2] | 0, HEAP32[$22 + 4 >> 2] | 0) | 0;
 $30 = _i64Add($28 | 0, tempRet0 | 0, 4, 0) | 0;
 STACKTOP = sp;
 return $30 | 0;
}

function _is_lclppb_valid_704($0) {
 $0 = $0 | 0;
 var $1 = 0, $22 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) >>> 0 > 4) {
  $22 = 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 if ((HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) >>> 0 > 4) {
  $22 = 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 if (((HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) | 0) >>> 0 > 4) {
  $22 = 0;
  STACKTOP = sp;
  return $22 | 0;
 }
 $22 = (HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] | 0) >>> 0 <= 4;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + (HEAP32[(HEAP32[$4 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$5 + 12 >> 2];
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4 + 4 | 0);
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($4, $5 + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + (HEAP32[(HEAP32[$4 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$5 + 12 >> 2];
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($4, $5 + 4 | 0);
 STACKTOP = sp;
 return;
}

function _pad_497($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $5 = sp;
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0;
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0;
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0;
   $$011 = $9;
   do {
    _out_491($0, $5, 256);
    $$011 = $$011 + -256 | 0;
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255;
  } else $$0$lcssa = $9;
  _out_491($0, $5, $$0$lcssa);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEEC2EmmS6_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0;
 $4 = $0 + 12 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $3;
 do if (!$1) $13 = 0; else {
  $7 = $3 + 112 | 0;
  if ($1 >>> 0 < 29 & (HEAP8[$7 >> 0] | 0) == 0) {
   HEAP8[$7 >> 0] = 1;
   $13 = $3;
   break;
  } else {
   $13 = __Znwm($1 << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$0 >> 2] = $13;
 $14 = $13 + ($2 << 2) | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$0 + 4 >> 2] = $14;
 HEAP32[$4 >> 2] = $13 + ($1 << 2);
 return;
}

function __ZNSt3__211char_traitsIcE7compareEPKcS3_m($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 if (!(HEAP32[$6 >> 2] | 0)) {
  HEAP32[$3 >> 2] = 0;
  $13 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 } else {
  HEAP32[$3 >> 2] = _memcmp(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0) | 0;
  $13 = HEAP32[$3 >> 2] | 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 return 0;
}

function __ZNK3zim6Buffer2atENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 8 | 0;
 $2 = sp + 16 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 $4 = HEAP32[$2 >> 2] | 0;
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 $9 = HEAP8[(FUNCTION_TABLE_iii[$7 & 63]($4, $$byval_copy) | 0) >> 0] | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 do if (!$5) {
  HEAP32[$4 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 36 >> 2] = 1;
 } else {
  if (($5 | 0) != ($2 | 0)) {
   $13 = $1 + 36 | 0;
   HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1;
   HEAP32[$1 + 24 >> 2] = 2;
   HEAP8[$1 + 54 >> 0] = 1;
   break;
  }
  $10 = $1 + 24 | 0;
  if ((HEAP32[$10 >> 2] | 0) == 2) HEAP32[$10 >> 2] = $3;
 } while (0);
 return;
}

function __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $9 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $3 = sp;
 $4 = $2;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $3;
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 + 4 >> 2] = $9;
 HEAP32[$tmpcast$byval_copy >> 2] = HEAP32[$3 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2];
 __ZNSt3__212system_errorC2ENS_10error_codeEPKc($0, $tmpcast$byval_copy, $1);
 HEAP32[$0 >> 2] = 44920;
 STACKTOP = sp;
 return;
}

function __ZNSt3__2L11init_wam_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60104] | 0)) if (___cxa_guard_acquire(60104) | 0) {
  $4 = 59216;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 59504);
 }
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59216, 45860) | 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(59228, 45872) | 0;
 return;
}

function __ZNSt3__2L10init_am_pmEv() {
 var $$0$i$i = 0, $4 = 0;
 if (!(HEAP8[60024] | 0)) if (___cxa_guard_acquire(60024) | 0) {
  $4 = 58464;
  do {
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   $$0$i$i = 0;
   while (1) {
    if (($$0$i$i | 0) == 3) break;
    HEAP32[$4 + ($$0$i$i << 2) >> 2] = 0;
    $$0$i$i = $$0$i$i + 1 | 0;
   }
   $4 = $4 + 12 | 0;
  } while (($4 | 0) != 58752);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58464, 53529) | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(58476, 53532) | 0;
 return;
}

function _lzma_check_init($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 switch (HEAP32[$3 >> 2] | 0) {
 case 10:
  {
   _lzma_sha256_init(HEAP32[$2 >> 2] | 0);
   STACKTOP = sp;
   return;
  }
 case 1:
  {
   HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 case 4:
  {
   $9 = (HEAP32[$2 >> 2] | 0) + 64 | 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   STACKTOP = sp;
   return;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i$in = 0, $4 = 0;
 if ((__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) | 0) >>> 0 < $1 >>> 0) __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
 $4 = $0 + 128 | 0;
 if ($1 >>> 0 < 29 & (HEAP8[$4 >> 0] | 0) == 0) {
  HEAP8[$4 >> 0] = 1;
  $$0$i$i$in = $0 + 16 | 0;
 } else $$0$i$i$in = __Znwm($1 << 2) | 0;
 HEAP32[$0 + 4 >> 2] = $$0$i$i$in;
 HEAP32[$0 >> 2] = $$0$i$i$in;
 HEAP32[$0 + 8 >> 2] = $$0$i$i$in + ($1 << 2);
 return;
}

function _strtox($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $12 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = 0;
 $6 = $5 + 4 | 0;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$5 + 44 >> 2] = $0;
 $10 = $5 + 8 | 0;
 HEAP32[$10 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
 HEAP32[$5 + 76 >> 2] = -1;
 ___shlim($5, 0);
 $12 = ___intscan($5, $2, 1, $3, $4) | 0;
 if ($1 | 0) HEAP32[$1 >> 2] = $0 + ((HEAP32[$6 >> 2] | 0) + (HEAP32[$5 + 108 >> 2] | 0) - (HEAP32[$10 >> 2] | 0));
 STACKTOP = sp;
 return $12 | 0;
}

function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3;
  $$lcssa8 = $2;
 } else {
  $$011 = $1;
  $$0710 = $0;
  do {
   $$0710 = $$0710 + 1 | 0;
   $$011 = $$011 + 1 | 0;
   $8 = HEAP8[$$0710 >> 0] | 0;
   $9 = HEAP8[$$011 >> 0] | 0;
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9;
  $$lcssa8 = $8;
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0;
}

function _lzma_sha256_init($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = (HEAP32[$1 >> 2] | 0) + 64 | 0;
 HEAP32[$3 >> 2] = HEAP32[3528];
 HEAP32[$3 + 4 >> 2] = HEAP32[3529];
 HEAP32[$3 + 8 >> 2] = HEAP32[3530];
 HEAP32[$3 + 12 >> 2] = HEAP32[3531];
 HEAP32[$3 + 16 >> 2] = HEAP32[3532];
 HEAP32[$3 + 20 >> 2] = HEAP32[3533];
 HEAP32[$3 + 24 >> 2] = HEAP32[3534];
 HEAP32[$3 + 28 >> 2] = HEAP32[3535];
 $7 = (HEAP32[$1 >> 2] | 0) + 64 + 32 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$7 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$4 + (HEAP32[(HEAP32[$4 >> 2] | 0) + -12 >> 2] | 0) >> 2] = HEAP32[$5 + 12 >> 2];
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($4 + 8 | 0);
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($4, $5 + 4 | 0);
 STACKTOP = sp;
 return;
}

function _index_size_664($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $14 = 0, $20 = 0, $26 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 $6 = $4;
 HEAP32[$6 >> 2] = $0;
 HEAP32[$6 + 4 >> 2] = $1;
 $10 = $5;
 HEAP32[$10 >> 2] = $2;
 HEAP32[$10 + 4 >> 2] = $3;
 $14 = $4;
 $20 = $5;
 $26 = _index_size_unpadded_665(HEAP32[$14 >> 2] | 0, HEAP32[$14 + 4 >> 2] | 0, HEAP32[$20 >> 2] | 0, HEAP32[$20 + 4 >> 2] | 0) | 0;
 $28 = _vli_ceil4_666($26, tempRet0) | 0;
 STACKTOP = sp;
 return $28 | 0;
}

function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $3 = sp + 20 | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = 0;
 HEAP32[$vararg_buffer + 8 >> 2] = $1;
 HEAP32[$vararg_buffer + 12 >> 2] = $3;
 HEAP32[$vararg_buffer + 16 >> 2] = $2;
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1;
  $10 = -1;
 } else $10 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $10 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $8 = sp + 4 | 0;
 $9 = sp;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$9 >> 2] = $5;
 $10 = __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($2, $3, $8, $5, $6, $9, 1114111, 0) | 0;
 HEAP32[$4 >> 2] = HEAP32[$8 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
 STACKTOP = sp;
 return $10 | 0;
}

function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
 newDynamicTop = oldDynamicTop + increment | 0;
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0;
  ___setErrNo(12);
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) if (!(enlargeMemory() | 0)) {
  HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
  ___setErrNo(12);
  return -1;
 }
 return oldDynamicTop | 0;
}

function __ZN3zim4File14const_iteratorC2EPKS0_jNS1_4ModeE($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 12 | 0;
 $5 = sp + 8 | 0;
 $6 = sp + 4 | 0;
 $7 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 $8 = HEAP32[$4 >> 2] | 0;
 HEAP32[$8 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$8 + 4 >> 2] = HEAP32[$6 >> 2];
 __ZN3zim7ArticleC2Ev($8 + 8 | 0);
 HEAP32[$8 + 20 >> 2] = HEAP32[$7 >> 2];
 STACKTOP = sp;
 return;
}

function ___fmodeflags($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$2 = 0, $$4 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $spec$select = 0, $spec$select13 = 0;
 $2 = (_strchr($0, 43) | 0) == 0;
 $3 = HEAP8[$0 >> 0] | 0;
 $$0 = $2 ? $3 << 24 >> 24 != 114 & 1 : 2;
 $6 = (_strchr($0, 120) | 0) == 0;
 $spec$select = $6 ? $$0 : $$0 | 128;
 $9 = (_strchr($0, 101) | 0) == 0;
 $$2 = $9 ? $spec$select : $spec$select | 524288;
 $spec$select13 = $3 << 24 >> 24 == 114 ? $$2 : $$2 | 64;
 $$4 = $3 << 24 >> 24 == 119 ? $spec$select13 | 512 : $spec$select13;
 return ($3 << 24 >> 24 == 97 ? $$4 | 1024 : $$4) | 0;
}

function __ZNK3zim7Article9getDirentEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 HEAP32[$2 >> 2] = $5;
 $7 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0;
 __ZN3zim15article_index_tC2Ej($4, HEAP32[$5 + 8 >> 2] | 0);
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2];
 __ZN3zim8FileImpl9getDirentENS_15article_index_tE($0, $7, $$byval_copy);
 STACKTOP = sp;
 return;
}

function _lzma_lzma_decoder_memusage($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $16 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 if (_is_lclppb_valid_704(HEAP32[$2 >> 2] | 0) | 0) {
  $10 = _lzma_lzma_decoder_memusage_nocheck(HEAP32[$2 >> 2] | 0) | 0;
  $12 = $1;
  HEAP32[$12 >> 2] = $10;
  HEAP32[$12 + 4 >> 2] = tempRet0;
 } else {
  $5 = $1;
  HEAP32[$5 >> 2] = -1;
  HEAP32[$5 + 4 >> 2] = -1;
 }
 $16 = $1;
 tempRet0 = HEAP32[$16 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$16 >> 2] | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); else {
  $10 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 15]($10, $1, $2, $3, $4, $5);
 }
 return;
}

function __ZpLIN3zim8offset_tEERT_S3_RKNS2_9base_typeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Add(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZpLIN3zim7zsize_tEERT_S3_RKNS2_9base_typeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Add(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZN3zimpLERNS_8offset_tERKNS_7zsize_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Add(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZmIIN3zim8offset_tEERT_S3_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Subtract(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZmIIN3zim7zsize_tEERT_S3_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Subtract(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZpLIN3zim8offset_tEERT_S3_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Add(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _wmemmove($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01416 = 0, $$018 = 0, $$117 = 0, $$in = 0;
 if ($0 - $1 >> 2 >>> 0 < $2 >>> 0) {
  $$in = $2;
  do {
   $$in = $$in + -1 | 0;
   HEAP32[$0 + ($$in << 2) >> 2] = HEAP32[$1 + ($$in << 2) >> 2];
  } while (($$in | 0) != 0);
 } else if ($2 | 0) {
  $$01416 = $1;
  $$018 = $0;
  $$117 = $2;
  while (1) {
   $$117 = $$117 + -1 | 0;
   HEAP32[$$018 >> 2] = HEAP32[$$01416 >> 2];
   if (!$$117) break; else {
    $$01416 = $$01416 + 4 | 0;
    $$018 = $$018 + 4 | 0;
   }
  }
 }
 return $0 | 0;
}

function __ZpLIN3zim7zsize_tEERT_S3_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$3 >> 2] | 0;
 $11 = HEAP32[$2 >> 2] | 0;
 $12 = $11;
 $18 = _i64Add(HEAP32[$12 >> 2] | 0, HEAP32[$12 + 4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0) | 0;
 $20 = $11;
 HEAP32[$20 >> 2] = $18;
 HEAP32[$20 + 4 >> 2] = tempRet0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do if (!$2) $14 = 0; else {
  $$01318 = $0;
  $$01417 = $2;
  $$019 = $1;
  while (1) {
   $4 = HEAP8[$$01318 >> 0] | 0;
   $5 = HEAP8[$$019 >> 0] | 0;
   if ($4 << 24 >> 24 != $5 << 24 >> 24) break;
   $$01417 = $$01417 + -1 | 0;
   if (!$$01417) {
    $14 = 0;
    break L1;
   } else {
    $$01318 = $$01318 + 1 | 0;
    $$019 = $$019 + 1 | 0;
   }
  }
  $14 = ($4 & 255) - ($5 & 255) | 0;
 } while (0);
 return $14 | 0;
}

function __ZN3zim6Dirent6setUrlEcRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 4 | 0;
 $4 = sp + 8 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP8[$4 >> 0] = $1;
 HEAP32[$5 >> 2] = $2;
 $6 = HEAP32[$3 >> 2] | 0;
 HEAP8[$6 + 20 >> 0] = HEAP8[$4 >> 0] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($6 + 36 | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $12 = 0, $15 = 0, $4 = 0, $phitmp = 0, $spec$select = 0;
 $4 = Math_imul($2, $1) | 0;
 $spec$select = ($1 | 0) == 0 ? 0 : $2;
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0;
  $11 = ___fwritex($0, $4, $3) | 0;
  if ($phitmp) $12 = $11; else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else $12 = ___fwritex($0, $4, $3) | 0;
 if (($12 | 0) == ($4 | 0)) $15 = $spec$select; else $15 = ($12 >>> 0) / ($1 >>> 0) | 0;
 return $15 | 0;
}

function _lzma_end($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 if (!(HEAP32[$1 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 _lzma_next_end(HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0);
 _lzma_free(HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] | 0, HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0);
 HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62680) | 0;
 $3 = $0 + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $0 + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(52896); else return;
}

function __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62672) | 0;
 $3 = $0 + 36 | 0;
 HEAP32[$3 >> 2] = $2;
 $8 = $0 + 44 | 0;
 HEAP32[$8 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 24 >> 2] & 127]($2) | 0;
 $9 = HEAP32[$3 >> 2] | 0;
 HEAP8[$0 + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$9 >> 2] | 0) + 28 >> 2] & 127]($9) | 0) & 1;
 if ((HEAP32[$8 >> 2] | 0) > 8) __ZNSt3__221__throw_runtime_errorEPKc(52896); else return;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0;
 $3 = $0 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 while (1) {
  if (($4 | 0) == ($2 | 0)) break;
  $6 = $4 + -4 | 0;
  HEAP32[$3 >> 2] = $6;
  $4 = $6;
 }
 $7 = HEAP32[$0 >> 2] | 0;
 do if ($7 | 0) {
  $10 = HEAP32[$0 + 16 >> 2] | 0;
  if (($7 | 0) == ($10 | 0)) {
   HEAP8[$10 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv($7);
   break;
  }
 } while (0);
 return;
}

function __ZN3zim16fromLittleEndianItEET_PKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP16[$2 >> 1] = 0;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= 2) break;
  HEAP16[$2 >> 1] = HEAPU16[$2 >> 1] | 0 | ((HEAPU8[(HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) >> 0] | 0) & 65535) << (HEAP32[$3 >> 2] << 3);
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP16[$2 >> 1] | 0;
}

function _store_int($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do if ($0 | 0) switch ($1 | 0) {
 case -2:
  {
   HEAP8[$0 >> 0] = $2;
   break L1;
   break;
  }
 case -1:
  {
   HEAP16[$0 >> 1] = $2;
   break L1;
   break;
  }
 case 0:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 1:
  {
   HEAP32[$0 >> 2] = $2;
   break L1;
   break;
  }
 case 3:
  {
   $7 = $0;
   HEAP32[$7 >> 2] = $2;
   HEAP32[$7 + 4 >> 2] = $3;
   break L1;
   break;
  }
 default:
  break L1;
 } while (0);
 return;
}

function __ZNK3zim10less_rangeclERKNS_5RangeES3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $13 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[sp + 8 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 if (!(__ZltIN3zim8offset_tEEbRKT_S4_(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0)) {
  $13 = 0;
  STACKTOP = sp;
  return $13 | 0;
 }
 $13 = __ZleIN3zim8offset_tEEbRKT_S4_((HEAP32[$4 >> 2] | 0) + 8 | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function _lzma_decoder_uncompressed($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 12 | 0;
 $4 = sp;
 $5 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $0;
 $6 = $4;
 HEAP32[$6 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $2;
 HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
 $11 = $4;
 $16 = HEAP32[$11 + 4 >> 2] | 0;
 $19 = (HEAP32[$5 >> 2] | 0) + 28312 | 0;
 HEAP32[$19 >> 2] = HEAP32[$11 >> 2];
 HEAP32[$19 + 4 >> 2] = $16;
 STACKTOP = sp;
 return;
}

function __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = HEAP32[$3 >> 2] | 0;
 $8 = __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m($4, $5, __ZNSt3__211char_traitsIcE6lengthEPKc(HEAP32[$3 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $7 = 0, $8 = 0;
 $7 = HEAP32[$0 + 4 >> 2] | 0;
 $8 = $7 >> 8;
 if (!($7 & 1)) $$0 = $8; else $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0;
 $14 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] & 15]($14, $1, $2, $3 + $$0 | 0, ($7 & 2 | 0) == 0 ? 2 : $4, $5);
 return;
}

function _simple_coder_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $4 = sp + 16 | 0;
 $5 = sp + 12 | 0;
 $7 = sp + 4 | 0;
 $8 = sp;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[sp + 8 >> 2] = $2;
 HEAP32[$7 >> 2] = $3;
 HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
 $14 = _lzma_next_filter_update(HEAP32[$8 >> 2] | 0, HEAP32[$5 >> 2] | 0, (HEAP32[$7 >> 2] | 0) + 16 | 0) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZN3zim16fromLittleEndianIjEET_PKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 while (1) {
  if ((HEAP32[$3 >> 2] | 0) >>> 0 >= 4) break;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | (HEAPU8[(HEAP32[$1 >> 2] | 0) + (HEAP32[$3 >> 2] | 0) >> 0] | 0) << (HEAP32[$3 >> 2] << 3);
  HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 }
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$0 + 36 >> 2] = 17;
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$vararg_buffer + 4 >> 2] = 21523;
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16;
  if (___syscall54(54, $vararg_buffer | 0) | 0) HEAP8[$0 + 75 >> 0] = -1;
 }
 $14 = ___stdio_write($0, $1, $2) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$05$lcssa = $2; else {
  $$056 = $2;
  $15 = $1;
  $8 = $0;
  while (1) {
   $14 = $$056 + -1 | 0;
   HEAP8[$14 >> 0] = HEAPU8[36480 + ($8 & 15) >> 0] | 0 | $3;
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0;
   $15 = tempRet0;
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14;
    break;
   } else $$056 = $14;
  }
 }
 return $$05$lcssa | 0;
}

function __Znwm($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $spec$store$select = 0, label = 0;
 $spec$store$select = ($0 | 0) == 0 ? 1 : $0;
 while (1) {
  $2 = _malloc($spec$store$select) | 0;
  if ($2 | 0) {
   label = 6;
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0;
  if (!$4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$4 & 63]();
 }
 if ((label | 0) == 5) {
  $6 = ___cxa_allocate_exception(4) | 0;
  __ZNSt9bad_allocC2Ev($6);
  ___cxa_throw($6 | 0, 42760, 172);
 } else if ((label | 0) == 6) return $2 | 0;
 return 0;
}

function _pread($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 HEAP32[$vararg_buffer + 8 >> 2] = $2;
 HEAP32[$vararg_buffer + 12 >> 2] = 0;
 HEAP32[$vararg_buffer + 16 >> 2] = $3;
 HEAP32[$vararg_buffer + 20 >> 2] = $3 >> 31;
 $7 = ___syscall_ret(___syscall180(180, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $spec$select = 0;
 $3 = $0 + 84 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2 + 256 | 0;
 $6 = _memchr($4, 0, $5) | 0;
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0;
 $spec$select = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2;
 _memcpy($1 | 0, $4 | 0, $spec$select | 0) | 0;
 HEAP32[$0 + 4 >> 2] = $4 + $spec$select;
 $14 = $4 + $$027 | 0;
 HEAP32[$0 + 8 >> 2] = $14;
 HEAP32[$3 >> 2] = $14;
 return $spec$select | 0;
}

function __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEEC2EOSA_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataC2EOS7_($4 + 4 | 0, (HEAP32[$3 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEEC2EOSB_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[HEAP32[$3 >> 2] >> 2];
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataC2EOS8_($4 + 4 | 0, (HEAP32[$3 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2;
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3;
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 >= 128) {
   $$0$lcssa = $$0;
   break;
  }
  $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
  if (!((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16)) {
   $$0$lcssa = $$0;
   break;
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $19 = 0, $4 = 0, $7 = 0;
 __THREW__ = 0;
 $0 = invoke_i(5) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 if ($1 & 1) {
  $19 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($19);
 }
 if ($0 | 0) {
  $4 = HEAP32[$0 >> 2] | 0;
  if ($4 | 0) {
   $7 = $4 + 48 | 0;
   if ((HEAP32[$7 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$7 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$4 + 12 >> 2] | 0);
  }
 }
 __ZSt11__terminatePFvvE(__ZSt13get_terminatev() | 0);
}

function _armthumb_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 $14 = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 22, 0, 4, 2, HEAP8[$7 >> 0] & 1) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _powerpc_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 $14 = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 25, 0, 4, 4, HEAP8[$7 >> 0] & 1) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _ia64_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 $14 = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 24, 0, 16, 16, HEAP8[$7 >> 0] & 1) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $8 = 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); else {
  $8 = HEAP32[$0 + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 31]($8, $1, $2, $3);
 }
 return;
}

function _sparc_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 $14 = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 21, 0, 4, 4, HEAP8[$7 >> 0] & 1) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZltIN3zim8offset_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $17 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$2 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $12 = HEAP32[$3 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 STACKTOP = sp;
 return $10 >>> 0 < $17 >>> 0 | (($10 | 0) == ($17 | 0) ? (HEAP32[$5 >> 2] | 0) >>> 0 < (HEAP32[$12 >> 2] | 0) >>> 0 : 0) | 0;
}

function _arm_coder_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 8 | 0;
 $5 = sp + 4 | 0;
 $6 = sp;
 $7 = sp + 12 | 0;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP8[$7 >> 0] = $3 & 1;
 $14 = _lzma_simple_coder_init(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] | 0, 23, 0, 4, 4, HEAP8[$7 >> 0] & 1) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZltIN3zim7zsize_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $17 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$2 >> 2] | 0;
 $10 = HEAP32[$5 + 4 >> 2] | 0;
 $12 = HEAP32[$3 >> 2] | 0;
 $17 = HEAP32[$12 + 4 >> 2] | 0;
 STACKTOP = sp;
 return $10 >>> 0 < $17 >>> 0 | (($10 | 0) == ($17 | 0) ? (HEAP32[$5 >> 2] | 0) >>> 0 < (HEAP32[$12 >> 2] | 0) >>> 0 : 0) | 0;
}

function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0);
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $6 = 0, $7 = 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $6 >> 8;
 if (!($6 & 1)) $$0 = $7; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0;
 $13 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 7]($13, $1, $2 + $$0 | 0, ($6 & 2 | 0) == 0 ? 2 : $3, $4);
 return;
}

function __ZNK3zim12BufferReader4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$3 >> 2] | 0) + 4;
 $8 = __ZNK3zim6Buffer4sizeEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 $10 = $2;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = tempRet0;
 $14 = $2;
 tempRet0 = HEAP32[$14 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$14 >> 2] | 0;
}

function _stream_decoder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_next_end((HEAP32[$4 >> 2] | 0) + 8 | 0, HEAP32[$3 >> 2] | 0);
 _lzma_index_hash_end(HEAP32[(HEAP32[$4 >> 2] | 0) + 304 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE3__xEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[60072] | 0)) if (___cxa_guard_acquire(60072) | 0) {
  HEAP32[15630] = 0;
  HEAP32[15631] = 0;
  HEAP32[15632] = 0;
  $5 = __ZNSt3__211char_traitsIwE6lengthEPKw(45692) | 0;
  __THREW__ = 0;
  invoke_viii(30, 62520, 45692, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62520;
}

function __ZNKSt3__220__time_get_c_storageIwE3__rEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[60080] | 0)) if (___cxa_guard_acquire(60080) | 0) {
  HEAP32[15633] = 0;
  HEAP32[15634] = 0;
  HEAP32[15635] = 0;
  $5 = __ZNSt3__211char_traitsIwE6lengthEPKw(45728) | 0;
  __THREW__ = 0;
  invoke_viii(30, 62532, 45728, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62532;
}

function __ZNKSt3__220__time_get_c_storageIwE3__cEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[60088] | 0)) if (___cxa_guard_acquire(60088) | 0) {
  HEAP32[15636] = 0;
  HEAP32[15637] = 0;
  HEAP32[15638] = 0;
  $5 = __ZNSt3__211char_traitsIwE6lengthEPKw(45776) | 0;
  __THREW__ = 0;
  invoke_viii(30, 62544, 45776, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62544;
}

function __ZNKSt3__220__time_get_c_storageIwE3__XEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[60064] | 0)) if (___cxa_guard_acquire(60064) | 0) {
  HEAP32[15627] = 0;
  HEAP32[15628] = 0;
  HEAP32[15629] = 0;
  $5 = __ZNSt3__211char_traitsIwE6lengthEPKw(45656) | 0;
  __THREW__ = 0;
  invoke_viii(30, 62508, 45656, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62508;
}

function __ZNKSt3__220__time_get_c_storageIcE3__xEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[59992] | 0)) if (___cxa_guard_acquire(59992) | 0) {
  HEAP32[15613] = 0;
  HEAP32[15614] = 0;
  HEAP32[15615] = 0;
  $5 = __ZNSt3__211char_traitsIcE6lengthEPKc(53487) | 0;
  __THREW__ = 0;
  invoke_viii(8, 62452, 53487, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62452;
}

function __ZNKSt3__220__time_get_c_storageIcE3__cEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[60008] | 0)) if (___cxa_guard_acquire(60008) | 0) {
  HEAP32[15619] = 0;
  HEAP32[15620] = 0;
  HEAP32[15621] = 0;
  $5 = __ZNSt3__211char_traitsIcE6lengthEPKc(53508) | 0;
  __THREW__ = 0;
  invoke_viii(8, 62476, 53508, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62476;
}

function __ZNKSt3__220__time_get_c_storageIcE3__XEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[59984] | 0)) if (___cxa_guard_acquire(59984) | 0) {
  HEAP32[15610] = 0;
  HEAP32[15611] = 0;
  HEAP32[15612] = 0;
  $5 = __ZNSt3__211char_traitsIcE6lengthEPKc(53478) | 0;
  __THREW__ = 0;
  invoke_viii(8, 62440, 53478, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62440;
}

function __ZNK3zim8FileImpl11getFilesizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
 $7 = __ZNK3zim12FileCompound5fsizeEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 $9 = $2;
 HEAP32[$9 >> 2] = $7;
 HEAP32[$9 + 4 >> 2] = tempRet0;
 $13 = $2;
 tempRet0 = HEAP32[$13 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$13 >> 2] | 0;
}

function __ZNK3zim4File11getFilesizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $2 = 0, $3 = 0, $7 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $7 = __ZNK3zim8FileImpl11getFilesizeEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 $9 = $3;
 HEAP32[$9 >> 2] = $7;
 HEAP32[$9 + 4 >> 2] = tempRet0;
 $13 = $3;
 tempRet0 = HEAP32[$13 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$13 >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 8 | 0;
 $3 = ___uselocale(HEAP32[$1 >> 2] | 0) | 0;
 $4 = _mbtowc(0, 0, 4) | 0;
 if ($3 | 0) ___uselocale($3) | 0;
 if (!$4) {
  $7 = HEAP32[$1 >> 2] | 0;
  if (!$7) $$0 = 1; else {
   $9 = ___uselocale($7) | 0;
   $10 = ___ctype_get_mb_cur_max() | 0;
   if ($9 | 0) ___uselocale($9) | 0;
   return ($10 | 0) == 1 | 0;
  }
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE3__rEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $8 = 0;
 do if (!(HEAP8[6e4] | 0)) if (___cxa_guard_acquire(6e4) | 0) {
  HEAP32[15616] = 0;
  HEAP32[15617] = 0;
  HEAP32[15618] = 0;
  $5 = __ZNSt3__211char_traitsIcE6lengthEPKc(53496) | 0;
  __THREW__ = 0;
  invoke_viii(8, 62464, 53496, $5 | 0);
  $6 = __THREW__;
  __THREW__ = 0;
  if ($6 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else break;
 } while (0);
 return 62464;
}

function __ZNSt3__23mapIN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S8_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__23mapIN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S9_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader7setUuidERKNS_4UuidE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 dest = (HEAP32[$2 >> 2] | 0) + 4 | 0;
 src = HEAP32[$3 >> 2] | 0;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $5 = 0, $6 = 0;
 $5 = HEAP32[$0 + 4 >> 2] | 0;
 $6 = $5 >> 8;
 if (!($5 & 1)) $$0 = $6; else $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0;
 $12 = HEAP32[$0 >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 31]($12, $1, $2 + $$0 | 0, ($5 & 2 | 0) == 0 ? 2 : $3);
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 if ((HEAP8[$1 + 11 >> 0] | 0) < 0) __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0); else {
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
 }
 return;
}

function __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$lcssa = 0, $7 = 0;
 $$0 = $2;
 while (1) {
  if (($$0 | 0) == ($3 | 0)) {
   $$0$lcssa = $3;
   break;
  }
  if ((HEAP32[$$0 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   if ((HEAP16[$7 + (HEAP32[$$0 >> 2] << 1) >> 1] & $1) << 16 >> 16) {
    $$0$lcssa = $$0;
    break;
   }
  }
  $$0 = $$0 + 4 | 0;
 }
 return $$0$lcssa | 0;
}

function __ZN3zim10Fileheader16setClusterPtrPosEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $17 = (HEAP32[$3 >> 2] | 0) + 56 | 0;
 HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$17 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function _lzma_free($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 if (HEAP32[$3 >> 2] | 0) if (HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] | 0) {
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$3 >> 2] | 0) + 4 >> 2] & 127](HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$2 >> 2] | 0);
  STACKTOP = sp;
  return;
 }
 _free(HEAP32[$2 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader14setTitleIdxPosEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $17 = (HEAP32[$3 >> 2] | 0) + 24 | 0;
 HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$17 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader14setMimeListPosEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $17 = (HEAP32[$3 >> 2] | 0) + 40 | 0;
 HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$17 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader14setChecksumPosEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $17 = (HEAP32[$3 >> 2] | 0) + 72 | 0;
 HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$17 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0;
 $3 = HEAP8[$1 >> 0] | 0;
 HEAP8[$1 >> 0] = $3 + 255 | $3;
 $7 = HEAP32[$0 >> 2] | 0;
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $14 = HEAP32[$0 + 44 >> 2] | 0;
  HEAP32[$0 + 28 >> 2] = $14;
  HEAP32[$0 + 20 >> 2] = $14;
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0);
  $$0 = 0;
 } else {
  HEAP32[$0 >> 2] = $7 | 32;
  $$0 = -1;
 }
 return $$0 | 0;
}

function __ZN3zim18ZimFileFormatErrorC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($4, HEAP32[$3 >> 2] | 0);
 HEAP32[$4 >> 2] = 43524;
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader12setUrlPtrPosEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $17 = (HEAP32[$3 >> 2] | 0) + 32 | 0;
 HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$17 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function _simple_coder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_next_end(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[(HEAP32[$4 >> 2] | 0) + 56 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$08 = 0, $13 = 0, $7 = 0;
 $$0 = $3;
 $$08 = $1;
 while (1) {
  if (($$08 | 0) == ($2 | 0)) break;
  if ((HEAP32[$$08 >> 2] | 0) >>> 0 < 128) {
   $7 = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
   $13 = HEAPU16[$7 + (HEAP32[$$08 >> 2] << 1) >> 1] | 0;
  } else $13 = 0;
  HEAP16[$$0 >> 1] = $13;
  $$0 = $$0 + 2 | 0;
  $$08 = $$08 + 4 | 0;
 }
 return $2 | 0;
}

function __ZNK3zim10Fileheader14getChecksumPosEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!(__ZNK3zim10Fileheader11hasChecksumEv($2) | 0)) {
  $11 = 0;
  $12 = 0;
  tempRet0 = $11;
  STACKTOP = sp;
  return $12 | 0;
 }
 $5 = $2 + 72 | 0;
 $11 = HEAP32[$5 + 4 >> 2] | 0;
 $12 = HEAP32[$5 >> 2] | 0;
 tempRet0 = $11;
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0;
 if (($4 | 0) == (__ZNSt3__211char_traitsIwE3eofEv() | 0)) $$0 = __ZNSt3__211char_traitsIwE3eofEv() | 0; else {
  $8 = $0 + 12 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$8 >> 2] = $9 + 4;
  $$0 = __ZNSt3__211char_traitsIwE11to_int_typeEw(HEAP32[$9 >> 2] | 0) | 0;
 }
 return $$0 | 0;
}

function __ZNK3zim12FileCompound4failEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = sp + 16 | 0;
 $2 = sp + 12 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$5 >> 2] = $0;
 HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 8;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 STACKTOP = sp;
 return (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) == 0 | 0;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 47296;
 $1 = $0 + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 __THREW__ = 0;
 $3 = invoke_i(1) | 0;
 $4 = __THREW__;
 __THREW__ = 0;
 if ($4 & 1) {
  $8 = ___cxa_find_matching_catch_3(0) | 0;
  __ZNSt3__26locale5facetD2Ev($0);
  ___clang_call_terminate($8);
 }
 if (($2 | 0) != ($3 | 0)) _freelocale(HEAP32[$1 >> 2] | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $8 = 0, $9 = 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 127]($0) | 0;
 if (($4 | 0) == (__ZNSt3__211char_traitsIcE3eofEv() | 0)) $$0 = __ZNSt3__211char_traitsIcE3eofEv() | 0; else {
  $8 = $0 + 12 | 0;
  $9 = HEAP32[$8 >> 2] | 0;
  HEAP32[$8 >> 2] = $9 + 1;
  $$0 = __ZNSt3__211char_traitsIcE11to_int_typeEc(HEAP8[$9 >> 0] | 0) | 0;
 }
 return $$0 | 0;
}

function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) $$0$lcssa = $2; else {
  $$06 = $2;
  $11 = $1;
  $7 = $0;
  while (1) {
   $10 = $$06 + -1 | 0;
   HEAP8[$10 >> 0] = $7 & 7 | 48;
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0;
   $11 = tempRet0;
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10;
    break;
   } else $$06 = $10;
  }
 }
 return $$0$lcssa | 0;
}

function ___cxx_global_var_init_448() {
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp + 13 | 0;
 HEAP32[$2 >> 2] = 60684;
 $5 = HEAP32[$2 >> 2] | 0;
 HEAP8[sp >> 0] = HEAP8[sp + 12 >> 0] | 0;
 HEAP32[sp + 8 >> 2] = $3;
 __ZNSt3__26__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($5, $3);
 STACKTOP = sp;
 return;
}

function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $3 = sp;
 dest = $3;
 stop = dest + 124 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 49;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 76 >> 2] = -1;
 HEAP32[$3 + 84 >> 2] = $0;
 $8 = _vfscanf($3, $1, $2) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function __ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = HEAP32[$3 >> 2] | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy(HEAP32[$2 >> 2] | 0, HEAP32[$6 >> 2] | 0, HEAP32[$6 + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZNSt3__28ios_base4initEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, dest = 0, stop = 0;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP32[$0 + 16 >> 2] = ($1 | 0) == 0 & 1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 4098;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 6;
 $11 = $0 + 28 | 0;
 dest = $0 + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__26localeC2Ev($11);
 return;
}

function __ZNSt3__211char_traitsIcE7not_eofEi($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (__ZNSt3__211char_traitsIcE11eq_int_typeEii($2, __ZNSt3__211char_traitsIcE3eofEv() | 0) | 0) {
  $8 = ~(__ZNSt3__211char_traitsIcE3eofEv() | 0);
  STACKTOP = sp;
  return $8 | 0;
 } else {
  $8 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0;
}

function __ZN12REAL_TYPEDEFIyEC2Ey($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 $15 = HEAP32[$10 + 4 >> 2] | 0;
 $16 = HEAP32[$3 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$10 >> 2];
 HEAP32[$16 + 4 >> 2] = $15;
 STACKTOP = sp;
 return;
}

function _lzma_delta_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 HEAP32[(HEAP32[$3 >> 2] | 0) + 20 >> 2] = 4;
 $11 = _lzma_delta_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 16;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 $7 = HEAP32[$1 >> 2] | 0;
 FUNCTION_TABLE_vi[HEAP32[HEAP32[$7 >> 2] >> 2] & 255]($7);
 STACKTOP = sp;
 return;
}

function __ZNSt3__28ios_baseD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0;
 HEAP32[$0 >> 2] = 44548;
 __THREW__ = 0;
 invoke_vii(88, $0 | 0, 0);
 $1 = __THREW__;
 __THREW__ = 0;
 if ($1 & 1) {
  $12 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($12);
 } else {
  __ZNSt3__26localeD2Ev($0 + 28 | 0);
  _free(HEAP32[$0 + 32 >> 2] | 0);
  _free(HEAP32[$0 + 36 >> 2] | 0);
  _free(HEAP32[$0 + 48 >> 2] | 0);
  _free(HEAP32[$0 + 60 >> 2] | 0);
  return;
 }
}

function _getint_492($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) $$0$lcssa = 0; else {
  $$04 = 0;
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0;
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0;
   $12 = $7 + 1 | 0;
   HEAP32[$0 >> 2] = $12;
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11;
    break;
   } else $$04 = $11;
  }
 }
 return $$0$lcssa | 0;
}

function __ZNK3zim4unix2FD7getSizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $1 = sp;
 $2 = sp + 84 | 0;
 $3 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 _fstat(HEAP32[HEAP32[$2 >> 2] >> 2] | 0, $3) | 0;
 $7 = HEAP32[$3 + 36 >> 2] | 0;
 __ZN3zim7zsize_tC2Ey($1, $7, (($7 | 0) < 0) << 31 >> 31);
 $10 = $1;
 tempRet0 = HEAP32[$10 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$10 >> 2] | 0;
}

function __ZNK3zim7Article12getNamespaceEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 __ZNK3zim7Article9getDirentEv($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$1 >> 2] = $3;
 $7 = __ZNK3zim6Dirent12getNamespaceEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($3);
 STACKTOP = sp;
 return $7 | 0;
}

function __ZN3zimplENS_8offset_tERKNS_7zsize_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZN3zimpLERNS_8offset_tERKNS_7zsize_tE($0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = $2;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function _vasprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $4 = _vsnprintf(0, 0, $1, $3) | 0;
 if (($4 | 0) < 0) $$0 = -1; else {
  $6 = $4 + 1 | 0;
  $7 = _malloc($6) | 0;
  HEAP32[$0 >> 2] = $7;
  if (!$7) $$0 = -1; else $$0 = _vsnprintf($7, $6, $1, $2) | 0;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZN3zim6DirentD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2 + 48 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2 + 36 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2 + 24 | 0);
 STACKTOP = sp;
 return;
}

function ___ftello_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $12 = 0;
 if (!(HEAP32[$0 >> 2] & 128)) $11 = 1; else $11 = (HEAP32[$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$0 + 28 >> 2] | 0) >>> 0 ? 2 : 1;
 $12 = FUNCTION_TABLE_iiii[HEAP32[$0 + 40 >> 2] & 63]($0, 0, $11) | 0;
 if (($12 | 0) < 0) $$0 = $12; else $$0 = $12 - (HEAP32[$0 + 8 >> 2] | 0) + (HEAP32[$0 + 4 >> 2] | 0) + (HEAP32[$0 + 20 >> 2] | 0) - (HEAP32[$0 + 28 >> 2] | 0) | 0;
 return $$0 | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP8[$$0 >> 0] | 0;
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255;
  } else $12 = $4;
  HEAP8[$$0 >> 0] = $12;
  $$0 = $$0 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $12 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP8[$$0 >> 0] | 0;
  if ($4 << 24 >> 24 > -1) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $12 = HEAP32[$6 + (HEAP8[$$0 >> 0] << 2) >> 2] & 255;
  } else $12 = $4;
  HEAP8[$$0 >> 0] = $12;
  $$0 = $$0 + 1 | 0;
 }
 return $2 | 0;
}

function __ZNK3zim7Article10isRedirectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 12 | 0;
 $2 = sp + 8 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 __ZNK3zim7Article9getDirentEv($3, HEAP32[$2 >> 2] | 0);
 HEAP32[$1 >> 2] = $3;
 $7 = __ZNK3zim6Dirent10isRedirectEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev($3);
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] & 63]($3, $0, $1);
 if ((HEAP32[$3 + 4 >> 2] | 0) == (HEAP32[$2 + 4 >> 2] | 0)) $15 = (HEAP32[$3 >> 2] | 0) == (HEAP32[$2 >> 2] | 0); else $15 = 0;
 STACKTOP = sp;
 return $15 | 0;
}

function _lzma_check_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 > 15) {
  HEAP32[$1 >> 2] = -1;
  $9 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 } else {
  HEAP32[$1 >> 2] = HEAPU8[14144 + (HEAP32[$2 >> 2] | 0) >> 0];
  $9 = HEAP32[$1 >> 2] | 0;
  STACKTOP = sp;
  return $9 | 0;
 }
 return 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $3 = 0;
 HEAP32[15107] = 0;
 HEAP32[15106] = 47540;
 __THREW__ = 0;
 $0 = invoke_i(1) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 if ($1 & 1) {
  $3 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26locale5facetD2Ev(60424);
  ___resumeException($3 | 0);
 } else {
  HEAP32[15108] = $0;
  HEAP32[15106] = 46776;
  return;
 }
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 var $0 = 0, $1 = 0, $3 = 0;
 HEAP32[15103] = 0;
 HEAP32[15102] = 47540;
 __THREW__ = 0;
 $0 = invoke_i(1) | 0;
 $1 = __THREW__;
 __THREW__ = 0;
 if ($1 & 1) {
  $3 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26locale5facetD2Ev(60408);
  ___resumeException($3 | 0);
 } else {
  HEAP32[15104] = $0;
  HEAP32[15102] = 46752;
  return;
 }
}

function __ZNKSt3__25ctypeIwE10do_toupperEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0;
   $10 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0;
  } else $10 = $4;
  HEAP32[$$0 >> 2] = $10;
  $$0 = $$0 + 4 | 0;
 }
 return $2 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $6 = 0;
 $$0 = $1;
 while (1) {
  if (($$0 | 0) == ($2 | 0)) break;
  $4 = HEAP32[$$0 >> 2] | 0;
  if ($4 >>> 0 < 128) {
   $6 = __ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0;
   $10 = HEAP32[$6 + (HEAP32[$$0 >> 2] << 2) >> 2] | 0;
  } else $10 = $4;
  HEAP32[$$0 >> 2] = $10;
  $$0 = $$0 + 4 | 0;
 }
 return $2 | 0;
}

function __ZN3zim7ClusterD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 __ZNSt3__210shared_ptrIKN3zim6ReaderEED2Ev($3 + 28 | 0);
 __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($3 + 16 | 0);
 HEAP32[$1 >> 2] = $3;
 __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = $0 + 4 | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $6 = (HEAP32[$2 >> 2] | 0) - $4 >> 2;
 $8 = $4;
 if ($6 >>> 0 < $1 >>> 0) __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8__appendEm($0, $1 - $6 | 0); else if ($6 >>> 0 > $1 >>> 0) HEAP32[$2 >> 2] = $8 + ($1 << 2);
 return;
}

function __ZplIN3zim8offset_tEET_S2_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZpLIN3zim8offset_tEERT_S3_RKS2_($0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = $2;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZmiIN3zim8offset_tEET_S2_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZmIIN3zim8offset_tEERT_S3_RKS2_($0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = $2;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZNSt3__23mapIN3zim5RangeEPNS1_8FilePartINS1_4unix2FSEEENS1_10less_rangeENS_9allocatorINS_4pairIKS2_S7_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim6Dirent12setParameterERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_((HEAP32[$2 >> 2] | 0) + 48 | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZplIN3zim7zsize_tEET_S2_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZpLIN3zim7zsize_tEERT_S3_RKS2_($0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = $2;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZmiIN3zim7zsize_tEET_S2_RKS2_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 8 | 0;
 HEAP32[$3 >> 2] = $1;
 __ZmIIN3zim7zsize_tEERT_S3_RKS2_($0, HEAP32[$3 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 $5 = $2;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZNSt3__28numpunctIwEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 47456;
 HEAP32[$0 + 8 >> 2] = 46;
 HEAP32[$0 + 12 >> 2] = 44;
 $6 = $0 + 16 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN3zim6Dirent8setTitleERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_((HEAP32[$2 >> 2] | 0) + 24 | 0, HEAP32[$3 >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZN3zim5RangeC2ENS_8offset_tES1_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $5 = $4 + 8 | 0;
 HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim4BlobC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$3 >> 2] = 0;
 $5 = $3 + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = $3 + 16;
 $10 = HEAP32[$1 >> 2] | 0;
 HEAP32[$10 >> 2] = 0;
 HEAP32[$10 + 4 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__28numpunctIcEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0, $6 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 47416;
 HEAP8[$0 + 8 >> 0] = 46;
 HEAP8[$0 + 9 >> 0] = 44;
 $6 = $0 + 12 | 0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$6 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $8 = 0;
 $8 = ($2 - $1 | 0) >>> 2;
 $$0 = $4;
 $$09 = $1;
 while (1) {
  if (($$09 | 0) == ($2 | 0)) break;
  $10 = HEAP32[$$09 >> 2] | 0;
  HEAP8[$$0 >> 0] = $10 >>> 0 < 128 ? $10 & 255 : $3;
  $$0 = $$0 + 1 | 0;
  $$09 = $$09 + 4 | 0;
 }
 return $1 + ($8 << 2) | 0;
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(49, $1 | 0, 55283);
 $2 = __THREW__;
 __THREW__ = 0;
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0;
  ___cxa_free_exception($1 | 0);
  ___resumeException($4 | 0);
 } else {
  HEAP32[$1 >> 2] = 48196;
  ___cxa_throw($1 | 0, 42824, 176);
 }
}

function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(49, $1 | 0, 55283);
 $2 = __THREW__;
 __THREW__ = 0;
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0;
  ___cxa_free_exception($1 | 0);
  ___resumeException($4 | 0);
 } else {
  HEAP32[$1 >> 2] = 48176;
  ___cxa_throw($1 | 0, 42808, 176);
 }
}

function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(49, $1 | 0, 55608);
 $2 = __THREW__;
 __THREW__ = 0;
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0;
  ___cxa_free_exception($1 | 0);
  ___resumeException($4 | 0);
 } else {
  HEAP32[$1 >> 2] = 48176;
  ___cxa_throw($1 | 0, 42808, 176);
 }
}

function __ZN12REAL_TYPEDEFIyEeqERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $5 = HEAP32[$2 >> 2] | 0;
 $12 = HEAP32[$3 >> 2] | 0;
 STACKTOP = sp;
 return ((HEAP32[$5 >> 2] | 0) == (HEAP32[$12 >> 2] | 0) ? (HEAP32[$5 + 4 >> 2] | 0) == (HEAP32[$12 + 4 >> 2] | 0) : 0) | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function dynCall_iiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0) | 0;
}

function _lzma_simple_armthumb_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _armthumb_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _lzma2_decoder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_free(HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _lzma_simple_powerpc_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _powerpc_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 48156;
 __THREW__ = 0;
 invoke_vii(125, $0 + 4 | 0, ((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1) | 0);
 $8 = __THREW__;
 __THREW__ = 0;
 if ($8 & 1) {
  $10 = ___cxa_find_matching_catch_2() | 0;
  ___resumeException($10 | 0);
 } else return;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNSt3__219__libcpp_snprintf_lEPcmP15__locale_structPKcz($0, $1, $2, $3, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $varargs = $varargs | 0;
 var $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp;
 HEAP32[$4 >> 2] = $varargs;
 $5 = ___uselocale($2) | 0;
 $6 = _vsnprintf($0, $1, $3, $4) | 0;
 if ($5 | 0) ___uselocale($5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43308;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2 + 32 | 0);
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK3zim4File16getCountArticlesEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 HEAP32[$3 >> 2] = __ZNK3zim8FileImpl16getCountArticlesEv(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) | 0;
 $8 = __ZNK12REAL_TYPEDEFIjEcvjEv($3) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _lzma_simple_sparc_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _sparc_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNKSt3__219__iostream_category7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (($2 | 0) != 1 & ($2 | 0) < 257) __ZNKSt3__212__do_message7messageEi($0, $1, $2); else {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 52729, __ZNSt3__211char_traitsIcE6lengthEPKc(52729) | 0);
 }
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function _lzma_simple_ia64_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _ia64_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _lzma_raw_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _lzma_raw_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 44, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _lzma_lzma2_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _lzma_lz_decoder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 14) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $6 = 0;
 HEAP8[$0 >> 0] = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 $6 = $1 + (HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0) | 0;
 if (!(HEAP32[$6 + 16 >> 2] | 0)) {
  $11 = HEAP32[$6 + 72 >> 2] | 0;
  if ($11 | 0) __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv($11) | 0;
  HEAP8[$0 >> 0] = 1;
 }
 return;
}

function _lzma_lzma_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _lzma_lz_decoder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 13) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
 return;
}

function _lzma_simple_x86_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _x86_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _lzma_simple_arm_decoder_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _arm_coder_init(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _block_decoder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_next_end((HEAP32[$4 >> 2] | 0) + 8 | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim5RangeC2ENS_8offset_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 $4 = $3 + 8 | 0;
 HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim8offset_tC2Ey($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 __ZN12REAL_TYPEDEFIyEC2Ey(HEAP32[$3 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$10 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_124handle_strerror_r_returnEiPc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, label = 0;
 switch ($0 | 0) {
 case 0:
  {
   $$0 = $1;
   break;
  }
 case -1:
  {
   $4 = HEAP32[(___errno_location() | 0) >> 2] | 0;
   label = 3;
   break;
  }
 default:
  {
   $4 = $0;
   label = 3;
  }
 }
 if ((label | 0) == 3) if (($4 | 0) == 22) $$0 = 62819; else _abort();
 return $$0 | 0;
}

function __ZN3zim7zsize_tC2Ey($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp;
 HEAP32[$3 >> 2] = $0;
 $5 = $4;
 HEAP32[$5 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $2;
 $10 = $4;
 __ZN12REAL_TYPEDEFIyEC2Ey(HEAP32[$3 >> 2] | 0, HEAP32[$10 >> 2] | 0, HEAP32[$10 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim8FilePartINS_4unix2FSEE4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 $4 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $5 = $1;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEE16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$2 >> 2] = (HEAP32[$3 >> 2] | 0) + 12;
 HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
 __ZN3zim6DirentD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tEC2Em($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0, $8 = 0;
 HEAP32[$0 + 4 >> 2] = $1 + -1;
 HEAP32[$0 >> 2] = 47296;
 __THREW__ = 0;
 $4 = invoke_i(1) | 0;
 $5 = __THREW__;
 __THREW__ = 0;
 if ($5 & 1) {
  $8 = ___cxa_find_matching_catch_2() | 0;
  __ZNSt3__26locale5facetD2Ev($0);
  ___resumeException($8 | 0);
 } else {
  HEAP32[$0 + 8 >> 2] = $4;
  return;
 }
}

function __ZNSt3__28ios_base16__call_callbacksENS0_5eventE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $5 = 0, $7 = 0;
 $4 = $0 + 32 | 0;
 $5 = $0 + 36 | 0;
 $$0 = HEAP32[$0 + 40 >> 2] | 0;
 while (1) {
  if (!$$0) break;
  $7 = $$0 + -1 | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$4 >> 2] | 0) + ($7 << 2) >> 2] & 63]($1, $0, HEAP32[(HEAP32[$5 >> 2] | 0) + ($7 << 2) >> 2] | 0);
  $$0 = $7;
 }
 return;
}

function __ZNKSt3__224__generic_error_category7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (($2 | 0) > 256) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 55364, __ZNSt3__211char_traitsIcE6lengthEPKc(55364) | 0);
 } else __ZNKSt3__212__do_message7messageEi($0, 0, $2);
 return;
}

function _lzma_index_hash_size($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $20 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $5 = (HEAP32[$1 >> 2] | 0) + 8 + 16 | 0;
 $14 = (HEAP32[$1 >> 2] | 0) + 8 + 24 | 0;
 $20 = _index_size_664(HEAP32[$5 >> 2] | 0, HEAP32[$5 + 4 >> 2] | 0, HEAP32[$14 >> 2] | 0, HEAP32[$14 + 4 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $20 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2, 43284);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2 + 56 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2, 43444);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2 + 60 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__223__system_error_category7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (($2 | 0) > 256) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 55507, __ZNSt3__211char_traitsIcE6lengthEPKc(55507) | 0);
 } else __ZNKSt3__212__do_message7messageEi($0, 0, $2);
 return;
}

function __ZNKSt3__220__time_get_c_storageIwE8__monthsEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60112] | 0)) if (___cxa_guard_acquire(60112) | 0) {
  __THREW__ = 0;
  invoke_v(10);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15640] = 59504;
   break;
  }
 } while (0);
 return HEAP32[15640] | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60096] | 0)) if (___cxa_guard_acquire(60096) | 0) {
  __THREW__ = 0;
  invoke_v(11);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15639] = 59216;
   break;
  }
 } while (0);
 return HEAP32[15639] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE8__monthsEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60032] | 0)) if (___cxa_guard_acquire(60032) | 0) {
  __THREW__ = 0;
  invoke_v(7);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15623] = 58752;
   break;
  }
 } while (0);
 return HEAP32[15623] | 0;
}

function _lz_decoder_reset($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] = 0;
 HEAP8[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + ((HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] | 0) - 1) >> 0] = 0;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 20 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _delta_coder_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 8 | 0;
 $3 = sp + 4 | 0;
 $4 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
 _lzma_next_end(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 _lzma_free(HEAP32[$4 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _arg_n($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
 $$0 = $1;
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1);
  $10 = HEAP32[$9 >> 2] | 0;
  HEAP32[$2 >> 2] = $9 + 4;
  if ($$0 >>> 0 > 1) $$0 = $$0 + -1 | 0; else break;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function __ZNKSt3__220__time_get_c_storageIwE7__weeksEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60128] | 0)) if (___cxa_guard_acquire(60128) | 0) {
  __THREW__ = 0;
  invoke_v(9);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15641] = 59792;
   break;
  }
 } while (0);
 return HEAP32[15641] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__weeksEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60048] | 0)) if (___cxa_guard_acquire(60048) | 0) {
  __THREW__ = 0;
  invoke_v(6);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15624] = 59040;
   break;
  }
 } while (0);
 return HEAP32[15624] | 0;
}

function __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $8 = 0;
 do if (!(HEAP8[60016] | 0)) if (___cxa_guard_acquire(60016) | 0) {
  __THREW__ = 0;
  invoke_v(8);
  $5 = __THREW__;
  __THREW__ = 0;
  if ($5 & 1) {
   $8 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($8 | 0);
  } else {
   HEAP32[15622] = 58464;
   break;
  }
 } while (0);
 return HEAP32[15622] | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNK3zim12FileCompound5fsizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 $4 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $5 = $1;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $1;
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $2;
 HEAP32[tempDoublePtr + 4 >> 2] = $8;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43168;
 __ZNSt3__217__compressed_pairINS_9allocatorIN3zim9SubBufferEEES3_ED2Ev($2 + 16 | 0);
 __ZNSt3__214__shared_countD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNK3zim10FileReader6offsetEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 $4 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $5 = $1;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function _inflateInit_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _inflateInit2_(HEAP32[$3 >> 2] | 0, 15, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = ___uselocale($1) | 0;
 $5 = _vasprintf($0, $2, $3) | 0;
 if ($4 | 0) ___uselocale($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNK3zim10FileReader4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 $4 = (HEAP32[$2 >> 2] | 0) + 24 | 0;
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $5 = $1;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43544;
 __ZNSt3__217__compressed_pairINS_9allocatorIKN3zim6DirentEEES4_ED2Ev($2 + 12 | 0);
 __ZNSt3__214__shared_countD2Ev($2);
 STACKTOP = sp;
 return;
}

function _strerror_r($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $7 = 0;
 $3 = _strerror($0) | 0;
 $4 = _strlen($3) | 0;
 if ($4 >>> 0 < $2 >>> 0) {
  _memcpy($1 | 0, $3 | 0, $4 + 1 | 0) | 0;
  $$0 = 0;
 } else {
  $7 = $2 + -1 | 0;
  if (!$2) $$0 = 34; else {
   _memcpy($1 | 0, $3 | 0, $7 | 0) | 0;
   HEAP8[$1 + $7 >> 0] = 0;
   $$0 = 34;
  }
 }
 return $$0 | 0;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $5 = 0;
 if (($0 | 0) != ($1 | 0)) {
  $4 = HEAP8[$1 + 11 >> 0] | 0;
  $5 = $4 << 24 >> 24 < 0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $5 ? HEAP32[$1 >> 2] | 0 : $1, $5 ? HEAP32[$1 + 4 >> 2] | 0 : $4 & 255) | 0;
 }
 return $0 | 0;
}

function __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = ___uselocale($1) | 0;
 $5 = _vsscanf($0, $2, $3) | 0;
 if ($4 | 0) ___uselocale($4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function ___unlist_locked_file($0) {
 $0 = $0 | 0;
 var $$pre = 0, $$sink = 0, $10 = 0, $5 = 0;
 if (HEAP32[$0 + 68 >> 2] | 0) {
  $5 = HEAP32[$0 + 116 >> 2] | 0;
  $$pre = $0 + 112 | 0;
  if ($5 | 0) HEAP32[$5 + 112 >> 2] = HEAP32[$$pre >> 2];
  $10 = HEAP32[$$pre >> 2] | 0;
  if (!$10) $$sink = (___pthread_self_383() | 0) + 232 | 0; else $$sink = $10 + 116 | 0;
  HEAP32[$$sink >> 2] = $5;
 }
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__libcpp_refstringC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = _strlen($1) | 0;
 $4 = __Znwm($2 + 13 | 0) | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 + 8 >> 2] = 0;
 $7 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4) | 0;
 _memcpy($7 | 0, $1 | 0, $2 + 1 | 0) | 0;
 HEAP32[$0 >> 2] = $7;
 return;
}

function __ZNK3zim6Buffer4sizeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 $2 = sp + 8 | 0;
 HEAP32[$2 >> 2] = $0;
 $4 = (HEAP32[$2 >> 2] | 0) + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
 $5 = $1;
 tempRet0 = HEAP32[$5 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$5 >> 2] | 0;
}

function dynCall_iiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 return FUNCTION_TABLE_iiiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0) | 0;
}

function __ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__26__treeINS_12__value_typeIcN3zim15article_index_tEEENS_19__map_value_compareIcS4_NS_4lessIcEELb1EEENS_9allocatorIS4_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim6Dirent16getClusterNumberEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (__ZNK3zim6Dirent10isRedirectEv($3) | 0) __ZN3zim15cluster_index_tC2Ej($1, 0); else HEAP32[$1 >> 2] = HEAP32[$3 + 8 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNSt3__26localeC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0;
 __THREW__ = 0;
 $1 = invoke_i(4) | 0;
 $2 = __THREW__;
 __THREW__ = 0;
 if ($2 & 1) {
  $8 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($8);
 } else {
  $4 = HEAP32[$1 >> 2] | 0;
  HEAP32[$0 >> 2] = $4;
  $5 = $4 + 4 | 0;
  HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
  return;
 }
}

function _lzma_lzma_decoder_memusage_nocheck($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 $6 = _lzma_lz_decoder_memusage(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) | 0;
 $8 = _i64Add(28344, 0, $6 | 0, tempRet0 | 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _adler32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _adler32_z(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__219__shared_weak_count4lockEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$04 = 0, $1 = 0, $5 = 0;
 $1 = $0 + 4 | 0;
 $$04 = HEAP32[$1 >> 2] | 0;
 while (1) {
  if (($$04 | 0) == -1) {
   $$0 = 0;
   break;
  }
  $5 = HEAP32[$1 >> 2] | 0;
  if (($5 | 0) == ($$04 | 0)) HEAP32[$1 >> 2] = $$04 + 1;
  if (($5 | 0) == ($$04 | 0)) {
   $$0 = $0;
   break;
  }
  $$04 = $5;
 }
 return $$0 | 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__23mapIN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S8_EEEEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__23mapIN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S9_EEEEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv($0) {
 $0 = $0 | 0;
 var $$unpack = 0, $$unpack2 = 0, $10 = 0, $3 = 0;
 $$unpack = HEAP32[$0 + 4 >> 2] | 0;
 $$unpack2 = HEAP32[$0 + 8 >> 2] | 0;
 $3 = (HEAP32[$0 >> 2] | 0) + ($$unpack2 >> 1) | 0;
 if (!($$unpack2 & 1)) $10 = $$unpack; else $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$unpack >> 2] | 0;
 FUNCTION_TABLE_vi[$10 & 255]($3);
 return;
}

function __ZNK3zim6Dirent13getBlobNumberEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (__ZNK3zim6Dirent10isRedirectEv($3) | 0) __ZN3zim12blob_index_tC2Ej($1, 0); else HEAP32[$1 >> 2] = HEAP32[$3 + 12 >> 2];
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _crc32($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp + 8 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _crc32_z(HEAP32[$3 >> 2] | 0, HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$09 = 0, $6 = 0;
 $$0 = $4;
 $$09 = $1;
 while (1) {
  if (($$09 | 0) == ($2 | 0)) break;
  $6 = HEAP8[$$09 >> 0] | 0;
  HEAP8[$$0 >> 0] = $6 << 24 >> 24 > -1 ? $6 : $3;
  $$0 = $$0 + 1 | 0;
  $$09 = $$09 + 1 | 0;
 }
 return $2 | 0;
}

function ___bswap_64($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $14 = 0, $2 = 0, $22 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 $14 = _i64Add(___bswap_32(HEAP32[$2 >> 2] | 0) | 0, 0, 0, 0) | 0;
 $22 = ___bswap_32(HEAP32[$2 + 4 >> 2] | 0) | 0;
 tempRet0 = $14;
 STACKTOP = sp;
 return $22 | 0;
}

function __ZN3zim4unix2FDD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __THREW__ = 0;
 invoke_ii(99, HEAP32[$1 >> 2] | 0) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 if ($3 & 1) {
  $5 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($5);
 } else {
  STACKTOP = sp;
  return;
 }
}

function __ZNSt3__26locale8__globalEv() {
 var $4 = 0, $7 = 0;
 do if (!(HEAP8[60624] | 0)) if (___cxa_guard_acquire(60624) | 0) {
  __THREW__ = 0;
  invoke_i(3) | 0;
  $4 = __THREW__;
  __THREW__ = 0;
  if ($4 & 1) {
   $7 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($7 | 0);
  } else {
   HEAP32[15679] = 62712;
   break;
  }
 } while (0);
 return HEAP32[15679] | 0;
}

function __ZNSt3__26locale7classicEv() {
 var $4 = 0, $7 = 0;
 do if (!(HEAP8[60456] | 0)) if (___cxa_guard_acquire(60456) | 0) {
  __THREW__ = 0;
  invoke_i(2) | 0;
  $4 = __THREW__;
  __THREW__ = 0;
  if ($4 & 1) {
   $7 = ___cxa_find_matching_catch_2() | 0;
   ___resumeException($7 | 0);
  } else {
   HEAP32[15677] = 62704;
   break;
  }
 } while (0);
 return HEAP32[15677] | 0;
}

function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $3 = __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_919(HEAP32[$0 >> 2] | 0) | 0;
  $4 = $3 + 8 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + -1;
  if (($5 + -1 | 0) < 0) __ZdlPv($3);
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
 return;
}

function __ZN3zim4unix2FD5closeEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ((HEAP32[$3 >> 2] | 0) != -1) HEAP8[$1 >> 0] = (_close(HEAP32[$3 >> 2] | 0) | 0) != 0 & 1; else HEAP8[$1 >> 0] = 1;
 STACKTOP = sp;
 return HEAP8[$1 >> 0] & 1 | 0;
}

function __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 8 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP32[$3 >> 2] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62680) | 0;
 HEAP32[$0 + 36 >> 2] = $5;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 return;
}

function __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 127]($0) | 0;
 $5 = __ZNKSt3__26locale9use_facetERNS0_2idE($1, 62672) | 0;
 HEAP32[$0 + 36 >> 2] = $5;
 HEAP8[$0 + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$5 >> 2] | 0) + 28 >> 2] & 127]($5) | 0) & 1;
 return;
}

function __ZNSt3__221__throw_runtime_errorEPKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0;
 $1 = ___cxa_allocate_exception(8) | 0;
 __THREW__ = 0;
 invoke_vii(60, $1 | 0, $0 | 0);
 $2 = __THREW__;
 __THREW__ = 0;
 if ($2 & 1) {
  $4 = ___cxa_find_matching_catch_2() | 0;
  ___cxa_free_exception($1 | 0);
  ___resumeException($4 | 0);
 } else ___cxa_throw($1 | 0, 42792, 178);
}

function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $spec$select = 0;
 $5 = $0 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0;
 $spec$select = $7 >>> 0 > $2 >>> 0 ? $2 : $7;
 _memcpy($6 | 0, $1 | 0, $spec$select | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $spec$select;
 return $2 | 0;
}

function __ZN3zim18ZimFileFormatErrorC2ERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $4 = HEAP32[$2 >> 2] | 0;
 __ZNSt13runtime_errorC2ERKS_($4, HEAP32[$3 >> 2] | 0);
 HEAP32[$4 >> 2] = 43524;
 STACKTOP = sp;
 return;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED2Ev($2, 42944);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($2 + 108 | 0);
 STACKTOP = sp;
 return;
}

function __ZgeIN3zim15cluster_index_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = (__ZltIN3zim15cluster_index_tEEbRKT_S4_(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) ^ 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZgeIN3zim15article_index_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = (__ZltIN3zim15article_index_tEEbRKT_S4_(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) ^ 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__219__shared_weak_count14__release_weakEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $7 = 0;
 $1 = $0 + 8 | 0;
 if (!(HEAP32[$1 >> 2] | 0)) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0); else {
  $7 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $7 + -1;
  if (!$7) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 255]($0);
 }
 return;
}

function dynCall_iiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 return FUNCTION_TABLE_iiiiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0) | 0;
}

function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
 $8 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] & 63]($0, $1, $3) | 0;
 if ($8) HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return $8 & 1 | 0;
}

function __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $3 = 0;
 $2 = $0 + 4 | 0;
 $$0 = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 do {
  HEAP32[$3 >> 2] = 0;
  $3 = (HEAP32[$2 >> 2] | 0) + 4 | 0;
  HEAP32[$2 >> 2] = $3;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNSt3__28weak_ptrIN3zim7ClusterEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!(HEAP32[$2 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv(HEAP32[$2 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__28weak_ptrIN3zim6BufferEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (!(HEAP32[$2 + 4 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 __ZNSt3__219__shared_weak_count14__release_weakEv(HEAP32[$2 + 4 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim7ArticleC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 $4 = HEAP32[$1 >> 2] | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = -1;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27collateIwE7do_hashEPKwS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $6 = 0, $7 = 0;
 $$0 = 0;
 $$020 = $1;
 while (1) {
  if (($$020 | 0) == ($2 | 0)) break;
  $6 = (HEAP32[$$020 >> 2] | 0) + ($$0 << 4) | 0;
  $7 = $6 & -268435456;
  $$0 = ($7 >>> 24 | $7) ^ $6;
  $$020 = $$020 + 4 | 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__27collateIwE12do_transformEPKwS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $2, $3);
 return;
}

function __ZNKSt3__27collateIcE12do_transformEPKcS3_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($0, $2, $3);
 return;
}

function _zcalloc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $4 = sp + 4 | 0;
 $5 = sp;
 HEAP32[sp + 8 >> 2] = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$5 >> 2] = $2;
 $9 = _malloc(Math_imul(HEAP32[$4 >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function __ZNSt3__24pairIKN3zim15cluster_index_tENS1_5CacheIS2_NS_10shared_ptrINS1_7ClusterEEEE4DataEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev((HEAP32[$1 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24pairIKN3zim15article_index_tENS1_5CacheIS2_NS_10shared_ptrIKNS1_6DirentEEEE4DataEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev((HEAP32[$1 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27collateIcE7do_hashEPKcS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$020 = 0, $7 = 0, $8 = 0;
 $$0 = 0;
 $$020 = $1;
 while (1) {
  if (($$020 | 0) == ($2 | 0)) break;
  $7 = ($$0 << 4) + (HEAP8[$$020 >> 0] | 0) | 0;
  $8 = $7 & -268435456;
  $$0 = ($8 >>> 24 | $8) ^ $7;
  $$020 = $$020 + 1 | 0;
 }
 return $$0 | 0;
}

function ___fseeko($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0, $9 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $8 = ___fseeko_unlocked($0, $1, $2) | 0;
  if ($phitmp) $9 = $8; else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else $9 = ___fseeko_unlocked($0, $1, $2) | 0;
 return $9 | 0;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($2 + (HEAP32[(HEAP32[$2 >> 2] | 0) + -12 >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__218__libcpp_refstringC2ERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 if (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) | 0) {
  $6 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc(HEAP32[$0 >> 2] | 0) | 0) + 8 | 0;
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 1;
 }
 return;
}

function dynCall_viiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 FUNCTION_TABLE_viiiiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0);
}

function __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $11 = $0 + 8 | 0;
 HEAP32[$11 >> 2] = -1;
 HEAP32[$11 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $11 = 0, $6 = 0;
 $6 = $0;
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 $11 = $0 + 8 | 0;
 HEAP32[$11 >> 2] = -1;
 HEAP32[$11 + 4 >> 2] = -1;
 return;
}

function _wmemcpy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$058 = 0, $$067 = 0, $$09 = 0;
 if ($2 | 0) {
  $$058 = $2;
  $$067 = $1;
  $$09 = $0;
  while (1) {
   $$058 = $$058 + -1 | 0;
   HEAP32[$$09 >> 2] = HEAP32[$$067 >> 2];
   if (!$$058) break; else {
    $$067 = $$067 + 4 | 0;
    $$09 = $$09 + 4 | 0;
   }
  }
 }
 return $0 | 0;
}

function _fixedtables($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 80 >> 2] = 31120;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 88 >> 2] = 9;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 84 >> 2] = 33168;
 HEAP32[(HEAP32[$1 >> 2] | 0) + 92 >> 2] = 5;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__223__system_error_category23default_error_conditionEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$sink = 0;
 if (($2 | 0) > 256) {
  __ZNSt3__215system_categoryEv() | 0;
  $$sink = 47980;
 } else {
  __ZNSt3__216generic_categoryEv() | 0;
  $$sink = 47976;
 }
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $$sink;
 return;
}

function __ZleIN3zim8offset_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = (__ZgtIN3zim8offset_tEEbRKT_S4_(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) ^ 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZleIN3zim7zsize_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $7 = (__ZgtIN3zim7zsize_tEEbRKT_S4_(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0) ^ 1;
 STACKTOP = sp;
 return $7 | 0;
}

function __ZNSt3__210__time_putD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $7 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 __THREW__ = 0;
 $2 = invoke_i(1) | 0;
 $3 = __THREW__;
 __THREW__ = 0;
 if ($3 & 1) {
  $7 = ___cxa_find_matching_catch_3(0) | 0;
  ___clang_call_terminate($7);
 }
 if (($1 | 0) != ($2 | 0)) _freelocale(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNK3zim8FileImpl16getCountClustersEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 __ZN3zim15cluster_index_tC2Ej($1, __ZNK3zim10Fileheader15getClusterCountEv((HEAP32[$2 >> 2] | 0) + 56 | 0) | 0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function __ZNK3zim8FileImpl16getCountArticlesEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 __ZN3zim15article_index_tC2Ej($1, __ZNK3zim10Fileheader15getArticleCountEv((HEAP32[$2 >> 2] | 0) + 56 | 0) | 0);
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function _lzma_check_is_supported($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 if ((HEAP32[$2 >> 2] | 0) >>> 0 > 15) HEAP8[$1 >> 0] = 0; else HEAP8[$1 >> 0] = HEAP8[22608 + (HEAP32[$2 >> 2] | 0) >> 0] | 0;
 STACKTOP = sp;
 return HEAP8[$1 >> 0] | 0;
}

function __ZgtIN3zim8offset_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __ZltIN3zim8offset_tEEbRKT_S4_(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZgtIN3zim7zsize_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 $6 = __ZltIN3zim7zsize_tEEbRKT_S4_(HEAP32[$3 >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZltIN3zim15cluster_index_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0 | 0;
}

function __ZltIN3zim15article_index_tEEbRKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[HEAP32[$2 >> 2] >> 2] | 0) >>> 0 < (HEAP32[HEAP32[$3 >> 2] >> 2] | 0) >>> 0 | 0;
}

function __ZNK3zim10Fileheader11hasChecksumEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = __ZNK3zim10Fileheader14getMimeListPosEv(HEAP32[$1 >> 2] | 0) | 0;
 $4 = tempRet0;
 STACKTOP = sp;
 return $4 >>> 0 > 0 | ($4 | 0) == 0 & $3 >>> 0 >= 80 | 0;
}

function _vli_ceil4_666($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $2 = 0, $3 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = $2;
 HEAP32[$3 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 $7 = $2;
 $13 = _i64Add(HEAP32[$7 >> 2] | 0, HEAP32[$7 + 4 >> 2] | 0, 3, 0) | 0;
 STACKTOP = sp;
 return $13 & -4 | 0;
}

function dynCall_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 return FUNCTION_TABLE_iiiiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0) | 0;
}

function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1;
 $4 = HEAP32[$0 + 8 >> 2] | 0;
 $6 = HEAP32[$0 + 4 >> 2] | 0;
 $7 = $4 - $6 | 0;
 HEAP32[$0 + 108 >> 2] = $7;
 if (($1 | 0) != 0 & ($7 | 0) > ($1 | 0)) HEAP32[$0 + 100 >> 2] = $6 + $1; else HEAP32[$0 + 100 >> 2] = $4;
 return;
}

function ___munmap($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = $0;
 HEAP32[$vararg_buffer + 4 >> 2] = $1;
 $4 = ___syscall_ret(___syscall91(91, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 44628;
 __ZNSt3__26localeC2Ev($0 + 4 | 0);
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 44564;
 __ZNSt3__26localeC2Ev($0 + 4 | 0);
 $2 = $0 + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 return;
}

function __ZN3zim12MemoryBufferILb1EED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43140;
 $4 = HEAP32[$2 + 24 >> 2] | 0;
 if ($4 | 0) __ZdaPv($4);
 __ZN3zim6BufferD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__26locale5__imp9use_facetEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 if (__ZNKSt3__26locale5__imp9has_facetEl($0, $1) | 0) return HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + ($1 << 2) >> 2] | 0; else {
  $3 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($3);
  ___cxa_throw($3 | 0, 42840, 182);
 }
 return 0;
}

function __ZN3zim8FilePartINS_4unix2FSEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim4unix2FDD2Ev($2 + 12 | 0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__25ctypeIcEC2EPKtbm($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 HEAP32[$0 + 4 >> 2] = $3 + -1;
 HEAP32[$0 >> 2] = 47364;
 $7 = $0 + 8 | 0;
 HEAP32[$7 >> 2] = $1;
 HEAP8[$0 + 12 >> 0] = $2 & 1;
 if (!$1) HEAP32[$7 >> 2] = __ZNSt3__25ctypeIcE13classic_tableEv() | 0;
 return;
}

function __ZNK3zim4File3endEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $1;
 $3 = HEAP32[$2 >> 2] | 0;
 __ZN3zim4File14const_iteratorC2EPKS0_jNS1_4ModeE($0, $3, __ZNK3zim4File16getCountArticlesEv($3) | 0, 0);
 STACKTOP = sp;
 return;
}

function _close($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_306($0) | 0;
 $2 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $4 = ___syscall_ret(($2 | 0) == -4 ? 0 : $2) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if ($1 | 0) {
  HEAP32[$0 + 4 >> 2] = $1;
  if (($1 | 0) == ($0 + 16 | 0)) {
   HEAP8[$0 + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv($1);
   break;
  }
 } while (0);
 return;
}

function __ZN3zim4UuidC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 dest = HEAP32[$1 >> 2] | 0;
 stop = dest + 16 | 0;
 do {
  HEAP8[dest >> 0] = 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 STACKTOP = sp;
 return;
}

function __ZNSt3__212bad_weak_ptrC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[HEAP32[$1 >> 2] >> 2] = 48116;
 HEAP32[$3 >> 2] = 47844;
 STACKTOP = sp;
 return;
}

function __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack = 0, $$unpack5 = 0;
 $$unpack = HEAP32[$1 >> 2] | 0;
 $$unpack5 = HEAP32[$1 + 4 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $$unpack;
 HEAP32[$0 + 8 >> 2] = $$unpack5;
 return;
}

function _rotr_32($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[$2 >> 2] | 0) >>> (HEAP32[$3 >> 2] | 0) | HEAP32[$2 >> 2] << 32 - (HEAP32[$3 >> 2] | 0) | 0;
}

function _dict_is_distance_valid($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[(HEAP32[$2 >> 2] | 0) + 8 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0 | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN3zim10FileReaderD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43032;
 __ZNSt3__210shared_ptrIKN3zim12FileCompoundEED2Ev($2 + 4 | 0);
 __ZN3zim6ReaderD2Ev($2);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if (!$2) $7 = 1; else {
  $4 = ___uselocale($2) | 0;
  $5 = ___ctype_get_mb_cur_max() | 0;
  if (!$4) $7 = $5; else {
   ___uselocale($4) | 0;
   $7 = $5;
  }
 }
 return $7 | 0;
}

function __ZN3zim11InvalidSizeC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$1 >> 2] = $3;
 HEAP32[HEAP32[$1 >> 2] >> 2] = 48116;
 HEAP32[$3 >> 2] = 43572;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) != 1) HEAP32[$7 >> 2] = $3;
 }
 return;
}

function __ZNSt3__211char_traitsIcE6assignERcRKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP8[HEAP32[$2 >> 2] >> 0] = HEAP8[HEAP32[$3 >> 2] >> 0] | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i$i = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $$0$i$i = 0;
 while (1) {
  if (($$0$i$i | 0) == 3) break;
  HEAP32[$0 + ($$0$i$i << 2) >> 2] = 0;
  $$0$i$i = $$0$i$i + 1 | 0;
 }
 return;
}

function __ZN3zim12BufferReaderD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43372;
 __ZNSt3__210shared_ptrIKN3zim6BufferEED2Ev($2 + 4 | 0);
 __ZN3zim6ReaderD2Ev($2);
 STACKTOP = sp;
 return;
}

function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer >> 2] = _dummy_306(HEAP32[$0 + 60 >> 2] | 0) | 0;
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZN3zim10Fileheader15setMinorVersionEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP16[$3 >> 1] = $1;
 HEAP16[(HEAP32[$2 >> 2] | 0) + 2 >> 1] = HEAP16[$3 >> 1] | 0;
 STACKTOP = sp;
 return;
}

function _lzma_lzma2_decoder_memusage($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = _lzma_lzma_decoder_memusage_nocheck(HEAP32[$1 >> 2] | 0) | 0;
 $5 = _i64Add(136, 0, $3 | 0, tempRet0 | 0) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $0 + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3;
 $$07 = $1;
 while (1) {
  if (($$07 | 0) == ($2 | 0)) break;
  HEAP8[$$0 >> 0] = HEAP8[$$07 >> 0] | 0;
  $$0 = $$0 + 1 | 0;
  $$07 = $$07 + 1 | 0;
 }
 return $2 | 0;
}

function __ZN3zim6Dirent11setRedirectENS_15article_index_tE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 >> 2];
 HEAP16[$3 >> 1] = -1;
 STACKTOP = sp;
 return;
}

function __ZN3zim15cluster_index_tC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __ZN12REAL_TYPEDEFIjEC2Ej(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim15article_index_tC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __ZN12REAL_TYPEDEFIjEC2Ej(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader15setClusterCountEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 48 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader15setArticleCountEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$07 = 0;
 $$0 = $3;
 $$07 = $1;
 while (1) {
  if (($$07 | 0) == ($2 | 0)) break;
  HEAP32[$$0 >> 2] = HEAP8[$$07 >> 0];
  $$0 = $$0 + 4 | 0;
  $$07 = $$07 + 1 | 0;
 }
 return $2 | 0;
}

function __ZN3zim10Fileheader13setLayoutPageEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 68 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim12blob_index_tC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 __ZN12REAL_TYPEDEFIjEC2Ej(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZN3zim10Fileheader11setMainPageEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 if (!(___toread($0) | 0)) if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 63]($0, $1, 1) | 0) == 1) $$0 = HEAPU8[$1 >> 0] | 0; else $$0 = -1; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211char_traitsIcE11eq_int_typeEii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 STACKTOP = sp;
 return (HEAP32[$2 >> 2] | 0) == (HEAP32[$3 >> 2] | 0) | 0;
}

function __ZN3zim10Fileheader15setMajorVersionEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 $3 = sp + 4 | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP16[$3 >> 1] = $1;
 HEAP16[HEAP32[$2 >> 2] >> 1] = HEAP16[$3 >> 1] | 0;
 STACKTOP = sp;
 return;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function ___ftello($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $phitmp = 0;
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($0) | 0) == 0;
  $6 = ___ftello_unlocked($0) | 0;
  if ($phitmp) $7 = $6; else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else $7 = ___ftello_unlocked($0) | 0;
 return $7 | 0;
}

function __ZNSt3__217__compressed_pairINS_9allocatorIN3zim9SubBufferEEES3_ED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__222__compressed_pair_elemIN3zim9SubBufferELi1ELb0EED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt13runtime_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 48156;
 __THREW__ = 0;
 invoke_vii(125, $0 + 4 | 0, $1 | 0);
 $3 = __THREW__;
 __THREW__ = 0;
 if ($3 & 1) {
  $5 = ___cxa_find_matching_catch_2() | 0;
  ___resumeException($5 | 0);
 } else return;
}

function b27(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 abort(27);
}

function __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $8 = 0;
 $8 = _catopen((HEAP8[$1 + 11 >> 0] | 0) < 0 ? HEAP32[$1 >> 2] | 0 : $1, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4DataD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev((HEAP32[$1 >> 2] | 0) + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4DataD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev((HEAP32[$1 >> 2] | 0) + 8 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt11logic_errorC2EPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 48136;
 __THREW__ = 0;
 invoke_vii(125, $0 + 4 | 0, $1 | 0);
 $3 = __THREW__;
 __THREW__ = 0;
 if ($3 & 1) {
  $5 = ___cxa_find_matching_catch_2() | 0;
  ___resumeException($5 | 0);
 } else return;
}

function __ZN3zim9SubBufferD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43196;
 __ZNSt3__210shared_ptrIKcED2Ev($2 + 24 | 0);
 __ZN3zim6BufferD2Ev($2);
 STACKTOP = sp;
 return;
}

function __ZN3zim6Dirent10setVersionEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__217__compressed_pairINS_9allocatorIKN3zim6DirentEEES4_ED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__222__compressed_pair_elemIKN3zim6DirentELi1ELb0EED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__28numpunctIwE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, 47488, __ZNSt3__211char_traitsIwE6lengthEPKw(47488) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE12do_falsenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 55139, __ZNSt3__211char_traitsIcE6lengthEPKc(55139) | 0);
 return;
}

function __ZNKSt3__28numpunctIwE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm($0, 47512, __ZNSt3__211char_traitsIwE6lengthEPKw(47512) | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_truenameEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0, 55145, __ZNSt3__211char_traitsIcE6lengthEPKc(55145) | 0);
 return;
}

function __ZN3zim6BufferD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$1 >> 2] = (HEAP32[$2 >> 2] | 0) + 4;
 __ZNSt3__28weak_ptrIN3zim6BufferEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__214__shared_countD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function __ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__213__vector_baseIN3zim8offset_tENS_9allocatorIS2_EEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__211char_traitsIcE2eqEcc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 1 | 0;
 $3 = sp;
 HEAP8[$2 >> 0] = $0;
 HEAP8[$3 >> 0] = $1;
 STACKTOP = sp;
 return (HEAP8[$2 >> 0] | 0) == (HEAP8[$3 >> 0] | 0) | 0;
}

function __ZNK3zim10Fileheader16getClusterPtrPosEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = (HEAP32[$1 >> 2] | 0) + 56 | 0;
 tempRet0 = HEAP32[$4 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function _lzma_index_hash_end($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 _lzma_free(HEAP32[$2 >> 2] | 0, HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim10Fileheader14getTitleIdxPosEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = (HEAP32[$1 >> 2] | 0) + 24 | 0;
 tempRet0 = HEAP32[$4 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function __ZNK3zim10Fileheader14getMimeListPosEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = (HEAP32[$1 >> 2] | 0) + 40 | 0;
 tempRet0 = HEAP32[$4 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function __ZN12REAL_TYPEDEFIjEC2Ej($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[$3 >> 2] = $varargs;
 $4 = _vsnprintf($0, $1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function ___bswap_32($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[$1 >> 2] | 0) >>> 24 | (HEAP32[$1 >> 2] | 0) >>> 8 & 65280 | HEAP32[$1 >> 2] << 8 & 16711680 | HEAP32[$1 >> 2] << 24 | 0;
}

function __ZNK3zim10Fileheader12getUrlPtrPosEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $4 = (HEAP32[$1 >> 2] | 0) + 32 | 0;
 tempRet0 = HEAP32[$4 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$4 >> 2] | 0;
}

function __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 switch (HEAP32[$0 + 4 >> 2] & 74) {
 case 64:
  {
   $$0 = 8;
   break;
  }
 case 8:
  {
   $$0 = 16;
   break;
  }
 case 0:
  {
   $$0 = 0;
   break;
  }
 default:
  $$0 = 10;
 }
 return $$0 | 0;
}

function _stream_decoder_get_check($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
 STACKTOP = sp;
 return HEAP32[(HEAP32[$2 >> 2] | 0) + 248 + 16 >> 2] | 0;
}

function __ZN3zim4unix2FDC2Ei($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 HEAP32[HEAP32[$2 >> 2] >> 2] = HEAP32[$3 >> 2];
 STACKTOP = sp;
 return;
}

function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
}

function __ZNSt3__24pairIbNS_10shared_ptrIN3zim7ClusterEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__210shared_ptrIN3zim7ClusterEED2Ev((HEAP32[$1 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__24pairIbNS_10shared_ptrIKN3zim6DirentEEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__210shared_ptrIKN3zim6DirentEED2Ev((HEAP32[$1 >> 2] | 0) + 4 | 0);
 STACKTOP = sp;
 return;
}

function __ZNK12REAL_TYPEDEFIyEcvbEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = HEAP32[$1 >> 2] | 0;
 STACKTOP = sp;
 return (HEAP32[$3 >> 2] | 0) != 0 | (HEAP32[$3 + 4 >> 2] | 0) != 0 | 0;
}

function _wmemset($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$056 = 0, $$07 = 0;
 if ($2 | 0) {
  $$056 = $2;
  $$07 = $0;
  while (1) {
   $$056 = $$056 + -1 | 0;
   HEAP32[$$07 >> 2] = $1;
   if (!$$056) break; else $$07 = $$07 + 4 | 0;
  }
 }
 return $0 | 0;
}

function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $2 = HEAP32[10989] | 0;
 _vfprintf($2, $0, $1) | 0;
 _fputc(10, $2) | 0;
 _abort();
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$7 >> 2] = $5;
 return 3;
}

function __ZNK3zim4File5beginEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $1;
 __ZN3zim4File14const_iteratorC2EPKS0_jNS1_4ModeE($0, HEAP32[$2 >> 2] | 0, 0, 0);
 STACKTOP = sp;
 return;
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(62796, 37) | 0)) {
  $3 = _pthread_getspecific(HEAP32[15700] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(55890, sp);
 return 0;
}

function __ZN3zim18ZimFileFormatErrorD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim18ZimFileFormatErrorD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZN3zim12MemoryBufferILb1EED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim12MemoryBufferILb1EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZN3zim12MemoryBufferILb0EED0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim12MemoryBufferILb0EED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNK12REAL_TYPEDEFIyEcvyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = HEAP32[$1 >> 2] | 0;
 tempRet0 = HEAP32[$3 + 4 >> 2] | 0;
 STACKTOP = sp;
 return HEAP32[$3 >> 2] | 0;
}

function __ZN3zim12MemoryBufferILb0EED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = 43592;
 __ZN3zim6BufferD2Ev($2);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function __ZNKSt3__26locale5__imp9has_facetEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $13 = 0, $5 = 0;
 $5 = HEAP32[$0 + 8 >> 2] | 0;
 if ((HEAP32[$0 + 12 >> 2] | 0) - $5 >> 2 >>> 0 > $1 >>> 0) $13 = (HEAP32[$5 + ($1 << 2) >> 2] | 0) != 0; else $13 = 0;
 return $13 | 0;
}

function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $2 = sp;
 HEAP32[$2 >> 2] = $varargs;
 $3 = _vsscanf($0, $1, $2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__26vectorIcNS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt3__213__vector_baseIcNS_9allocatorIcEEED2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEmw($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, 1, 45);
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc($0, 1, 45);
 return;
}

function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $varargs;
 $3 = _vfprintf(HEAP32[10924] | 0, $0, $1) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__26localeD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $3 + -1;
 if (!$3) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 255]($1);
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwm($0, $1, __ZNSt3__211char_traitsIwE6lengthEPKw($1) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($0, $1, __ZNSt3__211char_traitsIcE6lengthEPKc($1) | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15099] = 0;
 HEAP32[15098] = 47540;
 __ZNSt3__220__time_get_c_storageIwEC2Ev(60400);
 HEAP32[15098] = 45580;
 HEAP32[15100] = 45628;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15095] = 0;
 HEAP32[15094] = 47540;
 __ZNSt3__220__time_get_c_storageIcEC2Ev(60384);
 HEAP32[15094] = 45496;
 HEAP32[15096] = 45544;
 return;
}

function __ZNSt3__222__compressed_pair_elemIN3zim9SubBufferELi1ELb0EED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZN3zim9SubBufferD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = $0 + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (!$2) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] & 255]($0);
 return;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($0);
 if (!(_pthread_setspecific(HEAP32[15700] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(55989, sp);
}

function _read32le_744($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _read32le_709($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function _read32le_651($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZN3zim12BufferReaderD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim12BufferReaderD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZN3zim11InvalidSizeD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim11InvalidSizeD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__222__compressed_pair_elemIKN3zim6DirentELi1ELb0EED2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZN3zim6DirentD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function b15(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 abort(15);
 return 0;
}

function _read32le($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp + 4 | 0;
 $2 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = HEAP32[HEAP32[$1 >> 2] >> 2];
 STACKTOP = sp;
 return HEAP32[$2 >> 2] | 0;
}

function __ZN3zim10FileReaderD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim10FileReaderD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_mmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _lzma_raw_decoder_memusage($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = _lzma_raw_coder_memusage(44, HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_mmNS_12codecvt_modeE($2, $3, $4, 1114111, 0) | 0;
}

function __ZNKSt3__25ctypeIwE5do_isEtw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $9 = 0;
 if ($2 >>> 0 < 128) $9 = (HEAP16[(__ZNSt3__25ctypeIcE13classic_tableEv() | 0) + ($2 << 1) >> 1] & $1) << 16 >> 16 != 0; else $9 = 0;
 return $9 | 0;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62648) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62640) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62632) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62624) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62584) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62576) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62568) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62500) | 0);
 return;
}

function __ZN3zim9SubBufferD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 __ZN3zim9SubBufferD2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62432) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62424) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62416) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62392) | 0);
 return;
}

function __ZNSt3__211char_traitsIwE7not_eofEj($0) {
 $0 = $0 | 0;
 var $5 = 0;
 if (__ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, __ZNSt3__211char_traitsIwE3eofEv() | 0) | 0) $5 = ~(__ZNSt3__211char_traitsIwE3eofEv() | 0); else $5 = $0;
 return $5 | 0;
}

function __ZNKSt3__25ctypeIcE10do_tolowerEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $8 = $1;
 return $8 | 0;
}

function dynCall_iiiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 return FUNCTION_TABLE_iiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6) | 0;
}

function ___ofl_add($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0;
 $1 = ___ofl_lock() | 0;
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
 $4 = HEAP32[$1 >> 2] | 0;
 if ($4 | 0) HEAP32[$4 + 52 >> 2] = $0;
 HEAP32[$1 >> 2] = $0;
 ___ofl_unlock();
 return $0 | 0;
}

function __ZNKSt3__25ctypeIcE10do_toupperEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $8 = 0;
 if ($1 << 24 >> 24 > -1) $8 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + (($1 & 255) << 2) >> 2] & 255; else $8 = $1;
 return $8 | 0;
}

function _lzma_lz_decoder_memusage($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = _i64Add(4208, 0, HEAP32[$1 >> 2] | 0, 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function __ZNSt3__211char_traitsIcE6lengthEPKc($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 $3 = _strlen(HEAP32[$1 >> 2] | 0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function ___uselocale($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0;
 $2 = (___pthread_self_769() | 0) + 188 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ($0 | 0) HEAP32[$2 >> 2] = ($0 | 0) == (-1 | 0) ? 61236 : $0;
 return (($3 | 0) == 61236 ? -1 : $3) | 0;
}

function __ZNK3zim6Dirent12isLinktargetEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAPU16[HEAP32[$1 >> 2] >> 1] | 0 | 0) == 65534 | 0;
}

function __ZNSt3__210shared_ptrIN3zim12FileCompoundEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZNK3zim10Fileheader15getClusterCountEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] | 0;
}

function __ZNK3zim10Fileheader15getArticleCountEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] | 0;
}

function b14(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 abort(14);
 return 0;
}

function __ZNK3zim6Dirent10isRedirectEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAPU16[HEAP32[$1 >> 2] >> 1] | 0 | 0) == 65535 | 0;
}

function __ZNSt3__210shared_ptrIN3zim10FileReaderEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function _zcfree($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $3 = sp;
 HEAP32[sp + 4 >> 2] = $0;
 HEAP32[$3 >> 2] = $1;
 _free(HEAP32[$3 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0;
 $7 = $3 - $2 | 0;
 return ($7 >>> 0 < $4 >>> 0 ? $7 : $4) | 0;
}

function __ZNK3zim6Dirent9isDeletedEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAPU16[HEAP32[$1 >> 2] >> 1] | 0 | 0) == 65533 | 0;
}

function __ZN3zim18ZimFileFormatErrorD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 __ZNSt13runtime_errorD2Ev(HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIN3zim8FileImplEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6ReaderEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__210shared_ptrIKN3zim6DirentEE18__enable_weak_thisEz($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__25ctypeIwE10do_toupperEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_upper_tableEv() | 0) + ($1 << 2) >> 2] | 0; else $6 = $1;
 return $6 | 0;
}

function __ZNKSt3__25ctypeIwE10do_tolowerEw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $6 = 0;
 if ($1 >>> 0 < 128) $6 = HEAP32[(__ZNSt3__25ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 2) >> 2] | 0; else $6 = $1;
 return $6 | 0;
}

function __ZNKSt3__210error_code7messageEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = HEAP32[$1 + 4 >> 2] | 0;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$3 >> 2] | 0) + 24 >> 2] & 63]($0, $3, HEAP32[$1 >> 2] | 0);
 return;
}

function __ZNK3zim6Dirent12getNamespaceEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP8[(HEAP32[$1 >> 2] | 0) + 20 >> 0] | 0;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function _process($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 _transform((HEAP32[$1 >> 2] | 0) + 64 | 0, HEAP32[$1 >> 2] | 0);
 STACKTOP = sp;
 return;
}

function __ZNK3zim8FilePartINS_4unix2FSEE7fhandleEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[$1 >> 2] | 0) + 12 | 0;
}

function __ZNK12REAL_TYPEDEFIjEcvbEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[HEAP32[$1 >> 2] >> 2] | 0) != 0 | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(62800, 194) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(55939, sp);
}

function __ZNSt3__211char_traitsIcE6assignEPcmc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($1 | 0) _memset($0 | 0, (__ZNSt3__211char_traitsIcE11to_int_typeEc($2) | 0) & 255 | 0, $1 | 0) | 0;
 return $0 | 0;
}

function __ZNSt3__211char_traitsIcE12to_char_typeEi($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] & 255 | 0;
}

function dynCall_iiiiid(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = +a5;
 return FUNCTION_TABLE_iiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, +a5) | 0;
}

function __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 16 | 0;
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] | 1;
 if (!(HEAP32[$0 + 20 >> 2] & 1)) return; else ___cxa_rethrow();
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62688) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62696) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62680) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62672) | 0);
 return;
}

function __ZNSt3__25ctypeIcED2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 47364;
 $2 = HEAP32[$0 + 8 >> 2] | 0;
 if ($2 | 0) if (HEAP8[$0 + 12 >> 0] | 0) __ZdaPv($2);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__211char_traitsIcE11to_int_typeEc($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP8[$1 >> 0] = $0;
 STACKTOP = sp;
 return HEAPU8[$1 >> 0] | 0 | 0;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, 44868);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, 44820);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, 44772);
 __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0 + 8 | 0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, 44724);
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0 + 8 | 0);
 return;
}

function __ZNK3zim8FilePartINS_4unix2FSEE8filenameEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[$1 >> 2] | 0;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function b13(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 abort(13);
 return 0;
}

function __ZNKSt3__26locale9use_facetERNS0_2idE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9use_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0;
}

function __ZNKSt3__26locale9has_facetERNS0_2idE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 >> 2] | 0;
 return __ZNKSt3__26locale5__imp9has_facetEl($2, __ZNSt3__26locale2id5__getEv($1) | 0) | 0;
}

function __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ((HEAP32[$1 >> 2] | 0) == ($2 | 0) ? (HEAP32[$1 + 4 >> 2] | 0) == ($0 | 0) : 0) | 0;
}

function _memalign($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if ($0 >>> 0 < 9) {
  $$0 = _malloc($1) | 0;
  return $$0 | 0;
 } else {
  $$0 = _internal_memalign($0, $1) | 0;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__26localeC2ERKS0_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $2;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1;
 return;
}

function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) $$0 = 0; else $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0;
 return (($$0 | 0) == 0 ? $0 : $$0) | 0;
}

function __ZNK12REAL_TYPEDEFIjEcvjEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62616) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62608) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62600) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62592) | 0);
 return;
}

function __ZN3zim6ReaderC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP32[HEAP32[$1 >> 2] >> 2] = 43072;
 STACKTOP = sp;
 return;
}

function _dict_reset($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 HEAP8[(HEAP32[$1 >> 2] | 0) + 20 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function __ZNK3zim6Dirent6getUrlEv($0) {
 $0 = $0 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = sp;
 HEAP32[$1 >> 2] = $0;
 STACKTOP = sp;
 return (HEAP32[$1 >> 2] | 0) + 36 | 0;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0 + (HEAP32[(HEAP32[$0 >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__28numpunctIwED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 47456;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 16 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28numpunctIcED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 47416;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0 + 12 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__29__num_getIwE10__do_widenERNS_8ios_baseEPw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNKSt3__29__num_getIwE12__do_widen_pIwEEPKT_RNS_8ios_baseEPS3_($0, $1, $2) | 0;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62408) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62384) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62664) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62656) | 0);
 return;
}

function b26(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 abort(26);
}

function __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62360) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62352) | 0);
 return;
}

function runPostSets() {}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62400) | 0);
 return;
}

function __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26locale5__imp7installEPNS0_5facetEl($0, $1, __ZNSt3__26locale2id5__getEv(62368) | 0);
 return;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__211char_traitsIwE4moveEPwPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$2) $5 = $0; else {
  _wmemmove($0, $1, $2) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function __ZNSt3__211char_traitsIwE6assignEPwmw($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$1) $5 = $0; else {
  _wmemset($0, $2, $1) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function __ZNSt3__211char_traitsIwE4copyEPwPKwm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $5 = 0;
 if (!$2) $5 = $0; else {
  _wmemcpy($0, $1, $2) | 0;
  $5 = $0;
 }
 return $5 | 0;
}

function b12(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(12);
 return 0;
}

function __ZNKSt3__29__num_getIcE10__do_widenERNS_8ios_baseEPc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0, $1, $2) | 0;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 >> 0] = 2;
 HEAP8[$0 + 1 >> 0] = 3;
 HEAP8[$0 + 2 >> 0] = 0;
 HEAP8[$0 + 3 >> 0] = 4;
 return;
}

function __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($0) {
 $0 = $0 | 0;
 __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv(HEAP32[HEAP32[$0 >> 2] >> 2] | 0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$4 >> 2] = $2;
 return 3;
}

function ___DOUBLE_BITS_498($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function ___DOUBLE_BITS_97($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0;
 $1 = HEAP32[tempDoublePtr >> 2] | 0;
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 return $1 | 0;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function b25(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(25);
}

function __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__210__time_putD2Ev($0 + 8 | 0);
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__28numpunctIwE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 16 | 0);
 return;
}

function __ZNKSt3__28numpunctIcE11do_groupingEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0, $1 + 12 | 0);
 return;
}

function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0;
  $$0 = -1;
 } else $$0 = $0;
 return $$0 | 0;
}

function b11(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(11);
 return 0;
}

function __ZNSt3__26__clocEv() {
 if (!(HEAP8[59976] | 0)) if (___cxa_guard_acquire(59976) | 0) HEAP32[15594] = ___newlocale(2147483647, 53047, 0) | 0;
 return HEAP32[15594] | 0;
}

function __ZNKSt3__214error_category23default_error_conditionEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 return;
}

function __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 8 + 3 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNSt13runtime_errorC2ERKS_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 48156;
 __ZNSt3__218__libcpp_refstringC2ERKS0_($0 + 4 | 0, $1 + 4 | 0);
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 63](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0 | 0;
 if ((HEAP8[$0 + 11 >> 0] | 0) < 0) __ZdlPv(HEAP32[$0 >> 2] | 0);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function b24(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(24);
}

function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0;
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15093] = 0;
 HEAP32[15092] = 47108;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15091] = 0;
 HEAP32[15090] = 47080;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15089] = 0;
 HEAP32[15088] = 47052;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15087] = 0;
 HEAP32[15086] = 47024;
 return;
}

function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memmove($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function dynCall_diii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return +FUNCTION_TABLE_diii[index & 3](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($2 | 0) _memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
 return $0 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15077] = 0;
 HEAP32[15076] = 45444;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15075] = 0;
 HEAP32[15074] = 45392;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_() {
 HEAP32[15073] = 0;
 HEAP32[15072] = 45328;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_() {
 HEAP32[15071] = 0;
 HEAP32[15070] = 45264;
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) $$0 = 0; else {
  HEAP8[$0 >> 0] = 1;
  $$0 = 1;
 }
 return $$0 | 0;
}

function b10(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(10);
 return 0;
}

function __ZNSt3__26locale5facet16__on_zero_sharedEv($0) {
 $0 = $0 | 0;
 if ($0 | 0) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] & 255]($0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $1 >>> 0 <= $0 >>> 0 & $0 >>> 0 < $2 >>> 0 | 0;
}

function __ZN3zim11InvalidSizeD2Ev($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $3 = 0;
 if (!$0) $3 = 0; else $3 = (___dynamic_cast($0, 42720, 42872, 0) | 0) != 0 & 1;
 return $3 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale2id6__initEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = HEAP32[15595] | 0;
 HEAP32[15595] = $1 + 1;
 HEAP32[$0 + 4 >> 2] = $1 + 1;
 return;
}

function __ZNKSt3__212__do_message7messageEi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 __ZNSt3__212_GLOBAL__N_113do_strerror_rEi($0, $2);
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function _wcslen($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 $$0 = $0;
 while (1) if (!(HEAP32[$$0 >> 2] | 0)) break; else $$0 = $$0 + 4 | 0;
 return $$0 - $0 >> 2 | 0;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function _strtoull_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoull($0, $1, $2) | 0;
 return $4 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN3zim6ReaderD2Ev($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 STACKTOP = sp;
 return;
}

function _strtoll_l($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = _strtoll($0, $1, $2) | 0;
 return $4 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 44628;
 __ZNSt3__26localeD2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 44564;
 __ZNSt3__26localeD2Ev($0 + 4 | 0);
 return;
}

function ___ctype_get_mb_cur_max() {
 var $4 = 0;
 $4 = (HEAP32[HEAP32[(___pthread_self_646() | 0) + 188 >> 2] >> 2] | 0) == 0;
 return ($4 ? 1 : 4) | 0;
}

function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw($0 | 0, 42760, 172);
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function b23(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(23);
}

function __ZNSt3__26locale5__imp12make_classicEv() {
 __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_();
 HEAP32[15676] = 60464;
 return 62704;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _strtoll($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox($0, $1, $2, 0, -2147483648) | 0;
 return $3 | 0;
}

function __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZN3zim6ReaderD0Ev($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 _llvm_trap();
}

function __ZN3zim6BufferD0Ev($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP32[sp >> 2] = $0;
 _llvm_trap();
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 63](a1 | 0, a2 | 0) | 0;
}

function __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNKSt3__25ctypeIwE9do_narrowEwc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 >>> 0 < 128 ? $1 & 255 : $2) | 0;
}

function b9(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(9);
 return 0;
}

function __ZNSt3__211__stdoutbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__211__stdoutbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__25ctypeIcE9do_narrowEcc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($1 << 24 >> 24 > -1 ? $1 : $2) | 0;
}

function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __GLOBAL__sub_I_libzim_resources_cpp() {
 ___cxx_global_var_init();
 ___cxx_global_var_init_5();
 ___cxx_global_var_init_7();
 return;
}

function _strtoull($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = _strtox($0, $1, $2, -1, -1) | 0;
 return $3 | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return $0 | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_() {
 __ZNSt3__27codecvtIwc11__mbstate_tEC2Em(60192, 1);
 return;
}

function __ZNSt3__210__stdinbufIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210__stdinbufIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev($0);
 __ZdlPv($0);
 return;
}

function b8(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(8);
 return 0;
}

function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) $$0 = 0; else $$0 = _wcrtomb($0, $1, 0) | 0;
 return $$0 | 0;
}

function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0;
 return (($1 | 0) == 0 ? $0 : $3) | 0;
}

function _out_491($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) ___fwritex($1, $2, $0) | 0;
 return;
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIwE3eofEv() | 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__211char_traitsIcE3eofEv() | 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 48156;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZNSt3__27codecvtIwc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27codecvtIwc11__mbstate_tED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale5__imp11make_globalEv() {
 __ZNSt3__26localeC2ERKS0_(62712, __ZNSt3__26locale7classicEv() | 0);
 return 62712;
}

function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 48136;
 __ZNSt3__218__libcpp_refstringD2Ev($0 + 4 | 0);
 return;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 127](a1 | 0, a2 | 0);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_() {
 HEAP32[15053] = 0;
 HEAP32[15052] = 47676;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_() {
 HEAP32[15055] = 0;
 HEAP32[15054] = 47724;
 return;
}

function __ZNKSt3__29__num_getIcE12__do_widen_pERNS_8ios_baseEPc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return 40416;
}

function b22(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(22);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_() {
 HEAP32[15047] = 0;
 HEAP32[15046] = 47628;
 return;
}

function _mbrlen($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbrtowc(0, $0, $1, ($2 | 0) == 0 ? 61300 : $2) | 0;
}

function __ZNSt3__211char_traitsIwE6assignERwRKw($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
 return;
}

function __ZNKSt3__28ios_base6getlocEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZNSt3__26localeC2ERKS0_($0, $1 + 28 | 0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_() {
 __ZNSt3__25ctypeIcEC2EPKtbm(60160, 0, 0, 1);
 return;
}

function __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8max_sizeEv($0) {
 $0 = $0 | 0;
 return 1073741823;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_() {
 HEAP32[15085] = 0;
 HEAP32[15084] = 46968;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_() {
 HEAP32[15083] = 0;
 HEAP32[15082] = 46912;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_() {
 HEAP32[15081] = 0;
 HEAP32[15080] = 46856;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_() {
 HEAP32[15079] = 0;
 HEAP32[15078] = 46800;
 return;
}

function __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2;
}

function __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($0) {
 $0 = $0 | 0;
 return 2;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) $4 = 1; else $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1;
 return $4 | 0;
}

function __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27codecvtIDic11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__217__widen_from_utf8ILm32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function b7(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(7);
 return 0;
}

function ___cxa_throw__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 ___cxa_throw(p0 | 0, p1 | 0, p2 | 0);
}

function __ZNSt3__27codecvtIcc11__mbstate_tED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__217iostream_categoryEv() {
 if (!(HEAP8[59968] | 0)) if (___cxa_guard_acquire(59968) | 0) {}
 return 44932;
}

function __ZNSt3__216__narrow_to_utf8ILm32EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__216generic_categoryEv() {
 if (!(HEAP8[60632] | 0)) if (___cxa_guard_acquire(60632) | 0) {}
 return 47976;
}

function __ZNSt3__210__stdinbufIwE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 0) | 0;
}

function __ZNSt3__210__stdinbufIcE9underflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 0) | 0;
}

function __ZNSt3__215system_categoryEv() {
 if (!(HEAP8[60640] | 0)) if (___cxa_guard_acquire(60640) | 0) {}
 return 47980;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0 | 0;
 return $0 + 12 | 0;
}

function __ZNSt3__211char_traitsIwE11eq_int_typeEjj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($0 | 0) == ($1 | 0) | 0;
}

function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function b6(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = +p4;
 abort(6);
 return 0;
}

function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_571() | 0) + 188 >> 2] | 0) | 0;
}

function ___loc_is_allocated($0) {
 $0 = $0 | 0;
 return ($0 | 0) != 44112 & (($0 | 0) != 0 & ($0 | 0) != 61260) & 1 | 0;
}

function __ZNSt3__28ios_base7failureD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_base7failureD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_() {
 HEAP32[15113] = 0;
 HEAP32[15112] = 47168;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_() {
 HEAP32[15111] = 0;
 HEAP32[15110] = 47136;
 return;
}

function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0 | 0;
 return __ZNKSt3__218__libcpp_refstring5c_strEv($0 + 4 | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_() {
 HEAP32[15039] = 0;
 HEAP32[15038] = 45232;
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_() {
 HEAP32[15037] = 0;
 HEAP32[15036] = 45200;
 return;
}

function __ZNSt3__210__stdinbufIwE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIwE9__getcharEb($0, 1) | 0;
}

function __ZNSt3__210__stdinbufIcE5uflowEv($0) {
 $0 = $0 | 0;
 return __ZNSt3__210__stdinbufIcE9__getcharEb($0, 1) | 0;
}

function __ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}

function __ZNSt3__210moneypunctIwLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 127](a1 | 0) | 0;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_() {
 __ZNSt3__26locale5__impC2Em(60464, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_() {
 HEAP32[15045] = 0;
 HEAP32[15044] = 47560;
 return;
}

function _do_read_405($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIwEEmPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 >> 2 | 0;
}

function b21(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(21);
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_() {
 __ZNSt3__28numpunctIwEC2Em(60248, 1);
 return;
}

function __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_() {
 __ZNSt3__28numpunctIcEC2Em(60224, 1);
 return;
}

function _isxdigit($0) {
 $0 = $0 | 0;
 return ((($0 | 32) + -97 | 0) >>> 0 < 6 | (_isdigit($0) | 0) != 0) & 1 | 0;
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[15701] | 0;
 HEAP32[15701] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}

function __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_919($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0;
}

function __ZNSt3__212system_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212system_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__212bad_weak_ptrD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212bad_weak_ptrD2Ev($0);
 __ZdlPv($0);
 return;
}

function _clock_gettime__wrapper(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 return _clock_gettime(p0 | 0, p1 | 0) | 0;
}

function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[12001] | 0;
 HEAP32[12001] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__26locale5facetD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__26locale5__impD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5__impD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28messagesIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28messagesIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__25ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__25ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNSt3__212_GLOBAL__N_17countofIcEEmPKT_S4_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 - $0 | 0;
}

function __ZNSt3__28numpunctIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIwED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__28numpunctIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28numpunctIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc($0) {
 $0 = $0 | 0;
 return $0 + -12 | 0;
}

function __ZNSt3__27collateIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIwED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27collateIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__27collateIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__25ctypeIwED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function b5(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(5);
 return 0;
}

function _catgets($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return $3 | 0;
}

function _pthread_cond_broadcast__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_cond_broadcast(p0 | 0) | 0;
}

function _fseek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___fseeko($0, $1, $2) | 0;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt12out_of_rangeD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt12length_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__28numpunctIwE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2] | 0;
}

function __ZNKSt3__25ctypeIwE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 << 24 >> 24 | 0;
}

function _strtold_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtold($0, $1));
}

function __ZNSt3__28ios_baseD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__28ios_baseD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__25ctypeIcED0Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__25ctypeIcED2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__210moneypunctIwLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIwLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIcLb1EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__210moneypunctIcLb0EED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__28numpunctIwE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2] | 0;
}

function __ZNSt3__28ios_base7failureD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__212system_errorD2Ev($0);
 return;
}

function __ZNKSt3__28numpunctIcE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 9 >> 0] | 0;
}

function __ZNKSt3__28numpunctIcE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 8 >> 0] | 0;
}

function _strtof_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtof($0, $1));
}

function _strtod_l($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return +(+_strtod($0, $1));
}

function __ZNSt3__220__time_get_c_storageIwEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 47808;
 return;
}

function __ZNSt3__220__time_get_c_storageIcEC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 47772;
 return;
}

function _pthread_mutex_unlock__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_mutex_unlock(p0 | 0) | 0;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($0) {
 $0 = $0 | 0;
 return 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 return (x ? 31 - (Math_clz32(x ^ x - 1) | 0) | 0 : 32) | 0;
}

function ___cxx_global_var_init_5() {
 __ZL13init_resourcePKcPKhi(60660, 48563, 688, 692);
 return;
}

function ___cxx_global_var_init() {
 __ZL13init_resourcePKcPKhi(60648, 48585, 1392, 4203);
 return;
}

function __ZNSt9bad_allocD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt9bad_allocD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 2147483647;
}

function b20(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(20);
}

function _pthread_mutex_lock__wrapper(p0) {
 p0 = p0 | 0;
 return _pthread_mutex_lock(p0 | 0) | 0;
}

function ___cxx_global_var_init_7() {
 __ZL13init_resourcePKcPKhi(60672, 48409, 16, 659);
 return;
}

function __ZNSt3__28messagesIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__28messagesIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__25ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function __ZNSt3__212system_errorD2Ev($0) {
 $0 = $0 | 0;
 __ZNSt13runtime_errorD2Ev($0);
 return;
}

function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function __ZNSt8bad_castD0Ev($0) {
 $0 = $0 | 0;
 __ZNSt8bad_castD2Ev($0);
 __ZdlPv($0);
 return;
}

function __ZNSt3__27collateIwED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__27collateIcED2Ev($0) {
 $0 = $0 | 0;
 __ZNSt3__26locale5facetD2Ev($0);
 return;
}

function __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 >> 2] | 0;
}

function __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv($0) {
 $0 = $0 | 0;
 return 1;
}

function _freelocale($0) {
 $0 = $0 | 0;
 if (___loc_is_allocated($0) | 0) _free($0);
 return;
}

function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 4;
}

function __ZNKSt3__25ctypeIcE8do_widenEc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $1 | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv($0) {
 $0 = $0 | 0;
 return 1;
}

function __ZSt18uncaught_exceptionv() {
 return (__ZSt19uncaught_exceptionsv() | 0) > 0 | 0;
}

function __ZNSt3__224__generic_error_categoryD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv($0) {
 $0 = $0 | 0;
 return 127;
}

function __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv($0) {
 $0 = $0 | 0;
 return 127;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0);
 return 0.0;
}

function _strtold($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox_199($0, $1, 2));
}

function __ZSt19uncaught_exceptionsv() {
 return (___cxa_uncaught_exception() | 0) & 1 | 0;
}

function __ZNSt3__223__system_error_categoryD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNSt3__211char_traitsIwE6lengthEPKw($0) {
 $0 = $0 | 0;
 return _wcslen($0) | 0;
}

function __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv($0) {
 $0 = $0 | 0;
 return 1;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0;
}

function _strtof($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox_199($0, $1, 0));
}

function _strtod($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return +(+_strtox_199($0, $1, 1));
}

function __ZNKSt3__28messagesIwE8do_closeEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNKSt3__28messagesIcE8do_closeEl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}

function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0 | 0;
 return 1;
}

function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(4);
 return 0;
}

function __ZNKSt3__224__generic_error_category4nameEv($0) {
 $0 = $0 | 0;
 return 55416;
}

function __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv($0) {
 $0 = $0 | 0;
 return 0;
}

function __ZNSt3__219__iostream_categoryD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function __ZNSt3__211char_traitsIwE12to_char_typeEj($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function __ZNKSt3__223__system_error_category4nameEv($0) {
 $0 = $0 | 0;
 return 55541;
}

function __ZNSt3__211char_traitsIwE11to_int_typeEw($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function _isxdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isxdigit($0) | 0;
}

function ___emscripten_environ_constructor() {
 ___buildEnvironment(61316);
 return;
}

function __ZNSt9bad_allocC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 48096;
 return;
}

function _isdigit_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _isdigit($0) | 0;
}

function __ZNSt8bad_castC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 48216;
 return;
}

function __ZNKSt3__219__iostream_category4nameEv($0) {
 $0 = $0 | 0;
 return 52765;
}

function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}

function ___cxx_global_var_init_510() {
 __ZNSt3__28ios_base4InitC2Ev(0);
 return;
}

function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}

function __GLOBAL__sub_I_htmlparse_cc() {
 ___cxx_global_var_init_448();
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 63]();
}

function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(19);
}

function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}

function __ZNSt3__219__shared_weak_countD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap();
}

function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNKSt3__212bad_weak_ptr4whatEv($0) {
 $0 = $0 | 0;
 return 55192;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}

function __ZNSt3__214__shared_countD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap();
}

function __ZNSt9exceptionD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(3);
 return 0;
}

function _catopen($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -1 | 0;
}

function __GLOBAL__I_000101() {
 ___cxx_global_var_init_510();
 return;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZNSt3__214error_categoryD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt3__214__shared_countD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNKSt9exception4whatEv($0) {
 $0 = $0 | 0;
 return 56160;
}

function __ZNKSt9bad_alloc4whatEv($0) {
 $0 = $0 | 0;
 return 56132;
}

function __ZNKSt8bad_cast4whatEv($0) {
 $0 = $0 | 0;
 return 56243;
}

function __ZNSt3__212bad_weak_ptrD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual();
}

function __ZNSt3__26locale5facetD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt3__212__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(18);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function ___pthread_self_769() {
 return _pthread_self() | 0;
}

function ___pthread_self_751() {
 return _pthread_self() | 0;
}

function ___pthread_self_741() {
 return _pthread_self() | 0;
}

function ___pthread_self_732() {
 return _pthread_self() | 0;
}

function ___pthread_self_727() {
 return _pthread_self() | 0;
}

function ___pthread_self_646() {
 return _pthread_self() | 0;
}

function ___pthread_self_571() {
 return _pthread_self() | 0;
}

function ___pthread_self_383() {
 return _pthread_self() | 0;
}

function _pthread_cond_broadcast(x) {
 x = x | 0;
 return 0;
}

function ___cxa_end_catch__wrapper() {
 ___cxa_end_catch();
}

function __Znam($0) {
 $0 = $0 | 0;
 return __Znwm($0) | 0;
}

function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0);
 return;
}

function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0;
}

function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9exceptionD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0);
 return;
}

function __ZNSt8bad_castD2Ev($0) {
 $0 = $0 | 0;
 return;
}

function __ZNSt3__211char_traitsIwE3eofEv() {
 return -1;
}

function __ZNSt3__211char_traitsIcE3eofEv() {
 return -1;
}

function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0;
}

function ___ofl_lock() {
 ___lock(61288);
 return 61296;
}

function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}

function _dummy_306($0) {
 $0 = $0 | 0;
 return $0 | 0;
}

function ___cxa_rethrow__wrapper() {
 ___cxa_rethrow();
}

function ___ofl_unlock() {
 ___unlock(61288);
 return;
}

function b2(p0) {
 p0 = p0 | 0;
 abort(2);
 return 0;
}

function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}

function ___lockfile($0) {
 $0 = $0 | 0;
 return 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 return;
}

function _catclose($0) {
 $0 = $0 | 0;
 return 0;
}

function ___ctype_toupper_loc() {
 return 44516;
}

function ___ctype_tolower_loc() {
 return 44512;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function ___errno_location() {
 return 61192;
}

function stackSave() {
 return STACKTOP | 0;
}

function b17(p0) {
 p0 = p0 | 0;
 abort(17);
}

function ___ctype_b_loc() {
 return 44520;
}

function _pthread_self() {
 return 44136;
}

function __get_environ() {
 return 61316;
}

function b1() {
 abort(1);
 return 0;
}

function b16() {
 abort(16);
}

function _dummy() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_diii = [b0,__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj];
var FUNCTION_TABLE_i = [b1,__ZNSt3__26__clocEv,__ZNSt3__26locale5__imp12make_classicEv,__ZNSt3__26locale5__imp11make_globalEv,__ZNSt3__26locale8__globalEv,___cxa_get_globals_fast,b1,b1];
var FUNCTION_TABLE_ii = [b2,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNK3zim10FileReader4sizeEv,__ZNK3zim10FileReader6offsetEv,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNK3zim12BufferReader4sizeEv,__ZNK3zim12BufferReader6offsetEv,_lzma_lzma_decoder_memusage,_lzma_lzma2_decoder_memusage,_lzma_delta_coder_memusage,__ZNKSt13runtime_error4whatEv,__ZNKSt9exception4whatEv,___stdio_close,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNKSt3__219__iostream_category4nameEv,__ZNSt3__211__stdoutbufIwE4syncEv,__ZNSt3__211__stdoutbufIcE4syncEv,__ZNSt3__210__stdinbufIwE9underflowEv,__ZNSt3__210__stdinbufIwE5uflowEv,__ZNSt3__210__stdinbufIcE9underflowEv,__ZNSt3__210__stdinbufIcE5uflowEv
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIcE7__weeksEv,__ZNKSt3__220__time_get_c_storageIcE8__monthsEv,__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIcE3__cEv,__ZNKSt3__220__time_get_c_storageIcE3__rEv,__ZNKSt3__220__time_get_c_storageIcE3__xEv,__ZNKSt3__220__time_get_c_storageIcE3__XEv,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__220__time_get_c_storageIwE7__weeksEv,__ZNKSt3__220__time_get_c_storageIwE8__monthsEv,__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__220__time_get_c_storageIwE3__cEv,__ZNKSt3__220__time_get_c_storageIwE3__rEv,__ZNKSt3__220__time_get_c_storageIwE3__xEv,__ZNKSt3__220__time_get_c_storageIwE3__XEv,__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv
,__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__28numpunctIcE16do_decimal_pointEv,__ZNKSt3__28numpunctIcE16do_thousands_sepEv,__ZNKSt3__28numpunctIwE16do_decimal_pointEv,__ZNKSt3__28numpunctIwE16do_thousands_sepEv,__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__212bad_weak_ptr4whatEv,__ZNKSt3__224__generic_error_category4nameEv,__ZNKSt3__223__system_error_category4nameEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv,__Znwm,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNK3zim4File11getFilesizeEv,__ZNK3zim4File16getCountArticlesEv,__ZNK3zim4File14const_iteratordeEv,__ZNK3zim7Article12getNamespaceEv,__ZNK3zim7Article10isRedirectEv,__ZNK3zim7Article14getArticleSizeEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv,_fclose
,__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,__ZNK3zim6Dirent16getClusterNumberEv,__ZNK3zim6Dirent13getBlobNumberEv,_pthread_mutex_unlock__wrapper,__ZNK3zim8FileImpl16getCountClustersEv,__ZNK3zim10Fileheader14getChecksumPosEv,_pthread_mutex_lock__wrapper,__ZN3zim7Cluster11read_headerIyEENS_8offset_tEv,__ZN3zim7Cluster11read_headerIjEENS_8offset_tEv,_stream_decoder_get_check,__ZN3zim4unix2FD5closeEv,__ZNK3zim4unix2FD7getSizeEv,_pthread_cond_broadcast__wrapper,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNK3zim10FileReader4readENS_8offset_tE,__ZNKSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE13__get_deleterERKSt9type_info,__ZNK3zim12MemoryBufferILb1EE4dataENS_8offset_tE,__ZNK3zim6Buffer2atENS_8offset_tE,__ZNKSt3__219__shared_weak_count13__get_deleterERKSt9type_info,__ZNK3zim9SubBuffer4dataENS_8offset_tE,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNK3zim12BufferReader4readENS_8offset_tE,__ZNKSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE13__get_deleterERKSt9type_info,__ZNK3zim12MemoryBufferILb0EE4dataENS_8offset_tE,__ZNKSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNKSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE13__get_deleterERKSt9type_info,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__211__stdoutbufIwE8overflowEj,__ZNSt3__211__stdoutbufIcE8overflowEi,__ZNSt3__210__stdinbufIwE9pbackfailEj,__ZNSt3__210__stdinbufIcE9pbackfailEi,__ZNKSt3__25ctypeIcE10do_toupperEc,__ZNKSt3__25ctypeIcE10do_tolowerEc,__ZNKSt3__25ctypeIcE8do_widenEc
,__ZNKSt3__25ctypeIwE10do_toupperEw,__ZNKSt3__25ctypeIwE10do_tolowerEw,__ZNKSt3__25ctypeIwE8do_widenEc,__ZNKSt3__26locale9use_facetERNS0_2idE,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc,__ZNKSt3__26locale9has_facetERNS0_2idE,__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZlsIyERNSt3__213basic_ostreamIcNS0_11char_traitsIcEEEES5_RK12REAL_TYPEDEFIT_E,__ZNK3zim7Cluster11getBlobSizeENS_12blob_index_tE,__ZN3zim8FileImpl16getClusterOffsetENS_15cluster_index_tE,__ZNK3zim6Buffer2asIyEET_NS_8offset_tE,__ZNK3zim6Buffer2asIjEET_NS_8offset_tE,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEErsERj,__ZNSt3__2rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_RS4_,_decoder_find,__ZNK3zim6Buffer2asItEET_NS_8offset_tE,__ZNSt3__23mapIcN3zim15article_index_tENS_4lessIcEENS_9allocatorINS_4pairIKcS2_EEEEEixERS7_,__ZN3zim8envValueEPKcj,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,__ZplIN3zim7zsize_tEET_S2_RKS2_,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEi,__ZN3zim8FileImpl15getIndexByTitleENS_15article_index_tE,_clock_gettime__wrapper,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiii = [b4,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl,_lzma_lzma_decoder_init,_lzma_lzma2_decoder_init,_lzma_simple_x86_decoder_init,_lzma_simple_powerpc_decoder_init,_lzma_simple_ia64_decoder_init,_lzma_simple_arm_decoder_init,_lzma_simple_armthumb_decoder_init,_lzma_simple_sparc_decoder_init,_lzma_delta_decoder_init,___stdout_write,___stdio_seek,___stdio_read,___stdio_write,_sn_write,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwl,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwl,__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi,__ZNSt3__211__stdoutbufIwE6xsputnEPKwl,__ZNSt3__211__stdoutbufIcE6xsputnEPKcl,__ZNKSt3__27collateIcE7do_hashEPKcS3_,__ZNKSt3__27collateIwE7do_hashEPKwS3_,__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE
,__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__25ctypeIcE10do_toupperEPcPKc,__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__25ctypeIcE9do_narrowEcc,__ZNKSt3__25ctypeIwE5do_isEtw,__ZNKSt3__25ctypeIwE10do_toupperEPwPKw,__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__25ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEy,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEx,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,__ZN3zim15lzma_uncompressEPKcNS_7zsize_tEPS2_,__ZN3zim14zip_uncompressEPKcNS_7zsize_tEPS2_,_zcalloc,_lzma_block_decoder_init,__ZN3zim8FileImpl9getOffsetEPKNS_6ReaderEm,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm,__ZN3zim6Reader8can_readENS_8offset_tENS_7zsize_tE,_do_read_405,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwm,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,_lzma_lzma_props_decode,_lzma_lzma2_props_decode,_lzma_simple_props_decode,_lzma_delta_props_decode,__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw,__ZNK3zim4unix2FD6readAtEPcNS_7zsize_tENS_8offset_tE,_simple_coder_update,__ZNSt3__26__treeINS_12__value_typeIN3zim15cluster_index_tENS2_5CacheIS3_NS_10shared_ptrINS2_7ClusterEEEE4DataEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS_9allocatorISA_EEE30__emplace_hint_unique_key_argsIS3_JNS_4pairIKS3_S9_EEEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEElEENS_21__tree_const_iteratorISA_SQ_lEERKT_DpOT0_,_lzma_decoder_init,_lzma2_decoder_init,__ZNSt3__26__treeINS_12__value_typeIN3zim15article_index_tENS2_5CacheIS3_NS_10shared_ptrIKNS2_6DirentEEEE4DataEEENS_19__map_value_compareIS3_SB_NS_4lessIS3_EELb1EEENS_9allocatorISB_EEE30__emplace_hint_unique_key_argsIS3_JNS_4pairIKS3_SA_EEEEENS_15__tree_iteratorISB_PNS_11__tree_nodeISB_PvEElEENS_21__tree_const_iteratorISB_SR_lEERKT_DpOT0_,__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_iiiiid = [b6,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b6,b6,b6];
var FUNCTION_TABLE_iiiiii = [b7,__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_m,__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_m,_sparc_code,_armthumb_code,_arm_code,_ia64_code,_powerpc_code,_x86_code,_lzma_stream_decoder_init,_stream_decoder_memconfig
,_lzma2_decode,_lzma_decode,b7];
var FUNCTION_TABLE_iiiiiid = [b8,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b8];
var FUNCTION_TABLE_iiiiiii = [b9,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_iiiiiiii = [b10,__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iiiiiiiii = [b11,__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiiiiiii = [b12,_simple_code,_stream_decode,_block_decode,_delta_decode,_lz_decode,b12,b12];
var FUNCTION_TABLE_iiiiiiiiiii = [b13,__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKc,__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_PKw,b13];
var FUNCTION_TABLE_iiiiiiiiiiii = [b14,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b14];
var FUNCTION_TABLE_iiiiiiiiiiiii = [b15,__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_,__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw,b15];
var FUNCTION_TABLE_v = [b16,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,___cxa_end_catch__wrapper,___cxa_rethrow__wrapper,__ZSt17__throw_bad_allocv,__ZNSt3__2L10init_weeksEv,__ZNSt3__2L11init_monthsEv,__ZNSt3__2L10init_am_pmEv,__ZNSt3__2L11init_wweeksEv,__ZNSt3__2L12init_wmonthsEv,__ZNSt3__2L11init_wam_pmEv,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_
,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_,__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16];
var FUNCTION_TABLE_vi = [b17,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__214basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZN3zim10FileReaderD2Ev,__ZN3zim10FileReaderD0Ev,__ZN3zim6ReaderD2Ev,__ZN3zim6ReaderD0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPN3zim12MemoryBufferILb1EEENS_14default_deleteIS3_EENS_9allocatorIS3_EEE21__on_zero_shared_weakEv,__ZN3zim12MemoryBufferILb1EED2Ev,__ZN3zim12MemoryBufferILb1EED0Ev,__ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceIN3zim9SubBufferENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZN3zim9SubBufferD2Ev,__ZN3zim9SubBufferD0Ev,__ZN3zim6BufferD2Ev,__ZN3zim6BufferD0Ev
,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZN3zim12BufferReaderD2Ev,__ZN3zim12BufferReaderD0Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__219basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPN3zim7ClusterENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPKN3zim6ReaderENS_14default_deleteIS3_EENS_9allocatorIS3_EEE21__on_zero_shared_weakEv,__ZN3zim18ZimFileFormatErrorD2Ev,__ZN3zim18ZimFileFormatErrorD0Ev,__ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEED2Ev,__ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEED0Ev,__ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_emplaceIKN3zim6DirentENS_9allocatorIS3_EEE21__on_zero_shared_weakEv
,__ZN3zim11InvalidSizeD2Ev,__ZN3zim11InvalidSizeD0Ev,__ZN3zim12MemoryBufferILb0EED2Ev,__ZN3zim12MemoryBufferILb0EED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPN3zim8FileImplENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPN3zim10FileReaderENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEED2Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEED0Ev,__ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE16__on_zero_sharedEv,__ZNSt3__220__shared_ptr_pointerIPN3zim12FileCompoundENS_14default_deleteIS2_EENS_9allocatorIS2_EEE21__on_zero_shared_weakEv,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev,__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__28ios_baseD2Ev,__ZNSt3__28ios_baseD0Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__214error_categoryD2Ev,__ZNSt3__219__iostream_categoryD0Ev,__ZNSt3__28ios_base7failureD2Ev,__ZNSt3__28ios_base7failureD0Ev,__ZNSt3__211__stdoutbufIwED0Ev,__ZNSt3__211__stdoutbufIcED0Ev,__ZNSt3__210__stdinbufIwED0Ev,__ZNSt3__210__stdinbufIcED0Ev,__ZNSt3__27collateIcED2Ev,__ZNSt3__27collateIcED0Ev,__ZNSt3__26locale5facet16__on_zero_sharedEv,__ZNSt3__27collateIwED2Ev,__ZNSt3__27collateIwED0Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev
,__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__210moneypunctIcLb0EED2Ev,__ZNSt3__210moneypunctIcLb0EED0Ev,__ZNSt3__210moneypunctIcLb1EED2Ev,__ZNSt3__210moneypunctIcLb1EED0Ev,__ZNSt3__210moneypunctIwLb0EED2Ev,__ZNSt3__210moneypunctIwLb0EED0Ev,__ZNSt3__210moneypunctIwLb1EED2Ev,__ZNSt3__210moneypunctIwLb1EED0Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev,__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev,__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__28messagesIcED2Ev,__ZNSt3__28messagesIcED0Ev,__ZNSt3__28messagesIwED2Ev,__ZNSt3__28messagesIwED0Ev,__ZNSt3__26locale5facetD2Ev,__ZNSt3__216__narrow_to_utf8ILm32EED0Ev,__ZNSt3__217__widen_from_utf8ILm32EED0Ev,__ZNSt3__27codecvtIwc11__mbstate_tED2Ev,__ZNSt3__27codecvtIwc11__mbstate_tED0Ev,__ZNSt3__26locale5__impD2Ev,__ZNSt3__26locale5__impD0Ev,__ZNSt3__25ctypeIcED2Ev,__ZNSt3__25ctypeIcED0Ev
,__ZNSt3__28numpunctIcED2Ev,__ZNSt3__28numpunctIcED0Ev,__ZNSt3__28numpunctIwED2Ev,__ZNSt3__28numpunctIwED0Ev,__ZNSt3__26locale5facetD0Ev,__ZNSt3__25ctypeIwED0Ev,__ZNSt3__27codecvtIcc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__27codecvtIDic11__mbstate_tED0Ev,__ZNSt3__212bad_weak_ptrD2Ev,__ZNSt3__212bad_weak_ptrD0Ev,__ZNSt3__214__shared_countD2Ev,__ZNSt3__214__shared_countD0Ev,__ZNSt3__219__shared_weak_countD0Ev,__ZNSt3__224__generic_error_categoryD0Ev,__ZNSt3__223__system_error_categoryD0Ev,__ZNSt3__212system_errorD2Ev,__ZNSt3__212system_errorD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev
,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv,__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev,__ZN3zim10FileheaderC2Ev,__ZNSt3__26locale2id6__initEv,__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,__ZNSt3__212__do_nothingEPv,__ZNSt3__221__throw_runtime_errorEPKc,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_vii = [b18,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE,__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv
,__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__28messagesIcE8do_closeEl,__ZNKSt3__28messagesIwE8do_closeEl,__ZNKSt3__28numpunctIcE11do_groupingEv,__ZNKSt3__28numpunctIcE11do_truenameEv,__ZNKSt3__28numpunctIcE12do_falsenameEv,__ZNKSt3__28numpunctIwE11do_groupingEv,__ZNKSt3__28numpunctIwE11do_truenameEv,__ZNKSt3__28numpunctIwE12do_falsenameEv,__ZN3zim4FileC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNK3zim4File5beginEv,__ZNK3zim4File3endEv,__ZNK3zim7Article6getUrlEv,__ZNK3zim7Article8getTitleEv,__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__28ios_base5clearEj,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt11logic_errorC2EPKc,__ZN3zim12BufferReaderC2ENSt3__210shared_ptrIKNS_6BufferEEE,__ZNSt3__26vectorIcNS_9allocatorIcEEE8allocateEm,__ZNSt3__26vectorIcNS_9allocatorIcEEE18__construct_at_endEm,_delta_coder_end,_simple_coder_end,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,__ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZN3zim18ZimFileFormatErrorC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE
,__ZN3zim15cluster_index_tC2Ej,__ZNSt13runtime_errorC2EPKc,__ZNSt3__26vectorIN3zim8offset_tENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,_zcfree,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,_stream_decoder_end,_block_decoder_end,_lzma2_decoder_end,_lz_decoder_end,_lzma_decoder_reset,__ZNSt3__26vectorIcNS_9allocatorIcEEE7reserveEm,__ZNSt3__210shared_ptrIKN3zim6DirentEE11make_sharedIJNS_10unique_ptrINS1_6BufferENS_14default_deleteIS7_EEEEEEES4_DpOT_,__ZNSt3__26vectorIcNS_9allocatorIcEEE26__swap_out_circular_bufferERNS_14__split_bufferIcRS2_EE,__ZN3zim6DirentC2ENSt3__210unique_ptrINS_6BufferENS1_14default_deleteIS3_EEEE,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm,__ZN3zim6Dirent8setTitleERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN3zim6Dirent12setParameterERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNK3zim7Article9getDirentEv,__ZN3zim4BlobC2ENSt3__210shared_ptrIKNS_6BufferEEE,__ZN3zim8FileImplC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN3zim12FileCompoundC2ERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN3zim10FileReaderC2ENSt3__210shared_ptrIKNS_12FileCompoundEEE,__ZNSt3__26vectorIcNS_9allocatorIcEEEC2Em,__ZN3zim10Fileheader4readENSt3__210shared_ptrIKNS_6BufferEEE,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_,__ZN3zim8FilePartINS_4unix2FSEEC2ERKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE,__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN3zim4unix2FS8openFileERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,__ZNSt3__220__throw_system_errorEiPKc,__ZNSt3__28ios_base16__call_callbacksENS0_5eventE
,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEEC2Em,__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_
,__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE8allocateEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE6resizeEm,__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lm28EEEE18__construct_at_endEm,__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lm28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE,__ZNSt3__218__libcpp_refstringC2EPKc,_abort_message,b18];
var FUNCTION_TABLE_viii = [b19,__ZNKSt3__214error_category23default_error_conditionEi,__ZNKSt3__219__iostream_category7messageEi,__ZNKSt3__224__generic_error_category7messageEi,__ZNKSt3__223__system_error_category23default_error_conditionEi,__ZNKSt3__223__system_error_category7messageEi,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_,__ZNK3zim4File15getArticleByUrlERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initINS_19istreambuf_iteratorIcS2_EEEENS_9enable_ifIXsr27__is_exactly_input_iteratorIT_EE5valueEvE4typeESA_SA_,__ZNSt3__212system_errorC2ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,___cxa_throw__wrapper,__ZN3zim12MemoryBufferILb1EEC2EPKcNS_7zsize_tE,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc,__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b,__ZN3zim8FileImpl10getClusterENS_15cluster_index_tE,__ZN3zim8offset_tC2Ey,__ZNSt3__210shared_ptrIKN3zim6ReaderEEC2IS3_NS_14default_deleteIS3_EEEEONS_10unique_ptrIT_T0_EENS_9enable_ifIXaaaantsr19is_lvalue_referenceISA_EE5valuentsr8is_arrayIS9_EE5valuesr14is_convertibleINSB_7pointerEPS3_EE5valueENS4_5__natEE4typeE,__ZNSt3__210shared_ptrIN3zim7ClusterEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE,__ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE3putERKS1_RKS5_,__ZNK3zim6Reader10sub_readerENS_8offset_tE,__ZNSt3__210shared_ptrIKN3zim6BufferEEC2INS1_12MemoryBufferILb1EEEEEPT_NS_9enable_ifIXsr14is_convertibleIS9_PS3_EE5valueENS4_5__natEE4typeE,_lzma_decoder_uncompressed,__ZN3zim12MemoryBufferILb0EEC2EPKcNS_7zsize_tE,__ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE3putERKS1_RKS6_,__ZN3zim6Dirent6setUrlEcRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZN3zim8FileImpl9getDirentENS_15article_index_tE,__ZNSt3__210shared_ptrIN3zim10FileReaderEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE,__ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_S6_
,__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE,__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwm,__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__212system_errorC2ENS_10error_codeEPKc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_viiii = [b20,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNK3zim10FileReader4readEPcNS_8offset_tENS_7zsize_tE,__ZNK3zim10FileReader10get_bufferENS_8offset_tENS_7zsize_tE,__ZNK3zim10FileReader10sub_readerENS_8offset_tENS_7zsize_tE,__ZNK3zim6Buffer10sub_bufferENS_8offset_tENS_7zsize_tE,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNK3zim12BufferReader4readEPcNS_8offset_tENS_7zsize_tE,__ZNK3zim12BufferReader10get_bufferENS_8offset_tENS_7zsize_tE,__ZNK3zim12BufferReader10sub_readerENS_8offset_tENS_7zsize_tE,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__27collateIcE12do_transformEPKcS3_,__ZNKSt3__27collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK3zim7Article7getDataEy,__ZN3zim10FileReaderC2ENSt3__210shared_ptrIKNS_12FileCompoundEEENS_8offset_tENS_7zsize_tE,__ZNSt3__210shared_ptrIN3zim9SubBufferEE11make_sharedIJNS0_IKNS1_6BufferEEERNS1_8offset_tERNS1_7zsize_tEEEES3_DpOT_,__ZN3zim9SubBufferC2ENSt3__210shared_ptrIKNS_6BufferEEENS_8offset_tENS_7zsize_tE,__ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE3getERKS1_S5_,__ZN3zim7ClusterC2ENSt3__210shared_ptrIKNS_6ReaderEEENS_15CompressionTypeEb,__ZN3zim5CacheINS_15cluster_index_tENSt3__210shared_ptrINS_7ClusterEEEE4getxERKS1_S5_,__ZN3zim5CacheINS_15article_index_tENSt3__210shared_ptrIKNS_6DirentEEEE4getxERKS1_S6_,__ZN3zim6Dirent10setArticleEtNS_15cluster_index_tENS_12blob_index_tE,__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm,__ZN3zim8FileImpl5findxEcRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj
,b20,b20,b20];
var FUNCTION_TABLE_viiiii = [b21,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK3zim7Cluster7getBlobENS_12blob_index_tENS_8offset_tENS_7zsize_tE,__ZNSt3__26__treeINS_12__value_typeIN3zim5RangeEPNS2_8FilePartINS2_4unix2FSEEEEENS_19__map_value_compareIS3_S9_NS2_10less_rangeELb1EEENS_9allocatorIS9_EEE25__emplace_unique_key_argsIS3_JS3_RS8_EEENS_4pairINS_15__tree_iteratorIS9_PNS_11__tree_nodeIS9_PvEElEEbEERKT_DpOT0_,b21,b21];
var FUNCTION_TABLE_viiiiii = [b22,__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__28messagesIcE6do_getEliiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__28messagesIwE6do_getEliiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK3zim6Reader17sub_clusterReaderENS_8offset_tENS_7zsize_tEPNS_15CompressionTypeEPb,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_viiiiiii = [b23,__Z15_on_assert_failIN3zim8offset_tES1_EvPKcS3_S3_T_T0_S3_i,__Z15_on_assert_failIjjEvPKcS1_S1_T_T0_S1_i,__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,b23];
var FUNCTION_TABLE_viiiiiiii = [b24,__Z15_on_assert_failIyjEvPKcS1_S1_T_T0_S1_i,__Z15_on_assert_failIjyEvPKcS1_S1_T_T0_S1_i,b24];
var FUNCTION_TABLE_viiiiiiiii = [b25,__Z15_on_assert_failIyyEvPKcS1_S1_T_T0_S1_i];
var FUNCTION_TABLE_viiiiiiiiii = [b26,__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b26,b26,b26];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b27,__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b27];

  return { __GLOBAL__I_000101: __GLOBAL__I_000101, __GLOBAL__sub_I_htmlparse_cc: __GLOBAL__sub_I_htmlparse_cc, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, __GLOBAL__sub_I_libzim_resources_cpp: __GLOBAL__sub_I_libzim_resources_cpp, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___divdi3: ___divdi3, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_environ: __get_environ, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memalign: _memalign, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_cond_broadcast: _pthread_cond_broadcast, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiid: dynCall_iiiiid, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiid: dynCall_iiiiiid, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_iiiiiiiiiii: dynCall_iiiiiiiiiii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiiiiiiiiiiii: dynCall_iiiiiiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = asm["__GLOBAL__I_000101"];
var __GLOBAL__sub_I_htmlparse_cc = Module["__GLOBAL__sub_I_htmlparse_cc"] = asm["__GLOBAL__sub_I_htmlparse_cc"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var __GLOBAL__sub_I_libzim_resources_cpp = Module["__GLOBAL__sub_I_libzim_resources_cpp"] = asm["__GLOBAL__sub_I_libzim_resources_cpp"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_environ = Module["__get_environ"] = asm["__get_environ"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memalign = Module["_memalign"] = asm["_memalign"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = asm["_pthread_cond_broadcast"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiid = Module["dynCall_iiiiid"] = asm["dynCall_iiiiid"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = asm["dynCall_iiiiiid"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = asm["dynCall_iiiiiiiiiii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;



































































Module["printErr"] = err;Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}





},false);



